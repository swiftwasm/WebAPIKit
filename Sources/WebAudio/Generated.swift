// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import DOM
import ECMAScript
import JavaScriptKit
import WebAPIBase

public class AnalyserNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AnalyserNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _fftSize = ReadWriteAttribute(jsObject: jsObject, name: Strings.fftSize)
        _frequencyBinCount = ReadonlyAttribute(jsObject: jsObject, name: Strings.frequencyBinCount)
        _minDecibels = ReadWriteAttribute(jsObject: jsObject, name: Strings.minDecibels)
        _maxDecibels = ReadWriteAttribute(jsObject: jsObject, name: Strings.maxDecibels)
        _smoothingTimeConstant = ReadWriteAttribute(jsObject: jsObject, name: Strings.smoothingTimeConstant)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: AnalyserOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @inlinable public func getFloatFrequencyData(array: Float32Array) {
        let this = jsObject
        _ = this[Strings.getFloatFrequencyData].function!(this: this, arguments: [array.jsValue])
    }

    @inlinable public func getByteFrequencyData(array: Uint8Array) {
        let this = jsObject
        _ = this[Strings.getByteFrequencyData].function!(this: this, arguments: [array.jsValue])
    }

    @inlinable public func getFloatTimeDomainData(array: Float32Array) {
        let this = jsObject
        _ = this[Strings.getFloatTimeDomainData].function!(this: this, arguments: [array.jsValue])
    }

    @inlinable public func getByteTimeDomainData(array: Uint8Array) {
        let this = jsObject
        _ = this[Strings.getByteTimeDomainData].function!(this: this, arguments: [array.jsValue])
    }

    @ReadWriteAttribute
    public var fftSize: UInt32

    @ReadonlyAttribute
    public var frequencyBinCount: UInt32

    @ReadWriteAttribute
    public var minDecibels: Double

    @ReadWriteAttribute
    public var maxDecibels: Double

    @ReadWriteAttribute
    public var smoothingTimeConstant: Double
}

public class AnalyserOptions: BridgedDictionary {
    public convenience init(fftSize: UInt32, maxDecibels: Double, minDecibels: Double, smoothingTimeConstant: Double) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.fftSize] = fftSize.jsValue
        object[Strings.maxDecibels] = maxDecibels.jsValue
        object[Strings.minDecibels] = minDecibels.jsValue
        object[Strings.smoothingTimeConstant] = smoothingTimeConstant.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _fftSize = ReadWriteAttribute(jsObject: object, name: Strings.fftSize)
        _maxDecibels = ReadWriteAttribute(jsObject: object, name: Strings.maxDecibels)
        _minDecibels = ReadWriteAttribute(jsObject: object, name: Strings.minDecibels)
        _smoothingTimeConstant = ReadWriteAttribute(jsObject: object, name: Strings.smoothingTimeConstant)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var fftSize: UInt32

    @ReadWriteAttribute
    public var maxDecibels: Double

    @ReadWriteAttribute
    public var minDecibels: Double

    @ReadWriteAttribute
    public var smoothingTimeConstant: Double
}

public class AudioBuffer: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.AudioBuffer].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _sampleRate = ReadonlyAttribute(jsObject: jsObject, name: Strings.sampleRate)
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        _duration = ReadonlyAttribute(jsObject: jsObject, name: Strings.duration)
        _numberOfChannels = ReadonlyAttribute(jsObject: jsObject, name: Strings.numberOfChannels)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(options: AudioBufferOptions) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [options.jsValue]))
    }

    @ReadonlyAttribute
    public var sampleRate: Float

    @ReadonlyAttribute
    public var length: UInt32

    @ReadonlyAttribute
    public var duration: Double

    @ReadonlyAttribute
    public var numberOfChannels: UInt32

    @inlinable public func getChannelData(channel: UInt32) -> Float32Array {
        let this = jsObject
        return this[Strings.getChannelData].function!(this: this, arguments: [channel.jsValue]).fromJSValue()!
    }

    @inlinable public func copyFromChannel(destination: Float32Array, channelNumber: UInt32, bufferOffset: UInt32? = nil) {
        let this = jsObject
        _ = this[Strings.copyFromChannel].function!(this: this, arguments: [destination.jsValue, channelNumber.jsValue, bufferOffset?.jsValue ?? .undefined])
    }

    @inlinable public func copyToChannel(source: Float32Array, channelNumber: UInt32, bufferOffset: UInt32? = nil) {
        let this = jsObject
        _ = this[Strings.copyToChannel].function!(this: this, arguments: [source.jsValue, channelNumber.jsValue, bufferOffset?.jsValue ?? .undefined])
    }
}

public class AudioBufferOptions: BridgedDictionary {
    public convenience init(numberOfChannels: UInt32, length: UInt32, sampleRate: Float) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.numberOfChannels] = numberOfChannels.jsValue
        object[Strings.length] = length.jsValue
        object[Strings.sampleRate] = sampleRate.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _numberOfChannels = ReadWriteAttribute(jsObject: object, name: Strings.numberOfChannels)
        _length = ReadWriteAttribute(jsObject: object, name: Strings.length)
        _sampleRate = ReadWriteAttribute(jsObject: object, name: Strings.sampleRate)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var numberOfChannels: UInt32

    @ReadWriteAttribute
    public var length: UInt32

    @ReadWriteAttribute
    public var sampleRate: Float
}

public class AudioBufferSourceNode: AudioScheduledSourceNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AudioBufferSourceNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _buffer = ReadWriteAttribute(jsObject: jsObject, name: Strings.buffer)
        _playbackRate = ReadonlyAttribute(jsObject: jsObject, name: Strings.playbackRate)
        _detune = ReadonlyAttribute(jsObject: jsObject, name: Strings.detune)
        _loop = ReadWriteAttribute(jsObject: jsObject, name: Strings.loop)
        _loopStart = ReadWriteAttribute(jsObject: jsObject, name: Strings.loopStart)
        _loopEnd = ReadWriteAttribute(jsObject: jsObject, name: Strings.loopEnd)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: AudioBufferSourceOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadWriteAttribute
    public var buffer: AudioBuffer?

    @ReadonlyAttribute
    public var playbackRate: AudioParam

    @ReadonlyAttribute
    public var detune: AudioParam

    @ReadWriteAttribute
    public var loop: Bool

    @ReadWriteAttribute
    public var loopStart: Double

    @ReadWriteAttribute
    public var loopEnd: Double

    // XXX: member 'start' is ignored
}

public class AudioBufferSourceOptions: BridgedDictionary {
    public convenience init(buffer: AudioBuffer?, detune: Float, loop: Bool, loopEnd: Double, loopStart: Double, playbackRate: Float) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.buffer] = buffer.jsValue
        object[Strings.detune] = detune.jsValue
        object[Strings.loop] = loop.jsValue
        object[Strings.loopEnd] = loopEnd.jsValue
        object[Strings.loopStart] = loopStart.jsValue
        object[Strings.playbackRate] = playbackRate.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _buffer = ReadWriteAttribute(jsObject: object, name: Strings.buffer)
        _detune = ReadWriteAttribute(jsObject: object, name: Strings.detune)
        _loop = ReadWriteAttribute(jsObject: object, name: Strings.loop)
        _loopEnd = ReadWriteAttribute(jsObject: object, name: Strings.loopEnd)
        _loopStart = ReadWriteAttribute(jsObject: object, name: Strings.loopStart)
        _playbackRate = ReadWriteAttribute(jsObject: object, name: Strings.playbackRate)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var buffer: AudioBuffer?

    @ReadWriteAttribute
    public var detune: Float

    @ReadWriteAttribute
    public var loop: Bool

    @ReadWriteAttribute
    public var loopEnd: Double

    @ReadWriteAttribute
    public var loopStart: Double

    @ReadWriteAttribute
    public var playbackRate: Float
}

public class AudioContext: BaseAudioContext {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AudioContext].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _baseLatency = ReadonlyAttribute(jsObject: jsObject, name: Strings.baseLatency)
        _outputLatency = ReadonlyAttribute(jsObject: jsObject, name: Strings.outputLatency)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(contextOptions: AudioContextOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [contextOptions?.jsValue ?? .undefined]))
    }

    @ReadonlyAttribute
    public var baseLatency: Double

    @ReadonlyAttribute
    public var outputLatency: Double

    @inlinable public func getOutputTimestamp() -> AudioTimestamp {
        let this = jsObject
        return this[Strings.getOutputTimestamp].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func resume() -> JSPromise {
        let this = jsObject
        return this[Strings.resume].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func resume() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.resume].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func suspend() -> JSPromise {
        let this = jsObject
        return this[Strings.suspend].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func suspend() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.suspend].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func close() -> JSPromise {
        let this = jsObject
        return this[Strings.close].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func close() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.close].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func createMediaElementSource(mediaElement: HTMLMediaElement) -> MediaElementAudioSourceNode {
        let this = jsObject
        return this[Strings.createMediaElementSource].function!(this: this, arguments: [mediaElement.jsValue]).fromJSValue()!
    }

    @inlinable public func createMediaStreamSource(mediaStream: MediaStream) -> MediaStreamAudioSourceNode {
        let this = jsObject
        return this[Strings.createMediaStreamSource].function!(this: this, arguments: [mediaStream.jsValue]).fromJSValue()!
    }

    @inlinable public func createMediaStreamTrackSource(mediaStreamTrack: MediaStreamTrack) -> MediaStreamTrackAudioSourceNode {
        let this = jsObject
        return this[Strings.createMediaStreamTrackSource].function!(this: this, arguments: [mediaStreamTrack.jsValue]).fromJSValue()!
    }

    @inlinable public func createMediaStreamDestination() -> MediaStreamAudioDestinationNode {
        let this = jsObject
        return this[Strings.createMediaStreamDestination].function!(this: this, arguments: []).fromJSValue()!
    }
}

public enum AudioContextLatencyCategory: JSString, JSValueCompatible {
    case balanced = "balanced"
    case interactive = "interactive"
    case playback = "playback"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class AudioContextOptions: BridgedDictionary {
    public convenience init(latencyHint: AudioContextLatencyCategory_or_Double, sampleRate: Float) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.latencyHint] = latencyHint.jsValue
        object[Strings.sampleRate] = sampleRate.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _latencyHint = ReadWriteAttribute(jsObject: object, name: Strings.latencyHint)
        _sampleRate = ReadWriteAttribute(jsObject: object, name: Strings.sampleRate)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var latencyHint: AudioContextLatencyCategory_or_Double

    @ReadWriteAttribute
    public var sampleRate: Float
}

public enum AudioContextState: JSString, JSValueCompatible {
    case suspended = "suspended"
    case running = "running"
    case closed = "closed"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class AudioDestinationNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AudioDestinationNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _maxChannelCount = ReadonlyAttribute(jsObject: jsObject, name: Strings.maxChannelCount)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var maxChannelCount: UInt32
}

public class AudioListener: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.AudioListener].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _positionX = ReadonlyAttribute(jsObject: jsObject, name: Strings.positionX)
        _positionY = ReadonlyAttribute(jsObject: jsObject, name: Strings.positionY)
        _positionZ = ReadonlyAttribute(jsObject: jsObject, name: Strings.positionZ)
        _forwardX = ReadonlyAttribute(jsObject: jsObject, name: Strings.forwardX)
        _forwardY = ReadonlyAttribute(jsObject: jsObject, name: Strings.forwardY)
        _forwardZ = ReadonlyAttribute(jsObject: jsObject, name: Strings.forwardZ)
        _upX = ReadonlyAttribute(jsObject: jsObject, name: Strings.upX)
        _upY = ReadonlyAttribute(jsObject: jsObject, name: Strings.upY)
        _upZ = ReadonlyAttribute(jsObject: jsObject, name: Strings.upZ)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var positionX: AudioParam

    @ReadonlyAttribute
    public var positionY: AudioParam

    @ReadonlyAttribute
    public var positionZ: AudioParam

    @ReadonlyAttribute
    public var forwardX: AudioParam

    @ReadonlyAttribute
    public var forwardY: AudioParam

    @ReadonlyAttribute
    public var forwardZ: AudioParam

    @ReadonlyAttribute
    public var upX: AudioParam

    @ReadonlyAttribute
    public var upY: AudioParam

    @ReadonlyAttribute
    public var upZ: AudioParam

    @inlinable public func setPosition(x: Float, y: Float, z: Float) {
        let this = jsObject
        _ = this[Strings.setPosition].function!(this: this, arguments: [x.jsValue, y.jsValue, z.jsValue])
    }

    @inlinable public func setOrientation(x: Float, y: Float, z: Float, xUp: Float, yUp: Float, zUp: Float) {
        let _arg0 = x.jsValue
        let _arg1 = y.jsValue
        let _arg2 = z.jsValue
        let _arg3 = xUp.jsValue
        let _arg4 = yUp.jsValue
        let _arg5 = zUp.jsValue
        let this = jsObject
        _ = this[Strings.setOrientation].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5])
    }
}

public class AudioNode: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AudioNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _context = ReadonlyAttribute(jsObject: jsObject, name: Strings.context)
        _numberOfInputs = ReadonlyAttribute(jsObject: jsObject, name: Strings.numberOfInputs)
        _numberOfOutputs = ReadonlyAttribute(jsObject: jsObject, name: Strings.numberOfOutputs)
        _channelCount = ReadWriteAttribute(jsObject: jsObject, name: Strings.channelCount)
        _channelCountMode = ReadWriteAttribute(jsObject: jsObject, name: Strings.channelCountMode)
        _channelInterpretation = ReadWriteAttribute(jsObject: jsObject, name: Strings.channelInterpretation)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public func connect(destinationNode: AudioNode, output: UInt32? = nil, input: UInt32? = nil) -> Self {
        let this = jsObject
        return this[Strings.connect].function!(this: this, arguments: [destinationNode.jsValue, output?.jsValue ?? .undefined, input?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func connect(destinationParam: AudioParam, output: UInt32? = nil) {
        let this = jsObject
        _ = this[Strings.connect].function!(this: this, arguments: [destinationParam.jsValue, output?.jsValue ?? .undefined])
    }

    @inlinable public func disconnect() {
        let this = jsObject
        _ = this[Strings.disconnect].function!(this: this, arguments: [])
    }

    @inlinable public func disconnect(output: UInt32) {
        let this = jsObject
        _ = this[Strings.disconnect].function!(this: this, arguments: [output.jsValue])
    }

    @inlinable public func disconnect(destinationNode: AudioNode) {
        let this = jsObject
        _ = this[Strings.disconnect].function!(this: this, arguments: [destinationNode.jsValue])
    }

    @inlinable public func disconnect(destinationNode: AudioNode, output: UInt32) {
        let this = jsObject
        _ = this[Strings.disconnect].function!(this: this, arguments: [destinationNode.jsValue, output.jsValue])
    }

    @inlinable public func disconnect(destinationNode: AudioNode, output: UInt32, input: UInt32) {
        let this = jsObject
        _ = this[Strings.disconnect].function!(this: this, arguments: [destinationNode.jsValue, output.jsValue, input.jsValue])
    }

    @inlinable public func disconnect(destinationParam: AudioParam) {
        let this = jsObject
        _ = this[Strings.disconnect].function!(this: this, arguments: [destinationParam.jsValue])
    }

    @inlinable public func disconnect(destinationParam: AudioParam, output: UInt32) {
        let this = jsObject
        _ = this[Strings.disconnect].function!(this: this, arguments: [destinationParam.jsValue, output.jsValue])
    }

    @ReadonlyAttribute
    public var context: BaseAudioContext

    @ReadonlyAttribute
    public var numberOfInputs: UInt32

    @ReadonlyAttribute
    public var numberOfOutputs: UInt32

    @ReadWriteAttribute
    public var channelCount: UInt32

    @ReadWriteAttribute
    public var channelCountMode: ChannelCountMode

    @ReadWriteAttribute
    public var channelInterpretation: ChannelInterpretation
}

public class AudioNodeOptions: BridgedDictionary {
    public convenience init(channelCount: UInt32, channelCountMode: ChannelCountMode, channelInterpretation: ChannelInterpretation) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.channelCount] = channelCount.jsValue
        object[Strings.channelCountMode] = channelCountMode.jsValue
        object[Strings.channelInterpretation] = channelInterpretation.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _channelCount = ReadWriteAttribute(jsObject: object, name: Strings.channelCount)
        _channelCountMode = ReadWriteAttribute(jsObject: object, name: Strings.channelCountMode)
        _channelInterpretation = ReadWriteAttribute(jsObject: object, name: Strings.channelInterpretation)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var channelCount: UInt32

    @ReadWriteAttribute
    public var channelCountMode: ChannelCountMode

    @ReadWriteAttribute
    public var channelInterpretation: ChannelInterpretation
}

public class AudioParam: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.AudioParam].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _automationRate = ReadWriteAttribute(jsObject: jsObject, name: Strings.automationRate)
        _defaultValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.defaultValue)
        _minValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.minValue)
        _maxValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.maxValue)
        self.jsObject = jsObject
    }

    @ReadWriteAttribute
    public var value: Float

    @ReadWriteAttribute
    public var automationRate: AutomationRate

    @ReadonlyAttribute
    public var defaultValue: Float

    @ReadonlyAttribute
    public var minValue: Float

    @ReadonlyAttribute
    public var maxValue: Float

    @inlinable public func setValueAtTime(value: Float, startTime: Double) -> Self {
        let this = jsObject
        return this[Strings.setValueAtTime].function!(this: this, arguments: [value.jsValue, startTime.jsValue]).fromJSValue()!
    }

    @inlinable public func linearRampToValueAtTime(value: Float, endTime: Double) -> Self {
        let this = jsObject
        return this[Strings.linearRampToValueAtTime].function!(this: this, arguments: [value.jsValue, endTime.jsValue]).fromJSValue()!
    }

    @inlinable public func exponentialRampToValueAtTime(value: Float, endTime: Double) -> Self {
        let this = jsObject
        return this[Strings.exponentialRampToValueAtTime].function!(this: this, arguments: [value.jsValue, endTime.jsValue]).fromJSValue()!
    }

    @inlinable public func setTargetAtTime(target: Float, startTime: Double, timeConstant: Float) -> Self {
        let this = jsObject
        return this[Strings.setTargetAtTime].function!(this: this, arguments: [target.jsValue, startTime.jsValue, timeConstant.jsValue]).fromJSValue()!
    }

    @inlinable public func setValueCurveAtTime(values: [Float], startTime: Double, duration: Double) -> Self {
        let this = jsObject
        return this[Strings.setValueCurveAtTime].function!(this: this, arguments: [values.jsValue, startTime.jsValue, duration.jsValue]).fromJSValue()!
    }

    @inlinable public func cancelScheduledValues(cancelTime: Double) -> Self {
        let this = jsObject
        return this[Strings.cancelScheduledValues].function!(this: this, arguments: [cancelTime.jsValue]).fromJSValue()!
    }

    @inlinable public func cancelAndHoldAtTime(cancelTime: Double) -> Self {
        let this = jsObject
        return this[Strings.cancelAndHoldAtTime].function!(this: this, arguments: [cancelTime.jsValue]).fromJSValue()!
    }
}

public class AudioParamDescriptor: BridgedDictionary {
    public convenience init(name: String, defaultValue: Float, minValue: Float, maxValue: Float, automationRate: AutomationRate) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.name] = name.jsValue
        object[Strings.defaultValue] = defaultValue.jsValue
        object[Strings.minValue] = minValue.jsValue
        object[Strings.maxValue] = maxValue.jsValue
        object[Strings.automationRate] = automationRate.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _name = ReadWriteAttribute(jsObject: object, name: Strings.name)
        _defaultValue = ReadWriteAttribute(jsObject: object, name: Strings.defaultValue)
        _minValue = ReadWriteAttribute(jsObject: object, name: Strings.minValue)
        _maxValue = ReadWriteAttribute(jsObject: object, name: Strings.maxValue)
        _automationRate = ReadWriteAttribute(jsObject: object, name: Strings.automationRate)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var defaultValue: Float

    @ReadWriteAttribute
    public var minValue: Float

    @ReadWriteAttribute
    public var maxValue: Float

    @ReadWriteAttribute
    public var automationRate: AutomationRate
}

public class AudioParamMap: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.AudioParamMap].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    // XXX: make me Map-like!
}

public class AudioProcessingEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AudioProcessingEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _playbackTime = ReadonlyAttribute(jsObject: jsObject, name: Strings.playbackTime)
        _inputBuffer = ReadonlyAttribute(jsObject: jsObject, name: Strings.inputBuffer)
        _outputBuffer = ReadonlyAttribute(jsObject: jsObject, name: Strings.outputBuffer)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: AudioProcessingEventInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [type.jsValue, eventInitDict.jsValue]))
    }

    @ReadonlyAttribute
    public var playbackTime: Double

    @ReadonlyAttribute
    public var inputBuffer: AudioBuffer

    @ReadonlyAttribute
    public var outputBuffer: AudioBuffer
}

public class AudioProcessingEventInit: BridgedDictionary {
    public convenience init(playbackTime: Double, inputBuffer: AudioBuffer, outputBuffer: AudioBuffer) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.playbackTime] = playbackTime.jsValue
        object[Strings.inputBuffer] = inputBuffer.jsValue
        object[Strings.outputBuffer] = outputBuffer.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _playbackTime = ReadWriteAttribute(jsObject: object, name: Strings.playbackTime)
        _inputBuffer = ReadWriteAttribute(jsObject: object, name: Strings.inputBuffer)
        _outputBuffer = ReadWriteAttribute(jsObject: object, name: Strings.outputBuffer)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var playbackTime: Double

    @ReadWriteAttribute
    public var inputBuffer: AudioBuffer

    @ReadWriteAttribute
    public var outputBuffer: AudioBuffer
}

public class AudioScheduledSourceNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AudioScheduledSourceNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _onended = ReadWriteAttribute(jsObject: jsObject, name: Strings.onended)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadWriteAttribute
    public var onended: EventHandler

    @inlinable public func start(when: Double? = nil) {
        let this = jsObject
        _ = this[Strings.start].function!(this: this, arguments: [when?.jsValue ?? .undefined])
    }

    @inlinable public func stop(when: Double? = nil) {
        let this = jsObject
        _ = this[Strings.stop].function!(this: this, arguments: [when?.jsValue ?? .undefined])
    }
}

public class AudioTimestamp: BridgedDictionary {
    public convenience init(contextTime: Double, performanceTime: DOMHighResTimeStamp) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.contextTime] = contextTime.jsValue
        object[Strings.performanceTime] = performanceTime.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _contextTime = ReadWriteAttribute(jsObject: object, name: Strings.contextTime)
        _performanceTime = ReadWriteAttribute(jsObject: object, name: Strings.performanceTime)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var contextTime: Double

    @ReadWriteAttribute
    public var performanceTime: DOMHighResTimeStamp
}

public class AudioWorklet: Worklet {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AudioWorklet].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }
}

public class AudioWorkletNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AudioWorkletNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _parameters = ReadonlyAttribute(jsObject: jsObject, name: Strings.parameters)
        _port = ReadonlyAttribute(jsObject: jsObject, name: Strings.port)
        _onprocessorerror = ReadWriteAttribute(jsObject: jsObject, name: Strings.onprocessorerror)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, name: String, options: AudioWorkletNodeOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, name.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadonlyAttribute
    public var parameters: AudioParamMap

    @ReadonlyAttribute
    public var port: MessagePort

    @ReadWriteAttribute
    public var onprocessorerror: EventHandler
}

public class AudioWorkletNodeOptions: BridgedDictionary {
    public convenience init(numberOfInputs: UInt32, numberOfOutputs: UInt32, outputChannelCount: [UInt32], parameterData: [String: Double], processorOptions: JSObject) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.numberOfInputs] = numberOfInputs.jsValue
        object[Strings.numberOfOutputs] = numberOfOutputs.jsValue
        object[Strings.outputChannelCount] = outputChannelCount.jsValue
        object[Strings.parameterData] = parameterData.jsValue
        object[Strings.processorOptions] = processorOptions.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _numberOfInputs = ReadWriteAttribute(jsObject: object, name: Strings.numberOfInputs)
        _numberOfOutputs = ReadWriteAttribute(jsObject: object, name: Strings.numberOfOutputs)
        _outputChannelCount = ReadWriteAttribute(jsObject: object, name: Strings.outputChannelCount)
        _parameterData = ReadWriteAttribute(jsObject: object, name: Strings.parameterData)
        _processorOptions = ReadWriteAttribute(jsObject: object, name: Strings.processorOptions)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var numberOfInputs: UInt32

    @ReadWriteAttribute
    public var numberOfOutputs: UInt32

    @ReadWriteAttribute
    public var outputChannelCount: [UInt32]

    @ReadWriteAttribute
    public var parameterData: [String: Double]

    @ReadWriteAttribute
    public var processorOptions: JSObject
}

public enum AutomationRate: JSString, JSValueCompatible {
    case aRate = "a-rate"
    case kRate = "k-rate"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class BaseAudioContext: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.BaseAudioContext].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _destination = ReadonlyAttribute(jsObject: jsObject, name: Strings.destination)
        _sampleRate = ReadonlyAttribute(jsObject: jsObject, name: Strings.sampleRate)
        _currentTime = ReadonlyAttribute(jsObject: jsObject, name: Strings.currentTime)
        _listener = ReadonlyAttribute(jsObject: jsObject, name: Strings.listener)
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _audioWorklet = ReadonlyAttribute(jsObject: jsObject, name: Strings.audioWorklet)
        _onstatechange = ReadWriteAttribute(jsObject: jsObject, name: Strings.onstatechange)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var destination: AudioDestinationNode

    @ReadonlyAttribute
    public var sampleRate: Float

    @ReadonlyAttribute
    public var currentTime: Double

    @ReadonlyAttribute
    public var listener: AudioListener

    @ReadonlyAttribute
    public var state: AudioContextState

    @ReadonlyAttribute
    public var audioWorklet: AudioWorklet

    @ReadWriteAttribute
    public var onstatechange: EventHandler

    @inlinable public func createAnalyser() -> AnalyserNode {
        let this = jsObject
        return this[Strings.createAnalyser].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func createBiquadFilter() -> BiquadFilterNode {
        let this = jsObject
        return this[Strings.createBiquadFilter].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func createBuffer(numberOfChannels: UInt32, length: UInt32, sampleRate: Float) -> AudioBuffer {
        let this = jsObject
        return this[Strings.createBuffer].function!(this: this, arguments: [numberOfChannels.jsValue, length.jsValue, sampleRate.jsValue]).fromJSValue()!
    }

    @inlinable public func createBufferSource() -> AudioBufferSourceNode {
        let this = jsObject
        return this[Strings.createBufferSource].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func createChannelMerger(numberOfInputs: UInt32? = nil) -> ChannelMergerNode {
        let this = jsObject
        return this[Strings.createChannelMerger].function!(this: this, arguments: [numberOfInputs?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func createChannelSplitter(numberOfOutputs: UInt32? = nil) -> ChannelSplitterNode {
        let this = jsObject
        return this[Strings.createChannelSplitter].function!(this: this, arguments: [numberOfOutputs?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func createConstantSource() -> ConstantSourceNode {
        let this = jsObject
        return this[Strings.createConstantSource].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func createConvolver() -> ConvolverNode {
        let this = jsObject
        return this[Strings.createConvolver].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func createDelay(maxDelayTime: Double? = nil) -> DelayNode {
        let this = jsObject
        return this[Strings.createDelay].function!(this: this, arguments: [maxDelayTime?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func createDynamicsCompressor() -> DynamicsCompressorNode {
        let this = jsObject
        return this[Strings.createDynamicsCompressor].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func createGain() -> GainNode {
        let this = jsObject
        return this[Strings.createGain].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func createIIRFilter(feedforward: [Double], feedback: [Double]) -> IIRFilterNode {
        let this = jsObject
        return this[Strings.createIIRFilter].function!(this: this, arguments: [feedforward.jsValue, feedback.jsValue]).fromJSValue()!
    }

    @inlinable public func createOscillator() -> OscillatorNode {
        let this = jsObject
        return this[Strings.createOscillator].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func createPanner() -> PannerNode {
        let this = jsObject
        return this[Strings.createPanner].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func createPeriodicWave(real: [Float], imag: [Float], constraints: PeriodicWaveConstraints? = nil) -> PeriodicWave {
        let this = jsObject
        return this[Strings.createPeriodicWave].function!(this: this, arguments: [real.jsValue, imag.jsValue, constraints?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func createScriptProcessor(bufferSize: UInt32? = nil, numberOfInputChannels: UInt32? = nil, numberOfOutputChannels: UInt32? = nil) -> ScriptProcessorNode {
        let this = jsObject
        return this[Strings.createScriptProcessor].function!(this: this, arguments: [bufferSize?.jsValue ?? .undefined, numberOfInputChannels?.jsValue ?? .undefined, numberOfOutputChannels?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func createStereoPanner() -> StereoPannerNode {
        let this = jsObject
        return this[Strings.createStereoPanner].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func createWaveShaper() -> WaveShaperNode {
        let this = jsObject
        return this[Strings.createWaveShaper].function!(this: this, arguments: []).fromJSValue()!
    }

    // XXX: member 'decodeAudioData' is ignored

    // XXX: member 'decodeAudioData' is ignored
}

public class BiquadFilterNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.BiquadFilterNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _frequency = ReadonlyAttribute(jsObject: jsObject, name: Strings.frequency)
        _detune = ReadonlyAttribute(jsObject: jsObject, name: Strings.detune)
        _Q = ReadonlyAttribute(jsObject: jsObject, name: Strings.Q)
        _gain = ReadonlyAttribute(jsObject: jsObject, name: Strings.gain)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: BiquadFilterOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadWriteAttribute
    public var type: BiquadFilterType

    @ReadonlyAttribute
    public var frequency: AudioParam

    @ReadonlyAttribute
    public var detune: AudioParam

    @ReadonlyAttribute
    public var Q: AudioParam

    @ReadonlyAttribute
    public var gain: AudioParam

    @inlinable public func getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array) {
        let this = jsObject
        _ = this[Strings.getFrequencyResponse].function!(this: this, arguments: [frequencyHz.jsValue, magResponse.jsValue, phaseResponse.jsValue])
    }
}

public class BiquadFilterOptions: BridgedDictionary {
    public convenience init(type: BiquadFilterType, Q: Float, detune: Float, frequency: Float, gain: Float) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.type] = type.jsValue
        object[Strings.Q] = Q.jsValue
        object[Strings.detune] = detune.jsValue
        object[Strings.frequency] = frequency.jsValue
        object[Strings.gain] = gain.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        _Q = ReadWriteAttribute(jsObject: object, name: Strings.Q)
        _detune = ReadWriteAttribute(jsObject: object, name: Strings.detune)
        _frequency = ReadWriteAttribute(jsObject: object, name: Strings.frequency)
        _gain = ReadWriteAttribute(jsObject: object, name: Strings.gain)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var type: BiquadFilterType

    @ReadWriteAttribute
    public var Q: Float

    @ReadWriteAttribute
    public var detune: Float

    @ReadWriteAttribute
    public var frequency: Float

    @ReadWriteAttribute
    public var gain: Float
}

public enum BiquadFilterType: JSString, JSValueCompatible {
    case lowpass = "lowpass"
    case highpass = "highpass"
    case bandpass = "bandpass"
    case lowshelf = "lowshelf"
    case highshelf = "highshelf"
    case peaking = "peaking"
    case notch = "notch"
    case allpass = "allpass"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum ChannelCountMode: JSString, JSValueCompatible {
    case max = "max"
    case clampedMax = "clamped-max"
    case explicit = "explicit"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum ChannelInterpretation: JSString, JSValueCompatible {
    case speakers = "speakers"
    case discrete = "discrete"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class ChannelMergerNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ChannelMergerNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: ChannelMergerOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }
}

public class ChannelMergerOptions: BridgedDictionary {
    public convenience init(numberOfInputs: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.numberOfInputs] = numberOfInputs.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _numberOfInputs = ReadWriteAttribute(jsObject: object, name: Strings.numberOfInputs)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var numberOfInputs: UInt32
}

public class ChannelSplitterNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ChannelSplitterNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: ChannelSplitterOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }
}

public class ChannelSplitterOptions: BridgedDictionary {
    public convenience init(numberOfOutputs: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.numberOfOutputs] = numberOfOutputs.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _numberOfOutputs = ReadWriteAttribute(jsObject: object, name: Strings.numberOfOutputs)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var numberOfOutputs: UInt32
}

public class ConstantSourceNode: AudioScheduledSourceNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ConstantSourceNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _offset = ReadonlyAttribute(jsObject: jsObject, name: Strings.offset)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: ConstantSourceOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadonlyAttribute
    public var offset: AudioParam
}

public class ConstantSourceOptions: BridgedDictionary {
    public convenience init(offset: Float) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.offset] = offset.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _offset = ReadWriteAttribute(jsObject: object, name: Strings.offset)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var offset: Float
}

public class ConvolverNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ConvolverNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _buffer = ReadWriteAttribute(jsObject: jsObject, name: Strings.buffer)
        _normalize = ReadWriteAttribute(jsObject: jsObject, name: Strings.normalize)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: ConvolverOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadWriteAttribute
    public var buffer: AudioBuffer?

    @ReadWriteAttribute
    public var normalize: Bool
}

public class ConvolverOptions: BridgedDictionary {
    public convenience init(buffer: AudioBuffer?, disableNormalization: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.buffer] = buffer.jsValue
        object[Strings.disableNormalization] = disableNormalization.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _buffer = ReadWriteAttribute(jsObject: object, name: Strings.buffer)
        _disableNormalization = ReadWriteAttribute(jsObject: object, name: Strings.disableNormalization)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var buffer: AudioBuffer?

    @ReadWriteAttribute
    public var disableNormalization: Bool
}

public class DelayNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.DelayNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _delayTime = ReadonlyAttribute(jsObject: jsObject, name: Strings.delayTime)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: DelayOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadonlyAttribute
    public var delayTime: AudioParam
}

public class DelayOptions: BridgedDictionary {
    public convenience init(maxDelayTime: Double, delayTime: Double) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.maxDelayTime] = maxDelayTime.jsValue
        object[Strings.delayTime] = delayTime.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _maxDelayTime = ReadWriteAttribute(jsObject: object, name: Strings.maxDelayTime)
        _delayTime = ReadWriteAttribute(jsObject: object, name: Strings.delayTime)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var maxDelayTime: Double

    @ReadWriteAttribute
    public var delayTime: Double
}

public enum DistanceModelType: JSString, JSValueCompatible {
    case linear = "linear"
    case inverse = "inverse"
    case exponential = "exponential"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class DynamicsCompressorNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.DynamicsCompressorNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _threshold = ReadonlyAttribute(jsObject: jsObject, name: Strings.threshold)
        _knee = ReadonlyAttribute(jsObject: jsObject, name: Strings.knee)
        _ratio = ReadonlyAttribute(jsObject: jsObject, name: Strings.ratio)
        _reduction = ReadonlyAttribute(jsObject: jsObject, name: Strings.reduction)
        _attack = ReadonlyAttribute(jsObject: jsObject, name: Strings.attack)
        _release = ReadonlyAttribute(jsObject: jsObject, name: Strings.release)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: DynamicsCompressorOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadonlyAttribute
    public var threshold: AudioParam

    @ReadonlyAttribute
    public var knee: AudioParam

    @ReadonlyAttribute
    public var ratio: AudioParam

    @ReadonlyAttribute
    public var reduction: Float

    @ReadonlyAttribute
    public var attack: AudioParam

    @ReadonlyAttribute
    public var release: AudioParam
}

public class DynamicsCompressorOptions: BridgedDictionary {
    public convenience init(attack: Float, knee: Float, ratio: Float, release: Float, threshold: Float) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.attack] = attack.jsValue
        object[Strings.knee] = knee.jsValue
        object[Strings.ratio] = ratio.jsValue
        object[Strings.release] = release.jsValue
        object[Strings.threshold] = threshold.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _attack = ReadWriteAttribute(jsObject: object, name: Strings.attack)
        _knee = ReadWriteAttribute(jsObject: object, name: Strings.knee)
        _ratio = ReadWriteAttribute(jsObject: object, name: Strings.ratio)
        _release = ReadWriteAttribute(jsObject: object, name: Strings.release)
        _threshold = ReadWriteAttribute(jsObject: object, name: Strings.threshold)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var attack: Float

    @ReadWriteAttribute
    public var knee: Float

    @ReadWriteAttribute
    public var ratio: Float

    @ReadWriteAttribute
    public var release: Float

    @ReadWriteAttribute
    public var threshold: Float
}

public class GainNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.GainNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _gain = ReadonlyAttribute(jsObject: jsObject, name: Strings.gain)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: GainOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadonlyAttribute
    public var gain: AudioParam
}

public class GainOptions: BridgedDictionary {
    public convenience init(gain: Float) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.gain] = gain.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _gain = ReadWriteAttribute(jsObject: object, name: Strings.gain)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var gain: Float
}

public class IIRFilterNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.IIRFilterNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: IIRFilterOptions) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options.jsValue]))
    }

    @inlinable public func getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array) {
        let this = jsObject
        _ = this[Strings.getFrequencyResponse].function!(this: this, arguments: [frequencyHz.jsValue, magResponse.jsValue, phaseResponse.jsValue])
    }
}

public class IIRFilterOptions: BridgedDictionary {
    public convenience init(feedforward: [Double], feedback: [Double]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.feedforward] = feedforward.jsValue
        object[Strings.feedback] = feedback.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _feedforward = ReadWriteAttribute(jsObject: object, name: Strings.feedforward)
        _feedback = ReadWriteAttribute(jsObject: object, name: Strings.feedback)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var feedforward: [Double]

    @ReadWriteAttribute
    public var feedback: [Double]
}

public class MediaElementAudioSourceNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaElementAudioSourceNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _mediaElement = ReadonlyAttribute(jsObject: jsObject, name: Strings.mediaElement)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: AudioContext, options: MediaElementAudioSourceOptions) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options.jsValue]))
    }

    @ReadonlyAttribute
    public var mediaElement: HTMLMediaElement
}

public class MediaElementAudioSourceOptions: BridgedDictionary {
    public convenience init(mediaElement: HTMLMediaElement) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.mediaElement] = mediaElement.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _mediaElement = ReadWriteAttribute(jsObject: object, name: Strings.mediaElement)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var mediaElement: HTMLMediaElement
}

public class MediaStreamAudioDestinationNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaStreamAudioDestinationNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _stream = ReadonlyAttribute(jsObject: jsObject, name: Strings.stream)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: AudioContext, options: AudioNodeOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadonlyAttribute
    public var stream: MediaStream
}

public class MediaStreamAudioSourceNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaStreamAudioSourceNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _mediaStream = ReadonlyAttribute(jsObject: jsObject, name: Strings.mediaStream)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: AudioContext, options: MediaStreamAudioSourceOptions) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options.jsValue]))
    }

    @ReadonlyAttribute
    public var mediaStream: MediaStream
}

public class MediaStreamAudioSourceOptions: BridgedDictionary {
    public convenience init(mediaStream: MediaStream) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.mediaStream] = mediaStream.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _mediaStream = ReadWriteAttribute(jsObject: object, name: Strings.mediaStream)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var mediaStream: MediaStream
}

public class MediaStreamTrackAudioSourceNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaStreamTrackAudioSourceNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: AudioContext, options: MediaStreamTrackAudioSourceOptions) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options.jsValue]))
    }
}

public class MediaStreamTrackAudioSourceOptions: BridgedDictionary {
    public convenience init(mediaStreamTrack: MediaStreamTrack) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.mediaStreamTrack] = mediaStreamTrack.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _mediaStreamTrack = ReadWriteAttribute(jsObject: object, name: Strings.mediaStreamTrack)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var mediaStreamTrack: MediaStreamTrack
}

public class OfflineAudioCompletionEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.OfflineAudioCompletionEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _renderedBuffer = ReadonlyAttribute(jsObject: jsObject, name: Strings.renderedBuffer)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: OfflineAudioCompletionEventInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [type.jsValue, eventInitDict.jsValue]))
    }

    @ReadonlyAttribute
    public var renderedBuffer: AudioBuffer
}

public class OfflineAudioCompletionEventInit: BridgedDictionary {
    public convenience init(renderedBuffer: AudioBuffer) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.renderedBuffer] = renderedBuffer.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _renderedBuffer = ReadWriteAttribute(jsObject: object, name: Strings.renderedBuffer)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var renderedBuffer: AudioBuffer
}

public class OfflineAudioContext: BaseAudioContext {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.OfflineAudioContext].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        _oncomplete = ReadWriteAttribute(jsObject: jsObject, name: Strings.oncomplete)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(contextOptions: OfflineAudioContextOptions) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [contextOptions.jsValue]))
    }

    @inlinable public convenience init(numberOfChannels: UInt32, length: UInt32, sampleRate: Float) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [numberOfChannels.jsValue, length.jsValue, sampleRate.jsValue]))
    }

    @inlinable public func startRendering() -> JSPromise {
        let this = jsObject
        return this[Strings.startRendering].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func startRendering() async throws -> AudioBuffer {
        let this = jsObject
        let _promise: JSPromise = this[Strings.startRendering].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func resume() -> JSPromise {
        let this = jsObject
        return this[Strings.resume].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func resume() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.resume].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func suspend(suspendTime: Double) -> JSPromise {
        let this = jsObject
        return this[Strings.suspend].function!(this: this, arguments: [suspendTime.jsValue]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func suspend(suspendTime: Double) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.suspend].function!(this: this, arguments: [suspendTime.jsValue]).fromJSValue()!
        _ = try await _promise.value
    }

    @ReadonlyAttribute
    public var length: UInt32

    @ReadWriteAttribute
    public var oncomplete: EventHandler
}

public class OfflineAudioContextOptions: BridgedDictionary {
    public convenience init(numberOfChannels: UInt32, length: UInt32, sampleRate: Float) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.numberOfChannels] = numberOfChannels.jsValue
        object[Strings.length] = length.jsValue
        object[Strings.sampleRate] = sampleRate.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _numberOfChannels = ReadWriteAttribute(jsObject: object, name: Strings.numberOfChannels)
        _length = ReadWriteAttribute(jsObject: object, name: Strings.length)
        _sampleRate = ReadWriteAttribute(jsObject: object, name: Strings.sampleRate)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var numberOfChannels: UInt32

    @ReadWriteAttribute
    public var length: UInt32

    @ReadWriteAttribute
    public var sampleRate: Float
}

public class OscillatorNode: AudioScheduledSourceNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.OscillatorNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _frequency = ReadonlyAttribute(jsObject: jsObject, name: Strings.frequency)
        _detune = ReadonlyAttribute(jsObject: jsObject, name: Strings.detune)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: OscillatorOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadWriteAttribute
    public var type: OscillatorType

    @ReadonlyAttribute
    public var frequency: AudioParam

    @ReadonlyAttribute
    public var detune: AudioParam

    @inlinable public func setPeriodicWave(periodicWave: PeriodicWave) {
        let this = jsObject
        _ = this[Strings.setPeriodicWave].function!(this: this, arguments: [periodicWave.jsValue])
    }
}

public class OscillatorOptions: BridgedDictionary {
    public convenience init(type: OscillatorType, frequency: Float, detune: Float, periodicWave: PeriodicWave) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.type] = type.jsValue
        object[Strings.frequency] = frequency.jsValue
        object[Strings.detune] = detune.jsValue
        object[Strings.periodicWave] = periodicWave.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        _frequency = ReadWriteAttribute(jsObject: object, name: Strings.frequency)
        _detune = ReadWriteAttribute(jsObject: object, name: Strings.detune)
        _periodicWave = ReadWriteAttribute(jsObject: object, name: Strings.periodicWave)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var type: OscillatorType

    @ReadWriteAttribute
    public var frequency: Float

    @ReadWriteAttribute
    public var detune: Float

    @ReadWriteAttribute
    public var periodicWave: PeriodicWave
}

public enum OscillatorType: JSString, JSValueCompatible {
    case sine = "sine"
    case square = "square"
    case sawtooth = "sawtooth"
    case triangle = "triangle"
    case custom = "custom"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum OverSampleType: JSString, JSValueCompatible {
    case none = "none"
    case _2x = "2x"
    case _4x = "4x"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class PannerNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.PannerNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _panningModel = ReadWriteAttribute(jsObject: jsObject, name: Strings.panningModel)
        _positionX = ReadonlyAttribute(jsObject: jsObject, name: Strings.positionX)
        _positionY = ReadonlyAttribute(jsObject: jsObject, name: Strings.positionY)
        _positionZ = ReadonlyAttribute(jsObject: jsObject, name: Strings.positionZ)
        _orientationX = ReadonlyAttribute(jsObject: jsObject, name: Strings.orientationX)
        _orientationY = ReadonlyAttribute(jsObject: jsObject, name: Strings.orientationY)
        _orientationZ = ReadonlyAttribute(jsObject: jsObject, name: Strings.orientationZ)
        _distanceModel = ReadWriteAttribute(jsObject: jsObject, name: Strings.distanceModel)
        _refDistance = ReadWriteAttribute(jsObject: jsObject, name: Strings.refDistance)
        _maxDistance = ReadWriteAttribute(jsObject: jsObject, name: Strings.maxDistance)
        _rolloffFactor = ReadWriteAttribute(jsObject: jsObject, name: Strings.rolloffFactor)
        _coneInnerAngle = ReadWriteAttribute(jsObject: jsObject, name: Strings.coneInnerAngle)
        _coneOuterAngle = ReadWriteAttribute(jsObject: jsObject, name: Strings.coneOuterAngle)
        _coneOuterGain = ReadWriteAttribute(jsObject: jsObject, name: Strings.coneOuterGain)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: PannerOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadWriteAttribute
    public var panningModel: PanningModelType

    @ReadonlyAttribute
    public var positionX: AudioParam

    @ReadonlyAttribute
    public var positionY: AudioParam

    @ReadonlyAttribute
    public var positionZ: AudioParam

    @ReadonlyAttribute
    public var orientationX: AudioParam

    @ReadonlyAttribute
    public var orientationY: AudioParam

    @ReadonlyAttribute
    public var orientationZ: AudioParam

    @ReadWriteAttribute
    public var distanceModel: DistanceModelType

    @ReadWriteAttribute
    public var refDistance: Double

    @ReadWriteAttribute
    public var maxDistance: Double

    @ReadWriteAttribute
    public var rolloffFactor: Double

    @ReadWriteAttribute
    public var coneInnerAngle: Double

    @ReadWriteAttribute
    public var coneOuterAngle: Double

    @ReadWriteAttribute
    public var coneOuterGain: Double

    @inlinable public func setPosition(x: Float, y: Float, z: Float) {
        let this = jsObject
        _ = this[Strings.setPosition].function!(this: this, arguments: [x.jsValue, y.jsValue, z.jsValue])
    }

    @inlinable public func setOrientation(x: Float, y: Float, z: Float) {
        let this = jsObject
        _ = this[Strings.setOrientation].function!(this: this, arguments: [x.jsValue, y.jsValue, z.jsValue])
    }
}

public class PannerOptions: BridgedDictionary {
    public convenience init(panningModel: PanningModelType, distanceModel: DistanceModelType, positionX: Float, positionY: Float, positionZ: Float, orientationX: Float, orientationY: Float, orientationZ: Float, refDistance: Double, maxDistance: Double, rolloffFactor: Double, coneInnerAngle: Double, coneOuterAngle: Double, coneOuterGain: Double) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.panningModel] = panningModel.jsValue
        object[Strings.distanceModel] = distanceModel.jsValue
        object[Strings.positionX] = positionX.jsValue
        object[Strings.positionY] = positionY.jsValue
        object[Strings.positionZ] = positionZ.jsValue
        object[Strings.orientationX] = orientationX.jsValue
        object[Strings.orientationY] = orientationY.jsValue
        object[Strings.orientationZ] = orientationZ.jsValue
        object[Strings.refDistance] = refDistance.jsValue
        object[Strings.maxDistance] = maxDistance.jsValue
        object[Strings.rolloffFactor] = rolloffFactor.jsValue
        object[Strings.coneInnerAngle] = coneInnerAngle.jsValue
        object[Strings.coneOuterAngle] = coneOuterAngle.jsValue
        object[Strings.coneOuterGain] = coneOuterGain.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _panningModel = ReadWriteAttribute(jsObject: object, name: Strings.panningModel)
        _distanceModel = ReadWriteAttribute(jsObject: object, name: Strings.distanceModel)
        _positionX = ReadWriteAttribute(jsObject: object, name: Strings.positionX)
        _positionY = ReadWriteAttribute(jsObject: object, name: Strings.positionY)
        _positionZ = ReadWriteAttribute(jsObject: object, name: Strings.positionZ)
        _orientationX = ReadWriteAttribute(jsObject: object, name: Strings.orientationX)
        _orientationY = ReadWriteAttribute(jsObject: object, name: Strings.orientationY)
        _orientationZ = ReadWriteAttribute(jsObject: object, name: Strings.orientationZ)
        _refDistance = ReadWriteAttribute(jsObject: object, name: Strings.refDistance)
        _maxDistance = ReadWriteAttribute(jsObject: object, name: Strings.maxDistance)
        _rolloffFactor = ReadWriteAttribute(jsObject: object, name: Strings.rolloffFactor)
        _coneInnerAngle = ReadWriteAttribute(jsObject: object, name: Strings.coneInnerAngle)
        _coneOuterAngle = ReadWriteAttribute(jsObject: object, name: Strings.coneOuterAngle)
        _coneOuterGain = ReadWriteAttribute(jsObject: object, name: Strings.coneOuterGain)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var panningModel: PanningModelType

    @ReadWriteAttribute
    public var distanceModel: DistanceModelType

    @ReadWriteAttribute
    public var positionX: Float

    @ReadWriteAttribute
    public var positionY: Float

    @ReadWriteAttribute
    public var positionZ: Float

    @ReadWriteAttribute
    public var orientationX: Float

    @ReadWriteAttribute
    public var orientationY: Float

    @ReadWriteAttribute
    public var orientationZ: Float

    @ReadWriteAttribute
    public var refDistance: Double

    @ReadWriteAttribute
    public var maxDistance: Double

    @ReadWriteAttribute
    public var rolloffFactor: Double

    @ReadWriteAttribute
    public var coneInnerAngle: Double

    @ReadWriteAttribute
    public var coneOuterAngle: Double

    @ReadWriteAttribute
    public var coneOuterGain: Double
}

public enum PanningModelType: JSString, JSValueCompatible {
    case equalpower = "equalpower"
    case hRTF = "HRTF"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class PeriodicWave: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.PeriodicWave].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public convenience init(context: BaseAudioContext, options: PeriodicWaveOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }
}

public class PeriodicWaveConstraints: BridgedDictionary {
    public convenience init(disableNormalization: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.disableNormalization] = disableNormalization.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _disableNormalization = ReadWriteAttribute(jsObject: object, name: Strings.disableNormalization)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var disableNormalization: Bool
}

public class PeriodicWaveOptions: BridgedDictionary {
    public convenience init(real: [Float], imag: [Float]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.real] = real.jsValue
        object[Strings.imag] = imag.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _real = ReadWriteAttribute(jsObject: object, name: Strings.real)
        _imag = ReadWriteAttribute(jsObject: object, name: Strings.imag)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var real: [Float]

    @ReadWriteAttribute
    public var imag: [Float]
}

public class ScriptProcessorNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ScriptProcessorNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _onaudioprocess = ReadWriteAttribute(jsObject: jsObject, name: Strings.onaudioprocess)
        _bufferSize = ReadonlyAttribute(jsObject: jsObject, name: Strings.bufferSize)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadWriteAttribute
    public var onaudioprocess: EventHandler

    @ReadonlyAttribute
    public var bufferSize: Int32
}

public class StereoPannerNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.StereoPannerNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _pan = ReadonlyAttribute(jsObject: jsObject, name: Strings.pan)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: StereoPannerOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadonlyAttribute
    public var pan: AudioParam
}

public class StereoPannerOptions: BridgedDictionary {
    public convenience init(pan: Float) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.pan] = pan.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _pan = ReadWriteAttribute(jsObject: object, name: Strings.pan)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var pan: Float
}

public typealias DecodeErrorCallback = (DOMException) -> Void
public typealias DecodeSuccessCallback = (AudioBuffer) -> Void
public typealias AudioWorkletProcessCallback = ([[Float32Array]], [[Float32Array]], JSObject) -> Bool
public class WaveShaperNode: AudioNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.WaveShaperNode].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _curve = ReadWriteAttribute(jsObject: jsObject, name: Strings.curve)
        _oversample = ReadWriteAttribute(jsObject: jsObject, name: Strings.oversample)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(context: BaseAudioContext, options: WaveShaperOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [context.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadWriteAttribute
    public var curve: Float32Array?

    @ReadWriteAttribute
    public var oversample: OverSampleType
}

public class WaveShaperOptions: BridgedDictionary {
    public convenience init(curve: [Float], oversample: OverSampleType) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.curve] = curve.jsValue
        object[Strings.oversample] = oversample.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _curve = ReadWriteAttribute(jsObject: object, name: Strings.curve)
        _oversample = ReadWriteAttribute(jsObject: object, name: Strings.oversample)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var curve: [Float]

    @ReadWriteAttribute
    public var oversample: OverSampleType
}

/* variadic generics please */
@propertyWrapper public final class ClosureAttribute0<ReturnType>
    where ReturnType: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: () -> ReturnType {
        get { ClosureAttribute0[name, in: jsObject] }
        set { ClosureAttribute0[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> () -> ReturnType {
        get {
            let function = jsObject[name].function!
            return { function().fromJSValue()! }
        }
        set {
            jsObject[name] = JSClosure { _ in
                newValue().jsValue
            }.jsValue
        }
    }
}

@propertyWrapper public final class ClosureAttribute0Optional<ReturnType>
    where ReturnType: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: (() -> ReturnType)? {
        get { ClosureAttribute0Optional[name, in: jsObject] }
        set { ClosureAttribute0Optional[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> (() -> ReturnType)? {
        get {
            guard let function = jsObject[name].function else {
                return nil
            }
            return { function().fromJSValue()! }
        }
        set {
            if let newValue = newValue {
                jsObject[name] = JSClosure { _ in
                    newValue().jsValue
                }.jsValue
            } else {
                jsObject[name] = .null
            }
        }
    }
}

@propertyWrapper public final class ClosureAttribute0OptionalVoid {
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: (() -> Void)? {
        get { ClosureAttribute0OptionalVoid[name, in: jsObject] }
        set { ClosureAttribute0OptionalVoid[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> (() -> Void)? {
        get {
            guard let function = jsObject[name].function else {
                return nil
            }
            return { function() }
        }
        set {
            if let newValue = newValue {
                jsObject[name] = JSClosure { _ in
                    newValue()
                    return .undefined
                }.jsValue
            } else {
                jsObject[name] = .null
            }
        }
    }
}

@propertyWrapper public final class ClosureAttribute0Void {
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: () -> Void {
        get { ClosureAttribute0Void[name, in: jsObject] }
        set { ClosureAttribute0Void[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> () -> Void {
        get {
            let function = jsObject[name].function!
            return { function() }
        }
        set {
            jsObject[name] = JSClosure { _ in
                newValue()
                return .undefined
            }.jsValue
        }
    }
}

@propertyWrapper public final class ClosureAttribute1<A0, ReturnType>
    where A0: JSValueCompatible, ReturnType: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: (A0) -> ReturnType {
        get { ClosureAttribute1[name, in: jsObject] }
        set { ClosureAttribute1[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> (A0) -> ReturnType {
        get {
            let function = jsObject[name].function!
            return { function($0.jsValue).fromJSValue()! }
        }
        set {
            jsObject[name] = JSClosure {
                newValue($0[0].fromJSValue()!).jsValue
            }.jsValue
        }
    }
}

@propertyWrapper public final class ClosureAttribute1Optional<A0, ReturnType>
    where A0: JSValueCompatible, ReturnType: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: ((A0) -> ReturnType)? {
        get { ClosureAttribute1Optional[name, in: jsObject] }
        set { ClosureAttribute1Optional[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> ((A0) -> ReturnType)? {
        get {
            guard let function = jsObject[name].function else {
                return nil
            }
            return { function($0.jsValue).fromJSValue()! }
        }
        set {
            if let newValue = newValue {
                jsObject[name] = JSClosure {
                    newValue($0[0].fromJSValue()!).jsValue
                }.jsValue
            } else {
                jsObject[name] = .null
            }
        }
    }
}

@propertyWrapper public final class ClosureAttribute1OptionalVoid<A0>
    where A0: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: ((A0) -> Void)? {
        get { ClosureAttribute1OptionalVoid[name, in: jsObject] }
        set { ClosureAttribute1OptionalVoid[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> ((A0) -> Void)? {
        get {
            guard let function = jsObject[name].function else {
                return nil
            }
            return { function($0.jsValue) }
        }
        set {
            if let newValue = newValue {
                jsObject[name] = JSClosure {
                    newValue($0[0].fromJSValue()!)
                    return .undefined
                }.jsValue
            } else {
                jsObject[name] = .null
            }
        }
    }
}

@propertyWrapper public final class ClosureAttribute1Void<A0>
    where A0: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: (A0) -> Void {
        get { ClosureAttribute1Void[name, in: jsObject] }
        set { ClosureAttribute1Void[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> (A0) -> Void {
        get {
            let function = jsObject[name].function!
            return { function($0.jsValue) }
        }
        set {
            jsObject[name] = JSClosure {
                newValue($0[0].fromJSValue()!)
                return .undefined
            }.jsValue
        }
    }
}

@propertyWrapper public final class ClosureAttribute2<A0, A1, ReturnType>
    where A0: JSValueCompatible, A1: JSValueCompatible, ReturnType: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: (A0, A1) -> ReturnType {
        get { ClosureAttribute2[name, in: jsObject] }
        set { ClosureAttribute2[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> (A0, A1) -> ReturnType {
        get {
            let function = jsObject[name].function!
            return { function($0.jsValue, $1.jsValue).fromJSValue()! }
        }
        set {
            jsObject[name] = JSClosure {
                newValue($0[0].fromJSValue()!, $0[1].fromJSValue()!).jsValue
            }.jsValue
        }
    }
}

@propertyWrapper public final class ClosureAttribute2Optional<A0, A1, ReturnType>
    where A0: JSValueCompatible, A1: JSValueCompatible, ReturnType: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: ((A0, A1) -> ReturnType)? {
        get { ClosureAttribute2Optional[name, in: jsObject] }
        set { ClosureAttribute2Optional[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> ((A0, A1) -> ReturnType)? {
        get {
            guard let function = jsObject[name].function else {
                return nil
            }
            return { function($0.jsValue, $1.jsValue).fromJSValue()! }
        }
        set {
            if let newValue = newValue {
                jsObject[name] = JSClosure {
                    newValue($0[0].fromJSValue()!, $0[1].fromJSValue()!).jsValue
                }.jsValue
            } else {
                jsObject[name] = .null
            }
        }
    }
}

@propertyWrapper public final class ClosureAttribute2OptionalVoid<A0, A1>
    where A0: JSValueCompatible, A1: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: ((A0, A1) -> Void)? {
        get { ClosureAttribute2OptionalVoid[name, in: jsObject] }
        set { ClosureAttribute2OptionalVoid[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> ((A0, A1) -> Void)? {
        get {
            guard let function = jsObject[name].function else {
                return nil
            }
            return { function($0.jsValue, $1.jsValue) }
        }
        set {
            if let newValue = newValue {
                jsObject[name] = JSClosure {
                    newValue($0[0].fromJSValue()!, $0[1].fromJSValue()!)
                    return .undefined
                }.jsValue
            } else {
                jsObject[name] = .null
            }
        }
    }
}

@propertyWrapper public final class ClosureAttribute2Void<A0, A1>
    where A0: JSValueCompatible, A1: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: (A0, A1) -> Void {
        get { ClosureAttribute2Void[name, in: jsObject] }
        set { ClosureAttribute2Void[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> (A0, A1) -> Void {
        get {
            let function = jsObject[name].function!
            return { function($0.jsValue, $1.jsValue) }
        }
        set {
            jsObject[name] = JSClosure {
                newValue($0[0].fromJSValue()!, $0[1].fromJSValue()!)
                return .undefined
            }.jsValue
        }
    }
}

@propertyWrapper public final class ClosureAttribute3<A0, A1, A2, ReturnType>
    where A0: JSValueCompatible, A1: JSValueCompatible, A2: JSValueCompatible, ReturnType: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: (A0, A1, A2) -> ReturnType {
        get { ClosureAttribute3[name, in: jsObject] }
        set { ClosureAttribute3[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> (A0, A1, A2) -> ReturnType {
        get {
            let function = jsObject[name].function!
            return { function($0.jsValue, $1.jsValue, $2.jsValue).fromJSValue()! }
        }
        set {
            jsObject[name] = JSClosure {
                newValue($0[0].fromJSValue()!, $0[1].fromJSValue()!, $0[2].fromJSValue()!).jsValue
            }.jsValue
        }
    }
}

@propertyWrapper public final class ClosureAttribute3Optional<A0, A1, A2, ReturnType>
    where A0: JSValueCompatible, A1: JSValueCompatible, A2: JSValueCompatible, ReturnType: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: ((A0, A1, A2) -> ReturnType)? {
        get { ClosureAttribute3Optional[name, in: jsObject] }
        set { ClosureAttribute3Optional[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> ((A0, A1, A2) -> ReturnType)? {
        get {
            guard let function = jsObject[name].function else {
                return nil
            }
            return { function($0.jsValue, $1.jsValue, $2.jsValue).fromJSValue()! }
        }
        set {
            if let newValue = newValue {
                jsObject[name] = JSClosure {
                    newValue($0[0].fromJSValue()!, $0[1].fromJSValue()!, $0[2].fromJSValue()!).jsValue
                }.jsValue
            } else {
                jsObject[name] = .null
            }
        }
    }
}

@propertyWrapper public final class ClosureAttribute5<A0, A1, A2, A3, A4, ReturnType>
    where A0: JSValueCompatible, A1: JSValueCompatible, A2: JSValueCompatible, A3: JSValueCompatible, A4: JSValueCompatible, ReturnType: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: (A0, A1, A2, A3, A4) -> ReturnType {
        get { ClosureAttribute5[name, in: jsObject] }
        set { ClosureAttribute5[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> (A0, A1, A2, A3, A4) -> ReturnType {
        get {
            let function = jsObject[name].function!
            return { function($0.jsValue, $1.jsValue, $2.jsValue, $3.jsValue, $4.jsValue).fromJSValue()! }
        }
        set {
            jsObject[name] = JSClosure {
                newValue($0[0].fromJSValue()!, $0[1].fromJSValue()!, $0[2].fromJSValue()!, $0[3].fromJSValue()!, $0[4].fromJSValue()!).jsValue
            }.jsValue
        }
    }
}

@propertyWrapper public final class ClosureAttribute5Optional<A0, A1, A2, A3, A4, ReturnType>
    where A0: JSValueCompatible, A1: JSValueCompatible, A2: JSValueCompatible, A3: JSValueCompatible, A4: JSValueCompatible, ReturnType: JSValueCompatible
{
    @usableFromInline let jsObject: JSObject
    @usableFromInline let name: JSString

    public init(jsObject: JSObject, name: JSString) {
        self.jsObject = jsObject
        self.name = name
    }

    @inlinable public var wrappedValue: ((A0, A1, A2, A3, A4) -> ReturnType)? {
        get { ClosureAttribute5Optional[name, in: jsObject] }
        set { ClosureAttribute5Optional[name, in: jsObject] = newValue }
    }

    @inlinable public static subscript(name: JSString, in jsObject: JSObject) -> ((A0, A1, A2, A3, A4) -> ReturnType)? {
        get {
            guard let function = jsObject[name].function else {
                return nil
            }
            return { function($0.jsValue, $1.jsValue, $2.jsValue, $3.jsValue, $4.jsValue).fromJSValue()! }
        }
        set {
            if let newValue = newValue {
                jsObject[name] = JSClosure {
                    newValue($0[0].fromJSValue()!, $0[1].fromJSValue()!, $0[2].fromJSValue()!, $0[3].fromJSValue()!, $0[4].fromJSValue()!).jsValue
                }.jsValue
            } else {
                jsObject[name] = .null
            }
        }
    }
}

@usableFromInline enum Strings {
    static let _self: JSString = "self"
    @usableFromInline static let AbortController: JSString = "AbortController"
    @usableFromInline static let AbortSignal: JSString = "AbortSignal"
    @usableFromInline static let AbstractRange: JSString = "AbstractRange"
    @usableFromInline static let AddSearchProvider: JSString = "AddSearchProvider"
    @usableFromInline static let AnalyserNode: JSString = "AnalyserNode"
    @usableFromInline static let Attr: JSString = "Attr"
    @usableFromInline static let AudioBuffer: JSString = "AudioBuffer"
    @usableFromInline static let AudioBufferSourceNode: JSString = "AudioBufferSourceNode"
    @usableFromInline static let AudioContext: JSString = "AudioContext"
    @usableFromInline static let AudioData: JSString = "AudioData"
    @usableFromInline static let AudioDecoder: JSString = "AudioDecoder"
    @usableFromInline static let AudioDestinationNode: JSString = "AudioDestinationNode"
    @usableFromInline static let AudioEncoder: JSString = "AudioEncoder"
    @usableFromInline static let AudioListener: JSString = "AudioListener"
    @usableFromInline static let AudioNode: JSString = "AudioNode"
    @usableFromInline static let AudioParam: JSString = "AudioParam"
    @usableFromInline static let AudioParamMap: JSString = "AudioParamMap"
    @usableFromInline static let AudioProcessingEvent: JSString = "AudioProcessingEvent"
    @usableFromInline static let AudioScheduledSourceNode: JSString = "AudioScheduledSourceNode"
    @usableFromInline static let AudioTrack: JSString = "AudioTrack"
    @usableFromInline static let AudioTrackList: JSString = "AudioTrackList"
    @usableFromInline static let AudioWorklet: JSString = "AudioWorklet"
    @usableFromInline static let AudioWorkletNode: JSString = "AudioWorkletNode"
    @usableFromInline static let BarProp: JSString = "BarProp"
    @usableFromInline static let BaseAudioContext: JSString = "BaseAudioContext"
    @usableFromInline static let BeforeUnloadEvent: JSString = "BeforeUnloadEvent"
    @usableFromInline static let BiquadFilterNode: JSString = "BiquadFilterNode"
    @usableFromInline static let Blob: JSString = "Blob"
    @usableFromInline static let BlobEvent: JSString = "BlobEvent"
    @usableFromInline static let BroadcastChannel: JSString = "BroadcastChannel"
    @usableFromInline static let ByteLengthQueuingStrategy: JSString = "ByteLengthQueuingStrategy"
    @usableFromInline static let CDATASection: JSString = "CDATASection"
    @usableFromInline static let CSSPseudoElement: JSString = "CSSPseudoElement"
    @usableFromInline static let Cache: JSString = "Cache"
    @usableFromInline static let CacheStorage: JSString = "CacheStorage"
    @usableFromInline static let CanvasFilter: JSString = "CanvasFilter"
    @usableFromInline static let CanvasGradient: JSString = "CanvasGradient"
    @usableFromInline static let CanvasPattern: JSString = "CanvasPattern"
    @usableFromInline static let CanvasRenderingContext2D: JSString = "CanvasRenderingContext2D"
    @usableFromInline static let CaretPosition: JSString = "CaretPosition"
    @usableFromInline static let ChannelMergerNode: JSString = "ChannelMergerNode"
    @usableFromInline static let ChannelSplitterNode: JSString = "ChannelSplitterNode"
    @usableFromInline static let CharacterData: JSString = "CharacterData"
    @usableFromInline static let CloseEvent: JSString = "CloseEvent"
    @usableFromInline static let Comment: JSString = "Comment"
    @usableFromInline static let CompositionEvent: JSString = "CompositionEvent"
    @usableFromInline static let ConstantSourceNode: JSString = "ConstantSourceNode"
    @usableFromInline static let ConvolverNode: JSString = "ConvolverNode"
    @usableFromInline static let CountQueuingStrategy: JSString = "CountQueuingStrategy"
    @usableFromInline static let CustomElementRegistry: JSString = "CustomElementRegistry"
    @usableFromInline static let CustomEvent: JSString = "CustomEvent"
    @usableFromInline static let DOMException: JSString = "DOMException"
    @usableFromInline static let DOMImplementation: JSString = "DOMImplementation"
    @usableFromInline static let DOMMatrix: JSString = "DOMMatrix"
    @usableFromInline static let DOMMatrixReadOnly: JSString = "DOMMatrixReadOnly"
    @usableFromInline static let DOMParser: JSString = "DOMParser"
    @usableFromInline static let DOMPoint: JSString = "DOMPoint"
    @usableFromInline static let DOMPointReadOnly: JSString = "DOMPointReadOnly"
    @usableFromInline static let DOMQuad: JSString = "DOMQuad"
    @usableFromInline static let DOMRect: JSString = "DOMRect"
    @usableFromInline static let DOMRectList: JSString = "DOMRectList"
    @usableFromInline static let DOMRectReadOnly: JSString = "DOMRectReadOnly"
    @usableFromInline static let DOMStringList: JSString = "DOMStringList"
    @usableFromInline static let DOMStringMap: JSString = "DOMStringMap"
    @usableFromInline static let DOMTokenList: JSString = "DOMTokenList"
    @usableFromInline static let DataTransfer: JSString = "DataTransfer"
    @usableFromInline static let DataTransferItem: JSString = "DataTransferItem"
    @usableFromInline static let DataTransferItemList: JSString = "DataTransferItemList"
    @usableFromInline static let DelayNode: JSString = "DelayNode"
    @usableFromInline static let Document: JSString = "Document"
    @usableFromInline static let DocumentFragment: JSString = "DocumentFragment"
    @usableFromInline static let DocumentType: JSString = "DocumentType"
    @usableFromInline static let DragEvent: JSString = "DragEvent"
    @usableFromInline static let DynamicsCompressorNode: JSString = "DynamicsCompressorNode"
    @usableFromInline static let Element: JSString = "Element"
    @usableFromInline static let ElementInternals: JSString = "ElementInternals"
    @usableFromInline static let EncodedAudioChunk: JSString = "EncodedAudioChunk"
    @usableFromInline static let EncodedVideoChunk: JSString = "EncodedVideoChunk"
    @usableFromInline static let ErrorEvent: JSString = "ErrorEvent"
    @usableFromInline static let Event: JSString = "Event"
    @usableFromInline static let EventSource: JSString = "EventSource"
    @usableFromInline static let EventTarget: JSString = "EventTarget"
    @usableFromInline static let External: JSString = "External"
    @usableFromInline static let File: JSString = "File"
    @usableFromInline static let FileList: JSString = "FileList"
    @usableFromInline static let FileReader: JSString = "FileReader"
    @usableFromInline static let FocusEvent: JSString = "FocusEvent"
    @usableFromInline static let FormData: JSString = "FormData"
    @usableFromInline static let FormDataEvent: JSString = "FormDataEvent"
    @usableFromInline static let GainNode: JSString = "GainNode"
    @usableFromInline static let HTMLAllCollection: JSString = "HTMLAllCollection"
    @usableFromInline static let HTMLAnchorElement: JSString = "HTMLAnchorElement"
    @usableFromInline static let HTMLAreaElement: JSString = "HTMLAreaElement"
    @usableFromInline static let HTMLAudioElement: JSString = "HTMLAudioElement"
    @usableFromInline static let HTMLBRElement: JSString = "HTMLBRElement"
    @usableFromInline static let HTMLBaseElement: JSString = "HTMLBaseElement"
    @usableFromInline static let HTMLBodyElement: JSString = "HTMLBodyElement"
    @usableFromInline static let HTMLButtonElement: JSString = "HTMLButtonElement"
    @usableFromInline static let HTMLCanvasElement: JSString = "HTMLCanvasElement"
    @usableFromInline static let HTMLCollection: JSString = "HTMLCollection"
    @usableFromInline static let HTMLDListElement: JSString = "HTMLDListElement"
    @usableFromInline static let HTMLDataElement: JSString = "HTMLDataElement"
    @usableFromInline static let HTMLDataListElement: JSString = "HTMLDataListElement"
    @usableFromInline static let HTMLDetailsElement: JSString = "HTMLDetailsElement"
    @usableFromInline static let HTMLDialogElement: JSString = "HTMLDialogElement"
    @usableFromInline static let HTMLDirectoryElement: JSString = "HTMLDirectoryElement"
    @usableFromInline static let HTMLDivElement: JSString = "HTMLDivElement"
    @usableFromInline static let HTMLElement: JSString = "HTMLElement"
    @usableFromInline static let HTMLEmbedElement: JSString = "HTMLEmbedElement"
    @usableFromInline static let HTMLFieldSetElement: JSString = "HTMLFieldSetElement"
    @usableFromInline static let HTMLFontElement: JSString = "HTMLFontElement"
    @usableFromInline static let HTMLFormControlsCollection: JSString = "HTMLFormControlsCollection"
    @usableFromInline static let HTMLFormElement: JSString = "HTMLFormElement"
    @usableFromInline static let HTMLFrameElement: JSString = "HTMLFrameElement"
    @usableFromInline static let HTMLFrameSetElement: JSString = "HTMLFrameSetElement"
    @usableFromInline static let HTMLHRElement: JSString = "HTMLHRElement"
    @usableFromInline static let HTMLHeadElement: JSString = "HTMLHeadElement"
    @usableFromInline static let HTMLHeadingElement: JSString = "HTMLHeadingElement"
    @usableFromInline static let HTMLHtmlElement: JSString = "HTMLHtmlElement"
    @usableFromInline static let HTMLIFrameElement: JSString = "HTMLIFrameElement"
    @usableFromInline static let HTMLImageElement: JSString = "HTMLImageElement"
    @usableFromInline static let HTMLInputElement: JSString = "HTMLInputElement"
    @usableFromInline static let HTMLLIElement: JSString = "HTMLLIElement"
    @usableFromInline static let HTMLLabelElement: JSString = "HTMLLabelElement"
    @usableFromInline static let HTMLLegendElement: JSString = "HTMLLegendElement"
    @usableFromInline static let HTMLLinkElement: JSString = "HTMLLinkElement"
    @usableFromInline static let HTMLMapElement: JSString = "HTMLMapElement"
    @usableFromInline static let HTMLMarqueeElement: JSString = "HTMLMarqueeElement"
    @usableFromInline static let HTMLMediaElement: JSString = "HTMLMediaElement"
    @usableFromInline static let HTMLMenuElement: JSString = "HTMLMenuElement"
    @usableFromInline static let HTMLMetaElement: JSString = "HTMLMetaElement"
    @usableFromInline static let HTMLMeterElement: JSString = "HTMLMeterElement"
    @usableFromInline static let HTMLModElement: JSString = "HTMLModElement"
    @usableFromInline static let HTMLOListElement: JSString = "HTMLOListElement"
    @usableFromInline static let HTMLObjectElement: JSString = "HTMLObjectElement"
    @usableFromInline static let HTMLOptGroupElement: JSString = "HTMLOptGroupElement"
    @usableFromInline static let HTMLOptionElement: JSString = "HTMLOptionElement"
    @usableFromInline static let HTMLOptionsCollection: JSString = "HTMLOptionsCollection"
    @usableFromInline static let HTMLOutputElement: JSString = "HTMLOutputElement"
    @usableFromInline static let HTMLParagraphElement: JSString = "HTMLParagraphElement"
    @usableFromInline static let HTMLParamElement: JSString = "HTMLParamElement"
    @usableFromInline static let HTMLPictureElement: JSString = "HTMLPictureElement"
    @usableFromInline static let HTMLPreElement: JSString = "HTMLPreElement"
    @usableFromInline static let HTMLProgressElement: JSString = "HTMLProgressElement"
    @usableFromInline static let HTMLQuoteElement: JSString = "HTMLQuoteElement"
    @usableFromInline static let HTMLScriptElement: JSString = "HTMLScriptElement"
    @usableFromInline static let HTMLSelectElement: JSString = "HTMLSelectElement"
    @usableFromInline static let HTMLSlotElement: JSString = "HTMLSlotElement"
    @usableFromInline static let HTMLSourceElement: JSString = "HTMLSourceElement"
    @usableFromInline static let HTMLSpanElement: JSString = "HTMLSpanElement"
    @usableFromInline static let HTMLStyleElement: JSString = "HTMLStyleElement"
    @usableFromInline static let HTMLTableCaptionElement: JSString = "HTMLTableCaptionElement"
    @usableFromInline static let HTMLTableCellElement: JSString = "HTMLTableCellElement"
    @usableFromInline static let HTMLTableColElement: JSString = "HTMLTableColElement"
    @usableFromInline static let HTMLTableElement: JSString = "HTMLTableElement"
    @usableFromInline static let HTMLTableRowElement: JSString = "HTMLTableRowElement"
    @usableFromInline static let HTMLTableSectionElement: JSString = "HTMLTableSectionElement"
    @usableFromInline static let HTMLTemplateElement: JSString = "HTMLTemplateElement"
    @usableFromInline static let HTMLTextAreaElement: JSString = "HTMLTextAreaElement"
    @usableFromInline static let HTMLTimeElement: JSString = "HTMLTimeElement"
    @usableFromInline static let HTMLTitleElement: JSString = "HTMLTitleElement"
    @usableFromInline static let HTMLTrackElement: JSString = "HTMLTrackElement"
    @usableFromInline static let HTMLUListElement: JSString = "HTMLUListElement"
    @usableFromInline static let HTMLUnknownElement: JSString = "HTMLUnknownElement"
    @usableFromInline static let HTMLVideoElement: JSString = "HTMLVideoElement"
    @usableFromInline static let HashChangeEvent: JSString = "HashChangeEvent"
    @usableFromInline static let Headers: JSString = "Headers"
    @usableFromInline static let History: JSString = "History"
    @usableFromInline static let IIRFilterNode: JSString = "IIRFilterNode"
    @usableFromInline static let ImageBitmap: JSString = "ImageBitmap"
    @usableFromInline static let ImageBitmapRenderingContext: JSString = "ImageBitmapRenderingContext"
    @usableFromInline static let ImageData: JSString = "ImageData"
    @usableFromInline static let ImageDecoder: JSString = "ImageDecoder"
    @usableFromInline static let ImageTrack: JSString = "ImageTrack"
    @usableFromInline static let ImageTrackList: JSString = "ImageTrackList"
    @usableFromInline static let InputDeviceInfo: JSString = "InputDeviceInfo"
    @usableFromInline static let InputEvent: JSString = "InputEvent"
    @usableFromInline static let IsSearchProviderInstalled: JSString = "IsSearchProviderInstalled"
    @usableFromInline static let KeyboardEvent: JSString = "KeyboardEvent"
    @usableFromInline static let Location: JSString = "Location"
    @usableFromInline static let MediaDeviceInfo: JSString = "MediaDeviceInfo"
    @usableFromInline static let MediaDevices: JSString = "MediaDevices"
    @usableFromInline static let MediaElementAudioSourceNode: JSString = "MediaElementAudioSourceNode"
    @usableFromInline static let MediaError: JSString = "MediaError"
    @usableFromInline static let MediaQueryList: JSString = "MediaQueryList"
    @usableFromInline static let MediaQueryListEvent: JSString = "MediaQueryListEvent"
    @usableFromInline static let MediaRecorder: JSString = "MediaRecorder"
    @usableFromInline static let MediaRecorderErrorEvent: JSString = "MediaRecorderErrorEvent"
    @usableFromInline static let MediaStream: JSString = "MediaStream"
    @usableFromInline static let MediaStreamAudioDestinationNode: JSString = "MediaStreamAudioDestinationNode"
    @usableFromInline static let MediaStreamAudioSourceNode: JSString = "MediaStreamAudioSourceNode"
    @usableFromInline static let MediaStreamTrack: JSString = "MediaStreamTrack"
    @usableFromInline static let MediaStreamTrackAudioSourceNode: JSString = "MediaStreamTrackAudioSourceNode"
    @usableFromInline static let MediaStreamTrackEvent: JSString = "MediaStreamTrackEvent"
    @usableFromInline static let MessageChannel: JSString = "MessageChannel"
    @usableFromInline static let MessageEvent: JSString = "MessageEvent"
    @usableFromInline static let MessagePort: JSString = "MessagePort"
    @usableFromInline static let MimeType: JSString = "MimeType"
    @usableFromInline static let MimeTypeArray: JSString = "MimeTypeArray"
    @usableFromInline static let MouseEvent: JSString = "MouseEvent"
    @usableFromInline static let MutationEvent: JSString = "MutationEvent"
    @usableFromInline static let MutationObserver: JSString = "MutationObserver"
    @usableFromInline static let MutationRecord: JSString = "MutationRecord"
    @usableFromInline static let NamedNodeMap: JSString = "NamedNodeMap"
    @usableFromInline static let NavigationPreloadManager: JSString = "NavigationPreloadManager"
    @usableFromInline static let Navigator: JSString = "Navigator"
    @usableFromInline static let Node: JSString = "Node"
    @usableFromInline static let NodeIterator: JSString = "NodeIterator"
    @usableFromInline static let NodeList: JSString = "NodeList"
    @usableFromInline static let Object: JSString = "Object"
    @usableFromInline static let OfflineAudioCompletionEvent: JSString = "OfflineAudioCompletionEvent"
    @usableFromInline static let OfflineAudioContext: JSString = "OfflineAudioContext"
    @usableFromInline static let OffscreenCanvas: JSString = "OffscreenCanvas"
    @usableFromInline static let OffscreenCanvasRenderingContext2D: JSString = "OffscreenCanvasRenderingContext2D"
    @usableFromInline static let OscillatorNode: JSString = "OscillatorNode"
    @usableFromInline static let OverconstrainedError: JSString = "OverconstrainedError"
    @usableFromInline static let PageTransitionEvent: JSString = "PageTransitionEvent"
    @usableFromInline static let PannerNode: JSString = "PannerNode"
    @usableFromInline static let Path2D: JSString = "Path2D"
    @usableFromInline static let Performance: JSString = "Performance"
    @usableFromInline static let PeriodicWave: JSString = "PeriodicWave"
    @usableFromInline static let Plugin: JSString = "Plugin"
    @usableFromInline static let PluginArray: JSString = "PluginArray"
    @usableFromInline static let PopStateEvent: JSString = "PopStateEvent"
    @usableFromInline static let ProcessingInstruction: JSString = "ProcessingInstruction"
    @usableFromInline static let ProgressEvent: JSString = "ProgressEvent"
    @usableFromInline static let PromiseRejectionEvent: JSString = "PromiseRejectionEvent"
    @usableFromInline static let Q: JSString = "Q"
    @usableFromInline static let RadioNodeList: JSString = "RadioNodeList"
    @usableFromInline static let Range: JSString = "Range"
    @usableFromInline static let ReadableByteStreamController: JSString = "ReadableByteStreamController"
    @usableFromInline static let ReadableStream: JSString = "ReadableStream"
    @usableFromInline static let ReadableStreamBYOBReader: JSString = "ReadableStreamBYOBReader"
    @usableFromInline static let ReadableStreamBYOBRequest: JSString = "ReadableStreamBYOBRequest"
    @usableFromInline static let ReadableStreamDefaultController: JSString = "ReadableStreamDefaultController"
    @usableFromInline static let ReadableStreamDefaultReader: JSString = "ReadableStreamDefaultReader"
    @usableFromInline static let Request: JSString = "Request"
    @usableFromInline static let Response: JSString = "Response"
    @usableFromInline static let Screen: JSString = "Screen"
    @usableFromInline static let ScriptProcessorNode: JSString = "ScriptProcessorNode"
    @usableFromInline static let ServiceWorker: JSString = "ServiceWorker"
    @usableFromInline static let ServiceWorkerContainer: JSString = "ServiceWorkerContainer"
    @usableFromInline static let ServiceWorkerRegistration: JSString = "ServiceWorkerRegistration"
    @usableFromInline static let ShadowRoot: JSString = "ShadowRoot"
    @usableFromInline static let SharedWorker: JSString = "SharedWorker"
    @usableFromInline static let StaticRange: JSString = "StaticRange"
    @usableFromInline static let StereoPannerNode: JSString = "StereoPannerNode"
    @usableFromInline static let Storage: JSString = "Storage"
    @usableFromInline static let StorageEvent: JSString = "StorageEvent"
    @usableFromInline static let SubmitEvent: JSString = "SubmitEvent"
    @usableFromInline static let Text: JSString = "Text"
    @usableFromInline static let TextMetrics: JSString = "TextMetrics"
    @usableFromInline static let TextTrack: JSString = "TextTrack"
    @usableFromInline static let TextTrackCue: JSString = "TextTrackCue"
    @usableFromInline static let TextTrackCueList: JSString = "TextTrackCueList"
    @usableFromInline static let TextTrackList: JSString = "TextTrackList"
    @usableFromInline static let TimeRanges: JSString = "TimeRanges"
    @usableFromInline static let TrackEvent: JSString = "TrackEvent"
    @usableFromInline static let TransformStream: JSString = "TransformStream"
    @usableFromInline static let TransformStreamDefaultController: JSString = "TransformStreamDefaultController"
    @usableFromInline static let TreeWalker: JSString = "TreeWalker"
    @usableFromInline static let UIEvent: JSString = "UIEvent"
    @usableFromInline static let URL: JSString = "URL"
    @usableFromInline static let URLSearchParams: JSString = "URLSearchParams"
    @usableFromInline static let ValidityState: JSString = "ValidityState"
    @usableFromInline static let VideoColorSpace: JSString = "VideoColorSpace"
    @usableFromInline static let VideoDecoder: JSString = "VideoDecoder"
    @usableFromInline static let VideoEncoder: JSString = "VideoEncoder"
    @usableFromInline static let VideoFrame: JSString = "VideoFrame"
    @usableFromInline static let VideoTrack: JSString = "VideoTrack"
    @usableFromInline static let VideoTrackList: JSString = "VideoTrackList"
    @usableFromInline static let WaveShaperNode: JSString = "WaveShaperNode"
    @usableFromInline static let WebSocket: JSString = "WebSocket"
    @usableFromInline static let WheelEvent: JSString = "WheelEvent"
    @usableFromInline static let Window: JSString = "Window"
    @usableFromInline static let Worker: JSString = "Worker"
    @usableFromInline static let Worklet: JSString = "Worklet"
    @usableFromInline static let WritableStream: JSString = "WritableStream"
    @usableFromInline static let WritableStreamDefaultController: JSString = "WritableStreamDefaultController"
    @usableFromInline static let WritableStreamDefaultWriter: JSString = "WritableStreamDefaultWriter"
    @usableFromInline static let XMLDocument: JSString = "XMLDocument"
    @usableFromInline static let XMLHttpRequest: JSString = "XMLHttpRequest"
    @usableFromInline static let XMLHttpRequestEventTarget: JSString = "XMLHttpRequestEventTarget"
    @usableFromInline static let XMLHttpRequestUpload: JSString = "XMLHttpRequestUpload"
    @usableFromInline static let XPathEvaluator: JSString = "XPathEvaluator"
    @usableFromInline static let XPathExpression: JSString = "XPathExpression"
    @usableFromInline static let XPathResult: JSString = "XPathResult"
    @usableFromInline static let XSLTProcessor: JSString = "XSLTProcessor"
    @usableFromInline static let a: JSString = "a"
    @usableFromInline static let aLink: JSString = "aLink"
    @usableFromInline static let abbr: JSString = "abbr"
    @usableFromInline static let abort: JSString = "abort"
    @usableFromInline static let aborted: JSString = "aborted"
    @usableFromInline static let accept: JSString = "accept"
    @usableFromInline static let acceptCharset: JSString = "acceptCharset"
    @usableFromInline static let accessKey: JSString = "accessKey"
    @usableFromInline static let accessKeyLabel: JSString = "accessKeyLabel"
    @usableFromInline static let action: JSString = "action"
    @usableFromInline static let active: JSString = "active"
    @usableFromInline static let activeCues: JSString = "activeCues"
    @usableFromInline static let activeElement: JSString = "activeElement"
    @usableFromInline static let actualBoundingBoxAscent: JSString = "actualBoundingBoxAscent"
    @usableFromInline static let actualBoundingBoxDescent: JSString = "actualBoundingBoxDescent"
    @usableFromInline static let actualBoundingBoxLeft: JSString = "actualBoundingBoxLeft"
    @usableFromInline static let actualBoundingBoxRight: JSString = "actualBoundingBoxRight"
    @usableFromInline static let add: JSString = "add"
    @usableFromInline static let addAll: JSString = "addAll"
    @usableFromInline static let addColorStop: JSString = "addColorStop"
    @usableFromInline static let addCue: JSString = "addCue"
    @usableFromInline static let addModule: JSString = "addModule"
    @usableFromInline static let addPath: JSString = "addPath"
    @usableFromInline static let addTextTrack: JSString = "addTextTrack"
    @usableFromInline static let addTrack: JSString = "addTrack"
    @usableFromInline static let addedNodes: JSString = "addedNodes"
    @usableFromInline static let adoptNode: JSString = "adoptNode"
    @usableFromInline static let advanced: JSString = "advanced"
    @usableFromInline static let after: JSString = "after"
    @usableFromInline static let alert: JSString = "alert"
    @usableFromInline static let align: JSString = "align"
    @usableFromInline static let alinkColor: JSString = "alinkColor"
    @usableFromInline static let all: JSString = "all"
    @usableFromInline static let allocationSize: JSString = "allocationSize"
    @usableFromInline static let allow: JSString = "allow"
    @usableFromInline static let allowFullscreen: JSString = "allowFullscreen"
    @usableFromInline static let alpha: JSString = "alpha"
    @usableFromInline static let alphaSideData: JSString = "alphaSideData"
    @usableFromInline static let alphabeticBaseline: JSString = "alphabeticBaseline"
    @usableFromInline static let alt: JSString = "alt"
    @usableFromInline static let altKey: JSString = "altKey"
    @usableFromInline static let ancestorOrigins: JSString = "ancestorOrigins"
    @usableFromInline static let anchors: JSString = "anchors"
    @usableFromInline static let animated: JSString = "animated"
    @usableFromInline static let appCodeName: JSString = "appCodeName"
    @usableFromInline static let appName: JSString = "appName"
    @usableFromInline static let appVersion: JSString = "appVersion"
    @usableFromInline static let append: JSString = "append"
    @usableFromInline static let appendChild: JSString = "appendChild"
    @usableFromInline static let appendData: JSString = "appendData"
    @usableFromInline static let applets: JSString = "applets"
    @usableFromInline static let applyConstraints: JSString = "applyConstraints"
    @usableFromInline static let arc: JSString = "arc"
    @usableFromInline static let arcTo: JSString = "arcTo"
    @usableFromInline static let archive: JSString = "archive"
    @usableFromInline static let areas: JSString = "areas"
    @usableFromInline static let ariaAtomic: JSString = "ariaAtomic"
    @usableFromInline static let ariaAutoComplete: JSString = "ariaAutoComplete"
    @usableFromInline static let ariaBusy: JSString = "ariaBusy"
    @usableFromInline static let ariaChecked: JSString = "ariaChecked"
    @usableFromInline static let ariaColCount: JSString = "ariaColCount"
    @usableFromInline static let ariaColIndex: JSString = "ariaColIndex"
    @usableFromInline static let ariaColIndexText: JSString = "ariaColIndexText"
    @usableFromInline static let ariaColSpan: JSString = "ariaColSpan"
    @usableFromInline static let ariaCurrent: JSString = "ariaCurrent"
    @usableFromInline static let ariaDescription: JSString = "ariaDescription"
    @usableFromInline static let ariaDisabled: JSString = "ariaDisabled"
    @usableFromInline static let ariaExpanded: JSString = "ariaExpanded"
    @usableFromInline static let ariaHasPopup: JSString = "ariaHasPopup"
    @usableFromInline static let ariaHidden: JSString = "ariaHidden"
    @usableFromInline static let ariaInvalid: JSString = "ariaInvalid"
    @usableFromInline static let ariaKeyShortcuts: JSString = "ariaKeyShortcuts"
    @usableFromInline static let ariaLabel: JSString = "ariaLabel"
    @usableFromInline static let ariaLevel: JSString = "ariaLevel"
    @usableFromInline static let ariaLive: JSString = "ariaLive"
    @usableFromInline static let ariaModal: JSString = "ariaModal"
    @usableFromInline static let ariaMultiLine: JSString = "ariaMultiLine"
    @usableFromInline static let ariaMultiSelectable: JSString = "ariaMultiSelectable"
    @usableFromInline static let ariaOrientation: JSString = "ariaOrientation"
    @usableFromInline static let ariaPlaceholder: JSString = "ariaPlaceholder"
    @usableFromInline static let ariaPosInSet: JSString = "ariaPosInSet"
    @usableFromInline static let ariaPressed: JSString = "ariaPressed"
    @usableFromInline static let ariaReadOnly: JSString = "ariaReadOnly"
    @usableFromInline static let ariaRequired: JSString = "ariaRequired"
    @usableFromInline static let ariaRoleDescription: JSString = "ariaRoleDescription"
    @usableFromInline static let ariaRowCount: JSString = "ariaRowCount"
    @usableFromInline static let ariaRowIndex: JSString = "ariaRowIndex"
    @usableFromInline static let ariaRowIndexText: JSString = "ariaRowIndexText"
    @usableFromInline static let ariaRowSpan: JSString = "ariaRowSpan"
    @usableFromInline static let ariaSelected: JSString = "ariaSelected"
    @usableFromInline static let ariaSetSize: JSString = "ariaSetSize"
    @usableFromInline static let ariaSort: JSString = "ariaSort"
    @usableFromInline static let ariaValueMax: JSString = "ariaValueMax"
    @usableFromInline static let ariaValueMin: JSString = "ariaValueMin"
    @usableFromInline static let ariaValueNow: JSString = "ariaValueNow"
    @usableFromInline static let ariaValueText: JSString = "ariaValueText"
    @usableFromInline static let arrayBuffer: JSString = "arrayBuffer"
    @usableFromInline static let `as`: JSString = "as"
    @usableFromInline static let aspectRatio: JSString = "aspectRatio"
    @usableFromInline static let assert: JSString = "assert"
    @usableFromInline static let assign: JSString = "assign"
    @usableFromInline static let assignedElements: JSString = "assignedElements"
    @usableFromInline static let assignedNodes: JSString = "assignedNodes"
    @usableFromInline static let assignedSlot: JSString = "assignedSlot"
    @usableFromInline static let async: JSString = "async"
    @usableFromInline static let atob: JSString = "atob"
    @usableFromInline static let attachInternals: JSString = "attachInternals"
    @usableFromInline static let attachShadow: JSString = "attachShadow"
    @usableFromInline static let attack: JSString = "attack"
    @usableFromInline static let attrChange: JSString = "attrChange"
    @usableFromInline static let attrName: JSString = "attrName"
    @usableFromInline static let attributeFilter: JSString = "attributeFilter"
    @usableFromInline static let attributeName: JSString = "attributeName"
    @usableFromInline static let attributeNamespace: JSString = "attributeNamespace"
    @usableFromInline static let attributeOldValue: JSString = "attributeOldValue"
    @usableFromInline static let attributes: JSString = "attributes"
    @usableFromInline static let audio: JSString = "audio"
    @usableFromInline static let audioBitrateMode: JSString = "audioBitrateMode"
    @usableFromInline static let audioBitsPerSecond: JSString = "audioBitsPerSecond"
    @usableFromInline static let audioTracks: JSString = "audioTracks"
    @usableFromInline static let audioWorklet: JSString = "audioWorklet"
    @usableFromInline static let autoAllocateChunkSize: JSString = "autoAllocateChunkSize"
    @usableFromInline static let autoGainControl: JSString = "autoGainControl"
    @usableFromInline static let autocapitalize: JSString = "autocapitalize"
    @usableFromInline static let autocomplete: JSString = "autocomplete"
    @usableFromInline static let autofocus: JSString = "autofocus"
    @usableFromInline static let automationRate: JSString = "automationRate"
    @usableFromInline static let autoplay: JSString = "autoplay"
    @usableFromInline static let availHeight: JSString = "availHeight"
    @usableFromInline static let availWidth: JSString = "availWidth"
    @usableFromInline static let axis: JSString = "axis"
    @usableFromInline static let b: JSString = "b"
    @usableFromInline static let back: JSString = "back"
    @usableFromInline static let background: JSString = "background"
    @usableFromInline static let badInput: JSString = "badInput"
    @usableFromInline static let baseLatency: JSString = "baseLatency"
    @usableFromInline static let baseURI: JSString = "baseURI"
    @usableFromInline static let before: JSString = "before"
    @usableFromInline static let beginPath: JSString = "beginPath"
    @usableFromInline static let behavior: JSString = "behavior"
    @usableFromInline static let bezierCurveTo: JSString = "bezierCurveTo"
    @usableFromInline static let bgColor: JSString = "bgColor"
    @usableFromInline static let binaryType: JSString = "binaryType"
    @usableFromInline static let bitrate: JSString = "bitrate"
    @usableFromInline static let bitrateMode: JSString = "bitrateMode"
    @usableFromInline static let bitsPerSecond: JSString = "bitsPerSecond"
    @usableFromInline static let blob: JSString = "blob"
    @usableFromInline static let block: JSString = "block"
    @usableFromInline static let blocking: JSString = "blocking"
    @usableFromInline static let blur: JSString = "blur"
    @usableFromInline static let body: JSString = "body"
    @usableFromInline static let bodyUsed: JSString = "bodyUsed"
    @usableFromInline static let booleanValue: JSString = "booleanValue"
    @usableFromInline static let border: JSString = "border"
    @usableFromInline static let bottom: JSString = "bottom"
    @usableFromInline static let box: JSString = "box"
    @usableFromInline static let btoa: JSString = "btoa"
    @usableFromInline static let bubbles: JSString = "bubbles"
    @usableFromInline static let buffer: JSString = "buffer"
    @usableFromInline static let bufferSize: JSString = "bufferSize"
    @usableFromInline static let buffered: JSString = "buffered"
    @usableFromInline static let bufferedAmount: JSString = "bufferedAmount"
    @usableFromInline static let button: JSString = "button"
    @usableFromInline static let buttons: JSString = "buttons"
    @usableFromInline static let byobRequest: JSString = "byobRequest"
    @usableFromInline static let byteLength: JSString = "byteLength"
    @usableFromInline static let c: JSString = "c"
    @usableFromInline static let cache: JSString = "cache"
    @usableFromInline static let cacheName: JSString = "cacheName"
    @usableFromInline static let caches: JSString = "caches"
    @usableFromInline static let canPlayType: JSString = "canPlayType"
    @usableFromInline static let cancel: JSString = "cancel"
    @usableFromInline static let cancelAndHoldAtTime: JSString = "cancelAndHoldAtTime"
    @usableFromInline static let cancelAnimationFrame: JSString = "cancelAnimationFrame"
    @usableFromInline static let cancelBubble: JSString = "cancelBubble"
    @usableFromInline static let cancelScheduledValues: JSString = "cancelScheduledValues"
    @usableFromInline static let cancelable: JSString = "cancelable"
    @usableFromInline static let canvas: JSString = "canvas"
    @usableFromInline static let caption: JSString = "caption"
    @usableFromInline static let capture: JSString = "capture"
    @usableFromInline static let captureEvents: JSString = "captureEvents"
    @usableFromInline static let caretPositionFromPoint: JSString = "caretPositionFromPoint"
    @usableFromInline static let cellIndex: JSString = "cellIndex"
    @usableFromInline static let cellPadding: JSString = "cellPadding"
    @usableFromInline static let cellSpacing: JSString = "cellSpacing"
    @usableFromInline static let cells: JSString = "cells"
    @usableFromInline static let ch: JSString = "ch"
    @usableFromInline static let chOff: JSString = "chOff"
    @usableFromInline static let channelCount: JSString = "channelCount"
    @usableFromInline static let channelCountMode: JSString = "channelCountMode"
    @usableFromInline static let channelInterpretation: JSString = "channelInterpretation"
    @usableFromInline static let charCode: JSString = "charCode"
    @usableFromInline static let characterData: JSString = "characterData"
    @usableFromInline static let characterDataOldValue: JSString = "characterDataOldValue"
    @usableFromInline static let characterSet: JSString = "characterSet"
    @usableFromInline static let charset: JSString = "charset"
    @usableFromInline static let checkValidity: JSString = "checkValidity"
    @usableFromInline static let checked: JSString = "checked"
    @usableFromInline static let childElementCount: JSString = "childElementCount"
    @usableFromInline static let childList: JSString = "childList"
    @usableFromInline static let childNodes: JSString = "childNodes"
    @usableFromInline static let children: JSString = "children"
    @usableFromInline static let cite: JSString = "cite"
    @usableFromInline static let classList: JSString = "classList"
    @usableFromInline static let className: JSString = "className"
    @usableFromInline static let clear: JSString = "clear"
    @usableFromInline static let clearData: JSString = "clearData"
    @usableFromInline static let clearInterval: JSString = "clearInterval"
    @usableFromInline static let clearParameters: JSString = "clearParameters"
    @usableFromInline static let clearRect: JSString = "clearRect"
    @usableFromInline static let clearTimeout: JSString = "clearTimeout"
    @usableFromInline static let click: JSString = "click"
    @usableFromInline static let clientHeight: JSString = "clientHeight"
    @usableFromInline static let clientId: JSString = "clientId"
    @usableFromInline static let clientInformation: JSString = "clientInformation"
    @usableFromInline static let clientLeft: JSString = "clientLeft"
    @usableFromInline static let clientTop: JSString = "clientTop"
    @usableFromInline static let clientWidth: JSString = "clientWidth"
    @usableFromInline static let clientX: JSString = "clientX"
    @usableFromInline static let clientY: JSString = "clientY"
    @usableFromInline static let clip: JSString = "clip"
    @usableFromInline static let clone: JSString = "clone"
    @usableFromInline static let cloneContents: JSString = "cloneContents"
    @usableFromInline static let cloneNode: JSString = "cloneNode"
    @usableFromInline static let cloneRange: JSString = "cloneRange"
    @usableFromInline static let close: JSString = "close"
    @usableFromInline static let closePath: JSString = "closePath"
    @usableFromInline static let closed: JSString = "closed"
    @usableFromInline static let closest: JSString = "closest"
    @usableFromInline static let code: JSString = "code"
    @usableFromInline static let codeBase: JSString = "codeBase"
    @usableFromInline static let codeType: JSString = "codeType"
    @usableFromInline static let codec: JSString = "codec"
    @usableFromInline static let codedHeight: JSString = "codedHeight"
    @usableFromInline static let codedRect: JSString = "codedRect"
    @usableFromInline static let codedWidth: JSString = "codedWidth"
    @usableFromInline static let colSpan: JSString = "colSpan"
    @usableFromInline static let collapse: JSString = "collapse"
    @usableFromInline static let collapsed: JSString = "collapsed"
    @usableFromInline static let colno: JSString = "colno"
    @usableFromInline static let color: JSString = "color"
    @usableFromInline static let colorDepth: JSString = "colorDepth"
    @usableFromInline static let colorSpace: JSString = "colorSpace"
    @usableFromInline static let colorSpaceConversion: JSString = "colorSpaceConversion"
    @usableFromInline static let cols: JSString = "cols"
    @usableFromInline static let commit: JSString = "commit"
    @usableFromInline static let commonAncestorContainer: JSString = "commonAncestorContainer"
    @usableFromInline static let compact: JSString = "compact"
    @usableFromInline static let compareBoundaryPoints: JSString = "compareBoundaryPoints"
    @usableFromInline static let compareDocumentPosition: JSString = "compareDocumentPosition"
    @usableFromInline static let comparePoint: JSString = "comparePoint"
    @usableFromInline static let compatMode: JSString = "compatMode"
    @usableFromInline static let complete: JSString = "complete"
    @usableFromInline static let completeFramesOnly: JSString = "completeFramesOnly"
    @usableFromInline static let completed: JSString = "completed"
    @usableFromInline static let composed: JSString = "composed"
    @usableFromInline static let composedPath: JSString = "composedPath"
    @usableFromInline static let coneInnerAngle: JSString = "coneInnerAngle"
    @usableFromInline static let coneOuterAngle: JSString = "coneOuterAngle"
    @usableFromInline static let coneOuterGain: JSString = "coneOuterGain"
    @usableFromInline static let config: JSString = "config"
    @usableFromInline static let configure: JSString = "configure"
    @usableFromInline static let confirm: JSString = "confirm"
    @usableFromInline static let connect: JSString = "connect"
    @usableFromInline static let console: JSString = "console"
    @usableFromInline static let constraint: JSString = "constraint"
    @usableFromInline static let contains: JSString = "contains"
    @usableFromInline static let content: JSString = "content"
    @usableFromInline static let contentDocument: JSString = "contentDocument"
    @usableFromInline static let contentEditable: JSString = "contentEditable"
    @usableFromInline static let contentType: JSString = "contentType"
    @usableFromInline static let contentWindow: JSString = "contentWindow"
    @usableFromInline static let context: JSString = "context"
    @usableFromInline static let contextTime: JSString = "contextTime"
    @usableFromInline static let control: JSString = "control"
    @usableFromInline static let controller: JSString = "controller"
    @usableFromInline static let controls: JSString = "controls"
    @usableFromInline static let convertPointFromNode: JSString = "convertPointFromNode"
    @usableFromInline static let convertQuadFromNode: JSString = "convertQuadFromNode"
    @usableFromInline static let convertRectFromNode: JSString = "convertRectFromNode"
    @usableFromInline static let convertToBlob: JSString = "convertToBlob"
    @usableFromInline static let cookie: JSString = "cookie"
    @usableFromInline static let cookieEnabled: JSString = "cookieEnabled"
    @usableFromInline static let coords: JSString = "coords"
    @usableFromInline static let copyFromChannel: JSString = "copyFromChannel"
    @usableFromInline static let copyTo: JSString = "copyTo"
    @usableFromInline static let copyToChannel: JSString = "copyToChannel"
    @usableFromInline static let count: JSString = "count"
    @usableFromInline static let countReset: JSString = "countReset"
    @usableFromInline static let createAnalyser: JSString = "createAnalyser"
    @usableFromInline static let createAttribute: JSString = "createAttribute"
    @usableFromInline static let createAttributeNS: JSString = "createAttributeNS"
    @usableFromInline static let createBiquadFilter: JSString = "createBiquadFilter"
    @usableFromInline static let createBuffer: JSString = "createBuffer"
    @usableFromInline static let createBufferSource: JSString = "createBufferSource"
    @usableFromInline static let createCDATASection: JSString = "createCDATASection"
    @usableFromInline static let createCaption: JSString = "createCaption"
    @usableFromInline static let createChannelMerger: JSString = "createChannelMerger"
    @usableFromInline static let createChannelSplitter: JSString = "createChannelSplitter"
    @usableFromInline static let createComment: JSString = "createComment"
    @usableFromInline static let createConicGradient: JSString = "createConicGradient"
    @usableFromInline static let createConstantSource: JSString = "createConstantSource"
    @usableFromInline static let createConvolver: JSString = "createConvolver"
    @usableFromInline static let createDelay: JSString = "createDelay"
    @usableFromInline static let createDocument: JSString = "createDocument"
    @usableFromInline static let createDocumentFragment: JSString = "createDocumentFragment"
    @usableFromInline static let createDocumentType: JSString = "createDocumentType"
    @usableFromInline static let createDynamicsCompressor: JSString = "createDynamicsCompressor"
    @usableFromInline static let createElement: JSString = "createElement"
    @usableFromInline static let createElementNS: JSString = "createElementNS"
    @usableFromInline static let createEvent: JSString = "createEvent"
    @usableFromInline static let createGain: JSString = "createGain"
    @usableFromInline static let createHTMLDocument: JSString = "createHTMLDocument"
    @usableFromInline static let createIIRFilter: JSString = "createIIRFilter"
    @usableFromInline static let createImageBitmap: JSString = "createImageBitmap"
    @usableFromInline static let createImageData: JSString = "createImageData"
    @usableFromInline static let createLinearGradient: JSString = "createLinearGradient"
    @usableFromInline static let createMediaElementSource: JSString = "createMediaElementSource"
    @usableFromInline static let createMediaStreamDestination: JSString = "createMediaStreamDestination"
    @usableFromInline static let createMediaStreamSource: JSString = "createMediaStreamSource"
    @usableFromInline static let createMediaStreamTrackSource: JSString = "createMediaStreamTrackSource"
    @usableFromInline static let createObjectURL: JSString = "createObjectURL"
    @usableFromInline static let createOscillator: JSString = "createOscillator"
    @usableFromInline static let createPanner: JSString = "createPanner"
    @usableFromInline static let createPattern: JSString = "createPattern"
    @usableFromInline static let createPeriodicWave: JSString = "createPeriodicWave"
    @usableFromInline static let createProcessingInstruction: JSString = "createProcessingInstruction"
    @usableFromInline static let createRadialGradient: JSString = "createRadialGradient"
    @usableFromInline static let createRange: JSString = "createRange"
    @usableFromInline static let createScriptProcessor: JSString = "createScriptProcessor"
    @usableFromInline static let createStereoPanner: JSString = "createStereoPanner"
    @usableFromInline static let createTBody: JSString = "createTBody"
    @usableFromInline static let createTFoot: JSString = "createTFoot"
    @usableFromInline static let createTHead: JSString = "createTHead"
    @usableFromInline static let createTextNode: JSString = "createTextNode"
    @usableFromInline static let createWaveShaper: JSString = "createWaveShaper"
    @usableFromInline static let credentials: JSString = "credentials"
    @usableFromInline static let crossOrigin: JSString = "crossOrigin"
    @usableFromInline static let crossOriginIsolated: JSString = "crossOriginIsolated"
    @usableFromInline static let ctrlKey: JSString = "ctrlKey"
    @usableFromInline static let cues: JSString = "cues"
    @usableFromInline static let currentNode: JSString = "currentNode"
    @usableFromInline static let currentScript: JSString = "currentScript"
    @usableFromInline static let currentSrc: JSString = "currentSrc"
    @usableFromInline static let currentTarget: JSString = "currentTarget"
    @usableFromInline static let currentTime: JSString = "currentTime"
    @usableFromInline static let curve: JSString = "curve"
    @usableFromInline static let customElements: JSString = "customElements"
    @usableFromInline static let customError: JSString = "customError"
    @usableFromInline static let d: JSString = "d"
    @usableFromInline static let data: JSString = "data"
    @usableFromInline static let dataTransfer: JSString = "dataTransfer"
    @usableFromInline static let dataset: JSString = "dataset"
    @usableFromInline static let dateTime: JSString = "dateTime"
    @usableFromInline static let debug: JSString = "debug"
    @usableFromInline static let declare: JSString = "declare"
    @usableFromInline static let decode: JSString = "decode"
    @usableFromInline static let decodeQueueSize: JSString = "decodeQueueSize"
    @usableFromInline static let decoderConfig: JSString = "decoderConfig"
    @usableFromInline static let decoding: JSString = "decoding"
    @usableFromInline static let `default`: JSString = "default"
    @usableFromInline static let defaultChecked: JSString = "defaultChecked"
    @usableFromInline static let defaultMuted: JSString = "defaultMuted"
    @usableFromInline static let defaultPlaybackRate: JSString = "defaultPlaybackRate"
    @usableFromInline static let defaultPrevented: JSString = "defaultPrevented"
    @usableFromInline static let defaultSelected: JSString = "defaultSelected"
    @usableFromInline static let defaultValue: JSString = "defaultValue"
    @usableFromInline static let defaultView: JSString = "defaultView"
    @usableFromInline static let `defer`: JSString = "defer"
    @usableFromInline static let define: JSString = "define"
    @usableFromInline static let delayTime: JSString = "delayTime"
    @usableFromInline static let delegatesFocus: JSString = "delegatesFocus"
    @usableFromInline static let delete: JSString = "delete"
    @usableFromInline static let deleteCaption: JSString = "deleteCaption"
    @usableFromInline static let deleteCell: JSString = "deleteCell"
    @usableFromInline static let deleteContents: JSString = "deleteContents"
    @usableFromInline static let deleteData: JSString = "deleteData"
    @usableFromInline static let deleteRow: JSString = "deleteRow"
    @usableFromInline static let deleteTFoot: JSString = "deleteTFoot"
    @usableFromInline static let deleteTHead: JSString = "deleteTHead"
    @usableFromInline static let deltaMode: JSString = "deltaMode"
    @usableFromInline static let deltaX: JSString = "deltaX"
    @usableFromInline static let deltaY: JSString = "deltaY"
    @usableFromInline static let deltaZ: JSString = "deltaZ"
    @usableFromInline static let description: JSString = "description"
    @usableFromInline static let designMode: JSString = "designMode"
    @usableFromInline static let desiredHeight: JSString = "desiredHeight"
    @usableFromInline static let desiredSize: JSString = "desiredSize"
    @usableFromInline static let desiredWidth: JSString = "desiredWidth"
    @usableFromInline static let destination: JSString = "destination"
    @usableFromInline static let desynchronized: JSString = "desynchronized"
    @usableFromInline static let detach: JSString = "detach"
    @usableFromInline static let detail: JSString = "detail"
    @usableFromInline static let detune: JSString = "detune"
    @usableFromInline static let deviceId: JSString = "deviceId"
    @usableFromInline static let devicePixelRatio: JSString = "devicePixelRatio"
    @usableFromInline static let dir: JSString = "dir"
    @usableFromInline static let dirName: JSString = "dirName"
    @usableFromInline static let direction: JSString = "direction"
    @usableFromInline static let dirxml: JSString = "dirxml"
    @usableFromInline static let disable: JSString = "disable"
    @usableFromInline static let disableNormalization: JSString = "disableNormalization"
    @usableFromInline static let disabled: JSString = "disabled"
    @usableFromInline static let disconnect: JSString = "disconnect"
    @usableFromInline static let dispatchEvent: JSString = "dispatchEvent"
    @usableFromInline static let displayAspectHeight: JSString = "displayAspectHeight"
    @usableFromInline static let displayAspectWidth: JSString = "displayAspectWidth"
    @usableFromInline static let displayHeight: JSString = "displayHeight"
    @usableFromInline static let displayWidth: JSString = "displayWidth"
    @usableFromInline static let distanceModel: JSString = "distanceModel"
    @usableFromInline static let doctype: JSString = "doctype"
    @usableFromInline static let document: JSString = "document"
    @usableFromInline static let documentElement: JSString = "documentElement"
    @usableFromInline static let documentURI: JSString = "documentURI"
    @usableFromInline static let domain: JSString = "domain"
    @usableFromInline static let done: JSString = "done"
    @usableFromInline static let download: JSString = "download"
    @usableFromInline static let draggable: JSString = "draggable"
    @usableFromInline static let drawFocusIfNeeded: JSString = "drawFocusIfNeeded"
    @usableFromInline static let drawImage: JSString = "drawImage"
    @usableFromInline static let dropEffect: JSString = "dropEffect"
    @usableFromInline static let duration: JSString = "duration"
    @usableFromInline static let e: JSString = "e"
    @usableFromInline static let echoCancellation: JSString = "echoCancellation"
    @usableFromInline static let effectAllowed: JSString = "effectAllowed"
    @usableFromInline static let element: JSString = "element"
    @usableFromInline static let elementFromPoint: JSString = "elementFromPoint"
    @usableFromInline static let elements: JSString = "elements"
    @usableFromInline static let elementsFromPoint: JSString = "elementsFromPoint"
    @usableFromInline static let ellipse: JSString = "ellipse"
    @usableFromInline static let emHeightAscent: JSString = "emHeightAscent"
    @usableFromInline static let emHeightDescent: JSString = "emHeightDescent"
    @usableFromInline static let embeds: JSString = "embeds"
    @usableFromInline static let enable: JSString = "enable"
    @usableFromInline static let enabled: JSString = "enabled"
    @usableFromInline static let enabledPlugin: JSString = "enabledPlugin"
    @usableFromInline static let encode: JSString = "encode"
    @usableFromInline static let encodeQueueSize: JSString = "encodeQueueSize"
    @usableFromInline static let encoding: JSString = "encoding"
    @usableFromInline static let enctype: JSString = "enctype"
    @usableFromInline static let end: JSString = "end"
    @usableFromInline static let endContainer: JSString = "endContainer"
    @usableFromInline static let endOffset: JSString = "endOffset"
    @usableFromInline static let endTime: JSString = "endTime"
    @usableFromInline static let ended: JSString = "ended"
    @usableFromInline static let endings: JSString = "endings"
    @usableFromInline static let enqueue: JSString = "enqueue"
    @usableFromInline static let enterKeyHint: JSString = "enterKeyHint"
    @usableFromInline static let enumerateDevices: JSString = "enumerateDevices"
    @usableFromInline static let error: JSString = "error"
    @usableFromInline static let evaluate: JSString = "evaluate"
    @usableFromInline static let event: JSString = "event"
    @usableFromInline static let eventPhase: JSString = "eventPhase"
    @usableFromInline static let exact: JSString = "exact"
    @usableFromInline static let execCommand: JSString = "execCommand"
    @usableFromInline static let exponentialRampToValueAtTime: JSString = "exponentialRampToValueAtTime"
    @usableFromInline static let extends: JSString = "extends"
    @usableFromInline static let extensions: JSString = "extensions"
    @usableFromInline static let external: JSString = "external"
    @usableFromInline static let extractContents: JSString = "extractContents"
    @usableFromInline static let f: JSString = "f"
    @usableFromInline static let face: JSString = "face"
    @usableFromInline static let facingMode: JSString = "facingMode"
    @usableFromInline static let fastSeek: JSString = "fastSeek"
    @usableFromInline static let feedback: JSString = "feedback"
    @usableFromInline static let feedforward: JSString = "feedforward"
    @usableFromInline static let fetch: JSString = "fetch"
    @usableFromInline static let fftSize: JSString = "fftSize"
    @usableFromInline static let fgColor: JSString = "fgColor"
    @usableFromInline static let filename: JSString = "filename"
    @usableFromInline static let files: JSString = "files"
    @usableFromInline static let fill: JSString = "fill"
    @usableFromInline static let fillRect: JSString = "fillRect"
    @usableFromInline static let fillStyle: JSString = "fillStyle"
    @usableFromInline static let fillText: JSString = "fillText"
    @usableFromInline static let filter: JSString = "filter"
    @usableFromInline static let firstChild: JSString = "firstChild"
    @usableFromInline static let firstElementChild: JSString = "firstElementChild"
    @usableFromInline static let flatten: JSString = "flatten"
    @usableFromInline static let flipX: JSString = "flipX"
    @usableFromInline static let flipY: JSString = "flipY"
    @usableFromInline static let flush: JSString = "flush"
    @usableFromInline static let focus: JSString = "focus"
    @usableFromInline static let font: JSString = "font"
    @usableFromInline static let fontBoundingBoxAscent: JSString = "fontBoundingBoxAscent"
    @usableFromInline static let fontBoundingBoxDescent: JSString = "fontBoundingBoxDescent"
    @usableFromInline static let fontKerning: JSString = "fontKerning"
    @usableFromInline static let fontStretch: JSString = "fontStretch"
    @usableFromInline static let fontVariantCaps: JSString = "fontVariantCaps"
    @usableFromInline static let form: JSString = "form"
    @usableFromInline static let formAction: JSString = "formAction"
    @usableFromInline static let formData: JSString = "formData"
    @usableFromInline static let formEnctype: JSString = "formEnctype"
    @usableFromInline static let formMethod: JSString = "formMethod"
    @usableFromInline static let formNoValidate: JSString = "formNoValidate"
    @usableFromInline static let formTarget: JSString = "formTarget"
    @usableFromInline static let format: JSString = "format"
    @usableFromInline static let forms: JSString = "forms"
    @usableFromInline static let forward: JSString = "forward"
    @usableFromInline static let forwardX: JSString = "forwardX"
    @usableFromInline static let forwardY: JSString = "forwardY"
    @usableFromInline static let forwardZ: JSString = "forwardZ"
    @usableFromInline static let frame: JSString = "frame"
    @usableFromInline static let frameBorder: JSString = "frameBorder"
    @usableFromInline static let frameCount: JSString = "frameCount"
    @usableFromInline static let frameElement: JSString = "frameElement"
    @usableFromInline static let frameIndex: JSString = "frameIndex"
    @usableFromInline static let frameOffset: JSString = "frameOffset"
    @usableFromInline static let frameRate: JSString = "frameRate"
    @usableFromInline static let framerate: JSString = "framerate"
    @usableFromInline static let frames: JSString = "frames"
    @usableFromInline static let frequency: JSString = "frequency"
    @usableFromInline static let frequencyBinCount: JSString = "frequencyBinCount"
    @usableFromInline static let fromBox: JSString = "fromBox"
    @usableFromInline static let fromFloat32Array: JSString = "fromFloat32Array"
    @usableFromInline static let fromFloat64Array: JSString = "fromFloat64Array"
    @usableFromInline static let fromMatrix: JSString = "fromMatrix"
    @usableFromInline static let fromPoint: JSString = "fromPoint"
    @usableFromInline static let fromQuad: JSString = "fromQuad"
    @usableFromInline static let fromRect: JSString = "fromRect"
    @usableFromInline static let fullRange: JSString = "fullRange"
    @usableFromInline static let gain: JSString = "gain"
    @usableFromInline static let get: JSString = "get"
    @usableFromInline static let getAll: JSString = "getAll"
    @usableFromInline static let getAllResponseHeaders: JSString = "getAllResponseHeaders"
    @usableFromInline static let getAsFile: JSString = "getAsFile"
    @usableFromInline static let getAttribute: JSString = "getAttribute"
    @usableFromInline static let getAttributeNS: JSString = "getAttributeNS"
    @usableFromInline static let getAttributeNames: JSString = "getAttributeNames"
    @usableFromInline static let getAttributeNode: JSString = "getAttributeNode"
    @usableFromInline static let getAttributeNodeNS: JSString = "getAttributeNodeNS"
    @usableFromInline static let getAudioTracks: JSString = "getAudioTracks"
    @usableFromInline static let getBoundingClientRect: JSString = "getBoundingClientRect"
    @usableFromInline static let getBounds: JSString = "getBounds"
    @usableFromInline static let getBoxQuads: JSString = "getBoxQuads"
    @usableFromInline static let getByteFrequencyData: JSString = "getByteFrequencyData"
    @usableFromInline static let getByteTimeDomainData: JSString = "getByteTimeDomainData"
    @usableFromInline static let getCapabilities: JSString = "getCapabilities"
    @usableFromInline static let getChannelData: JSString = "getChannelData"
    @usableFromInline static let getClientRect: JSString = "getClientRect"
    @usableFromInline static let getClientRects: JSString = "getClientRects"
    @usableFromInline static let getConstraints: JSString = "getConstraints"
    @usableFromInline static let getContextAttributes: JSString = "getContextAttributes"
    @usableFromInline static let getCueById: JSString = "getCueById"
    @usableFromInline static let getData: JSString = "getData"
    @usableFromInline static let getElementById: JSString = "getElementById"
    @usableFromInline static let getElementsByClassName: JSString = "getElementsByClassName"
    @usableFromInline static let getElementsByName: JSString = "getElementsByName"
    @usableFromInline static let getElementsByTagName: JSString = "getElementsByTagName"
    @usableFromInline static let getElementsByTagNameNS: JSString = "getElementsByTagNameNS"
    @usableFromInline static let getFloatFrequencyData: JSString = "getFloatFrequencyData"
    @usableFromInline static let getFloatTimeDomainData: JSString = "getFloatTimeDomainData"
    @usableFromInline static let getFrequencyResponse: JSString = "getFrequencyResponse"
    @usableFromInline static let getImageData: JSString = "getImageData"
    @usableFromInline static let getLineDash: JSString = "getLineDash"
    @usableFromInline static let getModifierState: JSString = "getModifierState"
    @usableFromInline static let getNamedItemNS: JSString = "getNamedItemNS"
    @usableFromInline static let getOutputTimestamp: JSString = "getOutputTimestamp"
    @usableFromInline static let getParameter: JSString = "getParameter"
    @usableFromInline static let getReader: JSString = "getReader"
    @usableFromInline static let getRegistration: JSString = "getRegistration"
    @usableFromInline static let getRegistrations: JSString = "getRegistrations"
    @usableFromInline static let getResponseHeader: JSString = "getResponseHeader"
    @usableFromInline static let getRootNode: JSString = "getRootNode"
    @usableFromInline static let getSVGDocument: JSString = "getSVGDocument"
    @usableFromInline static let getSettings: JSString = "getSettings"
    @usableFromInline static let getStartDate: JSString = "getStartDate"
    @usableFromInline static let getState: JSString = "getState"
    @usableFromInline static let getSupportedConstraints: JSString = "getSupportedConstraints"
    @usableFromInline static let getTrackById: JSString = "getTrackById"
    @usableFromInline static let getTracks: JSString = "getTracks"
    @usableFromInline static let getTransform: JSString = "getTransform"
    @usableFromInline static let getUserMedia: JSString = "getUserMedia"
    @usableFromInline static let getVideoTracks: JSString = "getVideoTracks"
    @usableFromInline static let getWriter: JSString = "getWriter"
    @usableFromInline static let globalAlpha: JSString = "globalAlpha"
    @usableFromInline static let globalCompositeOperation: JSString = "globalCompositeOperation"
    @usableFromInline static let go: JSString = "go"
    @usableFromInline static let group: JSString = "group"
    @usableFromInline static let groupCollapsed: JSString = "groupCollapsed"
    @usableFromInline static let groupEnd: JSString = "groupEnd"
    @usableFromInline static let groupId: JSString = "groupId"
    @usableFromInline static let handled: JSString = "handled"
    @usableFromInline static let hangingBaseline: JSString = "hangingBaseline"
    @usableFromInline static let hardwareAcceleration: JSString = "hardwareAcceleration"
    @usableFromInline static let hardwareConcurrency: JSString = "hardwareConcurrency"
    @usableFromInline static let has: JSString = "has"
    @usableFromInline static let hasAttribute: JSString = "hasAttribute"
    @usableFromInline static let hasAttributeNS: JSString = "hasAttributeNS"
    @usableFromInline static let hasAttributes: JSString = "hasAttributes"
    @usableFromInline static let hasChildNodes: JSString = "hasChildNodes"
    @usableFromInline static let hasFeature: JSString = "hasFeature"
    @usableFromInline static let hasFocus: JSString = "hasFocus"
    @usableFromInline static let hash: JSString = "hash"
    @usableFromInline static let head: JSString = "head"
    @usableFromInline static let headerValue: JSString = "headerValue"
    @usableFromInline static let headers: JSString = "headers"
    @usableFromInline static let height: JSString = "height"
    @usableFromInline static let hidden: JSString = "hidden"
    @usableFromInline static let high: JSString = "high"
    @usableFromInline static let highWaterMark: JSString = "highWaterMark"
    @usableFromInline static let history: JSString = "history"
    @usableFromInline static let host: JSString = "host"
    @usableFromInline static let hostname: JSString = "hostname"
    @usableFromInline static let href: JSString = "href"
    @usableFromInline static let hreflang: JSString = "hreflang"
    @usableFromInline static let hspace: JSString = "hspace"
    @usableFromInline static let htmlFor: JSString = "htmlFor"
    @usableFromInline static let httpEquiv: JSString = "httpEquiv"
    @usableFromInline static let id: JSString = "id"
    @usableFromInline static let ideal: JSString = "ideal"
    @usableFromInline static let ideographicBaseline: JSString = "ideographicBaseline"
    @usableFromInline static let ignoreMethod: JSString = "ignoreMethod"
    @usableFromInline static let ignoreSearch: JSString = "ignoreSearch"
    @usableFromInline static let ignoreVary: JSString = "ignoreVary"
    @usableFromInline static let imag: JSString = "imag"
    @usableFromInline static let image: JSString = "image"
    @usableFromInline static let imageOrientation: JSString = "imageOrientation"
    @usableFromInline static let imageSizes: JSString = "imageSizes"
    @usableFromInline static let imageSmoothingEnabled: JSString = "imageSmoothingEnabled"
    @usableFromInline static let imageSmoothingQuality: JSString = "imageSmoothingQuality"
    @usableFromInline static let imageSrcset: JSString = "imageSrcset"
    @usableFromInline static let images: JSString = "images"
    @usableFromInline static let implementation: JSString = "implementation"
    @usableFromInline static let importNode: JSString = "importNode"
    @usableFromInline static let importStylesheet: JSString = "importStylesheet"
    @usableFromInline static let inBandMetadataTrackDispatchType: JSString = "inBandMetadataTrackDispatchType"
    @usableFromInline static let includeUncontrolled: JSString = "includeUncontrolled"
    @usableFromInline static let indeterminate: JSString = "indeterminate"
    @usableFromInline static let index: JSString = "index"
    @usableFromInline static let inert: JSString = "inert"
    @usableFromInline static let info: JSString = "info"
    @usableFromInline static let initCompositionEvent: JSString = "initCompositionEvent"
    @usableFromInline static let initCustomEvent: JSString = "initCustomEvent"
    @usableFromInline static let initEvent: JSString = "initEvent"
    @usableFromInline static let initKeyboardEvent: JSString = "initKeyboardEvent"
    @usableFromInline static let initMessageEvent: JSString = "initMessageEvent"
    @usableFromInline static let initMouseEvent: JSString = "initMouseEvent"
    @usableFromInline static let initMutationEvent: JSString = "initMutationEvent"
    @usableFromInline static let initStorageEvent: JSString = "initStorageEvent"
    @usableFromInline static let initUIEvent: JSString = "initUIEvent"
    @usableFromInline static let inline: JSString = "inline"
    @usableFromInline static let innerHeight: JSString = "innerHeight"
    @usableFromInline static let innerText: JSString = "innerText"
    @usableFromInline static let innerWidth: JSString = "innerWidth"
    @usableFromInline static let inputBuffer: JSString = "inputBuffer"
    @usableFromInline static let inputEncoding: JSString = "inputEncoding"
    @usableFromInline static let inputMode: JSString = "inputMode"
    @usableFromInline static let inputType: JSString = "inputType"
    @usableFromInline static let insertAdjacentElement: JSString = "insertAdjacentElement"
    @usableFromInline static let insertAdjacentText: JSString = "insertAdjacentText"
    @usableFromInline static let insertBefore: JSString = "insertBefore"
    @usableFromInline static let insertCell: JSString = "insertCell"
    @usableFromInline static let insertData: JSString = "insertData"
    @usableFromInline static let insertNode: JSString = "insertNode"
    @usableFromInline static let insertRow: JSString = "insertRow"
    @usableFromInline static let installing: JSString = "installing"
    @usableFromInline static let integrity: JSString = "integrity"
    @usableFromInline static let intersectsNode: JSString = "intersectsNode"
    @usableFromInline static let invalidIteratorState: JSString = "invalidIteratorState"
    @usableFromInline static let inverse: JSString = "inverse"
    @usableFromInline static let invertSelf: JSString = "invertSelf"
    @usableFromInline static let `is`: JSString = "is"
    @usableFromInline static let is2D: JSString = "is2D"
    @usableFromInline static let isComposing: JSString = "isComposing"
    @usableFromInline static let isConfigSupported: JSString = "isConfigSupported"
    @usableFromInline static let isConnected: JSString = "isConnected"
    @usableFromInline static let isContentEditable: JSString = "isContentEditable"
    @usableFromInline static let isContextLost: JSString = "isContextLost"
    @usableFromInline static let isDefaultNamespace: JSString = "isDefaultNamespace"
    @usableFromInline static let isEqualNode: JSString = "isEqualNode"
    @usableFromInline static let isHistoryNavigation: JSString = "isHistoryNavigation"
    @usableFromInline static let isIdentity: JSString = "isIdentity"
    @usableFromInline static let isMap: JSString = "isMap"
    @usableFromInline static let isPointInPath: JSString = "isPointInPath"
    @usableFromInline static let isPointInRange: JSString = "isPointInRange"
    @usableFromInline static let isPointInStroke: JSString = "isPointInStroke"
    @usableFromInline static let isReloadNavigation: JSString = "isReloadNavigation"
    @usableFromInline static let isSameNode: JSString = "isSameNode"
    @usableFromInline static let isSecureContext: JSString = "isSecureContext"
    @usableFromInline static let isTrusted: JSString = "isTrusted"
    @usableFromInline static let isTypeSupported: JSString = "isTypeSupported"
    @usableFromInline static let isVisible: JSString = "isVisible"
    @usableFromInline static let item: JSString = "item"
    @usableFromInline static let items: JSString = "items"
    @usableFromInline static let iterateNext: JSString = "iterateNext"
    @usableFromInline static let javaEnabled: JSString = "javaEnabled"
    @usableFromInline static let json: JSString = "json"
    @usableFromInline static let keepalive: JSString = "keepalive"
    @usableFromInline static let key: JSString = "key"
    @usableFromInline static let keyCode: JSString = "keyCode"
    @usableFromInline static let keyFrame: JSString = "keyFrame"
    @usableFromInline static let keys: JSString = "keys"
    @usableFromInline static let kind: JSString = "kind"
    @usableFromInline static let knee: JSString = "knee"
    @usableFromInline static let label: JSString = "label"
    @usableFromInline static let labels: JSString = "labels"
    @usableFromInline static let lang: JSString = "lang"
    @usableFromInline static let language: JSString = "language"
    @usableFromInline static let languages: JSString = "languages"
    @usableFromInline static let lastChild: JSString = "lastChild"
    @usableFromInline static let lastElementChild: JSString = "lastElementChild"
    @usableFromInline static let lastEventId: JSString = "lastEventId"
    @usableFromInline static let lastModified: JSString = "lastModified"
    @usableFromInline static let latency: JSString = "latency"
    @usableFromInline static let latencyHint: JSString = "latencyHint"
    @usableFromInline static let latencyMode: JSString = "latencyMode"
    @usableFromInline static let layout: JSString = "layout"
    @usableFromInline static let left: JSString = "left"
    @usableFromInline static let length: JSString = "length"
    @usableFromInline static let lengthComputable: JSString = "lengthComputable"
    @usableFromInline static let letterSpacing: JSString = "letterSpacing"
    @usableFromInline static let lineCap: JSString = "lineCap"
    @usableFromInline static let lineDashOffset: JSString = "lineDashOffset"
    @usableFromInline static let lineJoin: JSString = "lineJoin"
    @usableFromInline static let lineTo: JSString = "lineTo"
    @usableFromInline static let lineWidth: JSString = "lineWidth"
    @usableFromInline static let linearRampToValueAtTime: JSString = "linearRampToValueAtTime"
    @usableFromInline static let lineno: JSString = "lineno"
    @usableFromInline static let link: JSString = "link"
    @usableFromInline static let linkColor: JSString = "linkColor"
    @usableFromInline static let links: JSString = "links"
    @usableFromInline static let list: JSString = "list"
    @usableFromInline static let listener: JSString = "listener"
    @usableFromInline static let load: JSString = "load"
    @usableFromInline static let loaded: JSString = "loaded"
    @usableFromInline static let loading: JSString = "loading"
    @usableFromInline static let localName: JSString = "localName"
    @usableFromInline static let localStorage: JSString = "localStorage"
    @usableFromInline static let location: JSString = "location"
    @usableFromInline static let locationbar: JSString = "locationbar"
    @usableFromInline static let locked: JSString = "locked"
    @usableFromInline static let log: JSString = "log"
    @usableFromInline static let longDesc: JSString = "longDesc"
    @usableFromInline static let lookupNamespaceURI: JSString = "lookupNamespaceURI"
    @usableFromInline static let lookupPrefix: JSString = "lookupPrefix"
    @usableFromInline static let loop: JSString = "loop"
    @usableFromInline static let loopEnd: JSString = "loopEnd"
    @usableFromInline static let loopStart: JSString = "loopStart"
    @usableFromInline static let low: JSString = "low"
    @usableFromInline static let lowsrc: JSString = "lowsrc"
    @usableFromInline static let m11: JSString = "m11"
    @usableFromInline static let m12: JSString = "m12"
    @usableFromInline static let m13: JSString = "m13"
    @usableFromInline static let m14: JSString = "m14"
    @usableFromInline static let m21: JSString = "m21"
    @usableFromInline static let m22: JSString = "m22"
    @usableFromInline static let m23: JSString = "m23"
    @usableFromInline static let m24: JSString = "m24"
    @usableFromInline static let m31: JSString = "m31"
    @usableFromInline static let m32: JSString = "m32"
    @usableFromInline static let m33: JSString = "m33"
    @usableFromInline static let m34: JSString = "m34"
    @usableFromInline static let m41: JSString = "m41"
    @usableFromInline static let m42: JSString = "m42"
    @usableFromInline static let m43: JSString = "m43"
    @usableFromInline static let m44: JSString = "m44"
    @usableFromInline static let marginHeight: JSString = "marginHeight"
    @usableFromInline static let marginWidth: JSString = "marginWidth"
    @usableFromInline static let match: JSString = "match"
    @usableFromInline static let matchAll: JSString = "matchAll"
    @usableFromInline static let matchMedia: JSString = "matchMedia"
    @usableFromInline static let matches: JSString = "matches"
    @usableFromInline static let matrix: JSString = "matrix"
    @usableFromInline static let matrixTransform: JSString = "matrixTransform"
    @usableFromInline static let max: JSString = "max"
    @usableFromInline static let maxChannelCount: JSString = "maxChannelCount"
    @usableFromInline static let maxDecibels: JSString = "maxDecibels"
    @usableFromInline static let maxDelayTime: JSString = "maxDelayTime"
    @usableFromInline static let maxDistance: JSString = "maxDistance"
    @usableFromInline static let maxLength: JSString = "maxLength"
    @usableFromInline static let maxValue: JSString = "maxValue"
    @usableFromInline static let measureText: JSString = "measureText"
    @usableFromInline static let media: JSString = "media"
    @usableFromInline static let mediaDevices: JSString = "mediaDevices"
    @usableFromInline static let mediaElement: JSString = "mediaElement"
    @usableFromInline static let mediaStream: JSString = "mediaStream"
    @usableFromInline static let mediaStreamTrack: JSString = "mediaStreamTrack"
    @usableFromInline static let menubar: JSString = "menubar"
    @usableFromInline static let message: JSString = "message"
    @usableFromInline static let metaKey: JSString = "metaKey"
    @usableFromInline static let method: JSString = "method"
    @usableFromInline static let mimeType: JSString = "mimeType"
    @usableFromInline static let mimeTypes: JSString = "mimeTypes"
    @usableFromInline static let min: JSString = "min"
    @usableFromInline static let minDecibels: JSString = "minDecibels"
    @usableFromInline static let minLength: JSString = "minLength"
    @usableFromInline static let minValue: JSString = "minValue"
    @usableFromInline static let miterLimit: JSString = "miterLimit"
    @usableFromInline static let mode: JSString = "mode"
    @usableFromInline static let modifierAltGraph: JSString = "modifierAltGraph"
    @usableFromInline static let modifierCapsLock: JSString = "modifierCapsLock"
    @usableFromInline static let modifierFn: JSString = "modifierFn"
    @usableFromInline static let modifierFnLock: JSString = "modifierFnLock"
    @usableFromInline static let modifierHyper: JSString = "modifierHyper"
    @usableFromInline static let modifierNumLock: JSString = "modifierNumLock"
    @usableFromInline static let modifierScrollLock: JSString = "modifierScrollLock"
    @usableFromInline static let modifierSuper: JSString = "modifierSuper"
    @usableFromInline static let modifierSymbol: JSString = "modifierSymbol"
    @usableFromInline static let modifierSymbolLock: JSString = "modifierSymbolLock"
    @usableFromInline static let moveBy: JSString = "moveBy"
    @usableFromInline static let moveTo: JSString = "moveTo"
    @usableFromInline static let multiple: JSString = "multiple"
    @usableFromInline static let multiply: JSString = "multiply"
    @usableFromInline static let multiplySelf: JSString = "multiplySelf"
    @usableFromInline static let muted: JSString = "muted"
    @usableFromInline static let name: JSString = "name"
    @usableFromInline static let namedItem: JSString = "namedItem"
    @usableFromInline static let namespaceURI: JSString = "namespaceURI"
    @usableFromInline static let naturalHeight: JSString = "naturalHeight"
    @usableFromInline static let naturalWidth: JSString = "naturalWidth"
    @usableFromInline static let navigationPreload: JSString = "navigationPreload"
    @usableFromInline static let navigator: JSString = "navigator"
    @usableFromInline static let networkState: JSString = "networkState"
    @usableFromInline static let newURL: JSString = "newURL"
    @usableFromInline static let newValue: JSString = "newValue"
    @usableFromInline static let nextElementSibling: JSString = "nextElementSibling"
    @usableFromInline static let nextNode: JSString = "nextNode"
    @usableFromInline static let nextSibling: JSString = "nextSibling"
    @usableFromInline static let noHref: JSString = "noHref"
    @usableFromInline static let noModule: JSString = "noModule"
    @usableFromInline static let noResize: JSString = "noResize"
    @usableFromInline static let noShade: JSString = "noShade"
    @usableFromInline static let noValidate: JSString = "noValidate"
    @usableFromInline static let noWrap: JSString = "noWrap"
    @usableFromInline static let nodeName: JSString = "nodeName"
    @usableFromInline static let nodeType: JSString = "nodeType"
    @usableFromInline static let nodeValue: JSString = "nodeValue"
    @usableFromInline static let noiseSuppression: JSString = "noiseSuppression"
    @usableFromInline static let nonce: JSString = "nonce"
    @usableFromInline static let normalize: JSString = "normalize"
    @usableFromInline static let now: JSString = "now"
    @usableFromInline static let numberOfChannels: JSString = "numberOfChannels"
    @usableFromInline static let numberOfFrames: JSString = "numberOfFrames"
    @usableFromInline static let numberOfInputs: JSString = "numberOfInputs"
    @usableFromInline static let numberOfOutputs: JSString = "numberOfOutputs"
    @usableFromInline static let numberValue: JSString = "numberValue"
    @usableFromInline static let observe: JSString = "observe"
    @usableFromInline static let offset: JSString = "offset"
    @usableFromInline static let offsetHeight: JSString = "offsetHeight"
    @usableFromInline static let offsetLeft: JSString = "offsetLeft"
    @usableFromInline static let offsetNode: JSString = "offsetNode"
    @usableFromInline static let offsetParent: JSString = "offsetParent"
    @usableFromInline static let offsetTop: JSString = "offsetTop"
    @usableFromInline static let offsetWidth: JSString = "offsetWidth"
    @usableFromInline static let offsetX: JSString = "offsetX"
    @usableFromInline static let offsetY: JSString = "offsetY"
    @usableFromInline static let ok: JSString = "ok"
    @usableFromInline static let oldURL: JSString = "oldURL"
    @usableFromInline static let oldValue: JSString = "oldValue"
    @usableFromInline static let onLine: JSString = "onLine"
    @usableFromInline static let onabort: JSString = "onabort"
    @usableFromInline static let onaddtrack: JSString = "onaddtrack"
    @usableFromInline static let onafterprint: JSString = "onafterprint"
    @usableFromInline static let onaudioprocess: JSString = "onaudioprocess"
    @usableFromInline static let onauxclick: JSString = "onauxclick"
    @usableFromInline static let onbeforeprint: JSString = "onbeforeprint"
    @usableFromInline static let onbeforeunload: JSString = "onbeforeunload"
    @usableFromInline static let onblur: JSString = "onblur"
    @usableFromInline static let oncancel: JSString = "oncancel"
    @usableFromInline static let oncanplay: JSString = "oncanplay"
    @usableFromInline static let oncanplaythrough: JSString = "oncanplaythrough"
    @usableFromInline static let once: JSString = "once"
    @usableFromInline static let onchange: JSString = "onchange"
    @usableFromInline static let onclick: JSString = "onclick"
    @usableFromInline static let onclose: JSString = "onclose"
    @usableFromInline static let oncomplete: JSString = "oncomplete"
    @usableFromInline static let oncontextlost: JSString = "oncontextlost"
    @usableFromInline static let oncontextmenu: JSString = "oncontextmenu"
    @usableFromInline static let oncontextrestored: JSString = "oncontextrestored"
    @usableFromInline static let oncontrollerchange: JSString = "oncontrollerchange"
    @usableFromInline static let oncopy: JSString = "oncopy"
    @usableFromInline static let oncuechange: JSString = "oncuechange"
    @usableFromInline static let oncut: JSString = "oncut"
    @usableFromInline static let ondataavailable: JSString = "ondataavailable"
    @usableFromInline static let ondblclick: JSString = "ondblclick"
    @usableFromInline static let ondevicechange: JSString = "ondevicechange"
    @usableFromInline static let ondrag: JSString = "ondrag"
    @usableFromInline static let ondragend: JSString = "ondragend"
    @usableFromInline static let ondragenter: JSString = "ondragenter"
    @usableFromInline static let ondragleave: JSString = "ondragleave"
    @usableFromInline static let ondragover: JSString = "ondragover"
    @usableFromInline static let ondragstart: JSString = "ondragstart"
    @usableFromInline static let ondrop: JSString = "ondrop"
    @usableFromInline static let ondurationchange: JSString = "ondurationchange"
    @usableFromInline static let onemptied: JSString = "onemptied"
    @usableFromInline static let onended: JSString = "onended"
    @usableFromInline static let onenter: JSString = "onenter"
    @usableFromInline static let onerror: JSString = "onerror"
    @usableFromInline static let onexit: JSString = "onexit"
    @usableFromInline static let onfocus: JSString = "onfocus"
    @usableFromInline static let onformdata: JSString = "onformdata"
    @usableFromInline static let onhashchange: JSString = "onhashchange"
    @usableFromInline static let oninput: JSString = "oninput"
    @usableFromInline static let oninvalid: JSString = "oninvalid"
    @usableFromInline static let onkeydown: JSString = "onkeydown"
    @usableFromInline static let onkeypress: JSString = "onkeypress"
    @usableFromInline static let onkeyup: JSString = "onkeyup"
    @usableFromInline static let onlanguagechange: JSString = "onlanguagechange"
    @usableFromInline static let onload: JSString = "onload"
    @usableFromInline static let onloadeddata: JSString = "onloadeddata"
    @usableFromInline static let onloadedmetadata: JSString = "onloadedmetadata"
    @usableFromInline static let onloadend: JSString = "onloadend"
    @usableFromInline static let onloadstart: JSString = "onloadstart"
    @usableFromInline static let onmessage: JSString = "onmessage"
    @usableFromInline static let onmessageerror: JSString = "onmessageerror"
    @usableFromInline static let onmousedown: JSString = "onmousedown"
    @usableFromInline static let onmouseenter: JSString = "onmouseenter"
    @usableFromInline static let onmouseleave: JSString = "onmouseleave"
    @usableFromInline static let onmousemove: JSString = "onmousemove"
    @usableFromInline static let onmouseout: JSString = "onmouseout"
    @usableFromInline static let onmouseover: JSString = "onmouseover"
    @usableFromInline static let onmouseup: JSString = "onmouseup"
    @usableFromInline static let onmute: JSString = "onmute"
    @usableFromInline static let onoffline: JSString = "onoffline"
    @usableFromInline static let ononline: JSString = "ononline"
    @usableFromInline static let onopen: JSString = "onopen"
    @usableFromInline static let onpagehide: JSString = "onpagehide"
    @usableFromInline static let onpageshow: JSString = "onpageshow"
    @usableFromInline static let onpaste: JSString = "onpaste"
    @usableFromInline static let onpause: JSString = "onpause"
    @usableFromInline static let onplay: JSString = "onplay"
    @usableFromInline static let onplaying: JSString = "onplaying"
    @usableFromInline static let onpopstate: JSString = "onpopstate"
    @usableFromInline static let onprocessorerror: JSString = "onprocessorerror"
    @usableFromInline static let onprogress: JSString = "onprogress"
    @usableFromInline static let onratechange: JSString = "onratechange"
    @usableFromInline static let onreadystatechange: JSString = "onreadystatechange"
    @usableFromInline static let onrejectionhandled: JSString = "onrejectionhandled"
    @usableFromInline static let onremovetrack: JSString = "onremovetrack"
    @usableFromInline static let onreset: JSString = "onreset"
    @usableFromInline static let onresize: JSString = "onresize"
    @usableFromInline static let onresume: JSString = "onresume"
    @usableFromInline static let onscroll: JSString = "onscroll"
    @usableFromInline static let onsecuritypolicyviolation: JSString = "onsecuritypolicyviolation"
    @usableFromInline static let onseeked: JSString = "onseeked"
    @usableFromInline static let onseeking: JSString = "onseeking"
    @usableFromInline static let onselect: JSString = "onselect"
    @usableFromInline static let onslotchange: JSString = "onslotchange"
    @usableFromInline static let onstalled: JSString = "onstalled"
    @usableFromInline static let onstart: JSString = "onstart"
    @usableFromInline static let onstatechange: JSString = "onstatechange"
    @usableFromInline static let onstop: JSString = "onstop"
    @usableFromInline static let onstorage: JSString = "onstorage"
    @usableFromInline static let onsubmit: JSString = "onsubmit"
    @usableFromInline static let onsuspend: JSString = "onsuspend"
    @usableFromInline static let ontimeout: JSString = "ontimeout"
    @usableFromInline static let ontimeupdate: JSString = "ontimeupdate"
    @usableFromInline static let ontoggle: JSString = "ontoggle"
    @usableFromInline static let onunhandledrejection: JSString = "onunhandledrejection"
    @usableFromInline static let onunload: JSString = "onunload"
    @usableFromInline static let onunmute: JSString = "onunmute"
    @usableFromInline static let onupdatefound: JSString = "onupdatefound"
    @usableFromInline static let onvisibilitychange: JSString = "onvisibilitychange"
    @usableFromInline static let onvolumechange: JSString = "onvolumechange"
    @usableFromInline static let onwaiting: JSString = "onwaiting"
    @usableFromInline static let onwebkitanimationend: JSString = "onwebkitanimationend"
    @usableFromInline static let onwebkitanimationiteration: JSString = "onwebkitanimationiteration"
    @usableFromInline static let onwebkitanimationstart: JSString = "onwebkitanimationstart"
    @usableFromInline static let onwebkittransitionend: JSString = "onwebkittransitionend"
    @usableFromInline static let onwheel: JSString = "onwheel"
    @usableFromInline static let open: JSString = "open"
    @usableFromInline static let opener: JSString = "opener"
    @usableFromInline static let optimizeForLatency: JSString = "optimizeForLatency"
    @usableFromInline static let optimum: JSString = "optimum"
    @usableFromInline static let options: JSString = "options"
    @usableFromInline static let orientationX: JSString = "orientationX"
    @usableFromInline static let orientationY: JSString = "orientationY"
    @usableFromInline static let orientationZ: JSString = "orientationZ"
    @usableFromInline static let origin: JSString = "origin"
    @usableFromInline static let originAgentCluster: JSString = "originAgentCluster"
    @usableFromInline static let oscpu: JSString = "oscpu"
    @usableFromInline static let outerHeight: JSString = "outerHeight"
    @usableFromInline static let outerText: JSString = "outerText"
    @usableFromInline static let outerWidth: JSString = "outerWidth"
    @usableFromInline static let output: JSString = "output"
    @usableFromInline static let outputBuffer: JSString = "outputBuffer"
    @usableFromInline static let outputChannelCount: JSString = "outputChannelCount"
    @usableFromInline static let outputLatency: JSString = "outputLatency"
    @usableFromInline static let overrideMimeType: JSString = "overrideMimeType"
    @usableFromInline static let oversample: JSString = "oversample"
    @usableFromInline static let ownerDocument: JSString = "ownerDocument"
    @usableFromInline static let ownerElement: JSString = "ownerElement"
    @usableFromInline static let p1: JSString = "p1"
    @usableFromInline static let p2: JSString = "p2"
    @usableFromInline static let p3: JSString = "p3"
    @usableFromInline static let p4: JSString = "p4"
    @usableFromInline static let pageX: JSString = "pageX"
    @usableFromInline static let pageXOffset: JSString = "pageXOffset"
    @usableFromInline static let pageY: JSString = "pageY"
    @usableFromInline static let pageYOffset: JSString = "pageYOffset"
    @usableFromInline static let pan: JSString = "pan"
    @usableFromInline static let panTiltZoom: JSString = "panTiltZoom"
    @usableFromInline static let panningModel: JSString = "panningModel"
    @usableFromInline static let parameterData: JSString = "parameterData"
    @usableFromInline static let parameters: JSString = "parameters"
    @usableFromInline static let parent: JSString = "parent"
    @usableFromInline static let parentElement: JSString = "parentElement"
    @usableFromInline static let parentNode: JSString = "parentNode"
    @usableFromInline static let parseFromString: JSString = "parseFromString"
    @usableFromInline static let passive: JSString = "passive"
    @usableFromInline static let password: JSString = "password"
    @usableFromInline static let pathname: JSString = "pathname"
    @usableFromInline static let pattern: JSString = "pattern"
    @usableFromInline static let patternMismatch: JSString = "patternMismatch"
    @usableFromInline static let pause: JSString = "pause"
    @usableFromInline static let pauseOnExit: JSString = "pauseOnExit"
    @usableFromInline static let paused: JSString = "paused"
    @usableFromInline static let pdfViewerEnabled: JSString = "pdfViewerEnabled"
    @usableFromInline static let performance: JSString = "performance"
    @usableFromInline static let performanceTime: JSString = "performanceTime"
    @usableFromInline static let periodicWave: JSString = "periodicWave"
    @usableFromInline static let persisted: JSString = "persisted"
    @usableFromInline static let personalbar: JSString = "personalbar"
    @usableFromInline static let ping: JSString = "ping"
    @usableFromInline static let pipeThrough: JSString = "pipeThrough"
    @usableFromInline static let pipeTo: JSString = "pipeTo"
    @usableFromInline static let pixelDepth: JSString = "pixelDepth"
    @usableFromInline static let placeholder: JSString = "placeholder"
    @usableFromInline static let planeIndex: JSString = "planeIndex"
    @usableFromInline static let platform: JSString = "platform"
    @usableFromInline static let play: JSString = "play"
    @usableFromInline static let playbackRate: JSString = "playbackRate"
    @usableFromInline static let playbackTime: JSString = "playbackTime"
    @usableFromInline static let played: JSString = "played"
    @usableFromInline static let playsInline: JSString = "playsInline"
    @usableFromInline static let plugins: JSString = "plugins"
    @usableFromInline static let pointerBeforeReferenceNode: JSString = "pointerBeforeReferenceNode"
    @usableFromInline static let port: JSString = "port"
    @usableFromInline static let port1: JSString = "port1"
    @usableFromInline static let port2: JSString = "port2"
    @usableFromInline static let ports: JSString = "ports"
    @usableFromInline static let position: JSString = "position"
    @usableFromInline static let positionX: JSString = "positionX"
    @usableFromInline static let positionY: JSString = "positionY"
    @usableFromInline static let positionZ: JSString = "positionZ"
    @usableFromInline static let postMessage: JSString = "postMessage"
    @usableFromInline static let poster: JSString = "poster"
    @usableFromInline static let preMultiplySelf: JSString = "preMultiplySelf"
    @usableFromInline static let preferAnimation: JSString = "preferAnimation"
    @usableFromInline static let prefix: JSString = "prefix"
    @usableFromInline static let preload: JSString = "preload"
    @usableFromInline static let preloadResponse: JSString = "preloadResponse"
    @usableFromInline static let premultiplyAlpha: JSString = "premultiplyAlpha"
    @usableFromInline static let prepend: JSString = "prepend"
    @usableFromInline static let preservesPitch: JSString = "preservesPitch"
    @usableFromInline static let prevValue: JSString = "prevValue"
    @usableFromInline static let preventAbort: JSString = "preventAbort"
    @usableFromInline static let preventCancel: JSString = "preventCancel"
    @usableFromInline static let preventClose: JSString = "preventClose"
    @usableFromInline static let preventDefault: JSString = "preventDefault"
    @usableFromInline static let preventScroll: JSString = "preventScroll"
    @usableFromInline static let previousElementSibling: JSString = "previousElementSibling"
    @usableFromInline static let previousNode: JSString = "previousNode"
    @usableFromInline static let previousSibling: JSString = "previousSibling"
    @usableFromInline static let primaries: JSString = "primaries"
    @usableFromInline static let print: JSString = "print"
    @usableFromInline static let processorOptions: JSString = "processorOptions"
    @usableFromInline static let product: JSString = "product"
    @usableFromInline static let productSub: JSString = "productSub"
    @usableFromInline static let promise: JSString = "promise"
    @usableFromInline static let prompt: JSString = "prompt"
    @usableFromInline static let `protocol`: JSString = "protocol"
    @usableFromInline static let pseudo: JSString = "pseudo"
    @usableFromInline static let publicId: JSString = "publicId"
    @usableFromInline static let pull: JSString = "pull"
    @usableFromInline static let pushState: JSString = "pushState"
    @usableFromInline static let put: JSString = "put"
    @usableFromInline static let putImageData: JSString = "putImageData"
    @usableFromInline static let quadraticCurveTo: JSString = "quadraticCurveTo"
    @usableFromInline static let quality: JSString = "quality"
    @usableFromInline static let queryCommandEnabled: JSString = "queryCommandEnabled"
    @usableFromInline static let queryCommandIndeterm: JSString = "queryCommandIndeterm"
    @usableFromInline static let queryCommandState: JSString = "queryCommandState"
    @usableFromInline static let queryCommandSupported: JSString = "queryCommandSupported"
    @usableFromInline static let queryCommandValue: JSString = "queryCommandValue"
    @usableFromInline static let querySelector: JSString = "querySelector"
    @usableFromInline static let querySelectorAll: JSString = "querySelectorAll"
    @usableFromInline static let rangeOverflow: JSString = "rangeOverflow"
    @usableFromInline static let rangeUnderflow: JSString = "rangeUnderflow"
    @usableFromInline static let ratio: JSString = "ratio"
    @usableFromInline static let read: JSString = "read"
    @usableFromInline static let readAsArrayBuffer: JSString = "readAsArrayBuffer"
    @usableFromInline static let readAsBinaryString: JSString = "readAsBinaryString"
    @usableFromInline static let readAsDataURL: JSString = "readAsDataURL"
    @usableFromInline static let readAsText: JSString = "readAsText"
    @usableFromInline static let readOnly: JSString = "readOnly"
    @usableFromInline static let readable: JSString = "readable"
    @usableFromInline static let readableType: JSString = "readableType"
    @usableFromInline static let ready: JSString = "ready"
    @usableFromInline static let readyState: JSString = "readyState"
    @usableFromInline static let real: JSString = "real"
    @usableFromInline static let reason: JSString = "reason"
    @usableFromInline static let rect: JSString = "rect"
    @usableFromInline static let redirect: JSString = "redirect"
    @usableFromInline static let redirected: JSString = "redirected"
    @usableFromInline static let reduction: JSString = "reduction"
    @usableFromInline static let refDistance: JSString = "refDistance"
    @usableFromInline static let referenceNode: JSString = "referenceNode"
    @usableFromInline static let referrer: JSString = "referrer"
    @usableFromInline static let referrerPolicy: JSString = "referrerPolicy"
    @usableFromInline static let refresh: JSString = "refresh"
    @usableFromInline static let register: JSString = "register"
    @usableFromInline static let registerProtocolHandler: JSString = "registerProtocolHandler"
    @usableFromInline static let rel: JSString = "rel"
    @usableFromInline static let relList: JSString = "relList"
    @usableFromInline static let relatedNode: JSString = "relatedNode"
    @usableFromInline static let relatedTarget: JSString = "relatedTarget"
    @usableFromInline static let relativeTo: JSString = "relativeTo"
    @usableFromInline static let release: JSString = "release"
    @usableFromInline static let releaseEvents: JSString = "releaseEvents"
    @usableFromInline static let releaseLock: JSString = "releaseLock"
    @usableFromInline static let reload: JSString = "reload"
    @usableFromInline static let remove: JSString = "remove"
    @usableFromInline static let removeAttribute: JSString = "removeAttribute"
    @usableFromInline static let removeAttributeNS: JSString = "removeAttributeNS"
    @usableFromInline static let removeAttributeNode: JSString = "removeAttributeNode"
    @usableFromInline static let removeChild: JSString = "removeChild"
    @usableFromInline static let removeCue: JSString = "removeCue"
    @usableFromInline static let removeNamedItem: JSString = "removeNamedItem"
    @usableFromInline static let removeNamedItemNS: JSString = "removeNamedItemNS"
    @usableFromInline static let removeParameter: JSString = "removeParameter"
    @usableFromInline static let removeTrack: JSString = "removeTrack"
    @usableFromInline static let removedNodes: JSString = "removedNodes"
    @usableFromInline static let renderedBuffer: JSString = "renderedBuffer"
    @usableFromInline static let `repeat`: JSString = "repeat"
    @usableFromInline static let repetitionCount: JSString = "repetitionCount"
    @usableFromInline static let replace: JSString = "replace"
    @usableFromInline static let replaceChild: JSString = "replaceChild"
    @usableFromInline static let replaceChildren: JSString = "replaceChildren"
    @usableFromInline static let replaceData: JSString = "replaceData"
    @usableFromInline static let replaceState: JSString = "replaceState"
    @usableFromInline static let replaceWith: JSString = "replaceWith"
    @usableFromInline static let replacesClientId: JSString = "replacesClientId"
    @usableFromInline static let reportError: JSString = "reportError"
    @usableFromInline static let reportValidity: JSString = "reportValidity"
    @usableFromInline static let request: JSString = "request"
    @usableFromInline static let requestData: JSString = "requestData"
    @usableFromInline static let requestSubmit: JSString = "requestSubmit"
    @usableFromInline static let required: JSString = "required"
    @usableFromInline static let reset: JSString = "reset"
    @usableFromInline static let resetTransform: JSString = "resetTransform"
    @usableFromInline static let resizeBy: JSString = "resizeBy"
    @usableFromInline static let resizeHeight: JSString = "resizeHeight"
    @usableFromInline static let resizeMode: JSString = "resizeMode"
    @usableFromInline static let resizeQuality: JSString = "resizeQuality"
    @usableFromInline static let resizeTo: JSString = "resizeTo"
    @usableFromInline static let resizeWidth: JSString = "resizeWidth"
    @usableFromInline static let respond: JSString = "respond"
    @usableFromInline static let respondWithNewView: JSString = "respondWithNewView"
    @usableFromInline static let response: JSString = "response"
    @usableFromInline static let responseText: JSString = "responseText"
    @usableFromInline static let responseType: JSString = "responseType"
    @usableFromInline static let responseURL: JSString = "responseURL"
    @usableFromInline static let responseXML: JSString = "responseXML"
    @usableFromInline static let restore: JSString = "restore"
    @usableFromInline static let result: JSString = "result"
    @usableFromInline static let resultType: JSString = "resultType"
    @usableFromInline static let resultingClientId: JSString = "resultingClientId"
    @usableFromInline static let resume: JSString = "resume"
    @usableFromInline static let returnValue: JSString = "returnValue"
    @usableFromInline static let rev: JSString = "rev"
    @usableFromInline static let reversed: JSString = "reversed"
    @usableFromInline static let revokeObjectURL: JSString = "revokeObjectURL"
    @usableFromInline static let right: JSString = "right"
    @usableFromInline static let role: JSString = "role"
    @usableFromInline static let rolloffFactor: JSString = "rolloffFactor"
    @usableFromInline static let root: JSString = "root"
    @usableFromInline static let rotate: JSString = "rotate"
    @usableFromInline static let rotateAxisAngle: JSString = "rotateAxisAngle"
    @usableFromInline static let rotateAxisAngleSelf: JSString = "rotateAxisAngleSelf"
    @usableFromInline static let rotateFromVector: JSString = "rotateFromVector"
    @usableFromInline static let rotateFromVectorSelf: JSString = "rotateFromVectorSelf"
    @usableFromInline static let rotateSelf: JSString = "rotateSelf"
    @usableFromInline static let roundRect: JSString = "roundRect"
    @usableFromInline static let rowIndex: JSString = "rowIndex"
    @usableFromInline static let rowSpan: JSString = "rowSpan"
    @usableFromInline static let rows: JSString = "rows"
    @usableFromInline static let rules: JSString = "rules"
    @usableFromInline static let sampleRate: JSString = "sampleRate"
    @usableFromInline static let sampleSize: JSString = "sampleSize"
    @usableFromInline static let sandbox: JSString = "sandbox"
    @usableFromInline static let save: JSString = "save"
    @usableFromInline static let scalabilityMode: JSString = "scalabilityMode"
    @usableFromInline static let scale: JSString = "scale"
    @usableFromInline static let scale3d: JSString = "scale3d"
    @usableFromInline static let scale3dSelf: JSString = "scale3dSelf"
    @usableFromInline static let scaleNonUniform: JSString = "scaleNonUniform"
    @usableFromInline static let scaleSelf: JSString = "scaleSelf"
    @usableFromInline static let scheme: JSString = "scheme"
    @usableFromInline static let scope: JSString = "scope"
    @usableFromInline static let screen: JSString = "screen"
    @usableFromInline static let screenLeft: JSString = "screenLeft"
    @usableFromInline static let screenTop: JSString = "screenTop"
    @usableFromInline static let screenX: JSString = "screenX"
    @usableFromInline static let screenY: JSString = "screenY"
    @usableFromInline static let scriptURL: JSString = "scriptURL"
    @usableFromInline static let scripts: JSString = "scripts"
    @usableFromInline static let scroll: JSString = "scroll"
    @usableFromInline static let scrollAmount: JSString = "scrollAmount"
    @usableFromInline static let scrollBy: JSString = "scrollBy"
    @usableFromInline static let scrollDelay: JSString = "scrollDelay"
    @usableFromInline static let scrollHeight: JSString = "scrollHeight"
    @usableFromInline static let scrollIntoView: JSString = "scrollIntoView"
    @usableFromInline static let scrollLeft: JSString = "scrollLeft"
    @usableFromInline static let scrollPathIntoView: JSString = "scrollPathIntoView"
    @usableFromInline static let scrollRestoration: JSString = "scrollRestoration"
    @usableFromInline static let scrollTo: JSString = "scrollTo"
    @usableFromInline static let scrollTop: JSString = "scrollTop"
    @usableFromInline static let scrollWidth: JSString = "scrollWidth"
    @usableFromInline static let scrollX: JSString = "scrollX"
    @usableFromInline static let scrollY: JSString = "scrollY"
    @usableFromInline static let scrollbars: JSString = "scrollbars"
    @usableFromInline static let scrolling: JSString = "scrolling"
    @usableFromInline static let scrollingElement: JSString = "scrollingElement"
    @usableFromInline static let search: JSString = "search"
    @usableFromInline static let searchParams: JSString = "searchParams"
    @usableFromInline static let sectionRowIndex: JSString = "sectionRowIndex"
    @usableFromInline static let seekable: JSString = "seekable"
    @usableFromInline static let seeking: JSString = "seeking"
    @usableFromInline static let select: JSString = "select"
    @usableFromInline static let selectNode: JSString = "selectNode"
    @usableFromInline static let selectNodeContents: JSString = "selectNodeContents"
    @usableFromInline static let selected: JSString = "selected"
    @usableFromInline static let selectedIndex: JSString = "selectedIndex"
    @usableFromInline static let selectedOptions: JSString = "selectedOptions"
    @usableFromInline static let selectedTrack: JSString = "selectedTrack"
    @usableFromInline static let selectionDirection: JSString = "selectionDirection"
    @usableFromInline static let selectionEnd: JSString = "selectionEnd"
    @usableFromInline static let selectionStart: JSString = "selectionStart"
    @usableFromInline static let send: JSString = "send"
    @usableFromInline static let serviceWorker: JSString = "serviceWorker"
    @usableFromInline static let sessionStorage: JSString = "sessionStorage"
    @usableFromInline static let set: JSString = "set"
    @usableFromInline static let setAttribute: JSString = "setAttribute"
    @usableFromInline static let setAttributeNS: JSString = "setAttributeNS"
    @usableFromInline static let setAttributeNode: JSString = "setAttributeNode"
    @usableFromInline static let setAttributeNodeNS: JSString = "setAttributeNodeNS"
    @usableFromInline static let setCustomValidity: JSString = "setCustomValidity"
    @usableFromInline static let setData: JSString = "setData"
    @usableFromInline static let setDragImage: JSString = "setDragImage"
    @usableFromInline static let setEnd: JSString = "setEnd"
    @usableFromInline static let setEndAfter: JSString = "setEndAfter"
    @usableFromInline static let setEndBefore: JSString = "setEndBefore"
    @usableFromInline static let setFormValue: JSString = "setFormValue"
    @usableFromInline static let setHeaderValue: JSString = "setHeaderValue"
    @usableFromInline static let setInterval: JSString = "setInterval"
    @usableFromInline static let setLineDash: JSString = "setLineDash"
    @usableFromInline static let setMatrixValue: JSString = "setMatrixValue"
    @usableFromInline static let setNamedItem: JSString = "setNamedItem"
    @usableFromInline static let setNamedItemNS: JSString = "setNamedItemNS"
    @usableFromInline static let setOrientation: JSString = "setOrientation"
    @usableFromInline static let setParameter: JSString = "setParameter"
    @usableFromInline static let setPeriodicWave: JSString = "setPeriodicWave"
    @usableFromInline static let setPosition: JSString = "setPosition"
    @usableFromInline static let setRangeText: JSString = "setRangeText"
    @usableFromInline static let setRequestHeader: JSString = "setRequestHeader"
    @usableFromInline static let setSelectionRange: JSString = "setSelectionRange"
    @usableFromInline static let setStart: JSString = "setStart"
    @usableFromInline static let setStartAfter: JSString = "setStartAfter"
    @usableFromInline static let setStartBefore: JSString = "setStartBefore"
    @usableFromInline static let setTargetAtTime: JSString = "setTargetAtTime"
    @usableFromInline static let setTimeout: JSString = "setTimeout"
    @usableFromInline static let setTransform: JSString = "setTransform"
    @usableFromInline static let setValidity: JSString = "setValidity"
    @usableFromInline static let setValueAtTime: JSString = "setValueAtTime"
    @usableFromInline static let setValueCurveAtTime: JSString = "setValueCurveAtTime"
    @usableFromInline static let shadowBlur: JSString = "shadowBlur"
    @usableFromInline static let shadowColor: JSString = "shadowColor"
    @usableFromInline static let shadowOffsetX: JSString = "shadowOffsetX"
    @usableFromInline static let shadowOffsetY: JSString = "shadowOffsetY"
    @usableFromInline static let shadowRoot: JSString = "shadowRoot"
    @usableFromInline static let shape: JSString = "shape"
    @usableFromInline static let shiftKey: JSString = "shiftKey"
    @usableFromInline static let show: JSString = "show"
    @usableFromInline static let showModal: JSString = "showModal"
    @usableFromInline static let showPicker: JSString = "showPicker"
    @usableFromInline static let signal: JSString = "signal"
    @usableFromInline static let singleNodeValue: JSString = "singleNodeValue"
    @usableFromInline static let size: JSString = "size"
    @usableFromInline static let sizes: JSString = "sizes"
    @usableFromInline static let skewX: JSString = "skewX"
    @usableFromInline static let skewXSelf: JSString = "skewXSelf"
    @usableFromInline static let skewY: JSString = "skewY"
    @usableFromInline static let skewYSelf: JSString = "skewYSelf"
    @usableFromInline static let slice: JSString = "slice"
    @usableFromInline static let slot: JSString = "slot"
    @usableFromInline static let slotAssignment: JSString = "slotAssignment"
    @usableFromInline static let smoothingTimeConstant: JSString = "smoothingTimeConstant"
    @usableFromInline static let snapshotItem: JSString = "snapshotItem"
    @usableFromInline static let snapshotLength: JSString = "snapshotLength"
    @usableFromInline static let sort: JSString = "sort"
    @usableFromInline static let source: JSString = "source"
    @usableFromInline static let span: JSString = "span"
    @usableFromInline static let specified: JSString = "specified"
    @usableFromInline static let spellcheck: JSString = "spellcheck"
    @usableFromInline static let splitText: JSString = "splitText"
    @usableFromInline static let src: JSString = "src"
    @usableFromInline static let srcElement: JSString = "srcElement"
    @usableFromInline static let srcdoc: JSString = "srcdoc"
    @usableFromInline static let srclang: JSString = "srclang"
    @usableFromInline static let srcset: JSString = "srcset"
    @usableFromInline static let standby: JSString = "standby"
    @usableFromInline static let start: JSString = "start"
    @usableFromInline static let startContainer: JSString = "startContainer"
    @usableFromInline static let startMessages: JSString = "startMessages"
    @usableFromInline static let startOffset: JSString = "startOffset"
    @usableFromInline static let startRendering: JSString = "startRendering"
    @usableFromInline static let startTime: JSString = "startTime"
    @usableFromInline static let state: JSString = "state"
    @usableFromInline static let status: JSString = "status"
    @usableFromInline static let statusText: JSString = "statusText"
    @usableFromInline static let statusbar: JSString = "statusbar"
    @usableFromInline static let step: JSString = "step"
    @usableFromInline static let stepDown: JSString = "stepDown"
    @usableFromInline static let stepMismatch: JSString = "stepMismatch"
    @usableFromInline static let stepUp: JSString = "stepUp"
    @usableFromInline static let stop: JSString = "stop"
    @usableFromInline static let stopImmediatePropagation: JSString = "stopImmediatePropagation"
    @usableFromInline static let stopPropagation: JSString = "stopPropagation"
    @usableFromInline static let storageArea: JSString = "storageArea"
    @usableFromInline static let stream: JSString = "stream"
    @usableFromInline static let stride: JSString = "stride"
    @usableFromInline static let stringValue: JSString = "stringValue"
    @usableFromInline static let stroke: JSString = "stroke"
    @usableFromInline static let strokeRect: JSString = "strokeRect"
    @usableFromInline static let strokeStyle: JSString = "strokeStyle"
    @usableFromInline static let strokeText: JSString = "strokeText"
    @usableFromInline static let structuredClone: JSString = "structuredClone"
    @usableFromInline static let submit: JSString = "submit"
    @usableFromInline static let submitter: JSString = "submitter"
    @usableFromInline static let substringData: JSString = "substringData"
    @usableFromInline static let subtree: JSString = "subtree"
    @usableFromInline static let suffixes: JSString = "suffixes"
    @usableFromInline static let summary: JSString = "summary"
    @usableFromInline static let supported: JSString = "supported"
    @usableFromInline static let supports: JSString = "supports"
    @usableFromInline static let surroundContents: JSString = "surroundContents"
    @usableFromInline static let suspend: JSString = "suspend"
    @usableFromInline static let svc: JSString = "svc"
    @usableFromInline static let systemId: JSString = "systemId"
    @usableFromInline static let tBodies: JSString = "tBodies"
    @usableFromInline static let tFoot: JSString = "tFoot"
    @usableFromInline static let tHead: JSString = "tHead"
    @usableFromInline static let tabIndex: JSString = "tabIndex"
    @usableFromInline static let table: JSString = "table"
    @usableFromInline static let tagName: JSString = "tagName"
    @usableFromInline static let taintEnabled: JSString = "taintEnabled"
    @usableFromInline static let takeRecords: JSString = "takeRecords"
    @usableFromInline static let target: JSString = "target"
    @usableFromInline static let targetOrigin: JSString = "targetOrigin"
    @usableFromInline static let tee: JSString = "tee"
    @usableFromInline static let temporalLayerId: JSString = "temporalLayerId"
    @usableFromInline static let terminate: JSString = "terminate"
    @usableFromInline static let text: JSString = "text"
    @usableFromInline static let textAlign: JSString = "textAlign"
    @usableFromInline static let textBaseline: JSString = "textBaseline"
    @usableFromInline static let textContent: JSString = "textContent"
    @usableFromInline static let textLength: JSString = "textLength"
    @usableFromInline static let textRendering: JSString = "textRendering"
    @usableFromInline static let textTracks: JSString = "textTracks"
    @usableFromInline static let threshold: JSString = "threshold"
    @usableFromInline static let throwIfAborted: JSString = "throwIfAborted"
    @usableFromInline static let time: JSString = "time"
    @usableFromInline static let timeEnd: JSString = "timeEnd"
    @usableFromInline static let timeLog: JSString = "timeLog"
    @usableFromInline static let timeOrigin: JSString = "timeOrigin"
    @usableFromInline static let timeStamp: JSString = "timeStamp"
    @usableFromInline static let timecode: JSString = "timecode"
    @usableFromInline static let timeout: JSString = "timeout"
    @usableFromInline static let timestamp: JSString = "timestamp"
    @usableFromInline static let title: JSString = "title"
    @usableFromInline static let toBox: JSString = "toBox"
    @usableFromInline static let toDataURL: JSString = "toDataURL"
    @usableFromInline static let toFloat32Array: JSString = "toFloat32Array"
    @usableFromInline static let toFloat64Array: JSString = "toFloat64Array"
    @usableFromInline static let toJSON: JSString = "toJSON"
    @usableFromInline static let toString: JSString = "toString"
    @usableFromInline static let toggle: JSString = "toggle"
    @usableFromInline static let toggleAttribute: JSString = "toggleAttribute"
    @usableFromInline static let tooLong: JSString = "tooLong"
    @usableFromInline static let tooShort: JSString = "tooShort"
    @usableFromInline static let toolbar: JSString = "toolbar"
    @usableFromInline static let top: JSString = "top"
    @usableFromInline static let total: JSString = "total"
    @usableFromInline static let trace: JSString = "trace"
    @usableFromInline static let track: JSString = "track"
    @usableFromInline static let tracks: JSString = "tracks"
    @usableFromInline static let transfer: JSString = "transfer"
    @usableFromInline static let transferControlToOffscreen: JSString = "transferControlToOffscreen"
    @usableFromInline static let transferFromImageBitmap: JSString = "transferFromImageBitmap"
    @usableFromInline static let transferToImageBitmap: JSString = "transferToImageBitmap"
    @usableFromInline static let transform: JSString = "transform"
    @usableFromInline static let transformPoint: JSString = "transformPoint"
    @usableFromInline static let transformToDocument: JSString = "transformToDocument"
    @usableFromInline static let transformToFragment: JSString = "transformToFragment"
    @usableFromInline static let translate: JSString = "translate"
    @usableFromInline static let translateSelf: JSString = "translateSelf"
    @usableFromInline static let trueSpeed: JSString = "trueSpeed"
    @usableFromInline static let type: JSString = "type"
    @usableFromInline static let typeMismatch: JSString = "typeMismatch"
    @usableFromInline static let types: JSString = "types"
    @usableFromInline static let unregister: JSString = "unregister"
    @usableFromInline static let unregisterProtocolHandler: JSString = "unregisterProtocolHandler"
    @usableFromInline static let upX: JSString = "upX"
    @usableFromInline static let upY: JSString = "upY"
    @usableFromInline static let upZ: JSString = "upZ"
    @usableFromInline static let update: JSString = "update"
    @usableFromInline static let updateViaCache: JSString = "updateViaCache"
    @usableFromInline static let upgrade: JSString = "upgrade"
    @usableFromInline static let upload: JSString = "upload"
    @usableFromInline static let url: JSString = "url"
    @usableFromInline static let useMap: JSString = "useMap"
    @usableFromInline static let userAgent: JSString = "userAgent"
    @usableFromInline static let username: JSString = "username"
    @usableFromInline static let vAlign: JSString = "vAlign"
    @usableFromInline static let vLink: JSString = "vLink"
    @usableFromInline static let valid: JSString = "valid"
    @usableFromInline static let validationMessage: JSString = "validationMessage"
    @usableFromInline static let validity: JSString = "validity"
    @usableFromInline static let value: JSString = "value"
    @usableFromInline static let valueAsDate: JSString = "valueAsDate"
    @usableFromInline static let valueAsNumber: JSString = "valueAsNumber"
    @usableFromInline static let valueMissing: JSString = "valueMissing"
    @usableFromInline static let valueType: JSString = "valueType"
    @usableFromInline static let vendor: JSString = "vendor"
    @usableFromInline static let vendorSub: JSString = "vendorSub"
    @usableFromInline static let version: JSString = "version"
    @usableFromInline static let video: JSString = "video"
    @usableFromInline static let videoBitsPerSecond: JSString = "videoBitsPerSecond"
    @usableFromInline static let videoHeight: JSString = "videoHeight"
    @usableFromInline static let videoTracks: JSString = "videoTracks"
    @usableFromInline static let videoWidth: JSString = "videoWidth"
    @usableFromInline static let view: JSString = "view"
    @usableFromInline static let visibilityState: JSString = "visibilityState"
    @usableFromInline static let visible: JSString = "visible"
    @usableFromInline static let visibleRect: JSString = "visibleRect"
    @usableFromInline static let vlinkColor: JSString = "vlinkColor"
    @usableFromInline static let volume: JSString = "volume"
    @usableFromInline static let vspace: JSString = "vspace"
    @usableFromInline static let w: JSString = "w"
    @usableFromInline static let waiting: JSString = "waiting"
    @usableFromInline static let warn: JSString = "warn"
    @usableFromInline static let wasClean: JSString = "wasClean"
    @usableFromInline static let webkitMatchesSelector: JSString = "webkitMatchesSelector"
    @usableFromInline static let whatToShow: JSString = "whatToShow"
    @usableFromInline static let whenDefined: JSString = "whenDefined"
    @usableFromInline static let which: JSString = "which"
    @usableFromInline static let wholeText: JSString = "wholeText"
    @usableFromInline static let width: JSString = "width"
    @usableFromInline static let willReadFrequently: JSString = "willReadFrequently"
    @usableFromInline static let willValidate: JSString = "willValidate"
    @usableFromInline static let window: JSString = "window"
    @usableFromInline static let withCredentials: JSString = "withCredentials"
    @usableFromInline static let wordSpacing: JSString = "wordSpacing"
    @usableFromInline static let wrap: JSString = "wrap"
    @usableFromInline static let writable: JSString = "writable"
    @usableFromInline static let writableType: JSString = "writableType"
    @usableFromInline static let write: JSString = "write"
    @usableFromInline static let writeln: JSString = "writeln"
    @usableFromInline static let x: JSString = "x"
    @usableFromInline static let y: JSString = "y"
    @usableFromInline static let z: JSString = "z"
}

public protocol Any_ArrayBuffer_or_String: ConvertibleToJSValue {}
extension ArrayBuffer: Any_ArrayBuffer_or_String {}
extension String: Any_ArrayBuffer_or_String {}

public enum ArrayBuffer_or_String: JSValueCompatible, Any_ArrayBuffer_or_String {
    case arrayBuffer(ArrayBuffer)
    case string(String)

    public var arrayBuffer: ArrayBuffer? {
        switch self {
        case let .arrayBuffer(arrayBuffer): return arrayBuffer
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let arrayBuffer: ArrayBuffer = value.fromJSValue() {
            return .arrayBuffer(arrayBuffer)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .arrayBuffer(arrayBuffer):
            return arrayBuffer.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_AudioContextLatencyCategory_or_Double: ConvertibleToJSValue {}
extension AudioContextLatencyCategory: Any_AudioContextLatencyCategory_or_Double {}
extension Double: Any_AudioContextLatencyCategory_or_Double {}

public enum AudioContextLatencyCategory_or_Double: JSValueCompatible, Any_AudioContextLatencyCategory_or_Double {
    case audioContextLatencyCategory(AudioContextLatencyCategory)
    case double(Double)

    public var audioContextLatencyCategory: AudioContextLatencyCategory? {
        switch self {
        case let .audioContextLatencyCategory(audioContextLatencyCategory): return audioContextLatencyCategory
        default: return nil
        }
    }

    public var double: Double? {
        switch self {
        case let .double(double): return double
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let audioContextLatencyCategory: AudioContextLatencyCategory = value.fromJSValue() {
            return .audioContextLatencyCategory(audioContextLatencyCategory)
        }
        if let double: Double = value.fromJSValue() {
            return .double(double)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .audioContextLatencyCategory(audioContextLatencyCategory):
            return audioContextLatencyCategory.jsValue
        case let .double(double):
            return double.jsValue
        }
    }
}

public protocol Any_AudioTrack_or_TextTrack_or_VideoTrack: ConvertibleToJSValue {}
extension AudioTrack: Any_AudioTrack_or_TextTrack_or_VideoTrack {}
extension TextTrack: Any_AudioTrack_or_TextTrack_or_VideoTrack {}
extension VideoTrack: Any_AudioTrack_or_TextTrack_or_VideoTrack {}

public enum AudioTrack_or_TextTrack_or_VideoTrack: JSValueCompatible, Any_AudioTrack_or_TextTrack_or_VideoTrack {
    case audioTrack(AudioTrack)
    case textTrack(TextTrack)
    case videoTrack(VideoTrack)

    public var audioTrack: AudioTrack? {
        switch self {
        case let .audioTrack(audioTrack): return audioTrack
        default: return nil
        }
    }

    public var textTrack: TextTrack? {
        switch self {
        case let .textTrack(textTrack): return textTrack
        default: return nil
        }
    }

    public var videoTrack: VideoTrack? {
        switch self {
        case let .videoTrack(videoTrack): return videoTrack
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let audioTrack: AudioTrack = value.fromJSValue() {
            return .audioTrack(audioTrack)
        }
        if let textTrack: TextTrack = value.fromJSValue() {
            return .textTrack(textTrack)
        }
        if let videoTrack: VideoTrack = value.fromJSValue() {
            return .videoTrack(videoTrack)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .audioTrack(audioTrack):
            return audioTrack.jsValue
        case let .textTrack(textTrack):
            return textTrack.jsValue
        case let .videoTrack(videoTrack):
            return videoTrack.jsValue
        }
    }
}

public protocol Any_BlobPart: ConvertibleToJSValue {}
extension Blob: Any_BlobPart {}
extension BufferSource: Any_BlobPart {}
extension String: Any_BlobPart {}

public enum BlobPart: JSValueCompatible, Any_BlobPart {
    case blob(Blob)
    case bufferSource(BufferSource)
    case string(String)

    public var blob: Blob? {
        switch self {
        case let .blob(blob): return blob
        default: return nil
        }
    }

    public var bufferSource: BufferSource? {
        switch self {
        case let .bufferSource(bufferSource): return bufferSource
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let blob: Blob = value.fromJSValue() {
            return .blob(blob)
        }
        if let bufferSource: BufferSource = value.fromJSValue() {
            return .bufferSource(bufferSource)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .blob(blob):
            return blob.jsValue
        case let .bufferSource(bufferSource):
            return bufferSource.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_Bool_or_MediaTrackConstraints: ConvertibleToJSValue {}
extension Bool: Any_Bool_or_MediaTrackConstraints {}
extension MediaTrackConstraints: Any_Bool_or_MediaTrackConstraints {}

public enum Bool_or_MediaTrackConstraints: JSValueCompatible, Any_Bool_or_MediaTrackConstraints {
    case bool(Bool)
    case mediaTrackConstraints(MediaTrackConstraints)

    public var bool: Bool? {
        switch self {
        case let .bool(bool): return bool
        default: return nil
        }
    }

    public var mediaTrackConstraints: MediaTrackConstraints? {
        switch self {
        case let .mediaTrackConstraints(mediaTrackConstraints): return mediaTrackConstraints
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let bool: Bool = value.fromJSValue() {
            return .bool(bool)
        }
        if let mediaTrackConstraints: MediaTrackConstraints = value.fromJSValue() {
            return .mediaTrackConstraints(mediaTrackConstraints)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .bool(bool):
            return bool.jsValue
        case let .mediaTrackConstraints(mediaTrackConstraints):
            return mediaTrackConstraints.jsValue
        }
    }
}

public protocol Any_Bool_or_ScrollIntoViewOptions: ConvertibleToJSValue {}
extension Bool: Any_Bool_or_ScrollIntoViewOptions {}
extension ScrollIntoViewOptions: Any_Bool_or_ScrollIntoViewOptions {}

public enum Bool_or_ScrollIntoViewOptions: JSValueCompatible, Any_Bool_or_ScrollIntoViewOptions {
    case bool(Bool)
    case scrollIntoViewOptions(ScrollIntoViewOptions)

    public var bool: Bool? {
        switch self {
        case let .bool(bool): return bool
        default: return nil
        }
    }

    public var scrollIntoViewOptions: ScrollIntoViewOptions? {
        switch self {
        case let .scrollIntoViewOptions(scrollIntoViewOptions): return scrollIntoViewOptions
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let bool: Bool = value.fromJSValue() {
            return .bool(bool)
        }
        if let scrollIntoViewOptions: ScrollIntoViewOptions = value.fromJSValue() {
            return .scrollIntoViewOptions(scrollIntoViewOptions)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .bool(bool):
            return bool.jsValue
        case let .scrollIntoViewOptions(scrollIntoViewOptions):
            return scrollIntoViewOptions.jsValue
        }
    }
}

public protocol Any_BufferSource: ConvertibleToJSValue {}
extension ArrayBuffer: Any_BufferSource {}
extension ArrayBufferView: Any_BufferSource {}

public enum BufferSource: JSValueCompatible, Any_BufferSource {
    case arrayBuffer(ArrayBuffer)
    case arrayBufferView(ArrayBufferView)

    public var arrayBuffer: ArrayBuffer? {
        switch self {
        case let .arrayBuffer(arrayBuffer): return arrayBuffer
        default: return nil
        }
    }

    public var arrayBufferView: ArrayBufferView? {
        switch self {
        case let .arrayBufferView(arrayBufferView): return arrayBufferView
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let arrayBuffer: ArrayBuffer = value.fromJSValue() {
            return .arrayBuffer(arrayBuffer)
        }
        if let arrayBufferView: ArrayBufferView = value.fromJSValue() {
            return .arrayBufferView(arrayBufferView)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .arrayBuffer(arrayBuffer):
            return arrayBuffer.jsValue
        case let .arrayBufferView(arrayBufferView):
            return arrayBufferView.jsValue
        }
    }
}

public protocol Any_CSSPseudoElement_or_Element: ConvertibleToJSValue {}
extension CSSPseudoElement: Any_CSSPseudoElement_or_Element {}
extension Element: Any_CSSPseudoElement_or_Element {}

public enum CSSPseudoElement_or_Element: JSValueCompatible, Any_CSSPseudoElement_or_Element {
    case cssPseudoElement(CSSPseudoElement)
    case element(Element)

    public var cssPseudoElement: CSSPseudoElement? {
        switch self {
        case let .cssPseudoElement(cssPseudoElement): return cssPseudoElement
        default: return nil
        }
    }

    public var element: Element? {
        switch self {
        case let .element(element): return element
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let cssPseudoElement: CSSPseudoElement = value.fromJSValue() {
            return .cssPseudoElement(cssPseudoElement)
        }
        if let element: Element = value.fromJSValue() {
            return .element(element)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .cssPseudoElement(cssPseudoElement):
            return cssPseudoElement.jsValue
        case let .element(element):
            return element.jsValue
        }
    }
}

public protocol Any_CanvasFilterInput_or_seq_of_CanvasFilterInput: ConvertibleToJSValue {}
extension CanvasFilterInput: Any_CanvasFilterInput_or_seq_of_CanvasFilterInput {}
extension Array: Any_CanvasFilterInput_or_seq_of_CanvasFilterInput where Element == CanvasFilterInput {}

public enum CanvasFilterInput_or_seq_of_CanvasFilterInput: JSValueCompatible, Any_CanvasFilterInput_or_seq_of_CanvasFilterInput {
    case canvasFilterInput(CanvasFilterInput)
    case seq_of_CanvasFilterInput([CanvasFilterInput])

    public var canvasFilterInput: CanvasFilterInput? {
        switch self {
        case let .canvasFilterInput(canvasFilterInput): return canvasFilterInput
        default: return nil
        }
    }

    public var seq_of_CanvasFilterInput: [CanvasFilterInput]? {
        switch self {
        case let .seq_of_CanvasFilterInput(seq_of_CanvasFilterInput): return seq_of_CanvasFilterInput
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let canvasFilterInput: CanvasFilterInput = value.fromJSValue() {
            return .canvasFilterInput(canvasFilterInput)
        }
        if let seq_of_CanvasFilterInput: [CanvasFilterInput] = value.fromJSValue() {
            return .seq_of_CanvasFilterInput(seq_of_CanvasFilterInput)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .canvasFilterInput(canvasFilterInput):
            return canvasFilterInput.jsValue
        case let .seq_of_CanvasFilterInput(seq_of_CanvasFilterInput):
            return seq_of_CanvasFilterInput.jsValue
        }
    }
}

public protocol Any_CanvasFilter_or_String: ConvertibleToJSValue {}
extension CanvasFilter: Any_CanvasFilter_or_String {}
extension String: Any_CanvasFilter_or_String {}

public enum CanvasFilter_or_String: JSValueCompatible, Any_CanvasFilter_or_String {
    case canvasFilter(CanvasFilter)
    case string(String)

    public var canvasFilter: CanvasFilter? {
        switch self {
        case let .canvasFilter(canvasFilter): return canvasFilter
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let canvasFilter: CanvasFilter = value.fromJSValue() {
            return .canvasFilter(canvasFilter)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .canvasFilter(canvasFilter):
            return canvasFilter.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_CanvasGradient_or_CanvasPattern_or_String: ConvertibleToJSValue {}
extension CanvasGradient: Any_CanvasGradient_or_CanvasPattern_or_String {}
extension CanvasPattern: Any_CanvasGradient_or_CanvasPattern_or_String {}
extension String: Any_CanvasGradient_or_CanvasPattern_or_String {}

public enum CanvasGradient_or_CanvasPattern_or_String: JSValueCompatible, Any_CanvasGradient_or_CanvasPattern_or_String {
    case canvasGradient(CanvasGradient)
    case canvasPattern(CanvasPattern)
    case string(String)

    public var canvasGradient: CanvasGradient? {
        switch self {
        case let .canvasGradient(canvasGradient): return canvasGradient
        default: return nil
        }
    }

    public var canvasPattern: CanvasPattern? {
        switch self {
        case let .canvasPattern(canvasPattern): return canvasPattern
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let canvasGradient: CanvasGradient = value.fromJSValue() {
            return .canvasGradient(canvasGradient)
        }
        if let canvasPattern: CanvasPattern = value.fromJSValue() {
            return .canvasPattern(canvasPattern)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .canvasGradient(canvasGradient):
            return canvasGradient.jsValue
        case let .canvasPattern(canvasPattern):
            return canvasPattern.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_CanvasImageSource: ConvertibleToJSValue {}
extension HTMLCanvasElement: Any_CanvasImageSource {}
extension HTMLOrSVGImageElement: Any_CanvasImageSource {}
extension HTMLVideoElement: Any_CanvasImageSource {}
extension ImageBitmap: Any_CanvasImageSource {}
extension OffscreenCanvas: Any_CanvasImageSource {}
extension VideoFrame: Any_CanvasImageSource {}

public enum CanvasImageSource: JSValueCompatible, Any_CanvasImageSource {
    case htmlCanvasElement(HTMLCanvasElement)
    case htmlOrSVGImageElement(HTMLOrSVGImageElement)
    case htmlVideoElement(HTMLVideoElement)
    case imageBitmap(ImageBitmap)
    case offscreenCanvas(OffscreenCanvas)
    case videoFrame(VideoFrame)

    public var htmlCanvasElement: HTMLCanvasElement? {
        switch self {
        case let .htmlCanvasElement(htmlCanvasElement): return htmlCanvasElement
        default: return nil
        }
    }

    public var htmlOrSVGImageElement: HTMLOrSVGImageElement? {
        switch self {
        case let .htmlOrSVGImageElement(htmlOrSVGImageElement): return htmlOrSVGImageElement
        default: return nil
        }
    }

    public var htmlVideoElement: HTMLVideoElement? {
        switch self {
        case let .htmlVideoElement(htmlVideoElement): return htmlVideoElement
        default: return nil
        }
    }

    public var imageBitmap: ImageBitmap? {
        switch self {
        case let .imageBitmap(imageBitmap): return imageBitmap
        default: return nil
        }
    }

    public var offscreenCanvas: OffscreenCanvas? {
        switch self {
        case let .offscreenCanvas(offscreenCanvas): return offscreenCanvas
        default: return nil
        }
    }

    public var videoFrame: VideoFrame? {
        switch self {
        case let .videoFrame(videoFrame): return videoFrame
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let htmlCanvasElement: HTMLCanvasElement = value.fromJSValue() {
            return .htmlCanvasElement(htmlCanvasElement)
        }
        if let htmlOrSVGImageElement: HTMLOrSVGImageElement = value.fromJSValue() {
            return .htmlOrSVGImageElement(htmlOrSVGImageElement)
        }
        if let htmlVideoElement: HTMLVideoElement = value.fromJSValue() {
            return .htmlVideoElement(htmlVideoElement)
        }
        if let imageBitmap: ImageBitmap = value.fromJSValue() {
            return .imageBitmap(imageBitmap)
        }
        if let offscreenCanvas: OffscreenCanvas = value.fromJSValue() {
            return .offscreenCanvas(offscreenCanvas)
        }
        if let videoFrame: VideoFrame = value.fromJSValue() {
            return .videoFrame(videoFrame)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .htmlCanvasElement(htmlCanvasElement):
            return htmlCanvasElement.jsValue
        case let .htmlOrSVGImageElement(htmlOrSVGImageElement):
            return htmlOrSVGImageElement.jsValue
        case let .htmlVideoElement(htmlVideoElement):
            return htmlVideoElement.jsValue
        case let .imageBitmap(imageBitmap):
            return imageBitmap.jsValue
        case let .offscreenCanvas(offscreenCanvas):
            return offscreenCanvas.jsValue
        case let .videoFrame(videoFrame):
            return videoFrame.jsValue
        }
    }
}

public protocol Any_ConstrainBoolean: ConvertibleToJSValue {}
extension Bool: Any_ConstrainBoolean {}
extension ConstrainBooleanParameters: Any_ConstrainBoolean {}

public enum ConstrainBoolean: JSValueCompatible, Any_ConstrainBoolean {
    case bool(Bool)
    case constrainBooleanParameters(ConstrainBooleanParameters)

    public var bool: Bool? {
        switch self {
        case let .bool(bool): return bool
        default: return nil
        }
    }

    public var constrainBooleanParameters: ConstrainBooleanParameters? {
        switch self {
        case let .constrainBooleanParameters(constrainBooleanParameters): return constrainBooleanParameters
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let bool: Bool = value.fromJSValue() {
            return .bool(bool)
        }
        if let constrainBooleanParameters: ConstrainBooleanParameters = value.fromJSValue() {
            return .constrainBooleanParameters(constrainBooleanParameters)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .bool(bool):
            return bool.jsValue
        case let .constrainBooleanParameters(constrainBooleanParameters):
            return constrainBooleanParameters.jsValue
        }
    }
}

public protocol Any_ConstrainDOMString: ConvertibleToJSValue {}
extension ConstrainDOMStringParameters: Any_ConstrainDOMString {}
extension String: Any_ConstrainDOMString {}
extension Array: Any_ConstrainDOMString where Element == String {}

public enum ConstrainDOMString: JSValueCompatible, Any_ConstrainDOMString {
    case constrainDOMStringParameters(ConstrainDOMStringParameters)
    case string(String)
    case seq_of_String([String])

    public var constrainDOMStringParameters: ConstrainDOMStringParameters? {
        switch self {
        case let .constrainDOMStringParameters(constrainDOMStringParameters): return constrainDOMStringParameters
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public var seq_of_String: [String]? {
        switch self {
        case let .seq_of_String(seq_of_String): return seq_of_String
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let constrainDOMStringParameters: ConstrainDOMStringParameters = value.fromJSValue() {
            return .constrainDOMStringParameters(constrainDOMStringParameters)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        if let seq_of_String: [String] = value.fromJSValue() {
            return .seq_of_String(seq_of_String)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .constrainDOMStringParameters(constrainDOMStringParameters):
            return constrainDOMStringParameters.jsValue
        case let .string(string):
            return string.jsValue
        case let .seq_of_String(seq_of_String):
            return seq_of_String.jsValue
        }
    }
}

public protocol Any_ConstrainDouble: ConvertibleToJSValue {}
extension ConstrainDoubleRange: Any_ConstrainDouble {}
extension Double: Any_ConstrainDouble {}

public enum ConstrainDouble: JSValueCompatible, Any_ConstrainDouble {
    case constrainDoubleRange(ConstrainDoubleRange)
    case double(Double)

    public var constrainDoubleRange: ConstrainDoubleRange? {
        switch self {
        case let .constrainDoubleRange(constrainDoubleRange): return constrainDoubleRange
        default: return nil
        }
    }

    public var double: Double? {
        switch self {
        case let .double(double): return double
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let constrainDoubleRange: ConstrainDoubleRange = value.fromJSValue() {
            return .constrainDoubleRange(constrainDoubleRange)
        }
        if let double: Double = value.fromJSValue() {
            return .double(double)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .constrainDoubleRange(constrainDoubleRange):
            return constrainDoubleRange.jsValue
        case let .double(double):
            return double.jsValue
        }
    }
}

public protocol Any_ConstrainULong: ConvertibleToJSValue {}
extension ConstrainULongRange: Any_ConstrainULong {}
extension UInt32: Any_ConstrainULong {}

public enum ConstrainULong: JSValueCompatible, Any_ConstrainULong {
    case constrainULongRange(ConstrainULongRange)
    case uInt32(UInt32)

    public var constrainULongRange: ConstrainULongRange? {
        switch self {
        case let .constrainULongRange(constrainULongRange): return constrainULongRange
        default: return nil
        }
    }

    public var uInt32: UInt32? {
        switch self {
        case let .uInt32(uInt32): return uInt32
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let constrainULongRange: ConstrainULongRange = value.fromJSValue() {
            return .constrainULongRange(constrainULongRange)
        }
        if let uInt32: UInt32 = value.fromJSValue() {
            return .uInt32(uInt32)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .constrainULongRange(constrainULongRange):
            return constrainULongRange.jsValue
        case let .uInt32(uInt32):
            return uInt32.jsValue
        }
    }
}

public protocol Any_DOMPointInit_or_Double: ConvertibleToJSValue {}
extension DOMPointInit: Any_DOMPointInit_or_Double {}
extension Double: Any_DOMPointInit_or_Double {}

public enum DOMPointInit_or_Double: JSValueCompatible, Any_DOMPointInit_or_Double {
    case domPointInit(DOMPointInit)
    case double(Double)

    public var domPointInit: DOMPointInit? {
        switch self {
        case let .domPointInit(domPointInit): return domPointInit
        default: return nil
        }
    }

    public var double: Double? {
        switch self {
        case let .double(double): return double
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let domPointInit: DOMPointInit = value.fromJSValue() {
            return .domPointInit(domPointInit)
        }
        if let double: Double = value.fromJSValue() {
            return .double(double)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .domPointInit(domPointInit):
            return domPointInit.jsValue
        case let .double(double):
            return double.jsValue
        }
    }
}

public protocol Any_DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double: ConvertibleToJSValue {}
extension DOMPointInit: Any_DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double {}
extension Double: Any_DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double {}
extension Array: Any_DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double where Element == DOMPointInit_or_Double {}

public enum DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double: JSValueCompatible, Any_DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double {
    case domPointInit(DOMPointInit)
    case double(Double)
    case seq_of_DOMPointInit_or_Double([DOMPointInit_or_Double])

    public var domPointInit: DOMPointInit? {
        switch self {
        case let .domPointInit(domPointInit): return domPointInit
        default: return nil
        }
    }

    public var double: Double? {
        switch self {
        case let .double(double): return double
        default: return nil
        }
    }

    public var seq_of_DOMPointInit_or_Double: [DOMPointInit_or_Double]? {
        switch self {
        case let .seq_of_DOMPointInit_or_Double(seq_of_DOMPointInit_or_Double): return seq_of_DOMPointInit_or_Double
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let domPointInit: DOMPointInit = value.fromJSValue() {
            return .domPointInit(domPointInit)
        }
        if let double: Double = value.fromJSValue() {
            return .double(double)
        }
        if let seq_of_DOMPointInit_or_Double: [DOMPointInit_or_Double] = value.fromJSValue() {
            return .seq_of_DOMPointInit_or_Double(seq_of_DOMPointInit_or_Double)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .domPointInit(domPointInit):
            return domPointInit.jsValue
        case let .double(double):
            return double.jsValue
        case let .seq_of_DOMPointInit_or_Double(seq_of_DOMPointInit_or_Double):
            return seq_of_DOMPointInit_or_Double.jsValue
        }
    }
}

public protocol Any_Document_or_XMLHttpRequestBodyInit: ConvertibleToJSValue {}
extension Document: Any_Document_or_XMLHttpRequestBodyInit {}
extension XMLHttpRequestBodyInit: Any_Document_or_XMLHttpRequestBodyInit {}

public enum Document_or_XMLHttpRequestBodyInit: JSValueCompatible, Any_Document_or_XMLHttpRequestBodyInit {
    case document(Document)
    case xmlHttpRequestBodyInit(XMLHttpRequestBodyInit)

    public var document: Document? {
        switch self {
        case let .document(document): return document
        default: return nil
        }
    }

    public var xmlHttpRequestBodyInit: XMLHttpRequestBodyInit? {
        switch self {
        case let .xmlHttpRequestBodyInit(xmlHttpRequestBodyInit): return xmlHttpRequestBodyInit
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let document: Document = value.fromJSValue() {
            return .document(document)
        }
        if let xmlHttpRequestBodyInit: XMLHttpRequestBodyInit = value.fromJSValue() {
            return .xmlHttpRequestBodyInit(xmlHttpRequestBodyInit)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .document(document):
            return document.jsValue
        case let .xmlHttpRequestBodyInit(xmlHttpRequestBodyInit):
            return xmlHttpRequestBodyInit.jsValue
        }
    }
}

public protocol Any_ElementCreationOptions_or_String: ConvertibleToJSValue {}
extension ElementCreationOptions: Any_ElementCreationOptions_or_String {}
extension String: Any_ElementCreationOptions_or_String {}

public enum ElementCreationOptions_or_String: JSValueCompatible, Any_ElementCreationOptions_or_String {
    case elementCreationOptions(ElementCreationOptions)
    case string(String)

    public var elementCreationOptions: ElementCreationOptions? {
        switch self {
        case let .elementCreationOptions(elementCreationOptions): return elementCreationOptions
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let elementCreationOptions: ElementCreationOptions = value.fromJSValue() {
            return .elementCreationOptions(elementCreationOptions)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .elementCreationOptions(elementCreationOptions):
            return elementCreationOptions.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_Element_or_HTMLCollection: ConvertibleToJSValue {}
extension Element: Any_Element_or_HTMLCollection {}
extension HTMLCollection: Any_Element_or_HTMLCollection {}

public enum Element_or_HTMLCollection: JSValueCompatible, Any_Element_or_HTMLCollection {
    case element(Element)
    case htmlCollection(HTMLCollection)

    public var element: Element? {
        switch self {
        case let .element(element): return element
        default: return nil
        }
    }

    public var htmlCollection: HTMLCollection? {
        switch self {
        case let .htmlCollection(htmlCollection): return htmlCollection
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let element: Element = value.fromJSValue() {
            return .element(element)
        }
        if let htmlCollection: HTMLCollection = value.fromJSValue() {
            return .htmlCollection(htmlCollection)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .element(element):
            return element.jsValue
        case let .htmlCollection(htmlCollection):
            return htmlCollection.jsValue
        }
    }
}

public protocol Any_Element_or_RadioNodeList: ConvertibleToJSValue {}
extension Element: Any_Element_or_RadioNodeList {}
extension RadioNodeList: Any_Element_or_RadioNodeList {}

public enum Element_or_RadioNodeList: JSValueCompatible, Any_Element_or_RadioNodeList {
    case element(Element)
    case radioNodeList(RadioNodeList)

    public var element: Element? {
        switch self {
        case let .element(element): return element
        default: return nil
        }
    }

    public var radioNodeList: RadioNodeList? {
        switch self {
        case let .radioNodeList(radioNodeList): return radioNodeList
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let element: Element = value.fromJSValue() {
            return .element(element)
        }
        if let radioNodeList: RadioNodeList = value.fromJSValue() {
            return .radioNodeList(radioNodeList)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .element(element):
            return element.jsValue
        case let .radioNodeList(radioNodeList):
            return radioNodeList.jsValue
        }
    }
}

public protocol Any_Element_or_Text: ConvertibleToJSValue {}
extension Element: Any_Element_or_Text {}
extension Text: Any_Element_or_Text {}

public enum Element_or_Text: JSValueCompatible, Any_Element_or_Text {
    case element(Element)
    case text(Text)

    public var element: Element? {
        switch self {
        case let .element(element): return element
        default: return nil
        }
    }

    public var text: Text? {
        switch self {
        case let .text(text): return text
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let element: Element = value.fromJSValue() {
            return .element(element)
        }
        if let text: Text = value.fromJSValue() {
            return .text(text)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .element(element):
            return element.jsValue
        case let .text(text):
            return text.jsValue
        }
    }
}

public protocol Any_Event_or_String: ConvertibleToJSValue {}
extension Event: Any_Event_or_String {}
extension String: Any_Event_or_String {}

public enum Event_or_String: JSValueCompatible, Any_Event_or_String {
    case event(Event)
    case string(String)

    public var event: Event? {
        switch self {
        case let .event(event): return event
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let event: Event = value.fromJSValue() {
            return .event(event)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .event(event):
            return event.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_File_or_FormData_or_String: ConvertibleToJSValue {}
extension File: Any_File_or_FormData_or_String {}
extension FormData: Any_File_or_FormData_or_String {}
extension String: Any_File_or_FormData_or_String {}

public enum File_or_FormData_or_String: JSValueCompatible, Any_File_or_FormData_or_String {
    case file(File)
    case formData(FormData)
    case string(String)

    public var file: File? {
        switch self {
        case let .file(file): return file
        default: return nil
        }
    }

    public var formData: FormData? {
        switch self {
        case let .formData(formData): return formData
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let file: File = value.fromJSValue() {
            return .file(file)
        }
        if let formData: FormData = value.fromJSValue() {
            return .formData(formData)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .file(file):
            return file.jsValue
        case let .formData(formData):
            return formData.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_FormDataEntryValue: ConvertibleToJSValue {}
extension File: Any_FormDataEntryValue {}
extension String: Any_FormDataEntryValue {}

public enum FormDataEntryValue: JSValueCompatible, Any_FormDataEntryValue {
    case file(File)
    case string(String)

    public var file: File? {
        switch self {
        case let .file(file): return file
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let file: File = value.fromJSValue() {
            return .file(file)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .file(file):
            return file.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_GeometryNode: ConvertibleToJSValue {}
extension CSSPseudoElement: Any_GeometryNode {}
extension Document: Any_GeometryNode {}
extension Element: Any_GeometryNode {}
extension Text: Any_GeometryNode {}

public enum GeometryNode: JSValueCompatible, Any_GeometryNode {
    case cssPseudoElement(CSSPseudoElement)
    case document(Document)
    case element(Element)
    case text(Text)

    public var cssPseudoElement: CSSPseudoElement? {
        switch self {
        case let .cssPseudoElement(cssPseudoElement): return cssPseudoElement
        default: return nil
        }
    }

    public var document: Document? {
        switch self {
        case let .document(document): return document
        default: return nil
        }
    }

    public var element: Element? {
        switch self {
        case let .element(element): return element
        default: return nil
        }
    }

    public var text: Text? {
        switch self {
        case let .text(text): return text
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let cssPseudoElement: CSSPseudoElement = value.fromJSValue() {
            return .cssPseudoElement(cssPseudoElement)
        }
        if let document: Document = value.fromJSValue() {
            return .document(document)
        }
        if let element: Element = value.fromJSValue() {
            return .element(element)
        }
        if let text: Text = value.fromJSValue() {
            return .text(text)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .cssPseudoElement(cssPseudoElement):
            return cssPseudoElement.jsValue
        case let .document(document):
            return document.jsValue
        case let .element(element):
            return element.jsValue
        case let .text(text):
            return text.jsValue
        }
    }
}

public protocol Any_HTMLCanvasElement_or_OffscreenCanvas: ConvertibleToJSValue {}
extension HTMLCanvasElement: Any_HTMLCanvasElement_or_OffscreenCanvas {}
extension OffscreenCanvas: Any_HTMLCanvasElement_or_OffscreenCanvas {}

public enum HTMLCanvasElement_or_OffscreenCanvas: JSValueCompatible, Any_HTMLCanvasElement_or_OffscreenCanvas {
    case htmlCanvasElement(HTMLCanvasElement)
    case offscreenCanvas(OffscreenCanvas)

    public var htmlCanvasElement: HTMLCanvasElement? {
        switch self {
        case let .htmlCanvasElement(htmlCanvasElement): return htmlCanvasElement
        default: return nil
        }
    }

    public var offscreenCanvas: OffscreenCanvas? {
        switch self {
        case let .offscreenCanvas(offscreenCanvas): return offscreenCanvas
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let htmlCanvasElement: HTMLCanvasElement = value.fromJSValue() {
            return .htmlCanvasElement(htmlCanvasElement)
        }
        if let offscreenCanvas: OffscreenCanvas = value.fromJSValue() {
            return .offscreenCanvas(offscreenCanvas)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .htmlCanvasElement(htmlCanvasElement):
            return htmlCanvasElement.jsValue
        case let .offscreenCanvas(offscreenCanvas):
            return offscreenCanvas.jsValue
        }
    }
}

public protocol Any_HTMLElement_or_Int32: ConvertibleToJSValue {}
extension HTMLElement: Any_HTMLElement_or_Int32 {}
extension Int32: Any_HTMLElement_or_Int32 {}

public enum HTMLElement_or_Int32: JSValueCompatible, Any_HTMLElement_or_Int32 {
    case htmlElement(HTMLElement)
    case int32(Int32)

    public var htmlElement: HTMLElement? {
        switch self {
        case let .htmlElement(htmlElement): return htmlElement
        default: return nil
        }
    }

    public var int32: Int32? {
        switch self {
        case let .int32(int32): return int32
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let htmlElement: HTMLElement = value.fromJSValue() {
            return .htmlElement(htmlElement)
        }
        if let int32: Int32 = value.fromJSValue() {
            return .int32(int32)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .htmlElement(htmlElement):
            return htmlElement.jsValue
        case let .int32(int32):
            return int32.jsValue
        }
    }
}

public protocol Any_HTMLOptGroupElement_or_HTMLOptionElement: ConvertibleToJSValue {}
extension HTMLOptGroupElement: Any_HTMLOptGroupElement_or_HTMLOptionElement {}
extension HTMLOptionElement: Any_HTMLOptGroupElement_or_HTMLOptionElement {}

public enum HTMLOptGroupElement_or_HTMLOptionElement: JSValueCompatible, Any_HTMLOptGroupElement_or_HTMLOptionElement {
    case htmlOptGroupElement(HTMLOptGroupElement)
    case htmlOptionElement(HTMLOptionElement)

    public var htmlOptGroupElement: HTMLOptGroupElement? {
        switch self {
        case let .htmlOptGroupElement(htmlOptGroupElement): return htmlOptGroupElement
        default: return nil
        }
    }

    public var htmlOptionElement: HTMLOptionElement? {
        switch self {
        case let .htmlOptionElement(htmlOptionElement): return htmlOptionElement
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let htmlOptGroupElement: HTMLOptGroupElement = value.fromJSValue() {
            return .htmlOptGroupElement(htmlOptGroupElement)
        }
        if let htmlOptionElement: HTMLOptionElement = value.fromJSValue() {
            return .htmlOptionElement(htmlOptionElement)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .htmlOptGroupElement(htmlOptGroupElement):
            return htmlOptGroupElement.jsValue
        case let .htmlOptionElement(htmlOptionElement):
            return htmlOptionElement.jsValue
        }
    }
}

public protocol Any_HeadersInit: ConvertibleToJSValue {}
extension Dictionary: Any_HeadersInit where Key == String, Value == String {}
extension Array: Any_HeadersInit where Element == [String] {}

public enum HeadersInit: JSValueCompatible, Any_HeadersInit {
    case record_String_to_String([String: String])
    case seq_of_seq_of_String([[String]])

    public var record_String_to_String: [String: String]? {
        switch self {
        case let .record_String_to_String(record_String_to_String): return record_String_to_String
        default: return nil
        }
    }

    public var seq_of_seq_of_String: [[String]]? {
        switch self {
        case let .seq_of_seq_of_String(seq_of_seq_of_String): return seq_of_seq_of_String
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let record_String_to_String: [String: String] = value.fromJSValue() {
            return .record_String_to_String(record_String_to_String)
        }
        if let seq_of_seq_of_String: [[String]] = value.fromJSValue() {
            return .seq_of_seq_of_String(seq_of_seq_of_String)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .record_String_to_String(record_String_to_String):
            return record_String_to_String.jsValue
        case let .seq_of_seq_of_String(seq_of_seq_of_String):
            return seq_of_seq_of_String.jsValue
        }
    }
}

public protocol Any_ImageBitmapSource: ConvertibleToJSValue {}
extension Blob: Any_ImageBitmapSource {}
extension CanvasImageSource: Any_ImageBitmapSource {}
extension ImageData: Any_ImageBitmapSource {}

public enum ImageBitmapSource: JSValueCompatible, Any_ImageBitmapSource {
    case blob(Blob)
    case canvasImageSource(CanvasImageSource)
    case imageData(ImageData)

    public var blob: Blob? {
        switch self {
        case let .blob(blob): return blob
        default: return nil
        }
    }

    public var canvasImageSource: CanvasImageSource? {
        switch self {
        case let .canvasImageSource(canvasImageSource): return canvasImageSource
        default: return nil
        }
    }

    public var imageData: ImageData? {
        switch self {
        case let .imageData(imageData): return imageData
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let blob: Blob = value.fromJSValue() {
            return .blob(blob)
        }
        if let canvasImageSource: CanvasImageSource = value.fromJSValue() {
            return .canvasImageSource(canvasImageSource)
        }
        if let imageData: ImageData = value.fromJSValue() {
            return .imageData(imageData)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .blob(blob):
            return blob.jsValue
        case let .canvasImageSource(canvasImageSource):
            return canvasImageSource.jsValue
        case let .imageData(imageData):
            return imageData.jsValue
        }
    }
}

public protocol Any_ImageBufferSource: ConvertibleToJSValue {}
extension BufferSource: Any_ImageBufferSource {}
extension ReadableStream: Any_ImageBufferSource {}

public enum ImageBufferSource: JSValueCompatible, Any_ImageBufferSource {
    case bufferSource(BufferSource)
    case readableStream(ReadableStream)

    public var bufferSource: BufferSource? {
        switch self {
        case let .bufferSource(bufferSource): return bufferSource
        default: return nil
        }
    }

    public var readableStream: ReadableStream? {
        switch self {
        case let .readableStream(readableStream): return readableStream
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let bufferSource: BufferSource = value.fromJSValue() {
            return .bufferSource(bufferSource)
        }
        if let readableStream: ReadableStream = value.fromJSValue() {
            return .readableStream(readableStream)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .bufferSource(bufferSource):
            return bufferSource.jsValue
        case let .readableStream(readableStream):
            return readableStream.jsValue
        }
    }
}

public protocol Any_MessageEventSource: ConvertibleToJSValue {}
extension MessagePort: Any_MessageEventSource {}
extension ServiceWorker: Any_MessageEventSource {}
extension WindowProxy: Any_MessageEventSource {}

public enum MessageEventSource: JSValueCompatible, Any_MessageEventSource {
    case messagePort(MessagePort)
    case serviceWorker(ServiceWorker)
    case windowProxy(WindowProxy)

    public var messagePort: MessagePort? {
        switch self {
        case let .messagePort(messagePort): return messagePort
        default: return nil
        }
    }

    public var serviceWorker: ServiceWorker? {
        switch self {
        case let .serviceWorker(serviceWorker): return serviceWorker
        default: return nil
        }
    }

    public var windowProxy: WindowProxy? {
        switch self {
        case let .windowProxy(windowProxy): return windowProxy
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let messagePort: MessagePort = value.fromJSValue() {
            return .messagePort(messagePort)
        }
        if let serviceWorker: ServiceWorker = value.fromJSValue() {
            return .serviceWorker(serviceWorker)
        }
        if let windowProxy: WindowProxy = value.fromJSValue() {
            return .windowProxy(windowProxy)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .messagePort(messagePort):
            return messagePort.jsValue
        case let .serviceWorker(serviceWorker):
            return serviceWorker.jsValue
        case let .windowProxy(windowProxy):
            return windowProxy.jsValue
        }
    }
}

public protocol Any_Node_or_String: ConvertibleToJSValue {}
extension Node: Any_Node_or_String {}
extension String: Any_Node_or_String {}

public enum Node_or_String: JSValueCompatible, Any_Node_or_String {
    case node(Node)
    case string(String)

    public var node: Node? {
        switch self {
        case let .node(node): return node
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let node: Node = value.fromJSValue() {
            return .node(node)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .node(node):
            return node.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_Path2D_or_String: ConvertibleToJSValue {}
extension Path2D: Any_Path2D_or_String {}
extension String: Any_Path2D_or_String {}

public enum Path2D_or_String: JSValueCompatible, Any_Path2D_or_String {
    case path2D(Path2D)
    case string(String)

    public var path2D: Path2D? {
        switch self {
        case let .path2D(path2D): return path2D
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let path2D: Path2D = value.fromJSValue() {
            return .path2D(path2D)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .path2D(path2D):
            return path2D.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_ReadableStreamController: ConvertibleToJSValue {}
extension ReadableByteStreamController: Any_ReadableStreamController {}
extension ReadableStreamDefaultController: Any_ReadableStreamController {}

public enum ReadableStreamController: JSValueCompatible, Any_ReadableStreamController {
    case readableByteStreamController(ReadableByteStreamController)
    case readableStreamDefaultController(ReadableStreamDefaultController)

    public var readableByteStreamController: ReadableByteStreamController? {
        switch self {
        case let .readableByteStreamController(readableByteStreamController): return readableByteStreamController
        default: return nil
        }
    }

    public var readableStreamDefaultController: ReadableStreamDefaultController? {
        switch self {
        case let .readableStreamDefaultController(readableStreamDefaultController): return readableStreamDefaultController
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let readableByteStreamController: ReadableByteStreamController = value.fromJSValue() {
            return .readableByteStreamController(readableByteStreamController)
        }
        if let readableStreamDefaultController: ReadableStreamDefaultController = value.fromJSValue() {
            return .readableStreamDefaultController(readableStreamDefaultController)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .readableByteStreamController(readableByteStreamController):
            return readableByteStreamController.jsValue
        case let .readableStreamDefaultController(readableStreamDefaultController):
            return readableStreamDefaultController.jsValue
        }
    }
}

public protocol Any_ReadableStreamReader: ConvertibleToJSValue {}
extension ReadableStreamBYOBReader: Any_ReadableStreamReader {}
extension ReadableStreamDefaultReader: Any_ReadableStreamReader {}

public enum ReadableStreamReader: JSValueCompatible, Any_ReadableStreamReader {
    case readableStreamBYOBReader(ReadableStreamBYOBReader)
    case readableStreamDefaultReader(ReadableStreamDefaultReader)

    public var readableStreamBYOBReader: ReadableStreamBYOBReader? {
        switch self {
        case let .readableStreamBYOBReader(readableStreamBYOBReader): return readableStreamBYOBReader
        default: return nil
        }
    }

    public var readableStreamDefaultReader: ReadableStreamDefaultReader? {
        switch self {
        case let .readableStreamDefaultReader(readableStreamDefaultReader): return readableStreamDefaultReader
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let readableStreamBYOBReader: ReadableStreamBYOBReader = value.fromJSValue() {
            return .readableStreamBYOBReader(readableStreamBYOBReader)
        }
        if let readableStreamDefaultReader: ReadableStreamDefaultReader = value.fromJSValue() {
            return .readableStreamDefaultReader(readableStreamDefaultReader)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .readableStreamBYOBReader(readableStreamBYOBReader):
            return readableStreamBYOBReader.jsValue
        case let .readableStreamDefaultReader(readableStreamDefaultReader):
            return readableStreamDefaultReader.jsValue
        }
    }
}

public protocol Any_RequestInfo: ConvertibleToJSValue {}
extension Request: Any_RequestInfo {}
extension String: Any_RequestInfo {}

public enum RequestInfo: JSValueCompatible, Any_RequestInfo {
    case request(Request)
    case string(String)

    public var request: Request? {
        switch self {
        case let .request(request): return request
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let request: Request = value.fromJSValue() {
            return .request(request)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .request(request):
            return request.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_String_or_WorkerOptions: ConvertibleToJSValue {}
extension String: Any_String_or_WorkerOptions {}
extension WorkerOptions: Any_String_or_WorkerOptions {}

public enum String_or_WorkerOptions: JSValueCompatible, Any_String_or_WorkerOptions {
    case string(String)
    case workerOptions(WorkerOptions)

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public var workerOptions: WorkerOptions? {
        switch self {
        case let .workerOptions(workerOptions): return workerOptions
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        if let workerOptions: WorkerOptions = value.fromJSValue() {
            return .workerOptions(workerOptions)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .string(string):
            return string.jsValue
        case let .workerOptions(workerOptions):
            return workerOptions.jsValue
        }
    }
}

public protocol Any_String_or_record_String_to_String_or_seq_of_seq_of_String: ConvertibleToJSValue {}
extension String: Any_String_or_record_String_to_String_or_seq_of_seq_of_String {}
extension Dictionary: Any_String_or_record_String_to_String_or_seq_of_seq_of_String where Key == String, Value == String {}
extension Array: Any_String_or_record_String_to_String_or_seq_of_seq_of_String where Element == [String] {}

public enum String_or_record_String_to_String_or_seq_of_seq_of_String: JSValueCompatible, Any_String_or_record_String_to_String_or_seq_of_seq_of_String {
    case string(String)
    case record_String_to_String([String: String])
    case seq_of_seq_of_String([[String]])

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public var record_String_to_String: [String: String]? {
        switch self {
        case let .record_String_to_String(record_String_to_String): return record_String_to_String
        default: return nil
        }
    }

    public var seq_of_seq_of_String: [[String]]? {
        switch self {
        case let .seq_of_seq_of_String(seq_of_seq_of_String): return seq_of_seq_of_String
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        if let record_String_to_String: [String: String] = value.fromJSValue() {
            return .record_String_to_String(record_String_to_String)
        }
        if let seq_of_seq_of_String: [[String]] = value.fromJSValue() {
            return .seq_of_seq_of_String(seq_of_seq_of_String)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .string(string):
            return string.jsValue
        case let .record_String_to_String(record_String_to_String):
            return record_String_to_String.jsValue
        case let .seq_of_seq_of_String(seq_of_seq_of_String):
            return seq_of_seq_of_String.jsValue
        }
    }
}

public protocol Any_String_or_seq_of_Double: ConvertibleToJSValue {}
extension String: Any_String_or_seq_of_Double {}
extension Array: Any_String_or_seq_of_Double where Element == Double {}

public enum String_or_seq_of_Double: JSValueCompatible, Any_String_or_seq_of_Double {
    case string(String)
    case seq_of_Double([Double])

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public var seq_of_Double: [Double]? {
        switch self {
        case let .seq_of_Double(seq_of_Double): return seq_of_Double
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        if let seq_of_Double: [Double] = value.fromJSValue() {
            return .seq_of_Double(seq_of_Double)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .string(string):
            return string.jsValue
        case let .seq_of_Double(seq_of_Double):
            return seq_of_Double.jsValue
        }
    }
}

public protocol Any_String_or_seq_of_String: ConvertibleToJSValue {}
extension String: Any_String_or_seq_of_String {}
extension Array: Any_String_or_seq_of_String where Element == String {}

public enum String_or_seq_of_String: JSValueCompatible, Any_String_or_seq_of_String {
    case string(String)
    case seq_of_String([String])

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public var seq_of_String: [String]? {
        switch self {
        case let .seq_of_String(seq_of_String): return seq_of_String
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        if let seq_of_String: [String] = value.fromJSValue() {
            return .seq_of_String(seq_of_String)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .string(string):
            return string.jsValue
        case let .seq_of_String(seq_of_String):
            return seq_of_String.jsValue
        }
    }
}

public protocol Any_TimerHandler: ConvertibleToJSValue {}
extension JSFunction: Any_TimerHandler {}
extension String: Any_TimerHandler {}

public enum TimerHandler: JSValueCompatible, Any_TimerHandler {
    case jsFunction(JSFunction)
    case string(String)

    public var jsFunction: JSFunction? {
        switch self {
        case let .jsFunction(jsFunction): return jsFunction
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let jsFunction: JSFunction = value.fromJSValue() {
            return .jsFunction(jsFunction)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .jsFunction(jsFunction):
            return jsFunction.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_XMLHttpRequestBodyInit: ConvertibleToJSValue {}
extension Blob: Any_XMLHttpRequestBodyInit {}
extension BufferSource: Any_XMLHttpRequestBodyInit {}
extension FormData: Any_XMLHttpRequestBodyInit {}
extension String: Any_XMLHttpRequestBodyInit {}
extension URLSearchParams: Any_XMLHttpRequestBodyInit {}

public enum XMLHttpRequestBodyInit: JSValueCompatible, Any_XMLHttpRequestBodyInit {
    case blob(Blob)
    case bufferSource(BufferSource)
    case formData(FormData)
    case string(String)
    case urlSearchParams(URLSearchParams)

    public var blob: Blob? {
        switch self {
        case let .blob(blob): return blob
        default: return nil
        }
    }

    public var bufferSource: BufferSource? {
        switch self {
        case let .bufferSource(bufferSource): return bufferSource
        default: return nil
        }
    }

    public var formData: FormData? {
        switch self {
        case let .formData(formData): return formData
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public var urlSearchParams: URLSearchParams? {
        switch self {
        case let .urlSearchParams(urlSearchParams): return urlSearchParams
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let blob: Blob = value.fromJSValue() {
            return .blob(blob)
        }
        if let bufferSource: BufferSource = value.fromJSValue() {
            return .bufferSource(bufferSource)
        }
        if let formData: FormData = value.fromJSValue() {
            return .formData(formData)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        if let urlSearchParams: URLSearchParams = value.fromJSValue() {
            return .urlSearchParams(urlSearchParams)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .blob(blob):
            return blob.jsValue
        case let .bufferSource(bufferSource):
            return bufferSource.jsValue
        case let .formData(formData):
            return formData.jsValue
        case let .string(string):
            return string.jsValue
        case let .urlSearchParams(urlSearchParams):
            return urlSearchParams.jsValue
        }
    }
}
