import Foundation
import WebIDL

let ignored: [String: Set<String>] = [
    // functions as parameters are unsupported
    "EventTarget": ["addEventListener", "removeEventListener"],
    "HTMLCanvasElement": ["toBlob"],
    "AnimationFrameProvider": ["requestAnimationFrame"],
    "DataTransferItem": ["getAsString"],
    "WindowOrWorkerGlobalScope": ["queueMicrotask"],
    "MutationObserver": ["<constructor>"],
    "CustomElementRegistry": ["define"],
    // NodeFilter
    "Document": ["createNodeIterator", "createTreeWalker"],
    "TreeWalker": ["filter"],
    "NodeIterator": ["filter"],
    // invalid overload in Swift
    "BeforeUnloadEvent": ["returnValue"],
    // XPathNSResolver
    "XPathEvaluatorBase": ["createExpression", "createNSResolver", "evaluate"],
]

let preamble = """
// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptKit
import JavaScriptEventLoop
\n
"""

do {
    let data = try Data(contentsOf: Bundle.module.url(forResource: "data", withExtension: "json")!)
    let idl = try JSONDecoder().decode([String: GenericCollection<IDLNode>].self, from: data)
    let declarations = [
        "dom", "hr-time", "html", "console", "FileAPI", "geometry", "webidl", "fetch", "xhr",
        "referrer-policy", "uievents", "wai-aria", "cssom",
    ].flatMap { idl[$0]!.array }
    let merged = merge(declarations: declarations)
    for (i, node) in merged.declarations.enumerated() {
        guard let name = Mirror(reflecting: node).children.first(where: { $0.label == "name" })?.value as? String else {
            fatalError("Cannot find name for \(node)")
        }
        let content = Context.withState(.root(interfaces: merged.interfaces, ignored: ignored)) {
            toSwift(node).source
        }
        let path = "/Users/jed/Documents/github-clones/Tokamak/DOMKit/Sources/DOMKit/WebIDL/" + name + ".swift"
        if FileManager.default.fileExists(atPath: path) {
            fatalError("file already exists for \(name)")
        } else {
            try (preamble + content).write(toFile: path, atomically: true, encoding: .utf8)
        }
    }
//    for (name, nodes) in idl {
//        if name.starts(with: "WEBGL_") { continue }
//        for (i, node) in nodes.enumerated() {
//            print(toSwift(node).source)
//        }
//    }
} catch {
    switch error as? DecodingError {
    case let .dataCorrupted(ctx), let .typeMismatch(_, ctx):
        debugContext(ctx)
    case let .valueNotFound(type, ctx):
        print("Value of type \(type) not found")
        debugContext(ctx)
    case let .keyNotFound(key, ctx):
        print("Key \(key.stringValue) not found")
        debugContext(ctx)
    case nil, .some:
        print(error.localizedDescription)
    }
}

private func debugContext(_ ctx: DecodingError.Context) {
    print("Key path: <root>\(ctx.codingPath.map { "." + $0.stringValue }.joined())")
    print(ctx.debugDescription)
    if let underlying = ctx.underlyingError as NSError?,
       let debugDescription = underlying.userInfo["NSDebugDescription"]
    {
        print(debugDescription)
    }
}
