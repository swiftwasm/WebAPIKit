import Foundation
import WebIDL

enum IDLBuilder {
    static let basicDependencies = ["ECMAScript", "JavaScriptKit"]

    static let preamble = """
    // This file was auto-generated by WebIDLToSwift. DO NOT EDIT!


    """

    static let ignoredNames: Set = [
        // dictionaries that depend on types not exposed to Window environments
        "BreakTokenOptions", "TrustedTypePolicyOptions", "FragmentResultOptions",
        "Client_or_MessagePort_or_ServiceWorker", "ExtendableMessageEventInit",
        // redundant unions
        "CSSColorValue_or_CSSStyleValue",
        // need types from specs not yet included
        "ShadowAnimation", "MediaProvider", "Blob_or_MediaSource",
        "HTMLOrSVGImageElement", "HTMLOrSVGScriptElement", "BodyInit",
        // implemented manually
        // ArrayBufferView
        "BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray",
        // RotationMatrixType
        "DOMMatrix_or_Float32Array_or_Float64Array",
        "RenderingContext",
        "OffscreenRenderingContext",
        "OffscreenRenderingContextId",
    ]

    static func writeFile(path: String, content: String, moduleDependencies: [String]) throws {
        if FileManager.default.fileExists(atPath: path) {
            try FileManager.default.removeItem(atPath: path)
        }

        var dependencies = basicDependencies + moduleDependencies
        if content.contains(" Int64") {
            dependencies.append("JavaScriptBigIntSupport")
        }

        let formedPreamble = preamble + dependencies.map { "import \($0)" }.joined(separator: "\n")

        try (formedPreamble + "\n\n" + content).write(toFile: path, atomically: true, encoding: .utf8)
    }

    static func generateIDLBindings(idl: [GenericCollection<IDLNode>], baseTypes: [String: IDLTypealias]) throws -> SwiftSource {
        print("Generating bindings...")
        let declarations = idl.flatMap(\.array)
        let merged = DeclarationMerger.merge(declarations: declarations)
        var contents: [SwiftSource] = []

        var state = ScopedState.root(
            interfaces: merged.interfaces,
            ignored: [
                // functions as parameters are unsupported
                "AnimationFrameProvider": ["requestAnimationFrame"],
                "AnimationWorkletGlobalScope": ["registerAnimator"],
                "AudioWorkletGlobalScope": ["registerProcessor"],
                "BaseAudioContext": ["decodeAudioData"],
                "ComputePressureObserver": ["<constructor>"],
                "DataTransferItem": ["getAsString"],
                "FileSystemDirectoryEntry": ["getFile", "getDirectory"],
                "FileSystemDirectoryReader": ["readEntries"],
                "FileSystemEntry": ["getParent"],
                "FileSystemFileEntry": ["file"],
                "Geolocation": ["getCurrentPosition", "watchPosition"],
                "HTMLCanvasElement": ["toBlob", "getContext"],
                "HTMLVideoElement": ["requestVideoFrameCallback"],
                "IntersectionObserver": ["<constructor>"],
                "LayoutWorkletGlobalScope": ["registerLayout"],
                "LockManager": ["request"],
                "MediaSession": ["setActionHandler"],
                "MutationObserver": ["<constructor>"],
                "Navigator": ["getUserMedia"],
                "Notification": ["requestPermission"],
                "PaintWorkletGlobalScope": ["registerPaint"],
                "PerformanceObserver": ["<constructor>"],
                "RemotePlayback": ["watchAvailability"],
                "ReportingObserver": ["<constructor>"],
                "ResizeObserver": ["<constructor>"],
                "RTCPeerConnection": ["createOffer", "setLocalDescription", "createAnswer", "setRemoteDescription", "addIceCandidate"],
                "Scheduler": ["postTask"],
                "Window": ["requestIdleCallback"],
                "WindowOrWorkerGlobalScope": ["queueMicrotask"],
                "XRSession": ["requestAnimationFrame"],
                // variadic callbacks are unsupported
                "TrustedTypePolicyFactory": ["createPolicy"],
                // NodeFilter
                "Document": ["createNodeIterator", "createTreeWalker"],
                "NodeIterator": ["filter"],
                "TreeWalker": ["filter"],
                // EventListener
                "EventTarget": ["addEventListener", "removeEventListener"],
                "MediaQueryList": ["addListener", "removeListener"],
                // invalid override in Swift
                "BeforeUnloadEvent": ["returnValue"],
                "CSSColor": ["colorSpace"],
                "SVGElement": ["className"],
                "AudioBufferSourceNode": ["start"],
                // XPathNSResolver
                "XPathEvaluatorBase": ["createExpression", "createNSResolver", "evaluate"],
                // disabled pending addition of more specs
                "HTMLMediaElement": ["srcObject"],
                "Blob": ["stream"],
                "Body": ["body"],
                "OffscreenCanvas": ["getContext"],
            ],
            types: merged.types
        )
        state.add(types: baseTypes)

        try ModuleState.withScope(state) {
            for node in merged.declarations.sorted(by: { $0.name < $1.name }) {
                if ignoredNames.contains(node.name) {
                    continue
                }

                contents.append(toSwift(node))
            }
            try contents.append(IDLBuilder.generateStrings())
            try contents.append(IDLBuilder.generateUnions())
        }
        return "\(lines: contents)"
    }

    static func generateClosureTypes() throws -> SwiftSource {
        print("Generating closure property wrappers...")
        return """
        /* variadic generics please */
        \(lines: ModuleState.closurePatterns.sorted().map(\.swiftRepresentation))
        """
    }

    static func generateStrings() throws -> SwiftSource {
        print("Generating JSString constants...")

        let strings = ModuleState.strings.sorted()
        return """
            @usableFromInline enum Strings {
                static let _self: JSString = "self"
                \(lines: strings.map { "@usableFromInline static let `\(raw: $0)`: JSString = \(quoted: $0)" })
            }
        """
    }

    static func generateUnions() throws -> SwiftSource {
        print("Generating union protocols...")
        var contents: [SwiftSource] = []
        for union in ModuleState.unions.sorted(by: { $0.name < $1.name }) {
            guard !ignoredNames.contains(union.name) else { continue }
            contents.append(union.swiftRepresentation)
        }
        return "\(lines: contents)"
    }
}
