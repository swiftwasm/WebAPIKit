import Foundation
import WebIDL

enum IDLBuilder {
    static let preamble = """
    // This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

    import JavaScriptKit
    import JavaScriptEventLoop
    \n
    """

    static let ignoredNames: Set = [
        // dictionaries that depend on types not exposed to Window environments
        "BreakTokenOptions", "TrustedTypePolicyOptions", "FragmentResultOptions",
        "Client_or_MessagePort_or_ServiceWorker", "ExtendableMessageEventInit",
        // redundant unions
        "CSSColorValue_or_CSSStyleValue",
        // need types from specs not yet included
        "ShadowAnimation", "MediaProvider", "Blob_or_MediaSource",
        "OffscreenRenderingContext", "RenderingContext", "CanvasImageSource",
        "HTMLOrSVGImageElement", "HTMLOrSVGScriptElement", "BodyInit",
        // implemented manually
        // ArrayBufferView
        "BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray",
        // RotationMatrixType
        "DOMMatrix_or_Float32Array_or_Float64Array",
    ]

    static func writeFile(path: String, content: String) throws {
        if FileManager.default.fileExists(atPath: path) {
            try FileManager.default.removeItem(atPath: path)
        }
        try (preamble + content).write(toFile: path, atomically: true, encoding: .utf8)
    }

    static func generateIDLBindings(idl: [GenericCollection<IDLNode>]) throws -> SwiftSource {
        let declarations = idl.flatMap(\.array)
        let merged = DeclarationMerger.merge(declarations: declarations)
        var contents: [SwiftSource] = []
        for node in merged.declarations.sorted(by: { $0.name < $1.name  }) {
            if ignoredNames.contains(node.name) {
                continue
            }

            let nodeContent = Context.withState(.root(
                interfaces: merged.interfaces,
                ignored: [
                    // functions as parameters are unsupported
                    "AnimationFrameProvider": ["requestAnimationFrame"],
                    "AnimationWorkletGlobalScope": ["registerAnimator"],
                    "AudioWorkletGlobalScope": ["registerProcessor"],
                    "BaseAudioContext": ["decodeAudioData"],
                    "ComputePressureObserver": ["<constructor>"],
                    "DataTransferItem": ["getAsString"],
                    "FileSystemDirectoryEntry": ["getFile", "getDirectory"],
                    "FileSystemDirectoryReader": ["readEntries"],
                    "FileSystemEntry": ["getParent"],
                    "FileSystemFileEntry": ["file"],
                    "Geolocation": ["getCurrentPosition", "watchPosition"],
                    "HTMLCanvasElement": ["toBlob"],
                    "HTMLVideoElement": ["requestVideoFrameCallback"],
                    "IntersectionObserver": ["<constructor>"],
                    "LayoutWorkletGlobalScope": ["registerLayout"],
                    "LockManager": ["request"],
                    "MediaSession": ["setActionHandler"],
                    "MutationObserver": ["<constructor>"],
                    "Navigator": ["getUserMedia"],
                    "Notification": ["requestPermission"],
                    "PaintWorkletGlobalScope": ["registerPaint"],
                    "PerformanceObserver": ["<constructor>"],
                    "RemotePlayback": ["watchAvailability"],
                    "ReportingObserver": ["<constructor>"],
                    "ResizeObserver": ["<constructor>"],
                    "RTCPeerConnection": ["createOffer", "setLocalDescription", "createAnswer", "setRemoteDescription", "addIceCandidate"],
                    "Scheduler": ["postTask"],
                    "Window": ["requestIdleCallback"],
                    "WindowOrWorkerGlobalScope": ["queueMicrotask"],
                    "XRSession": ["requestAnimationFrame"],
                    // variadic callbacks are unsupported
                    "TrustedTypePolicyFactory": ["createPolicy"],
                    // NodeFilter
                    "Document": ["createNodeIterator", "createTreeWalker"],
                    "NodeIterator": ["filter"],
                    "TreeWalker": ["filter"],
                    // EventListener
                    "EventTarget": ["addEventListener", "removeEventListener"],
                    "MediaQueryList": ["addListener", "removeListener"],
                    // invalid override in Swift
                    "BeforeUnloadEvent": ["returnValue"],
                    "CSSColor": ["colorSpace"],
                    "SVGElement": ["className"],
                    "AudioBufferSourceNode": ["start"],
                    // XPathNSResolver
                    "XPathEvaluatorBase": ["createExpression", "createNSResolver", "evaluate"],
                    // disabled pending addition of more specs
                    "HTMLMediaElement": ["srcObject"],
                    "Blob": ["stream"],
                    "Body": ["body"],
                ],
                types: merged.types
            )) {
                toSwift(node)
            }
            contents.append(nodeContent)
        }
        return "\(lines: contents)"
    }

    static func generateClosureTypes() throws -> SwiftSource {
        return """
        /* variadic generics please */
        \(lines: Context.closurePatterns.sorted().map(\.swiftRepresentation))
        """
    }

    static func generateStrings() throws -> SwiftSource {
        let strings = Context.strings.sorted()
        return """
            @usableFromInline enum Strings {
                static let _self: JSString = "self"
                \(lines: strings.map { "@usableFromInline static let `\(raw: $0)`: JSString = \(quoted: $0)" })
            }
        """
    }

    static func generateUnions() throws -> SwiftSource {
        var contents: [SwiftSource] = []
        for union in Context.unions.sorted(by: { $0.name < $1.name }) {
            guard !ignoredNames.contains(union.name) else { continue }
            contents.append(union.swiftRepresentation)
        }
        return "\(lines: contents)"
    }
}
