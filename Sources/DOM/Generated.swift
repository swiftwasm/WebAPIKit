// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import ECMAScript
import JavaScriptBigIntSupport
import JavaScriptEventLoop
import JavaScriptKit
import WebAPIBase

public protocol ARIAMixin: JSBridgedClass {}
public extension ARIAMixin {
    @inlinable var role: String? {
        get { jsObject[Strings.role].fromJSValue() }
        nonmutating set { jsObject[Strings.role] = _toJSValue(newValue) }
    }

    @inlinable var ariaActiveDescendantElement: Element? {
        get { jsObject[Strings.ariaActiveDescendantElement].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaActiveDescendantElement] = _toJSValue(newValue) }
    }

    @inlinable var ariaAtomic: String? {
        get { jsObject[Strings.ariaAtomic].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaAtomic] = _toJSValue(newValue) }
    }

    @inlinable var ariaAutoComplete: String? {
        get { jsObject[Strings.ariaAutoComplete].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaAutoComplete] = _toJSValue(newValue) }
    }

    @inlinable var ariaBusy: String? {
        get { jsObject[Strings.ariaBusy].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaBusy] = _toJSValue(newValue) }
    }

    @inlinable var ariaChecked: String? {
        get { jsObject[Strings.ariaChecked].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaChecked] = _toJSValue(newValue) }
    }

    @inlinable var ariaColCount: String? {
        get { jsObject[Strings.ariaColCount].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaColCount] = _toJSValue(newValue) }
    }

    @inlinable var ariaColIndex: String? {
        get { jsObject[Strings.ariaColIndex].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaColIndex] = _toJSValue(newValue) }
    }

    @inlinable var ariaColIndexText: String? {
        get { jsObject[Strings.ariaColIndexText].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaColIndexText] = _toJSValue(newValue) }
    }

    @inlinable var ariaColSpan: String? {
        get { jsObject[Strings.ariaColSpan].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaColSpan] = _toJSValue(newValue) }
    }

    @inlinable var ariaControlsElements: [Element]? {
        get { jsObject[Strings.ariaControlsElements].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaControlsElements] = _toJSValue(newValue) }
    }

    @inlinable var ariaCurrent: String? {
        get { jsObject[Strings.ariaCurrent].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaCurrent] = _toJSValue(newValue) }
    }

    @inlinable var ariaDescribedByElements: [Element]? {
        get { jsObject[Strings.ariaDescribedByElements].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaDescribedByElements] = _toJSValue(newValue) }
    }

    @inlinable var ariaDescription: String? {
        get { jsObject[Strings.ariaDescription].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaDescription] = _toJSValue(newValue) }
    }

    @inlinable var ariaDetailsElements: [Element]? {
        get { jsObject[Strings.ariaDetailsElements].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaDetailsElements] = _toJSValue(newValue) }
    }

    @inlinable var ariaDisabled: String? {
        get { jsObject[Strings.ariaDisabled].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaDisabled] = _toJSValue(newValue) }
    }

    @inlinable var ariaErrorMessageElements: [Element]? {
        get { jsObject[Strings.ariaErrorMessageElements].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaErrorMessageElements] = _toJSValue(newValue) }
    }

    @inlinable var ariaExpanded: String? {
        get { jsObject[Strings.ariaExpanded].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaExpanded] = _toJSValue(newValue) }
    }

    @inlinable var ariaFlowToElements: [Element]? {
        get { jsObject[Strings.ariaFlowToElements].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaFlowToElements] = _toJSValue(newValue) }
    }

    @inlinable var ariaHasPopup: String? {
        get { jsObject[Strings.ariaHasPopup].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaHasPopup] = _toJSValue(newValue) }
    }

    @inlinable var ariaHidden: String? {
        get { jsObject[Strings.ariaHidden].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaHidden] = _toJSValue(newValue) }
    }

    @inlinable var ariaInvalid: String? {
        get { jsObject[Strings.ariaInvalid].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaInvalid] = _toJSValue(newValue) }
    }

    @inlinable var ariaKeyShortcuts: String? {
        get { jsObject[Strings.ariaKeyShortcuts].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaKeyShortcuts] = _toJSValue(newValue) }
    }

    @inlinable var ariaLabel: String? {
        get { jsObject[Strings.ariaLabel].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaLabel] = _toJSValue(newValue) }
    }

    @inlinable var ariaLabelledByElements: [Element]? {
        get { jsObject[Strings.ariaLabelledByElements].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaLabelledByElements] = _toJSValue(newValue) }
    }

    @inlinable var ariaLevel: String? {
        get { jsObject[Strings.ariaLevel].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaLevel] = _toJSValue(newValue) }
    }

    @inlinable var ariaLive: String? {
        get { jsObject[Strings.ariaLive].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaLive] = _toJSValue(newValue) }
    }

    @inlinable var ariaModal: String? {
        get { jsObject[Strings.ariaModal].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaModal] = _toJSValue(newValue) }
    }

    @inlinable var ariaMultiLine: String? {
        get { jsObject[Strings.ariaMultiLine].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaMultiLine] = _toJSValue(newValue) }
    }

    @inlinable var ariaMultiSelectable: String? {
        get { jsObject[Strings.ariaMultiSelectable].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaMultiSelectable] = _toJSValue(newValue) }
    }

    @inlinable var ariaOrientation: String? {
        get { jsObject[Strings.ariaOrientation].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaOrientation] = _toJSValue(newValue) }
    }

    @inlinable var ariaOwnsElements: [Element]? {
        get { jsObject[Strings.ariaOwnsElements].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaOwnsElements] = _toJSValue(newValue) }
    }

    @inlinable var ariaPlaceholder: String? {
        get { jsObject[Strings.ariaPlaceholder].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaPlaceholder] = _toJSValue(newValue) }
    }

    @inlinable var ariaPosInSet: String? {
        get { jsObject[Strings.ariaPosInSet].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaPosInSet] = _toJSValue(newValue) }
    }

    @inlinable var ariaPressed: String? {
        get { jsObject[Strings.ariaPressed].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaPressed] = _toJSValue(newValue) }
    }

    @inlinable var ariaReadOnly: String? {
        get { jsObject[Strings.ariaReadOnly].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaReadOnly] = _toJSValue(newValue) }
    }

    @inlinable var ariaRequired: String? {
        get { jsObject[Strings.ariaRequired].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaRequired] = _toJSValue(newValue) }
    }

    @inlinable var ariaRoleDescription: String? {
        get { jsObject[Strings.ariaRoleDescription].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaRoleDescription] = _toJSValue(newValue) }
    }

    @inlinable var ariaRowCount: String? {
        get { jsObject[Strings.ariaRowCount].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaRowCount] = _toJSValue(newValue) }
    }

    @inlinable var ariaRowIndex: String? {
        get { jsObject[Strings.ariaRowIndex].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaRowIndex] = _toJSValue(newValue) }
    }

    @inlinable var ariaRowIndexText: String? {
        get { jsObject[Strings.ariaRowIndexText].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaRowIndexText] = _toJSValue(newValue) }
    }

    @inlinable var ariaRowSpan: String? {
        get { jsObject[Strings.ariaRowSpan].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaRowSpan] = _toJSValue(newValue) }
    }

    @inlinable var ariaSelected: String? {
        get { jsObject[Strings.ariaSelected].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaSelected] = _toJSValue(newValue) }
    }

    @inlinable var ariaSetSize: String? {
        get { jsObject[Strings.ariaSetSize].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaSetSize] = _toJSValue(newValue) }
    }

    @inlinable var ariaSort: String? {
        get { jsObject[Strings.ariaSort].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaSort] = _toJSValue(newValue) }
    }

    @inlinable var ariaValueMax: String? {
        get { jsObject[Strings.ariaValueMax].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaValueMax] = _toJSValue(newValue) }
    }

    @inlinable var ariaValueMin: String? {
        get { jsObject[Strings.ariaValueMin].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaValueMin] = _toJSValue(newValue) }
    }

    @inlinable var ariaValueNow: String? {
        get { jsObject[Strings.ariaValueNow].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaValueNow] = _toJSValue(newValue) }
    }

    @inlinable var ariaValueText: String? {
        get { jsObject[Strings.ariaValueText].fromJSValue() }
        nonmutating set { jsObject[Strings.ariaValueText] = _toJSValue(newValue) }
    }
}

public class AbortController: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.AbortController].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _signal = ReadonlyAttribute(jsObject: jsObject, name: Strings.signal)
        self.jsObject = jsObject
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var signal: AbortSignal

    @inlinable public func abort(reason: JSValue? = nil) {
        let this = jsObject
        _ = this[Strings.abort].function!(this: this, arguments: [_toJSValue(reason)])
    }
}

public class AbortSignal: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AbortSignal].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _aborted = ReadonlyAttribute(jsObject: jsObject, name: Strings.aborted)
        _reason = ReadonlyAttribute(jsObject: jsObject, name: Strings.reason)
        _onabort = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onabort)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public class func abort(reason: JSValue? = nil) -> Self {
        let this = constructor!
        return this[Strings.abort].function!(this: this, arguments: [_toJSValue(reason)]).fromJSValue()!
    }

    @inlinable public class func timeout(milliseconds: UInt64) -> Self {
        let this = constructor!
        return this[Strings.timeout].function!(this: this, arguments: [_toJSValue(milliseconds)]).fromJSValue()!
    }

    @inlinable public class func any(signals: [AbortSignal]) -> Self {
        let this = constructor!
        return this[Strings.any].function!(this: this, arguments: [_toJSValue(signals)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var aborted: Bool

    @ReadonlyAttribute
    public var reason: JSValue

    @inlinable public func throwIfAborted() {
        let this = jsObject
        _ = this[Strings.throwIfAborted].function!(this: this, arguments: [])
    }

    @ClosureAttribute1Optional
    public var onabort: EventHandler
}

public class AbstractRange: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.AbstractRange].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _startContainer = ReadonlyAttribute(jsObject: jsObject, name: Strings.startContainer)
        _startOffset = ReadonlyAttribute(jsObject: jsObject, name: Strings.startOffset)
        _endContainer = ReadonlyAttribute(jsObject: jsObject, name: Strings.endContainer)
        _endOffset = ReadonlyAttribute(jsObject: jsObject, name: Strings.endOffset)
        _collapsed = ReadonlyAttribute(jsObject: jsObject, name: Strings.collapsed)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var startContainer: Node

    @ReadonlyAttribute
    public var startOffset: UInt32

    @ReadonlyAttribute
    public var endContainer: Node

    @ReadonlyAttribute
    public var endOffset: UInt32

    @ReadonlyAttribute
    public var collapsed: Bool
}

public protocol AbstractWorker: JSBridgedClass {}
public extension AbstractWorker {
    @inlinable var onerror: EventHandler {
        get { ClosureAttribute1Optional[Strings.onerror, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onerror, in: jsObject] = newValue }
    }
}

public class AddEventListenerOptions: BridgedDictionary {
    public convenience init(passive: Bool, once: Bool, signal: AbortSignal) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.passive] = _toJSValue(passive)
        object[Strings.once] = _toJSValue(once)
        object[Strings.signal] = _toJSValue(signal)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _passive = ReadWriteAttribute(jsObject: object, name: Strings.passive)
        _once = ReadWriteAttribute(jsObject: object, name: Strings.once)
        _signal = ReadWriteAttribute(jsObject: object, name: Strings.signal)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var passive: Bool

    @ReadWriteAttribute
    public var once: Bool

    @ReadWriteAttribute
    public var signal: AbortSignal
}

public enum AlphaOption: JSString, JSValueCompatible {
    case keep = "keep"
    case discard = "discard"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public protocol AnimationFrameProvider: JSBridgedClass {}
public extension AnimationFrameProvider {
    @inlinable func requestAnimationFrame(callback: @escaping FrameRequestCallback) -> UInt32 {
        let this = jsObject
        return this[Strings.requestAnimationFrame].function!(this: this, arguments: [_toJSValue(callback)]).fromJSValue()!
    }

    @inlinable func cancelAnimationFrame(handle: UInt32) {
        let this = jsObject
        _ = this[Strings.cancelAnimationFrame].function!(this: this, arguments: [_toJSValue(handle)])
    }
}

public enum AppendMode: JSString, JSValueCompatible {
    case segments = "segments"
    case sequence = "sequence"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class AssignedNodesOptions: BridgedDictionary {
    public convenience init(flatten: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.flatten] = _toJSValue(flatten)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _flatten = ReadWriteAttribute(jsObject: object, name: Strings.flatten)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var flatten: Bool
}

public class Attr: Node {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.Attr].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _namespaceURI = ReadonlyAttribute(jsObject: jsObject, name: Strings.namespaceURI)
        _prefix = ReadonlyAttribute(jsObject: jsObject, name: Strings.prefix)
        _localName = ReadonlyAttribute(jsObject: jsObject, name: Strings.localName)
        _name = ReadonlyAttribute(jsObject: jsObject, name: Strings.name)
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _ownerElement = ReadonlyAttribute(jsObject: jsObject, name: Strings.ownerElement)
        _specified = ReadonlyAttribute(jsObject: jsObject, name: Strings.specified)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var namespaceURI: String?

    @ReadonlyAttribute
    public var prefix: String?

    @ReadonlyAttribute
    public var localName: String

    @ReadonlyAttribute
    public var name: String

    @ReadWriteAttribute
    public var value: String

    @ReadonlyAttribute
    public var ownerElement: Element?

    @ReadonlyAttribute
    public var specified: Bool
}

public class AudioData: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.AudioData].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _format = ReadonlyAttribute(jsObject: jsObject, name: Strings.format)
        _sampleRate = ReadonlyAttribute(jsObject: jsObject, name: Strings.sampleRate)
        _numberOfFrames = ReadonlyAttribute(jsObject: jsObject, name: Strings.numberOfFrames)
        _numberOfChannels = ReadonlyAttribute(jsObject: jsObject, name: Strings.numberOfChannels)
        _duration = ReadonlyAttribute(jsObject: jsObject, name: Strings.duration)
        _timestamp = ReadonlyAttribute(jsObject: jsObject, name: Strings.timestamp)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(init: AudioDataInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var format: AudioSampleFormat?

    @ReadonlyAttribute
    public var sampleRate: Float

    @ReadonlyAttribute
    public var numberOfFrames: UInt32

    @ReadonlyAttribute
    public var numberOfChannels: UInt32

    @ReadonlyAttribute
    public var duration: UInt64

    @ReadonlyAttribute
    public var timestamp: Int64

    @inlinable public func allocationSize(options: AudioDataCopyToOptions) -> UInt32 {
        let this = jsObject
        return this[Strings.allocationSize].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func copyTo(destination: AllowSharedBufferSource, options: AudioDataCopyToOptions) {
        let this = jsObject
        _ = this[Strings.copyTo].function!(this: this, arguments: [_toJSValue(destination), _toJSValue(options)])
    }

    @inlinable public func clone() -> Self {
        let this = jsObject
        return this[Strings.clone].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }
}

public class AudioDataCopyToOptions: BridgedDictionary {
    public convenience init(planeIndex: UInt32, frameOffset: UInt32, frameCount: UInt32, format: AudioSampleFormat) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.planeIndex] = _toJSValue(planeIndex)
        object[Strings.frameOffset] = _toJSValue(frameOffset)
        object[Strings.frameCount] = _toJSValue(frameCount)
        object[Strings.format] = _toJSValue(format)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _planeIndex = ReadWriteAttribute(jsObject: object, name: Strings.planeIndex)
        _frameOffset = ReadWriteAttribute(jsObject: object, name: Strings.frameOffset)
        _frameCount = ReadWriteAttribute(jsObject: object, name: Strings.frameCount)
        _format = ReadWriteAttribute(jsObject: object, name: Strings.format)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var planeIndex: UInt32

    @ReadWriteAttribute
    public var frameOffset: UInt32

    @ReadWriteAttribute
    public var frameCount: UInt32

    @ReadWriteAttribute
    public var format: AudioSampleFormat
}

public class AudioDataInit: BridgedDictionary {
    public convenience init(format: AudioSampleFormat, sampleRate: Float, numberOfFrames: UInt32, numberOfChannels: UInt32, timestamp: Int64, data: BufferSource, transfer: [ArrayBuffer]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.format] = _toJSValue(format)
        object[Strings.sampleRate] = _toJSValue(sampleRate)
        object[Strings.numberOfFrames] = _toJSValue(numberOfFrames)
        object[Strings.numberOfChannels] = _toJSValue(numberOfChannels)
        object[Strings.timestamp] = _toJSValue(timestamp)
        object[Strings.data] = _toJSValue(data)
        object[Strings.transfer] = _toJSValue(transfer)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _format = ReadWriteAttribute(jsObject: object, name: Strings.format)
        _sampleRate = ReadWriteAttribute(jsObject: object, name: Strings.sampleRate)
        _numberOfFrames = ReadWriteAttribute(jsObject: object, name: Strings.numberOfFrames)
        _numberOfChannels = ReadWriteAttribute(jsObject: object, name: Strings.numberOfChannels)
        _timestamp = ReadWriteAttribute(jsObject: object, name: Strings.timestamp)
        _data = ReadWriteAttribute(jsObject: object, name: Strings.data)
        _transfer = ReadWriteAttribute(jsObject: object, name: Strings.transfer)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var format: AudioSampleFormat

    @ReadWriteAttribute
    public var sampleRate: Float

    @ReadWriteAttribute
    public var numberOfFrames: UInt32

    @ReadWriteAttribute
    public var numberOfChannels: UInt32

    @ReadWriteAttribute
    public var timestamp: Int64

    @ReadWriteAttribute
    public var data: BufferSource

    @ReadWriteAttribute
    public var transfer: [ArrayBuffer]
}

public class AudioDecoder: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AudioDecoder].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _decodeQueueSize = ReadonlyAttribute(jsObject: jsObject, name: Strings.decodeQueueSize)
        _ondequeue = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.ondequeue)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(init: AudioDecoderInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var state: CodecState

    @ReadonlyAttribute
    public var decodeQueueSize: UInt32

    @ClosureAttribute1Optional
    public var ondequeue: EventHandler

    @inlinable public func configure(config: AudioDecoderConfig) {
        let this = jsObject
        _ = this[Strings.configure].function!(this: this, arguments: [_toJSValue(config)])
    }

    @inlinable public func decode(chunk: EncodedAudioChunk) {
        let this = jsObject
        _ = this[Strings.decode].function!(this: this, arguments: [_toJSValue(chunk)])
    }

    @inlinable public func flush() -> JSPromise {
        let this = jsObject
        return this[Strings.flush].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func flush() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.flush].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func reset() {
        let this = jsObject
        _ = this[Strings.reset].function!(this: this, arguments: [])
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @inlinable public class func isConfigSupported(config: AudioDecoderConfig) -> JSPromise {
        let this = constructor!
        return this[Strings.isConfigSupported].function!(this: this, arguments: [_toJSValue(config)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public class func isConfigSupported(config: AudioDecoderConfig) async throws -> AudioDecoderSupport {
        let this = constructor!
        let _promise: JSPromise = this[Strings.isConfigSupported].function!(this: this, arguments: [_toJSValue(config)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public class AudioDecoderConfig: BridgedDictionary {
    public convenience init(codec: String, sampleRate: UInt32, numberOfChannels: UInt32, description: BufferSource) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.codec] = _toJSValue(codec)
        object[Strings.sampleRate] = _toJSValue(sampleRate)
        object[Strings.numberOfChannels] = _toJSValue(numberOfChannels)
        object[Strings.description] = _toJSValue(description)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _codec = ReadWriteAttribute(jsObject: object, name: Strings.codec)
        _sampleRate = ReadWriteAttribute(jsObject: object, name: Strings.sampleRate)
        _numberOfChannels = ReadWriteAttribute(jsObject: object, name: Strings.numberOfChannels)
        _description = ReadWriteAttribute(jsObject: object, name: Strings.description)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var codec: String

    @ReadWriteAttribute
    public var sampleRate: UInt32

    @ReadWriteAttribute
    public var numberOfChannels: UInt32

    @ReadWriteAttribute
    public var description: BufferSource
}

public class AudioDecoderInit: BridgedDictionary {
    public convenience init(output: @escaping AudioDataOutputCallback, error: @escaping WebCodecsErrorCallback) {
        let object = JSObject.global[Strings.Object].function!.new()
        ClosureAttribute1Void[Strings.output, in: object] = output
        ClosureAttribute1Void[Strings.error, in: object] = error
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _output = ClosureAttribute1Void(jsObject: object, name: Strings.output)
        _error = ClosureAttribute1Void(jsObject: object, name: Strings.error)
        super.init(unsafelyWrapping: object)
    }

    @ClosureAttribute1Void
    public var output: AudioDataOutputCallback

    @ClosureAttribute1Void
    public var error: WebCodecsErrorCallback
}

public class AudioDecoderSupport: BridgedDictionary {
    public convenience init(supported: Bool, config: AudioDecoderConfig) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.supported] = _toJSValue(supported)
        object[Strings.config] = _toJSValue(config)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _supported = ReadWriteAttribute(jsObject: object, name: Strings.supported)
        _config = ReadWriteAttribute(jsObject: object, name: Strings.config)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var supported: Bool

    @ReadWriteAttribute
    public var config: AudioDecoderConfig
}

public class AudioEncoder: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AudioEncoder].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _encodeQueueSize = ReadonlyAttribute(jsObject: jsObject, name: Strings.encodeQueueSize)
        _ondequeue = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.ondequeue)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(init: AudioEncoderInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var state: CodecState

    @ReadonlyAttribute
    public var encodeQueueSize: UInt32

    @ClosureAttribute1Optional
    public var ondequeue: EventHandler

    @inlinable public func configure(config: AudioEncoderConfig) {
        let this = jsObject
        _ = this[Strings.configure].function!(this: this, arguments: [_toJSValue(config)])
    }

    @inlinable public func encode(data: AudioData) {
        let this = jsObject
        _ = this[Strings.encode].function!(this: this, arguments: [_toJSValue(data)])
    }

    @inlinable public func flush() -> JSPromise {
        let this = jsObject
        return this[Strings.flush].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func flush() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.flush].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func reset() {
        let this = jsObject
        _ = this[Strings.reset].function!(this: this, arguments: [])
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @inlinable public class func isConfigSupported(config: AudioEncoderConfig) -> JSPromise {
        let this = constructor!
        return this[Strings.isConfigSupported].function!(this: this, arguments: [_toJSValue(config)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public class func isConfigSupported(config: AudioEncoderConfig) async throws -> AudioEncoderSupport {
        let this = constructor!
        let _promise: JSPromise = this[Strings.isConfigSupported].function!(this: this, arguments: [_toJSValue(config)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public class AudioEncoderConfig: BridgedDictionary {
    public convenience init(codec: String, sampleRate: UInt32, numberOfChannels: UInt32, bitrate: UInt64, bitrateMode: BitrateMode) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.codec] = _toJSValue(codec)
        object[Strings.sampleRate] = _toJSValue(sampleRate)
        object[Strings.numberOfChannels] = _toJSValue(numberOfChannels)
        object[Strings.bitrate] = _toJSValue(bitrate)
        object[Strings.bitrateMode] = _toJSValue(bitrateMode)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _codec = ReadWriteAttribute(jsObject: object, name: Strings.codec)
        _sampleRate = ReadWriteAttribute(jsObject: object, name: Strings.sampleRate)
        _numberOfChannels = ReadWriteAttribute(jsObject: object, name: Strings.numberOfChannels)
        _bitrate = ReadWriteAttribute(jsObject: object, name: Strings.bitrate)
        _bitrateMode = ReadWriteAttribute(jsObject: object, name: Strings.bitrateMode)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var codec: String

    @ReadWriteAttribute
    public var sampleRate: UInt32

    @ReadWriteAttribute
    public var numberOfChannels: UInt32

    @ReadWriteAttribute
    public var bitrate: UInt64

    @ReadWriteAttribute
    public var bitrateMode: BitrateMode
}

public class AudioEncoderInit: BridgedDictionary {
    public convenience init(output: @escaping EncodedAudioChunkOutputCallback, error: @escaping WebCodecsErrorCallback) {
        let object = JSObject.global[Strings.Object].function!.new()
        ClosureAttribute2Void[Strings.output, in: object] = output
        ClosureAttribute1Void[Strings.error, in: object] = error
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _output = ClosureAttribute2Void(jsObject: object, name: Strings.output)
        _error = ClosureAttribute1Void(jsObject: object, name: Strings.error)
        super.init(unsafelyWrapping: object)
    }

    @ClosureAttribute2Void
    public var output: EncodedAudioChunkOutputCallback

    @ClosureAttribute1Void
    public var error: WebCodecsErrorCallback
}

public class AudioEncoderSupport: BridgedDictionary {
    public convenience init(supported: Bool, config: AudioEncoderConfig) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.supported] = _toJSValue(supported)
        object[Strings.config] = _toJSValue(config)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _supported = ReadWriteAttribute(jsObject: object, name: Strings.supported)
        _config = ReadWriteAttribute(jsObject: object, name: Strings.config)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var supported: Bool

    @ReadWriteAttribute
    public var config: AudioEncoderConfig
}

public enum AudioSampleFormat: JSString, JSValueCompatible {
    case u8 = "u8"
    case s16 = "s16"
    case s32 = "s32"
    case f32 = "f32"
    case u8Planar = "u8-planar"
    case s16Planar = "s16-planar"
    case s32Planar = "s32-planar"
    case f32Planar = "f32-planar"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class AudioTrack: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.AudioTrack].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _kind = ReadonlyAttribute(jsObject: jsObject, name: Strings.kind)
        _label = ReadonlyAttribute(jsObject: jsObject, name: Strings.label)
        _language = ReadonlyAttribute(jsObject: jsObject, name: Strings.language)
        _enabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.enabled)
        _sourceBuffer = ReadonlyAttribute(jsObject: jsObject, name: Strings.sourceBuffer)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var id: String

    @ReadonlyAttribute
    public var kind: String

    @ReadonlyAttribute
    public var label: String

    @ReadonlyAttribute
    public var language: String

    @ReadWriteAttribute
    public var enabled: Bool

    @ReadonlyAttribute
    public var sourceBuffer: SourceBuffer?
}

public class AudioTrackList: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.AudioTrackList].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        _onchange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onchange)
        _onaddtrack = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onaddtrack)
        _onremovetrack = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onremovetrack)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> AudioTrack {
        jsObject[key].fromJSValue()!
    }

    @inlinable public func getTrackById(id: String) -> AudioTrack? {
        let this = jsObject
        return this[Strings.getTrackById].function!(this: this, arguments: [_toJSValue(id)]).fromJSValue()
    }

    @ClosureAttribute1Optional
    public var onchange: EventHandler

    @ClosureAttribute1Optional
    public var onaddtrack: EventHandler

    @ClosureAttribute1Optional
    public var onremovetrack: EventHandler
}

public class BarProp: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.BarProp].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _visible = ReadonlyAttribute(jsObject: jsObject, name: Strings.visible)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var visible: Bool
}

public class BeforeUnloadEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.BeforeUnloadEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _returnValue = ReadWriteAttribute(jsObject: jsObject, name: Strings.returnValue)
        super.init(unsafelyWrapping: jsObject)
    }

    @available(*, unavailable)
    override public var returnValue: Bool {
        get { !_returnValue.wrappedValue.isEmpty }
        set {}
    }

    @usableFromInline let _returnValue: ReadWriteAttribute<String>
    // renamed because `String` is not compatible with `Bool`
    @inlinable public var returnValueAsString: String {
        get { _returnValue.wrappedValue }
        set { _returnValue.wrappedValue = newValue }
    }
}

public enum BitrateMode: JSString, JSValueCompatible {
    case constant = "constant"
    case variable = "variable"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class Blob: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Blob].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _size = ReadonlyAttribute(jsObject: jsObject, name: Strings.size)
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(blobParts: [BlobPart]? = nil, options: BlobPropertyBag? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(blobParts), _toJSValue(options)]))
    }

    @ReadonlyAttribute
    public var size: UInt64

    @ReadonlyAttribute
    public var type: String

    @inlinable public func slice(start: Int64? = nil, end: Int64? = nil, contentType: String? = nil) -> Self {
        let this = jsObject
        return this[Strings.slice].function!(this: this, arguments: [_toJSValue(start), _toJSValue(end), _toJSValue(contentType)]).fromJSValue()!
    }

    @inlinable public func stream() -> ReadableStream {
        let this = jsObject
        return this[Strings.stream].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func text() -> JSPromise {
        let this = jsObject
        return this[Strings.text].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func text() async throws -> String {
        let this = jsObject
        let _promise: JSPromise = this[Strings.text].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func arrayBuffer() -> JSPromise {
        let this = jsObject
        return this[Strings.arrayBuffer].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func arrayBuffer() async throws -> ArrayBuffer {
        let this = jsObject
        let _promise: JSPromise = this[Strings.arrayBuffer].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public class BlobEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.BlobEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _data = ReadonlyAttribute(jsObject: jsObject, name: Strings.data)
        _timecode = ReadonlyAttribute(jsObject: jsObject, name: Strings.timecode)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: BlobEventInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var data: Blob

    @ReadonlyAttribute
    public var timecode: DOMHighResTimeStamp
}

public class BlobEventInit: BridgedDictionary {
    public convenience init(data: Blob, timecode: DOMHighResTimeStamp) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.data] = _toJSValue(data)
        object[Strings.timecode] = _toJSValue(timecode)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _data = ReadWriteAttribute(jsObject: object, name: Strings.data)
        _timecode = ReadWriteAttribute(jsObject: object, name: Strings.timecode)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var data: Blob

    @ReadWriteAttribute
    public var timecode: DOMHighResTimeStamp
}

public class BlobPropertyBag: BridgedDictionary {
    public convenience init(type: String, endings: EndingType) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.type] = _toJSValue(type)
        object[Strings.endings] = _toJSValue(endings)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        _endings = ReadWriteAttribute(jsObject: object, name: Strings.endings)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var endings: EndingType
}

public protocol Body: JSBridgedClass {}
public extension Body {
    @inlinable var body: ReadableStream? { jsObject[Strings.body].fromJSValue() }

    @inlinable var bodyUsed: Bool { jsObject[Strings.bodyUsed].fromJSValue()! }

    @inlinable func arrayBuffer() -> JSPromise {
        let this = jsObject
        return this[Strings.arrayBuffer].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable func arrayBuffer() async throws -> ArrayBuffer {
        let this = jsObject
        let _promise: JSPromise = this[Strings.arrayBuffer].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable func blob() -> JSPromise {
        let this = jsObject
        return this[Strings.blob].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable func blob() async throws -> Blob {
        let this = jsObject
        let _promise: JSPromise = this[Strings.blob].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable func formData() -> JSPromise {
        let this = jsObject
        return this[Strings.formData].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable func formData() async throws -> FormData {
        let this = jsObject
        let _promise: JSPromise = this[Strings.formData].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable func json() -> JSPromise {
        let this = jsObject
        return this[Strings.json].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable func json() async throws -> JSValue {
        let this = jsObject
        let _promise: JSPromise = this[Strings.json].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable func text() -> JSPromise {
        let this = jsObject
        return this[Strings.text].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable func text() async throws -> String {
        let this = jsObject
        let _promise: JSPromise = this[Strings.text].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public class BoxQuadOptions: BridgedDictionary {
    public convenience init(box: CSSBoxType, relativeTo: GeometryNode) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.box] = _toJSValue(box)
        object[Strings.relativeTo] = _toJSValue(relativeTo)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _box = ReadWriteAttribute(jsObject: object, name: Strings.box)
        _relativeTo = ReadWriteAttribute(jsObject: object, name: Strings.relativeTo)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var box: CSSBoxType

    @ReadWriteAttribute
    public var relativeTo: GeometryNode
}

public class BroadcastChannel: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.BroadcastChannel].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadonlyAttribute(jsObject: jsObject, name: Strings.name)
        _onmessage = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onmessage)
        _onmessageerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onmessageerror)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(name: String) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(name)]))
    }

    @ReadonlyAttribute
    public var name: String

    @inlinable public func postMessage(message: JSValue) {
        let this = jsObject
        _ = this[Strings.postMessage].function!(this: this, arguments: [_toJSValue(message)])
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @ClosureAttribute1Optional
    public var onmessage: EventHandler

    @ClosureAttribute1Optional
    public var onmessageerror: EventHandler
}

public class ByteLengthQueuingStrategy: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ByteLengthQueuingStrategy].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _highWaterMark = ReadonlyAttribute(jsObject: jsObject, name: Strings.highWaterMark)
        _size = ReadonlyAttribute(jsObject: jsObject, name: Strings.size)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(init: QueuingStrategyInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var highWaterMark: Double

    @ReadonlyAttribute
    public var size: JSFunction
}

public class CDATASection: Text {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.CDATASection].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }
}

public enum CSSBoxType: JSString, JSValueCompatible {
    case margin = "margin"
    case border = "border"
    case padding = "padding"
    case content = "content"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class CSSPseudoElement: EventTarget, GeometryUtils {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.CSSPseudoElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _element = ReadonlyAttribute(jsObject: jsObject, name: Strings.element)
        _parent = ReadonlyAttribute(jsObject: jsObject, name: Strings.parent)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var type: String

    @ReadonlyAttribute
    public var element: Element

    @ReadonlyAttribute
    public var parent: CSSPseudoElement_or_Element

    @inlinable public func pseudo(type: String) -> CSSPseudoElement? {
        let this = jsObject
        return this[Strings.pseudo].function!(this: this, arguments: [_toJSValue(type)]).fromJSValue()
    }
}

public class Cache: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Cache].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func match(request: RequestInfo, options: CacheQueryOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.match].function!(this: this, arguments: [_toJSValue(request), _toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func match(request: RequestInfo, options: CacheQueryOptions? = nil) async throws -> Response? {
        let this = jsObject
        let _promise: JSPromise = this[Strings.match].function!(this: this, arguments: [_toJSValue(request), _toJSValue(options)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func matchAll(request: RequestInfo? = nil, options: CacheQueryOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.matchAll].function!(this: this, arguments: [_toJSValue(request), _toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func matchAll(request: RequestInfo? = nil, options: CacheQueryOptions? = nil) async throws -> [Response] {
        let this = jsObject
        let _promise: JSPromise = this[Strings.matchAll].function!(this: this, arguments: [_toJSValue(request), _toJSValue(options)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func add(request: RequestInfo) -> JSPromise {
        let this = jsObject
        return this[Strings.add].function!(this: this, arguments: [_toJSValue(request)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func add(request: RequestInfo) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.add].function!(this: this, arguments: [_toJSValue(request)]).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func addAll(requests: [RequestInfo]) -> JSPromise {
        let this = jsObject
        return this[Strings.addAll].function!(this: this, arguments: [_toJSValue(requests)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func addAll(requests: [RequestInfo]) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.addAll].function!(this: this, arguments: [_toJSValue(requests)]).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func put(request: RequestInfo, response: Response) -> JSPromise {
        let this = jsObject
        return this[Strings.put].function!(this: this, arguments: [_toJSValue(request), _toJSValue(response)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func put(request: RequestInfo, response: Response) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.put].function!(this: this, arguments: [_toJSValue(request), _toJSValue(response)]).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func delete(request: RequestInfo, options: CacheQueryOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.delete].function!(this: this, arguments: [_toJSValue(request), _toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func delete(request: RequestInfo, options: CacheQueryOptions? = nil) async throws -> Bool {
        let this = jsObject
        let _promise: JSPromise = this[Strings.delete].function!(this: this, arguments: [_toJSValue(request), _toJSValue(options)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func keys(request: RequestInfo? = nil, options: CacheQueryOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.keys].function!(this: this, arguments: [_toJSValue(request), _toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func keys(request: RequestInfo? = nil, options: CacheQueryOptions? = nil) async throws -> [Request] {
        let this = jsObject
        let _promise: JSPromise = this[Strings.keys].function!(this: this, arguments: [_toJSValue(request), _toJSValue(options)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public class CacheQueryOptions: BridgedDictionary {
    public convenience init(ignoreSearch: Bool, ignoreMethod: Bool, ignoreVary: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.ignoreSearch] = _toJSValue(ignoreSearch)
        object[Strings.ignoreMethod] = _toJSValue(ignoreMethod)
        object[Strings.ignoreVary] = _toJSValue(ignoreVary)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _ignoreSearch = ReadWriteAttribute(jsObject: object, name: Strings.ignoreSearch)
        _ignoreMethod = ReadWriteAttribute(jsObject: object, name: Strings.ignoreMethod)
        _ignoreVary = ReadWriteAttribute(jsObject: object, name: Strings.ignoreVary)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var ignoreSearch: Bool

    @ReadWriteAttribute
    public var ignoreMethod: Bool

    @ReadWriteAttribute
    public var ignoreVary: Bool
}

public class CacheStorage: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.CacheStorage].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func match(request: RequestInfo, options: MultiCacheQueryOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.match].function!(this: this, arguments: [_toJSValue(request), _toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func match(request: RequestInfo, options: MultiCacheQueryOptions? = nil) async throws -> Response? {
        let this = jsObject
        let _promise: JSPromise = this[Strings.match].function!(this: this, arguments: [_toJSValue(request), _toJSValue(options)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func has(cacheName: String) -> JSPromise {
        let this = jsObject
        return this[Strings.has].function!(this: this, arguments: [_toJSValue(cacheName)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func has(cacheName: String) async throws -> Bool {
        let this = jsObject
        let _promise: JSPromise = this[Strings.has].function!(this: this, arguments: [_toJSValue(cacheName)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func open(cacheName: String) -> JSPromise {
        let this = jsObject
        return this[Strings.open].function!(this: this, arguments: [_toJSValue(cacheName)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func open(cacheName: String) async throws -> Cache {
        let this = jsObject
        let _promise: JSPromise = this[Strings.open].function!(this: this, arguments: [_toJSValue(cacheName)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func delete(cacheName: String) -> JSPromise {
        let this = jsObject
        return this[Strings.delete].function!(this: this, arguments: [_toJSValue(cacheName)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func delete(cacheName: String) async throws -> Bool {
        let this = jsObject
        let _promise: JSPromise = this[Strings.delete].function!(this: this, arguments: [_toJSValue(cacheName)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func keys() -> JSPromise {
        let this = jsObject
        return this[Strings.keys].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func keys() async throws -> [String] {
        let this = jsObject
        let _promise: JSPromise = this[Strings.keys].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public class CameraDevicePermissionDescriptor: BridgedDictionary {
    public convenience init(panTiltZoom: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.panTiltZoom] = _toJSValue(panTiltZoom)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _panTiltZoom = ReadWriteAttribute(jsObject: object, name: Strings.panTiltZoom)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var panTiltZoom: Bool
}

public enum CanPlayTypeResult: JSString, JSValueCompatible {
    case _empty = ""
    case maybe = "maybe"
    case probably = "probably"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public protocol CanvasCompositing: JSBridgedClass {}
public extension CanvasCompositing {
    @inlinable var globalAlpha: Double {
        get { jsObject[Strings.globalAlpha].fromJSValue()! }
        nonmutating set { jsObject[Strings.globalAlpha] = _toJSValue(newValue) }
    }

    @inlinable var globalCompositeOperation: String {
        get { jsObject[Strings.globalCompositeOperation].fromJSValue()! }
        nonmutating set { jsObject[Strings.globalCompositeOperation] = _toJSValue(newValue) }
    }
}

public enum CanvasDirection: JSString, JSValueCompatible {
    case ltr = "ltr"
    case rtl = "rtl"
    case inherit = "inherit"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public protocol CanvasDrawImage: JSBridgedClass {}
public extension CanvasDrawImage {
    @inlinable func drawImage(image: CanvasImageSource, dx: Double, dy: Double) {
        let this = jsObject
        _ = this[Strings.drawImage].function!(this: this, arguments: [_toJSValue(image), _toJSValue(dx), _toJSValue(dy)])
    }

    @inlinable func drawImage(image: CanvasImageSource, dx: Double, dy: Double, dw: Double, dh: Double) {
        let this = jsObject
        _ = this[Strings.drawImage].function!(this: this, arguments: [_toJSValue(image), _toJSValue(dx), _toJSValue(dy), _toJSValue(dw), _toJSValue(dh)])
    }

    @inlinable func drawImage(image: CanvasImageSource, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double) {
        let this = jsObject
        _ = this[Strings.drawImage].function!(this: this, arguments: [_toJSValue(image), _toJSValue(sx), _toJSValue(sy), _toJSValue(sw), _toJSValue(sh), _toJSValue(dx), _toJSValue(dy), _toJSValue(dw), _toJSValue(dh)])
    }
}

public protocol CanvasDrawPath: JSBridgedClass {}
public extension CanvasDrawPath {
    @inlinable func beginPath() {
        let this = jsObject
        _ = this[Strings.beginPath].function!(this: this, arguments: [])
    }

    @inlinable func fill(fillRule: CanvasFillRule? = nil) {
        let this = jsObject
        _ = this[Strings.fill].function!(this: this, arguments: [_toJSValue(fillRule)])
    }

    @inlinable func fill(path: Path2D, fillRule: CanvasFillRule? = nil) {
        let this = jsObject
        _ = this[Strings.fill].function!(this: this, arguments: [_toJSValue(path), _toJSValue(fillRule)])
    }

    @inlinable func stroke() {
        let this = jsObject
        _ = this[Strings.stroke].function!(this: this, arguments: [])
    }

    @inlinable func stroke(path: Path2D) {
        let this = jsObject
        _ = this[Strings.stroke].function!(this: this, arguments: [_toJSValue(path)])
    }

    @inlinable func clip(fillRule: CanvasFillRule? = nil) {
        let this = jsObject
        _ = this[Strings.clip].function!(this: this, arguments: [_toJSValue(fillRule)])
    }

    @inlinable func clip(path: Path2D, fillRule: CanvasFillRule? = nil) {
        let this = jsObject
        _ = this[Strings.clip].function!(this: this, arguments: [_toJSValue(path), _toJSValue(fillRule)])
    }

    @inlinable func isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule? = nil) -> Bool {
        let this = jsObject
        return this[Strings.isPointInPath].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(fillRule)]).fromJSValue()!
    }

    @inlinable func isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule? = nil) -> Bool {
        let this = jsObject
        return this[Strings.isPointInPath].function!(this: this, arguments: [_toJSValue(path), _toJSValue(x), _toJSValue(y), _toJSValue(fillRule)]).fromJSValue()!
    }

    @inlinable func isPointInStroke(x: Double, y: Double) -> Bool {
        let this = jsObject
        return this[Strings.isPointInStroke].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)]).fromJSValue()!
    }

    @inlinable func isPointInStroke(path: Path2D, x: Double, y: Double) -> Bool {
        let this = jsObject
        return this[Strings.isPointInStroke].function!(this: this, arguments: [_toJSValue(path), _toJSValue(x), _toJSValue(y)]).fromJSValue()!
    }
}

public enum CanvasFillRule: JSString, JSValueCompatible {
    case nonzero = "nonzero"
    case evenodd = "evenodd"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public protocol CanvasFillStrokeStyles: JSBridgedClass {}
public extension CanvasFillStrokeStyles {
    @inlinable var strokeStyle: CanvasGradient_or_CanvasPattern_or_String {
        get { jsObject[Strings.strokeStyle].fromJSValue()! }
        nonmutating set { jsObject[Strings.strokeStyle] = _toJSValue(newValue) }
    }

    @inlinable var fillStyle: CanvasGradient_or_CanvasPattern_or_String {
        get { jsObject[Strings.fillStyle].fromJSValue()! }
        nonmutating set { jsObject[Strings.fillStyle] = _toJSValue(newValue) }
    }

    @inlinable func createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double) -> CanvasGradient {
        let this = jsObject
        return this[Strings.createLinearGradient].function!(this: this, arguments: [_toJSValue(x0), _toJSValue(y0), _toJSValue(x1), _toJSValue(y1)]).fromJSValue()!
    }

    @inlinable func createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double) -> CanvasGradient {
        let this = jsObject
        return this[Strings.createRadialGradient].function!(this: this, arguments: [_toJSValue(x0), _toJSValue(y0), _toJSValue(r0), _toJSValue(x1), _toJSValue(y1), _toJSValue(r1)]).fromJSValue()!
    }

    @inlinable func createConicGradient(startAngle: Double, x: Double, y: Double) -> CanvasGradient {
        let this = jsObject
        return this[Strings.createConicGradient].function!(this: this, arguments: [_toJSValue(startAngle), _toJSValue(x), _toJSValue(y)]).fromJSValue()!
    }

    @inlinable func createPattern(image: CanvasImageSource, repetition: String) -> CanvasPattern? {
        let this = jsObject
        return this[Strings.createPattern].function!(this: this, arguments: [_toJSValue(image), _toJSValue(repetition)]).fromJSValue()
    }
}

public protocol CanvasFilters: JSBridgedClass {}
public extension CanvasFilters {
    @inlinable var filter: String {
        get { jsObject[Strings.filter].fromJSValue()! }
        nonmutating set { jsObject[Strings.filter] = _toJSValue(newValue) }
    }
}

public enum CanvasFontKerning: JSString, JSValueCompatible {
    case auto = "auto"
    case normal = "normal"
    case none = "none"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum CanvasFontStretch: JSString, JSValueCompatible {
    case ultraCondensed = "ultra-condensed"
    case extraCondensed = "extra-condensed"
    case condensed = "condensed"
    case semiCondensed = "semi-condensed"
    case normal = "normal"
    case semiExpanded = "semi-expanded"
    case expanded = "expanded"
    case extraExpanded = "extra-expanded"
    case ultraExpanded = "ultra-expanded"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum CanvasFontVariantCaps: JSString, JSValueCompatible {
    case normal = "normal"
    case smallCaps = "small-caps"
    case allSmallCaps = "all-small-caps"
    case petiteCaps = "petite-caps"
    case allPetiteCaps = "all-petite-caps"
    case unicase = "unicase"
    case titlingCaps = "titling-caps"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class CanvasGradient: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.CanvasGradient].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func addColorStop(offset: Double, color: String) {
        let this = jsObject
        _ = this[Strings.addColorStop].function!(this: this, arguments: [_toJSValue(offset), _toJSValue(color)])
    }
}

public protocol CanvasImageData: JSBridgedClass {}
public extension CanvasImageData {
    @inlinable func createImageData(sw: Int32, sh: Int32, settings: ImageDataSettings? = nil) -> ImageData {
        let this = jsObject
        return this[Strings.createImageData].function!(this: this, arguments: [_toJSValue(sw), _toJSValue(sh), _toJSValue(settings)]).fromJSValue()!
    }

    @inlinable func createImageData(imagedata: ImageData) -> ImageData {
        let this = jsObject
        return this[Strings.createImageData].function!(this: this, arguments: [_toJSValue(imagedata)]).fromJSValue()!
    }

    @inlinable func getImageData(sx: Int32, sy: Int32, sw: Int32, sh: Int32, settings: ImageDataSettings? = nil) -> ImageData {
        let this = jsObject
        return this[Strings.getImageData].function!(this: this, arguments: [_toJSValue(sx), _toJSValue(sy), _toJSValue(sw), _toJSValue(sh), _toJSValue(settings)]).fromJSValue()!
    }

    @inlinable func putImageData(imagedata: ImageData, dx: Int32, dy: Int32) {
        let this = jsObject
        _ = this[Strings.putImageData].function!(this: this, arguments: [_toJSValue(imagedata), _toJSValue(dx), _toJSValue(dy)])
    }

    @inlinable func putImageData(imagedata: ImageData, dx: Int32, dy: Int32, dirtyX: Int32, dirtyY: Int32, dirtyWidth: Int32, dirtyHeight: Int32) {
        let this = jsObject
        _ = this[Strings.putImageData].function!(this: this, arguments: [_toJSValue(imagedata), _toJSValue(dx), _toJSValue(dy), _toJSValue(dirtyX), _toJSValue(dirtyY), _toJSValue(dirtyWidth), _toJSValue(dirtyHeight)])
    }
}

public protocol CanvasImageSmoothing: JSBridgedClass {}
public extension CanvasImageSmoothing {
    @inlinable var imageSmoothingEnabled: Bool {
        get { jsObject[Strings.imageSmoothingEnabled].fromJSValue()! }
        nonmutating set { jsObject[Strings.imageSmoothingEnabled] = _toJSValue(newValue) }
    }

    @inlinable var imageSmoothingQuality: ImageSmoothingQuality {
        get { jsObject[Strings.imageSmoothingQuality].fromJSValue()! }
        nonmutating set { jsObject[Strings.imageSmoothingQuality] = _toJSValue(newValue) }
    }
}

public enum CanvasLineCap: JSString, JSValueCompatible {
    case butt = "butt"
    case round = "round"
    case square = "square"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum CanvasLineJoin: JSString, JSValueCompatible {
    case round = "round"
    case bevel = "bevel"
    case miter = "miter"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public protocol CanvasPath: JSBridgedClass {}
public extension CanvasPath {
    @inlinable func closePath() {
        let this = jsObject
        _ = this[Strings.closePath].function!(this: this, arguments: [])
    }

    @inlinable func moveTo(x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.moveTo].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @inlinable func lineTo(x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.lineTo].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @inlinable func quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.quadraticCurveTo].function!(this: this, arguments: [_toJSValue(cpx), _toJSValue(cpy), _toJSValue(x), _toJSValue(y)])
    }

    @inlinable func bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.bezierCurveTo].function!(this: this, arguments: [_toJSValue(cp1x), _toJSValue(cp1y), _toJSValue(cp2x), _toJSValue(cp2y), _toJSValue(x), _toJSValue(y)])
    }

    @inlinable func arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double) {
        let this = jsObject
        _ = this[Strings.arcTo].function!(this: this, arguments: [_toJSValue(x1), _toJSValue(y1), _toJSValue(x2), _toJSValue(y2), _toJSValue(radius)])
    }

    @inlinable func rect(x: Double, y: Double, w: Double, h: Double) {
        let this = jsObject
        _ = this[Strings.rect].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(w), _toJSValue(h)])
    }

    @inlinable func roundRect(x: Double, y: Double, w: Double, h: Double, radii: DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double? = nil) {
        let this = jsObject
        _ = this[Strings.roundRect].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(w), _toJSValue(h), _toJSValue(radii)])
    }

    @inlinable func arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, counterclockwise: Bool? = nil) {
        let this = jsObject
        _ = this[Strings.arc].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(radius), _toJSValue(startAngle), _toJSValue(endAngle), _toJSValue(counterclockwise)])
    }

    @inlinable func ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, counterclockwise: Bool? = nil) {
        let this = jsObject
        _ = this[Strings.ellipse].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(radiusX), _toJSValue(radiusY), _toJSValue(rotation), _toJSValue(startAngle), _toJSValue(endAngle), _toJSValue(counterclockwise)])
    }
}

public protocol CanvasPathDrawingStyles: JSBridgedClass {}
public extension CanvasPathDrawingStyles {
    @inlinable var lineWidth: Double {
        get { jsObject[Strings.lineWidth].fromJSValue()! }
        nonmutating set { jsObject[Strings.lineWidth] = _toJSValue(newValue) }
    }

    @inlinable var lineCap: CanvasLineCap {
        get { jsObject[Strings.lineCap].fromJSValue()! }
        nonmutating set { jsObject[Strings.lineCap] = _toJSValue(newValue) }
    }

    @inlinable var lineJoin: CanvasLineJoin {
        get { jsObject[Strings.lineJoin].fromJSValue()! }
        nonmutating set { jsObject[Strings.lineJoin] = _toJSValue(newValue) }
    }

    @inlinable var miterLimit: Double {
        get { jsObject[Strings.miterLimit].fromJSValue()! }
        nonmutating set { jsObject[Strings.miterLimit] = _toJSValue(newValue) }
    }

    @inlinable func setLineDash(segments: [Double]) {
        let this = jsObject
        _ = this[Strings.setLineDash].function!(this: this, arguments: [_toJSValue(segments)])
    }

    @inlinable func getLineDash() -> [Double] {
        let this = jsObject
        return this[Strings.getLineDash].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable var lineDashOffset: Double {
        get { jsObject[Strings.lineDashOffset].fromJSValue()! }
        nonmutating set { jsObject[Strings.lineDashOffset] = _toJSValue(newValue) }
    }
}

public class CanvasPattern: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.CanvasPattern].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func setTransform(transform: DOMMatrix2DInit? = nil) {
        let this = jsObject
        _ = this[Strings.setTransform].function!(this: this, arguments: [_toJSValue(transform)])
    }
}

public protocol CanvasRect: JSBridgedClass {}
public extension CanvasRect {
    @inlinable func clearRect(x: Double, y: Double, w: Double, h: Double) {
        let this = jsObject
        _ = this[Strings.clearRect].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(w), _toJSValue(h)])
    }

    @inlinable func fillRect(x: Double, y: Double, w: Double, h: Double) {
        let this = jsObject
        _ = this[Strings.fillRect].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(w), _toJSValue(h)])
    }

    @inlinable func strokeRect(x: Double, y: Double, w: Double, h: Double) {
        let this = jsObject
        _ = this[Strings.strokeRect].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(w), _toJSValue(h)])
    }
}

public class CanvasRenderingContext2D: JSBridgedClass, CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.CanvasRenderingContext2D].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _canvas = ReadonlyAttribute(jsObject: jsObject, name: Strings.canvas)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var canvas: HTMLCanvasElement

    @inlinable public func getContextAttributes() -> CanvasRenderingContext2DSettings {
        let this = jsObject
        return this[Strings.getContextAttributes].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class CanvasRenderingContext2DSettings: BridgedDictionary {
    public convenience init(alpha: Bool, desynchronized: Bool, colorSpace: PredefinedColorSpace, willReadFrequently: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.alpha] = _toJSValue(alpha)
        object[Strings.desynchronized] = _toJSValue(desynchronized)
        object[Strings.colorSpace] = _toJSValue(colorSpace)
        object[Strings.willReadFrequently] = _toJSValue(willReadFrequently)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _alpha = ReadWriteAttribute(jsObject: object, name: Strings.alpha)
        _desynchronized = ReadWriteAttribute(jsObject: object, name: Strings.desynchronized)
        _colorSpace = ReadWriteAttribute(jsObject: object, name: Strings.colorSpace)
        _willReadFrequently = ReadWriteAttribute(jsObject: object, name: Strings.willReadFrequently)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var alpha: Bool

    @ReadWriteAttribute
    public var desynchronized: Bool

    @ReadWriteAttribute
    public var colorSpace: PredefinedColorSpace

    @ReadWriteAttribute
    public var willReadFrequently: Bool
}

public protocol CanvasShadowStyles: JSBridgedClass {}
public extension CanvasShadowStyles {
    @inlinable var shadowOffsetX: Double {
        get { jsObject[Strings.shadowOffsetX].fromJSValue()! }
        nonmutating set { jsObject[Strings.shadowOffsetX] = _toJSValue(newValue) }
    }

    @inlinable var shadowOffsetY: Double {
        get { jsObject[Strings.shadowOffsetY].fromJSValue()! }
        nonmutating set { jsObject[Strings.shadowOffsetY] = _toJSValue(newValue) }
    }

    @inlinable var shadowBlur: Double {
        get { jsObject[Strings.shadowBlur].fromJSValue()! }
        nonmutating set { jsObject[Strings.shadowBlur] = _toJSValue(newValue) }
    }

    @inlinable var shadowColor: String {
        get { jsObject[Strings.shadowColor].fromJSValue()! }
        nonmutating set { jsObject[Strings.shadowColor] = _toJSValue(newValue) }
    }
}

public protocol CanvasState: JSBridgedClass {}
public extension CanvasState {
    @inlinable func save() {
        let this = jsObject
        _ = this[Strings.save].function!(this: this, arguments: [])
    }

    @inlinable func restore() {
        let this = jsObject
        _ = this[Strings.restore].function!(this: this, arguments: [])
    }

    @inlinable func reset() {
        let this = jsObject
        _ = this[Strings.reset].function!(this: this, arguments: [])
    }

    @inlinable func isContextLost() -> Bool {
        let this = jsObject
        return this[Strings.isContextLost].function!(this: this, arguments: []).fromJSValue()!
    }
}

public protocol CanvasText: JSBridgedClass {}
public extension CanvasText {
    @inlinable func fillText(text: String, x: Double, y: Double, maxWidth: Double? = nil) {
        let this = jsObject
        _ = this[Strings.fillText].function!(this: this, arguments: [_toJSValue(text), _toJSValue(x), _toJSValue(y), _toJSValue(maxWidth)])
    }

    @inlinable func strokeText(text: String, x: Double, y: Double, maxWidth: Double? = nil) {
        let this = jsObject
        _ = this[Strings.strokeText].function!(this: this, arguments: [_toJSValue(text), _toJSValue(x), _toJSValue(y), _toJSValue(maxWidth)])
    }

    @inlinable func measureText(text: String) -> TextMetrics {
        let this = jsObject
        return this[Strings.measureText].function!(this: this, arguments: [_toJSValue(text)]).fromJSValue()!
    }
}

public enum CanvasTextAlign: JSString, JSValueCompatible {
    case start = "start"
    case end = "end"
    case left = "left"
    case right = "right"
    case center = "center"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum CanvasTextBaseline: JSString, JSValueCompatible {
    case top = "top"
    case hanging = "hanging"
    case middle = "middle"
    case alphabetic = "alphabetic"
    case ideographic = "ideographic"
    case bottom = "bottom"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public protocol CanvasTextDrawingStyles: JSBridgedClass {}
public extension CanvasTextDrawingStyles {
    @inlinable var font: String {
        get { jsObject[Strings.font].fromJSValue()! }
        nonmutating set { jsObject[Strings.font] = _toJSValue(newValue) }
    }

    @inlinable var textAlign: CanvasTextAlign {
        get { jsObject[Strings.textAlign].fromJSValue()! }
        nonmutating set { jsObject[Strings.textAlign] = _toJSValue(newValue) }
    }

    @inlinable var textBaseline: CanvasTextBaseline {
        get { jsObject[Strings.textBaseline].fromJSValue()! }
        nonmutating set { jsObject[Strings.textBaseline] = _toJSValue(newValue) }
    }

    @inlinable var direction: CanvasDirection {
        get { jsObject[Strings.direction].fromJSValue()! }
        nonmutating set { jsObject[Strings.direction] = _toJSValue(newValue) }
    }

    @inlinable var letterSpacing: String {
        get { jsObject[Strings.letterSpacing].fromJSValue()! }
        nonmutating set { jsObject[Strings.letterSpacing] = _toJSValue(newValue) }
    }

    @inlinable var fontKerning: CanvasFontKerning {
        get { jsObject[Strings.fontKerning].fromJSValue()! }
        nonmutating set { jsObject[Strings.fontKerning] = _toJSValue(newValue) }
    }

    @inlinable var fontStretch: CanvasFontStretch {
        get { jsObject[Strings.fontStretch].fromJSValue()! }
        nonmutating set { jsObject[Strings.fontStretch] = _toJSValue(newValue) }
    }

    @inlinable var fontVariantCaps: CanvasFontVariantCaps {
        get { jsObject[Strings.fontVariantCaps].fromJSValue()! }
        nonmutating set { jsObject[Strings.fontVariantCaps] = _toJSValue(newValue) }
    }

    @inlinable var textRendering: CanvasTextRendering {
        get { jsObject[Strings.textRendering].fromJSValue()! }
        nonmutating set { jsObject[Strings.textRendering] = _toJSValue(newValue) }
    }

    @inlinable var wordSpacing: String {
        get { jsObject[Strings.wordSpacing].fromJSValue()! }
        nonmutating set { jsObject[Strings.wordSpacing] = _toJSValue(newValue) }
    }
}

public enum CanvasTextRendering: JSString, JSValueCompatible {
    case auto = "auto"
    case optimizeSpeed = "optimizeSpeed"
    case optimizeLegibility = "optimizeLegibility"
    case geometricPrecision = "geometricPrecision"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public protocol CanvasTransform: JSBridgedClass {}
public extension CanvasTransform {
    @inlinable func scale(x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.scale].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @inlinable func rotate(angle: Double) {
        let this = jsObject
        _ = this[Strings.rotate].function!(this: this, arguments: [_toJSValue(angle)])
    }

    @inlinable func translate(x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.translate].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @inlinable func transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double) {
        let this = jsObject
        _ = this[Strings.transform].function!(this: this, arguments: [_toJSValue(a), _toJSValue(b), _toJSValue(c), _toJSValue(d), _toJSValue(e), _toJSValue(f)])
    }

    @inlinable func getTransform() -> DOMMatrix {
        let this = jsObject
        return this[Strings.getTransform].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable func setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double) {
        let this = jsObject
        _ = this[Strings.setTransform].function!(this: this, arguments: [_toJSValue(a), _toJSValue(b), _toJSValue(c), _toJSValue(d), _toJSValue(e), _toJSValue(f)])
    }

    @inlinable func setTransform(transform: DOMMatrix2DInit? = nil) {
        let this = jsObject
        _ = this[Strings.setTransform].function!(this: this, arguments: [_toJSValue(transform)])
    }

    @inlinable func resetTransform() {
        let this = jsObject
        _ = this[Strings.resetTransform].function!(this: this, arguments: [])
    }
}

public protocol CanvasUserInterface: JSBridgedClass {}
public extension CanvasUserInterface {
    @inlinable func drawFocusIfNeeded(element: Element) {
        let this = jsObject
        _ = this[Strings.drawFocusIfNeeded].function!(this: this, arguments: [_toJSValue(element)])
    }

    @inlinable func drawFocusIfNeeded(path: Path2D, element: Element) {
        let this = jsObject
        _ = this[Strings.drawFocusIfNeeded].function!(this: this, arguments: [_toJSValue(path), _toJSValue(element)])
    }

    @inlinable func scrollPathIntoView() {
        let this = jsObject
        _ = this[Strings.scrollPathIntoView].function!(this: this, arguments: [])
    }

    @inlinable func scrollPathIntoView(path: Path2D) {
        let this = jsObject
        _ = this[Strings.scrollPathIntoView].function!(this: this, arguments: [_toJSValue(path)])
    }
}

public class CaretPosition: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.CaretPosition].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _offsetNode = ReadonlyAttribute(jsObject: jsObject, name: Strings.offsetNode)
        _offset = ReadonlyAttribute(jsObject: jsObject, name: Strings.offset)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var offsetNode: Node

    @ReadonlyAttribute
    public var offset: UInt32

    @inlinable public func getClientRect() -> DOMRect? {
        let this = jsObject
        return this[Strings.getClientRect].function!(this: this, arguments: []).fromJSValue()
    }
}

public class CharacterData: Node, NonDocumentTypeChildNode, ChildNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.CharacterData].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _data = ReadWriteAttribute(jsObject: jsObject, name: Strings.data)
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadWriteAttribute
    public var data: String

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public func substringData(offset: UInt32, count: UInt32) -> String {
        let this = jsObject
        return this[Strings.substringData].function!(this: this, arguments: [_toJSValue(offset), _toJSValue(count)]).fromJSValue()!
    }

    @inlinable public func appendData(data: String) {
        let this = jsObject
        _ = this[Strings.appendData].function!(this: this, arguments: [_toJSValue(data)])
    }

    @inlinable public func insertData(offset: UInt32, data: String) {
        let this = jsObject
        _ = this[Strings.insertData].function!(this: this, arguments: [_toJSValue(offset), _toJSValue(data)])
    }

    @inlinable public func deleteData(offset: UInt32, count: UInt32) {
        let this = jsObject
        _ = this[Strings.deleteData].function!(this: this, arguments: [_toJSValue(offset), _toJSValue(count)])
    }

    @inlinable public func replaceData(offset: UInt32, count: UInt32, data: String) {
        let this = jsObject
        _ = this[Strings.replaceData].function!(this: this, arguments: [_toJSValue(offset), _toJSValue(count), _toJSValue(data)])
    }
}

public class CheckVisibilityOptions: BridgedDictionary {
    public convenience init(checkOpacity: Bool, checkVisibilityCSS: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.checkOpacity] = _toJSValue(checkOpacity)
        object[Strings.checkVisibilityCSS] = _toJSValue(checkVisibilityCSS)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _checkOpacity = ReadWriteAttribute(jsObject: object, name: Strings.checkOpacity)
        _checkVisibilityCSS = ReadWriteAttribute(jsObject: object, name: Strings.checkVisibilityCSS)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var checkOpacity: Bool

    @ReadWriteAttribute
    public var checkVisibilityCSS: Bool
}

public protocol ChildNode: JSBridgedClass {}
public extension ChildNode {
    @inlinable func before(nodes: Node_or_String...) {
        let this = jsObject
        _ = this[Strings.before].function!(this: this, arguments: nodes.map(_toJSValue))
    }

    @inlinable func after(nodes: Node_or_String...) {
        let this = jsObject
        _ = this[Strings.after].function!(this: this, arguments: nodes.map(_toJSValue))
    }

    @inlinable func replaceWith(nodes: Node_or_String...) {
        let this = jsObject
        _ = this[Strings.replaceWith].function!(this: this, arguments: nodes.map(_toJSValue))
    }

    @inlinable func remove() {
        let this = jsObject
        _ = this[Strings.remove].function!(this: this, arguments: [])
    }
}

public class ClientQueryOptions: BridgedDictionary {
    public convenience init(includeUncontrolled: Bool, type: ClientType) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.includeUncontrolled] = _toJSValue(includeUncontrolled)
        object[Strings.type] = _toJSValue(type)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _includeUncontrolled = ReadWriteAttribute(jsObject: object, name: Strings.includeUncontrolled)
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var includeUncontrolled: Bool

    @ReadWriteAttribute
    public var type: ClientType
}

public enum ClientType: JSString, JSValueCompatible {
    case window = "window"
    case worker = "worker"
    case sharedworker = "sharedworker"
    case all = "all"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum CodecState: JSString, JSValueCompatible {
    case unconfigured = "unconfigured"
    case configured = "configured"
    case closed = "closed"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum ColorSpaceConversion: JSString, JSValueCompatible {
    case none = "none"
    case `default` = "default"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class Comment: CharacterData {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.Comment].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(data: String? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(data)]))
    }
}

public class CompositionEvent: UIEvent {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.CompositionEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _data = ReadonlyAttribute(jsObject: jsObject, name: Strings.data)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: CompositionEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var data: String

    @inlinable public func initCompositionEvent(typeArg: String, bubblesArg: Bool? = nil, cancelableArg: Bool? = nil, viewArg: WindowProxy? = nil, dataArg: String? = nil) {
        let this = jsObject
        _ = this[Strings.initCompositionEvent].function!(this: this, arguments: [_toJSValue(typeArg), _toJSValue(bubblesArg), _toJSValue(cancelableArg), _toJSValue(viewArg), _toJSValue(dataArg)])
    }
}

public class CompositionEventInit: BridgedDictionary {
    public convenience init(data: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.data] = _toJSValue(data)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _data = ReadWriteAttribute(jsObject: object, name: Strings.data)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var data: String
}

public class ConstrainBooleanParameters: BridgedDictionary {
    public convenience init(exact: Bool, ideal: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.exact] = _toJSValue(exact)
        object[Strings.ideal] = _toJSValue(ideal)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _exact = ReadWriteAttribute(jsObject: object, name: Strings.exact)
        _ideal = ReadWriteAttribute(jsObject: object, name: Strings.ideal)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var exact: Bool

    @ReadWriteAttribute
    public var ideal: Bool
}

public class ConstrainDOMStringParameters: BridgedDictionary {
    public convenience init(exact: String_or_seq_of_String, ideal: String_or_seq_of_String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.exact] = _toJSValue(exact)
        object[Strings.ideal] = _toJSValue(ideal)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _exact = ReadWriteAttribute(jsObject: object, name: Strings.exact)
        _ideal = ReadWriteAttribute(jsObject: object, name: Strings.ideal)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var exact: String_or_seq_of_String

    @ReadWriteAttribute
    public var ideal: String_or_seq_of_String
}

public class ConstrainDoubleRange: BridgedDictionary {
    public convenience init(exact: Double, ideal: Double) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.exact] = _toJSValue(exact)
        object[Strings.ideal] = _toJSValue(ideal)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _exact = ReadWriteAttribute(jsObject: object, name: Strings.exact)
        _ideal = ReadWriteAttribute(jsObject: object, name: Strings.ideal)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var exact: Double

    @ReadWriteAttribute
    public var ideal: Double
}

public class ConstrainULongRange: BridgedDictionary {
    public convenience init(exact: UInt32, ideal: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.exact] = _toJSValue(exact)
        object[Strings.ideal] = _toJSValue(ideal)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _exact = ReadWriteAttribute(jsObject: object, name: Strings.exact)
        _ideal = ReadWriteAttribute(jsObject: object, name: Strings.ideal)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var exact: UInt32

    @ReadWriteAttribute
    public var ideal: UInt32
}

public class ConvertCoordinateOptions: BridgedDictionary {
    public convenience init(fromBox: CSSBoxType, toBox: CSSBoxType) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.fromBox] = _toJSValue(fromBox)
        object[Strings.toBox] = _toJSValue(toBox)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _fromBox = ReadWriteAttribute(jsObject: object, name: Strings.fromBox)
        _toBox = ReadWriteAttribute(jsObject: object, name: Strings.toBox)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var fromBox: CSSBoxType

    @ReadWriteAttribute
    public var toBox: CSSBoxType
}

public class CountQueuingStrategy: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.CountQueuingStrategy].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _highWaterMark = ReadonlyAttribute(jsObject: jsObject, name: Strings.highWaterMark)
        _size = ReadonlyAttribute(jsObject: jsObject, name: Strings.size)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(init: QueuingStrategyInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var highWaterMark: Double

    @ReadonlyAttribute
    public var size: JSFunction
}

public class CustomElementRegistry: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.CustomElementRegistry].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func define(name: String, constructor: CustomElementConstructor, options: ElementDefinitionOptions? = nil) {
        let this = jsObject
        _ = this[Strings.define].function!(this: this, arguments: [_toJSValue(name), _toJSValue(constructor), _toJSValue(options)])
    }

    @inlinable public func get(name: String) -> CustomElementConstructor? {
        let this = jsObject
        return this[Strings.get].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()!
    }

    @inlinable public func getName(constructor: CustomElementConstructor) -> String? {
        let this = jsObject
        return this[Strings.getName].function!(this: this, arguments: [_toJSValue(constructor)]).fromJSValue()
    }

    @inlinable public func whenDefined(name: String) -> JSPromise {
        let this = jsObject
        return this[Strings.whenDefined].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func whenDefined(name: String) async throws -> CustomElementConstructor {
        let this = jsObject
        let _promise: JSPromise = this[Strings.whenDefined].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func upgrade(root: Node) {
        let this = jsObject
        _ = this[Strings.upgrade].function!(this: this, arguments: [_toJSValue(root)])
    }
}

public class CustomEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.CustomEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _detail = ReadonlyAttribute(jsObject: jsObject, name: Strings.detail)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: CustomEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var detail: JSValue

    @inlinable public func initCustomEvent(type: String, bubbles: Bool? = nil, cancelable: Bool? = nil, detail: JSValue? = nil) {
        let this = jsObject
        _ = this[Strings.initCustomEvent].function!(this: this, arguments: [_toJSValue(type), _toJSValue(bubbles), _toJSValue(cancelable), _toJSValue(detail)])
    }
}

public class CustomEventInit: BridgedDictionary {
    public convenience init(detail: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.detail] = _toJSValue(detail)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _detail = ReadWriteAttribute(jsObject: object, name: Strings.detail)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var detail: JSValue
}

public class DOMImplementation: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DOMImplementation].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func createDocumentType(qualifiedName: String, publicId: String, systemId: String) -> DocumentType {
        let this = jsObject
        return this[Strings.createDocumentType].function!(this: this, arguments: [_toJSValue(qualifiedName), _toJSValue(publicId), _toJSValue(systemId)]).fromJSValue()!
    }

    @inlinable public func createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = nil) -> XMLDocument {
        let this = jsObject
        return this[Strings.createDocument].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(qualifiedName), _toJSValue(doctype)]).fromJSValue()!
    }

    @inlinable public func createHTMLDocument(title: String? = nil) -> Document {
        let this = jsObject
        return this[Strings.createHTMLDocument].function!(this: this, arguments: [_toJSValue(title)]).fromJSValue()!
    }

    @inlinable public func hasFeature() -> Bool {
        let this = jsObject
        return this[Strings.hasFeature].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class DOMMatrix: DOMMatrixReadOnly {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.DOMMatrix].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _a = ReadWriteAttribute(jsObject: jsObject, name: Strings.a)
        _b = ReadWriteAttribute(jsObject: jsObject, name: Strings.b)
        _c = ReadWriteAttribute(jsObject: jsObject, name: Strings.c)
        _d = ReadWriteAttribute(jsObject: jsObject, name: Strings.d)
        _e = ReadWriteAttribute(jsObject: jsObject, name: Strings.e)
        _f = ReadWriteAttribute(jsObject: jsObject, name: Strings.f)
        _m11 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m11)
        _m12 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m12)
        _m13 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m13)
        _m14 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m14)
        _m21 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m21)
        _m22 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m22)
        _m23 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m23)
        _m24 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m24)
        _m31 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m31)
        _m32 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m32)
        _m33 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m33)
        _m34 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m34)
        _m41 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m41)
        _m42 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m42)
        _m43 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m43)
        _m44 = ReadWriteAttribute(jsObject: jsObject, name: Strings.m44)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(init: String_or_seq_of_Double? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @inlinable override public class func fromMatrix(other: DOMMatrixInit? = nil) -> Self {
        let this = constructor!
        return this[Strings.fromMatrix].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @inlinable override public class func fromFloat32Array(array32: Float32Array) -> Self {
        let this = constructor!
        return this[Strings.fromFloat32Array].function!(this: this, arguments: [_toJSValue(array32)]).fromJSValue()!
    }

    @inlinable override public class func fromFloat64Array(array64: Float64Array) -> Self {
        let this = constructor!
        return this[Strings.fromFloat64Array].function!(this: this, arguments: [_toJSValue(array64)]).fromJSValue()!
    }

    @usableFromInline let _a: ReadWriteAttribute<Double>
    @inlinable override public var a: Double {
        get { _a.wrappedValue }
        set { _a.wrappedValue = newValue }
    }

    @usableFromInline let _b: ReadWriteAttribute<Double>
    @inlinable override public var b: Double {
        get { _b.wrappedValue }
        set { _b.wrappedValue = newValue }
    }

    @usableFromInline let _c: ReadWriteAttribute<Double>
    @inlinable override public var c: Double {
        get { _c.wrappedValue }
        set { _c.wrappedValue = newValue }
    }

    @usableFromInline let _d: ReadWriteAttribute<Double>
    @inlinable override public var d: Double {
        get { _d.wrappedValue }
        set { _d.wrappedValue = newValue }
    }

    @usableFromInline let _e: ReadWriteAttribute<Double>
    @inlinable override public var e: Double {
        get { _e.wrappedValue }
        set { _e.wrappedValue = newValue }
    }

    @usableFromInline let _f: ReadWriteAttribute<Double>
    @inlinable override public var f: Double {
        get { _f.wrappedValue }
        set { _f.wrappedValue = newValue }
    }

    @usableFromInline let _m11: ReadWriteAttribute<Double>
    @inlinable override public var m11: Double {
        get { _m11.wrappedValue }
        set { _m11.wrappedValue = newValue }
    }

    @usableFromInline let _m12: ReadWriteAttribute<Double>
    @inlinable override public var m12: Double {
        get { _m12.wrappedValue }
        set { _m12.wrappedValue = newValue }
    }

    @usableFromInline let _m13: ReadWriteAttribute<Double>
    @inlinable override public var m13: Double {
        get { _m13.wrappedValue }
        set { _m13.wrappedValue = newValue }
    }

    @usableFromInline let _m14: ReadWriteAttribute<Double>
    @inlinable override public var m14: Double {
        get { _m14.wrappedValue }
        set { _m14.wrappedValue = newValue }
    }

    @usableFromInline let _m21: ReadWriteAttribute<Double>
    @inlinable override public var m21: Double {
        get { _m21.wrappedValue }
        set { _m21.wrappedValue = newValue }
    }

    @usableFromInline let _m22: ReadWriteAttribute<Double>
    @inlinable override public var m22: Double {
        get { _m22.wrappedValue }
        set { _m22.wrappedValue = newValue }
    }

    @usableFromInline let _m23: ReadWriteAttribute<Double>
    @inlinable override public var m23: Double {
        get { _m23.wrappedValue }
        set { _m23.wrappedValue = newValue }
    }

    @usableFromInline let _m24: ReadWriteAttribute<Double>
    @inlinable override public var m24: Double {
        get { _m24.wrappedValue }
        set { _m24.wrappedValue = newValue }
    }

    @usableFromInline let _m31: ReadWriteAttribute<Double>
    @inlinable override public var m31: Double {
        get { _m31.wrappedValue }
        set { _m31.wrappedValue = newValue }
    }

    @usableFromInline let _m32: ReadWriteAttribute<Double>
    @inlinable override public var m32: Double {
        get { _m32.wrappedValue }
        set { _m32.wrappedValue = newValue }
    }

    @usableFromInline let _m33: ReadWriteAttribute<Double>
    @inlinable override public var m33: Double {
        get { _m33.wrappedValue }
        set { _m33.wrappedValue = newValue }
    }

    @usableFromInline let _m34: ReadWriteAttribute<Double>
    @inlinable override public var m34: Double {
        get { _m34.wrappedValue }
        set { _m34.wrappedValue = newValue }
    }

    @usableFromInline let _m41: ReadWriteAttribute<Double>
    @inlinable override public var m41: Double {
        get { _m41.wrappedValue }
        set { _m41.wrappedValue = newValue }
    }

    @usableFromInline let _m42: ReadWriteAttribute<Double>
    @inlinable override public var m42: Double {
        get { _m42.wrappedValue }
        set { _m42.wrappedValue = newValue }
    }

    @usableFromInline let _m43: ReadWriteAttribute<Double>
    @inlinable override public var m43: Double {
        get { _m43.wrappedValue }
        set { _m43.wrappedValue = newValue }
    }

    @usableFromInline let _m44: ReadWriteAttribute<Double>
    @inlinable override public var m44: Double {
        get { _m44.wrappedValue }
        set { _m44.wrappedValue = newValue }
    }

    @inlinable public func multiplySelf(other: DOMMatrixInit? = nil) -> Self {
        let this = jsObject
        return this[Strings.multiplySelf].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @inlinable public func preMultiplySelf(other: DOMMatrixInit? = nil) -> Self {
        let this = jsObject
        return this[Strings.preMultiplySelf].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @inlinable public func translateSelf(tx: Double? = nil, ty: Double? = nil, tz: Double? = nil) -> Self {
        let this = jsObject
        return this[Strings.translateSelf].function!(this: this, arguments: [_toJSValue(tx), _toJSValue(ty), _toJSValue(tz)]).fromJSValue()!
    }

    @inlinable public func scaleSelf(scaleX: Double? = nil, scaleY: Double? = nil, scaleZ: Double? = nil, originX: Double? = nil, originY: Double? = nil, originZ: Double? = nil) -> Self {
        let this = jsObject
        return this[Strings.scaleSelf].function!(this: this, arguments: [_toJSValue(scaleX), _toJSValue(scaleY), _toJSValue(scaleZ), _toJSValue(originX), _toJSValue(originY), _toJSValue(originZ)]).fromJSValue()!
    }

    @inlinable public func scale3dSelf(scale: Double? = nil, originX: Double? = nil, originY: Double? = nil, originZ: Double? = nil) -> Self {
        let this = jsObject
        return this[Strings.scale3dSelf].function!(this: this, arguments: [_toJSValue(scale), _toJSValue(originX), _toJSValue(originY), _toJSValue(originZ)]).fromJSValue()!
    }

    @inlinable public func rotateSelf(rotX: Double? = nil, rotY: Double? = nil, rotZ: Double? = nil) -> Self {
        let this = jsObject
        return this[Strings.rotateSelf].function!(this: this, arguments: [_toJSValue(rotX), _toJSValue(rotY), _toJSValue(rotZ)]).fromJSValue()!
    }

    @inlinable public func rotateFromVectorSelf(x: Double? = nil, y: Double? = nil) -> Self {
        let this = jsObject
        return this[Strings.rotateFromVectorSelf].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)]).fromJSValue()!
    }

    @inlinable public func rotateAxisAngleSelf(x: Double? = nil, y: Double? = nil, z: Double? = nil, angle: Double? = nil) -> Self {
        let this = jsObject
        return this[Strings.rotateAxisAngleSelf].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(z), _toJSValue(angle)]).fromJSValue()!
    }

    @inlinable public func skewXSelf(sx: Double? = nil) -> Self {
        let this = jsObject
        return this[Strings.skewXSelf].function!(this: this, arguments: [_toJSValue(sx)]).fromJSValue()!
    }

    @inlinable public func skewYSelf(sy: Double? = nil) -> Self {
        let this = jsObject
        return this[Strings.skewYSelf].function!(this: this, arguments: [_toJSValue(sy)]).fromJSValue()!
    }

    @inlinable public func invertSelf() -> Self {
        let this = jsObject
        return this[Strings.invertSelf].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func setMatrixValue(transformList: String) -> Self {
        let this = jsObject
        return this[Strings.setMatrixValue].function!(this: this, arguments: [_toJSValue(transformList)]).fromJSValue()!
    }
}

public class DOMMatrix2DInit: BridgedDictionary {
    public convenience init(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double, m11: Double, m12: Double, m21: Double, m22: Double, m41: Double, m42: Double) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.a] = _toJSValue(a)
        object[Strings.b] = _toJSValue(b)
        object[Strings.c] = _toJSValue(c)
        object[Strings.d] = _toJSValue(d)
        object[Strings.e] = _toJSValue(e)
        object[Strings.f] = _toJSValue(f)
        object[Strings.m11] = _toJSValue(m11)
        object[Strings.m12] = _toJSValue(m12)
        object[Strings.m21] = _toJSValue(m21)
        object[Strings.m22] = _toJSValue(m22)
        object[Strings.m41] = _toJSValue(m41)
        object[Strings.m42] = _toJSValue(m42)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _a = ReadWriteAttribute(jsObject: object, name: Strings.a)
        _b = ReadWriteAttribute(jsObject: object, name: Strings.b)
        _c = ReadWriteAttribute(jsObject: object, name: Strings.c)
        _d = ReadWriteAttribute(jsObject: object, name: Strings.d)
        _e = ReadWriteAttribute(jsObject: object, name: Strings.e)
        _f = ReadWriteAttribute(jsObject: object, name: Strings.f)
        _m11 = ReadWriteAttribute(jsObject: object, name: Strings.m11)
        _m12 = ReadWriteAttribute(jsObject: object, name: Strings.m12)
        _m21 = ReadWriteAttribute(jsObject: object, name: Strings.m21)
        _m22 = ReadWriteAttribute(jsObject: object, name: Strings.m22)
        _m41 = ReadWriteAttribute(jsObject: object, name: Strings.m41)
        _m42 = ReadWriteAttribute(jsObject: object, name: Strings.m42)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var a: Double

    @ReadWriteAttribute
    public var b: Double

    @ReadWriteAttribute
    public var c: Double

    @ReadWriteAttribute
    public var d: Double

    @ReadWriteAttribute
    public var e: Double

    @ReadWriteAttribute
    public var f: Double

    @ReadWriteAttribute
    public var m11: Double

    @ReadWriteAttribute
    public var m12: Double

    @ReadWriteAttribute
    public var m21: Double

    @ReadWriteAttribute
    public var m22: Double

    @ReadWriteAttribute
    public var m41: Double

    @ReadWriteAttribute
    public var m42: Double
}

public class DOMMatrixInit: BridgedDictionary {
    public convenience init(m13: Double, m14: Double, m23: Double, m24: Double, m31: Double, m32: Double, m33: Double, m34: Double, m43: Double, m44: Double, is2D: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.m13] = _toJSValue(m13)
        object[Strings.m14] = _toJSValue(m14)
        object[Strings.m23] = _toJSValue(m23)
        object[Strings.m24] = _toJSValue(m24)
        object[Strings.m31] = _toJSValue(m31)
        object[Strings.m32] = _toJSValue(m32)
        object[Strings.m33] = _toJSValue(m33)
        object[Strings.m34] = _toJSValue(m34)
        object[Strings.m43] = _toJSValue(m43)
        object[Strings.m44] = _toJSValue(m44)
        object[Strings.is2D] = _toJSValue(is2D)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _m13 = ReadWriteAttribute(jsObject: object, name: Strings.m13)
        _m14 = ReadWriteAttribute(jsObject: object, name: Strings.m14)
        _m23 = ReadWriteAttribute(jsObject: object, name: Strings.m23)
        _m24 = ReadWriteAttribute(jsObject: object, name: Strings.m24)
        _m31 = ReadWriteAttribute(jsObject: object, name: Strings.m31)
        _m32 = ReadWriteAttribute(jsObject: object, name: Strings.m32)
        _m33 = ReadWriteAttribute(jsObject: object, name: Strings.m33)
        _m34 = ReadWriteAttribute(jsObject: object, name: Strings.m34)
        _m43 = ReadWriteAttribute(jsObject: object, name: Strings.m43)
        _m44 = ReadWriteAttribute(jsObject: object, name: Strings.m44)
        _is2D = ReadWriteAttribute(jsObject: object, name: Strings.is2D)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var m13: Double

    @ReadWriteAttribute
    public var m14: Double

    @ReadWriteAttribute
    public var m23: Double

    @ReadWriteAttribute
    public var m24: Double

    @ReadWriteAttribute
    public var m31: Double

    @ReadWriteAttribute
    public var m32: Double

    @ReadWriteAttribute
    public var m33: Double

    @ReadWriteAttribute
    public var m34: Double

    @ReadWriteAttribute
    public var m43: Double

    @ReadWriteAttribute
    public var m44: Double

    @ReadWriteAttribute
    public var is2D: Bool
}

public class DOMMatrixReadOnly: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DOMMatrixReadOnly].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _a = ReadonlyAttribute(jsObject: jsObject, name: Strings.a)
        _b = ReadonlyAttribute(jsObject: jsObject, name: Strings.b)
        _c = ReadonlyAttribute(jsObject: jsObject, name: Strings.c)
        _d = ReadonlyAttribute(jsObject: jsObject, name: Strings.d)
        _e = ReadonlyAttribute(jsObject: jsObject, name: Strings.e)
        _f = ReadonlyAttribute(jsObject: jsObject, name: Strings.f)
        _m11 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m11)
        _m12 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m12)
        _m13 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m13)
        _m14 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m14)
        _m21 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m21)
        _m22 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m22)
        _m23 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m23)
        _m24 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m24)
        _m31 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m31)
        _m32 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m32)
        _m33 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m33)
        _m34 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m34)
        _m41 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m41)
        _m42 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m42)
        _m43 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m43)
        _m44 = ReadonlyAttribute(jsObject: jsObject, name: Strings.m44)
        _is2D = ReadonlyAttribute(jsObject: jsObject, name: Strings.is2D)
        _isIdentity = ReadonlyAttribute(jsObject: jsObject, name: Strings.isIdentity)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(init: String_or_seq_of_Double? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @inlinable public class func fromMatrix(other: DOMMatrixInit? = nil) -> Self {
        let this = constructor!
        return this[Strings.fromMatrix].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @inlinable public class func fromFloat32Array(array32: Float32Array) -> Self {
        let this = constructor!
        return this[Strings.fromFloat32Array].function!(this: this, arguments: [_toJSValue(array32)]).fromJSValue()!
    }

    @inlinable public class func fromFloat64Array(array64: Float64Array) -> Self {
        let this = constructor!
        return this[Strings.fromFloat64Array].function!(this: this, arguments: [_toJSValue(array64)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var a: Double

    @ReadonlyAttribute
    public var b: Double

    @ReadonlyAttribute
    public var c: Double

    @ReadonlyAttribute
    public var d: Double

    @ReadonlyAttribute
    public var e: Double

    @ReadonlyAttribute
    public var f: Double

    @ReadonlyAttribute
    public var m11: Double

    @ReadonlyAttribute
    public var m12: Double

    @ReadonlyAttribute
    public var m13: Double

    @ReadonlyAttribute
    public var m14: Double

    @ReadonlyAttribute
    public var m21: Double

    @ReadonlyAttribute
    public var m22: Double

    @ReadonlyAttribute
    public var m23: Double

    @ReadonlyAttribute
    public var m24: Double

    @ReadonlyAttribute
    public var m31: Double

    @ReadonlyAttribute
    public var m32: Double

    @ReadonlyAttribute
    public var m33: Double

    @ReadonlyAttribute
    public var m34: Double

    @ReadonlyAttribute
    public var m41: Double

    @ReadonlyAttribute
    public var m42: Double

    @ReadonlyAttribute
    public var m43: Double

    @ReadonlyAttribute
    public var m44: Double

    @ReadonlyAttribute
    public var is2D: Bool

    @ReadonlyAttribute
    public var isIdentity: Bool

    @inlinable public func translate(tx: Double? = nil, ty: Double? = nil, tz: Double? = nil) -> DOMMatrix {
        let this = jsObject
        return this[Strings.translate].function!(this: this, arguments: [_toJSValue(tx), _toJSValue(ty), _toJSValue(tz)]).fromJSValue()!
    }

    @inlinable public func scale(scaleX: Double? = nil, scaleY: Double? = nil, scaleZ: Double? = nil, originX: Double? = nil, originY: Double? = nil, originZ: Double? = nil) -> DOMMatrix {
        let this = jsObject
        return this[Strings.scale].function!(this: this, arguments: [_toJSValue(scaleX), _toJSValue(scaleY), _toJSValue(scaleZ), _toJSValue(originX), _toJSValue(originY), _toJSValue(originZ)]).fromJSValue()!
    }

    @inlinable public func scaleNonUniform(scaleX: Double? = nil, scaleY: Double? = nil) -> DOMMatrix {
        let this = jsObject
        return this[Strings.scaleNonUniform].function!(this: this, arguments: [_toJSValue(scaleX), _toJSValue(scaleY)]).fromJSValue()!
    }

    @inlinable public func scale3d(scale: Double? = nil, originX: Double? = nil, originY: Double? = nil, originZ: Double? = nil) -> DOMMatrix {
        let this = jsObject
        return this[Strings.scale3d].function!(this: this, arguments: [_toJSValue(scale), _toJSValue(originX), _toJSValue(originY), _toJSValue(originZ)]).fromJSValue()!
    }

    @inlinable public func rotate(rotX: Double? = nil, rotY: Double? = nil, rotZ: Double? = nil) -> DOMMatrix {
        let this = jsObject
        return this[Strings.rotate].function!(this: this, arguments: [_toJSValue(rotX), _toJSValue(rotY), _toJSValue(rotZ)]).fromJSValue()!
    }

    @inlinable public func rotateFromVector(x: Double? = nil, y: Double? = nil) -> DOMMatrix {
        let this = jsObject
        return this[Strings.rotateFromVector].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)]).fromJSValue()!
    }

    @inlinable public func rotateAxisAngle(x: Double? = nil, y: Double? = nil, z: Double? = nil, angle: Double? = nil) -> DOMMatrix {
        let this = jsObject
        return this[Strings.rotateAxisAngle].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(z), _toJSValue(angle)]).fromJSValue()!
    }

    @inlinable public func skewX(sx: Double? = nil) -> DOMMatrix {
        let this = jsObject
        return this[Strings.skewX].function!(this: this, arguments: [_toJSValue(sx)]).fromJSValue()!
    }

    @inlinable public func skewY(sy: Double? = nil) -> DOMMatrix {
        let this = jsObject
        return this[Strings.skewY].function!(this: this, arguments: [_toJSValue(sy)]).fromJSValue()!
    }

    @inlinable public func multiply(other: DOMMatrixInit? = nil) -> DOMMatrix {
        let this = jsObject
        return this[Strings.multiply].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @inlinable public func flipX() -> DOMMatrix {
        let this = jsObject
        return this[Strings.flipX].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func flipY() -> DOMMatrix {
        let this = jsObject
        return this[Strings.flipY].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func inverse() -> DOMMatrix {
        let this = jsObject
        return this[Strings.inverse].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func transformPoint(point: DOMPointInit? = nil) -> DOMPoint {
        let this = jsObject
        return this[Strings.transformPoint].function!(this: this, arguments: [_toJSValue(point)]).fromJSValue()!
    }

    @inlinable public func toFloat32Array() -> Float32Array {
        let this = jsObject
        return this[Strings.toFloat32Array].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func toFloat64Array() -> Float64Array {
        let this = jsObject
        return this[Strings.toFloat64Array].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public var description: String {
        jsObject[Strings.toString]!().fromJSValue()!
    }

    @inlinable public func toJSON() -> JSObject {
        let this = jsObject
        return this[Strings.toJSON].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class DOMParser: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DOMParser].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @inlinable public func parseFromString(string: String, type: DOMParserSupportedType) -> Document {
        let this = jsObject
        return this[Strings.parseFromString].function!(this: this, arguments: [_toJSValue(string), _toJSValue(type)]).fromJSValue()!
    }
}

public enum DOMParserSupportedType: JSString, JSValueCompatible {
    case textHtml = "text/html"
    case textXml = "text/xml"
    case applicationXml = "application/xml"
    case applicationXhtmlXml = "application/xhtml+xml"
    case imageSvgXml = "image/svg+xml"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class DOMPoint: DOMPointReadOnly {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.DOMPoint].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _x = ReadWriteAttribute(jsObject: jsObject, name: Strings.x)
        _y = ReadWriteAttribute(jsObject: jsObject, name: Strings.y)
        _z = ReadWriteAttribute(jsObject: jsObject, name: Strings.z)
        _w = ReadWriteAttribute(jsObject: jsObject, name: Strings.w)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(x: Double? = nil, y: Double? = nil, z: Double? = nil, w: Double? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(z), _toJSValue(w)]))
    }

    @inlinable override public class func fromPoint(other: DOMPointInit? = nil) -> Self {
        let this = constructor!
        return this[Strings.fromPoint].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @usableFromInline let _x: ReadWriteAttribute<Double>
    @inlinable override public var x: Double {
        get { _x.wrappedValue }
        set { _x.wrappedValue = newValue }
    }

    @usableFromInline let _y: ReadWriteAttribute<Double>
    @inlinable override public var y: Double {
        get { _y.wrappedValue }
        set { _y.wrappedValue = newValue }
    }

    @usableFromInline let _z: ReadWriteAttribute<Double>
    @inlinable override public var z: Double {
        get { _z.wrappedValue }
        set { _z.wrappedValue = newValue }
    }

    @usableFromInline let _w: ReadWriteAttribute<Double>
    @inlinable override public var w: Double {
        get { _w.wrappedValue }
        set { _w.wrappedValue = newValue }
    }
}

public class DOMPointInit: BridgedDictionary {
    public convenience init(x: Double, y: Double, z: Double, w: Double) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.x] = _toJSValue(x)
        object[Strings.y] = _toJSValue(y)
        object[Strings.z] = _toJSValue(z)
        object[Strings.w] = _toJSValue(w)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _x = ReadWriteAttribute(jsObject: object, name: Strings.x)
        _y = ReadWriteAttribute(jsObject: object, name: Strings.y)
        _z = ReadWriteAttribute(jsObject: object, name: Strings.z)
        _w = ReadWriteAttribute(jsObject: object, name: Strings.w)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var x: Double

    @ReadWriteAttribute
    public var y: Double

    @ReadWriteAttribute
    public var z: Double

    @ReadWriteAttribute
    public var w: Double
}

public class DOMPointReadOnly: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DOMPointReadOnly].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _x = ReadonlyAttribute(jsObject: jsObject, name: Strings.x)
        _y = ReadonlyAttribute(jsObject: jsObject, name: Strings.y)
        _z = ReadonlyAttribute(jsObject: jsObject, name: Strings.z)
        _w = ReadonlyAttribute(jsObject: jsObject, name: Strings.w)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(x: Double? = nil, y: Double? = nil, z: Double? = nil, w: Double? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(z), _toJSValue(w)]))
    }

    @inlinable public class func fromPoint(other: DOMPointInit? = nil) -> Self {
        let this = constructor!
        return this[Strings.fromPoint].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var x: Double

    @ReadonlyAttribute
    public var y: Double

    @ReadonlyAttribute
    public var z: Double

    @ReadonlyAttribute
    public var w: Double

    @inlinable public func matrixTransform(matrix: DOMMatrixInit? = nil) -> DOMPoint {
        let this = jsObject
        return this[Strings.matrixTransform].function!(this: this, arguments: [_toJSValue(matrix)]).fromJSValue()!
    }

    @inlinable public func toJSON() -> JSObject {
        let this = jsObject
        return this[Strings.toJSON].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class DOMQuad: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DOMQuad].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _p1 = ReadonlyAttribute(jsObject: jsObject, name: Strings.p1)
        _p2 = ReadonlyAttribute(jsObject: jsObject, name: Strings.p2)
        _p3 = ReadonlyAttribute(jsObject: jsObject, name: Strings.p3)
        _p4 = ReadonlyAttribute(jsObject: jsObject, name: Strings.p4)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(p1: DOMPointInit? = nil, p2: DOMPointInit? = nil, p3: DOMPointInit? = nil, p4: DOMPointInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(p1), _toJSValue(p2), _toJSValue(p3), _toJSValue(p4)]))
    }

    @inlinable public class func fromRect(other: DOMRectInit? = nil) -> Self {
        let this = constructor!
        return this[Strings.fromRect].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @inlinable public class func fromQuad(other: DOMQuadInit? = nil) -> Self {
        let this = constructor!
        return this[Strings.fromQuad].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var p1: DOMPoint

    @ReadonlyAttribute
    public var p2: DOMPoint

    @ReadonlyAttribute
    public var p3: DOMPoint

    @ReadonlyAttribute
    public var p4: DOMPoint

    @inlinable public func getBounds() -> DOMRect {
        let this = jsObject
        return this[Strings.getBounds].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func toJSON() -> JSObject {
        let this = jsObject
        return this[Strings.toJSON].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class DOMQuadInit: BridgedDictionary {
    public convenience init(p1: DOMPointInit, p2: DOMPointInit, p3: DOMPointInit, p4: DOMPointInit) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.p1] = _toJSValue(p1)
        object[Strings.p2] = _toJSValue(p2)
        object[Strings.p3] = _toJSValue(p3)
        object[Strings.p4] = _toJSValue(p4)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _p1 = ReadWriteAttribute(jsObject: object, name: Strings.p1)
        _p2 = ReadWriteAttribute(jsObject: object, name: Strings.p2)
        _p3 = ReadWriteAttribute(jsObject: object, name: Strings.p3)
        _p4 = ReadWriteAttribute(jsObject: object, name: Strings.p4)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var p1: DOMPointInit

    @ReadWriteAttribute
    public var p2: DOMPointInit

    @ReadWriteAttribute
    public var p3: DOMPointInit

    @ReadWriteAttribute
    public var p4: DOMPointInit
}

public class DOMRect: DOMRectReadOnly {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.DOMRect].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _x = ReadWriteAttribute(jsObject: jsObject, name: Strings.x)
        _y = ReadWriteAttribute(jsObject: jsObject, name: Strings.y)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(x: Double? = nil, y: Double? = nil, width: Double? = nil, height: Double? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(width), _toJSValue(height)]))
    }

    @inlinable override public class func fromRect(other: DOMRectInit? = nil) -> Self {
        let this = constructor!
        return this[Strings.fromRect].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @usableFromInline let _x: ReadWriteAttribute<Double>
    @inlinable override public var x: Double {
        get { _x.wrappedValue }
        set { _x.wrappedValue = newValue }
    }

    @usableFromInline let _y: ReadWriteAttribute<Double>
    @inlinable override public var y: Double {
        get { _y.wrappedValue }
        set { _y.wrappedValue = newValue }
    }

    @usableFromInline let _width: ReadWriteAttribute<Double>
    @inlinable override public var width: Double {
        get { _width.wrappedValue }
        set { _width.wrappedValue = newValue }
    }

    @usableFromInline let _height: ReadWriteAttribute<Double>
    @inlinable override public var height: Double {
        get { _height.wrappedValue }
        set { _height.wrappedValue = newValue }
    }
}

public class DOMRectInit: BridgedDictionary {
    public convenience init(x: Double, y: Double, width: Double, height: Double) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.x] = _toJSValue(x)
        object[Strings.y] = _toJSValue(y)
        object[Strings.width] = _toJSValue(width)
        object[Strings.height] = _toJSValue(height)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _x = ReadWriteAttribute(jsObject: object, name: Strings.x)
        _y = ReadWriteAttribute(jsObject: object, name: Strings.y)
        _width = ReadWriteAttribute(jsObject: object, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: object, name: Strings.height)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var x: Double

    @ReadWriteAttribute
    public var y: Double

    @ReadWriteAttribute
    public var width: Double

    @ReadWriteAttribute
    public var height: Double
}

public class DOMRectList: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DOMRectList].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> DOMRect? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func item(index: UInt32) -> DOMRect? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }
}

public class DOMRectReadOnly: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DOMRectReadOnly].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _x = ReadonlyAttribute(jsObject: jsObject, name: Strings.x)
        _y = ReadonlyAttribute(jsObject: jsObject, name: Strings.y)
        _width = ReadonlyAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadonlyAttribute(jsObject: jsObject, name: Strings.height)
        _top = ReadonlyAttribute(jsObject: jsObject, name: Strings.top)
        _right = ReadonlyAttribute(jsObject: jsObject, name: Strings.right)
        _bottom = ReadonlyAttribute(jsObject: jsObject, name: Strings.bottom)
        _left = ReadonlyAttribute(jsObject: jsObject, name: Strings.left)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(x: Double? = nil, y: Double? = nil, width: Double? = nil, height: Double? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(x), _toJSValue(y), _toJSValue(width), _toJSValue(height)]))
    }

    @inlinable public class func fromRect(other: DOMRectInit? = nil) -> Self {
        let this = constructor!
        return this[Strings.fromRect].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var x: Double

    @ReadonlyAttribute
    public var y: Double

    @ReadonlyAttribute
    public var width: Double

    @ReadonlyAttribute
    public var height: Double

    @ReadonlyAttribute
    public var top: Double

    @ReadonlyAttribute
    public var right: Double

    @ReadonlyAttribute
    public var bottom: Double

    @ReadonlyAttribute
    public var left: Double

    @inlinable public func toJSON() -> JSObject {
        let this = jsObject
        return this[Strings.toJSON].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class DOMStringList: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DOMStringList].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> String? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func item(index: UInt32) -> String? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }

    @inlinable public func contains(string: String) -> Bool {
        let this = jsObject
        return this[Strings.contains].function!(this: this, arguments: [_toJSValue(string)]).fromJSValue()!
    }
}

public class DOMStringMap: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DOMStringMap].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public subscript(key: String) -> String {
        get {
            jsObject[key].fromJSValue()!
        }
        set {
            jsObject[key] = _toJSValue(newValue)
        }
    }

    @inlinable public func removeValue(forKey key: String) {
        _ = JSObject.global.Reflect.deleteProperty(jsObject, _toJSValue(key))
    }
}

public class DOMTokenList: JSBridgedClass, Sequence {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DOMTokenList].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> String? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func item(index: UInt32) -> String? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }

    @inlinable public func contains(token: String) -> Bool {
        let this = jsObject
        return this[Strings.contains].function!(this: this, arguments: [_toJSValue(token)]).fromJSValue()!
    }

    @inlinable public func add(tokens: String...) {
        let this = jsObject
        _ = this[Strings.add].function!(this: this, arguments: tokens.map(_toJSValue))
    }

    @inlinable public func remove(tokens: String...) {
        let this = jsObject
        _ = this[Strings.remove].function!(this: this, arguments: tokens.map(_toJSValue))
    }

    @inlinable public func toggle(token: String, force: Bool? = nil) -> Bool {
        let this = jsObject
        return this[Strings.toggle].function!(this: this, arguments: [_toJSValue(token), _toJSValue(force)]).fromJSValue()!
    }

    @inlinable public func replace(token: String, newToken: String) -> Bool {
        let this = jsObject
        return this[Strings.replace].function!(this: this, arguments: [_toJSValue(token), _toJSValue(newToken)]).fromJSValue()!
    }

    @inlinable public func supports(token: String) -> Bool {
        let this = jsObject
        return this[Strings.supports].function!(this: this, arguments: [_toJSValue(token)]).fromJSValue()!
    }

    @ReadWriteAttribute
    public var value: String

    public typealias Element = String
    public func makeIterator() -> ValueIterableIterator<DOMTokenList> {
        ValueIterableIterator(sequence: self)
    }
}

public class DataTransfer: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DataTransfer].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _dropEffect = ReadWriteAttribute(jsObject: jsObject, name: Strings.dropEffect)
        _effectAllowed = ReadWriteAttribute(jsObject: jsObject, name: Strings.effectAllowed)
        _items = ReadonlyAttribute(jsObject: jsObject, name: Strings.items)
        _types = ReadonlyAttribute(jsObject: jsObject, name: Strings.types)
        _files = ReadonlyAttribute(jsObject: jsObject, name: Strings.files)
        self.jsObject = jsObject
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var dropEffect: String

    @ReadWriteAttribute
    public var effectAllowed: String

    @ReadonlyAttribute
    public var items: DataTransferItemList

    @inlinable public func setDragImage(image: Element, x: Int32, y: Int32) {
        let this = jsObject
        _ = this[Strings.setDragImage].function!(this: this, arguments: [_toJSValue(image), _toJSValue(x), _toJSValue(y)])
    }

    @ReadonlyAttribute
    public var types: [String]

    @inlinable public func getData(format: String) -> String {
        let this = jsObject
        return this[Strings.getData].function!(this: this, arguments: [_toJSValue(format)]).fromJSValue()!
    }

    @inlinable public func setData(format: String, data: String) {
        let this = jsObject
        _ = this[Strings.setData].function!(this: this, arguments: [_toJSValue(format), _toJSValue(data)])
    }

    @inlinable public func clearData(format: String? = nil) {
        let this = jsObject
        _ = this[Strings.clearData].function!(this: this, arguments: [_toJSValue(format)])
    }

    @ReadonlyAttribute
    public var files: FileList
}

public class DataTransferItem: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DataTransferItem].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _kind = ReadonlyAttribute(jsObject: jsObject, name: Strings.kind)
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var kind: String

    @ReadonlyAttribute
    public var type: String

    @inlinable public func getAsString(callback: FunctionStringCallback?) {
        let this = jsObject
        _ = this[Strings.getAsString].function!(this: this, arguments: [_toJSValue(callback)])
    }

    @inlinable public func getAsFile() -> File? {
        let this = jsObject
        return this[Strings.getAsFile].function!(this: this, arguments: []).fromJSValue()
    }
}

public class DataTransferItemList: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.DataTransferItemList].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> DataTransferItem {
        jsObject[key].fromJSValue()!
    }

    @inlinable public func add(data: String, type: String) -> DataTransferItem? {
        let this = jsObject
        return this[Strings.add].function!(this: this, arguments: [_toJSValue(data), _toJSValue(type)]).fromJSValue()
    }

    @inlinable public func add(data: File) -> DataTransferItem? {
        let this = jsObject
        return this[Strings.add].function!(this: this, arguments: [_toJSValue(data)]).fromJSValue()
    }

    @inlinable public func remove(index: UInt32) {
        let this = jsObject
        _ = this[Strings.remove].function!(this: this, arguments: [_toJSValue(index)])
    }

    @inlinable public func clear() {
        let this = jsObject
        _ = this[Strings.clear].function!(this: this, arguments: [])
    }
}

public class DevicePermissionDescriptor: BridgedDictionary {
    public convenience init(deviceId: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.deviceId] = _toJSValue(deviceId)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _deviceId = ReadWriteAttribute(jsObject: object, name: Strings.deviceId)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var deviceId: String
}

public class Document: Node, NonElementParentNode, DocumentOrShadowRoot, ParentNode, XPathEvaluatorBase, GlobalEventHandlers, GeometryUtils {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.Document].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _implementation = ReadonlyAttribute(jsObject: jsObject, name: Strings.implementation)
        _URL = ReadonlyAttribute(jsObject: jsObject, name: Strings.URL)
        _documentURI = ReadonlyAttribute(jsObject: jsObject, name: Strings.documentURI)
        _compatMode = ReadonlyAttribute(jsObject: jsObject, name: Strings.compatMode)
        _characterSet = ReadonlyAttribute(jsObject: jsObject, name: Strings.characterSet)
        _charset = ReadonlyAttribute(jsObject: jsObject, name: Strings.charset)
        _inputEncoding = ReadonlyAttribute(jsObject: jsObject, name: Strings.inputEncoding)
        _contentType = ReadonlyAttribute(jsObject: jsObject, name: Strings.contentType)
        _doctype = ReadonlyAttribute(jsObject: jsObject, name: Strings.doctype)
        _documentElement = ReadonlyAttribute(jsObject: jsObject, name: Strings.documentElement)
        _location = ReadonlyAttribute(jsObject: jsObject, name: Strings.location)
        _domain = ReadWriteAttribute(jsObject: jsObject, name: Strings.domain)
        _referrer = ReadonlyAttribute(jsObject: jsObject, name: Strings.referrer)
        _cookie = ReadWriteAttribute(jsObject: jsObject, name: Strings.cookie)
        _lastModified = ReadonlyAttribute(jsObject: jsObject, name: Strings.lastModified)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _title = ReadWriteAttribute(jsObject: jsObject, name: Strings.title)
        _dir = ReadWriteAttribute(jsObject: jsObject, name: Strings.dir)
        _body = ReadWriteAttribute(jsObject: jsObject, name: Strings.body)
        _head = ReadonlyAttribute(jsObject: jsObject, name: Strings.head)
        _images = ReadonlyAttribute(jsObject: jsObject, name: Strings.images)
        _embeds = ReadonlyAttribute(jsObject: jsObject, name: Strings.embeds)
        _plugins = ReadonlyAttribute(jsObject: jsObject, name: Strings.plugins)
        _links = ReadonlyAttribute(jsObject: jsObject, name: Strings.links)
        _forms = ReadonlyAttribute(jsObject: jsObject, name: Strings.forms)
        _scripts = ReadonlyAttribute(jsObject: jsObject, name: Strings.scripts)
        _currentScript = ReadonlyAttribute(jsObject: jsObject, name: Strings.currentScript)
        _defaultView = ReadonlyAttribute(jsObject: jsObject, name: Strings.defaultView)
        _designMode = ReadWriteAttribute(jsObject: jsObject, name: Strings.designMode)
        _hidden = ReadonlyAttribute(jsObject: jsObject, name: Strings.hidden)
        _visibilityState = ReadonlyAttribute(jsObject: jsObject, name: Strings.visibilityState)
        _onreadystatechange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onreadystatechange)
        _onvisibilitychange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onvisibilitychange)
        _fgColor = ReadWriteAttribute(jsObject: jsObject, name: Strings.fgColor)
        _linkColor = ReadWriteAttribute(jsObject: jsObject, name: Strings.linkColor)
        _vlinkColor = ReadWriteAttribute(jsObject: jsObject, name: Strings.vlinkColor)
        _alinkColor = ReadWriteAttribute(jsObject: jsObject, name: Strings.alinkColor)
        _bgColor = ReadWriteAttribute(jsObject: jsObject, name: Strings.bgColor)
        _anchors = ReadonlyAttribute(jsObject: jsObject, name: Strings.anchors)
        _applets = ReadonlyAttribute(jsObject: jsObject, name: Strings.applets)
        _all = ReadonlyAttribute(jsObject: jsObject, name: Strings.all)
        _scrollingElement = ReadonlyAttribute(jsObject: jsObject, name: Strings.scrollingElement)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var implementation: DOMImplementation

    @ReadonlyAttribute
    public var URL: String

    @ReadonlyAttribute
    public var documentURI: String

    @ReadonlyAttribute
    public var compatMode: String

    @ReadonlyAttribute
    public var characterSet: String

    @ReadonlyAttribute
    public var charset: String

    @ReadonlyAttribute
    public var inputEncoding: String

    @ReadonlyAttribute
    public var contentType: String

    @ReadonlyAttribute
    public var doctype: DocumentType?

    @ReadonlyAttribute
    public var documentElement: Element?

    @inlinable public func getElementsByTagName(qualifiedName: String) -> HTMLCollection {
        let this = jsObject
        return this[Strings.getElementsByTagName].function!(this: this, arguments: [_toJSValue(qualifiedName)]).fromJSValue()!
    }

    @inlinable public func getElementsByTagNameNS(namespace: String?, localName: String) -> HTMLCollection {
        let this = jsObject
        return this[Strings.getElementsByTagNameNS].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(localName)]).fromJSValue()!
    }

    @inlinable public func getElementsByClassName(classNames: String) -> HTMLCollection {
        let this = jsObject
        return this[Strings.getElementsByClassName].function!(this: this, arguments: [_toJSValue(classNames)]).fromJSValue()!
    }

    @inlinable public func createElement(localName: String, options: ElementCreationOptions_or_String? = nil) -> Element {
        let this = jsObject
        return this[Strings.createElement].function!(this: this, arguments: [_toJSValue(localName), _toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions_or_String? = nil) -> Element {
        let this = jsObject
        return this[Strings.createElementNS].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(qualifiedName), _toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func createDocumentFragment() -> DocumentFragment {
        let this = jsObject
        return this[Strings.createDocumentFragment].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func createTextNode(data: String) -> Text {
        let this = jsObject
        return this[Strings.createTextNode].function!(this: this, arguments: [_toJSValue(data)]).fromJSValue()!
    }

    @inlinable public func createCDATASection(data: String) -> CDATASection {
        let this = jsObject
        return this[Strings.createCDATASection].function!(this: this, arguments: [_toJSValue(data)]).fromJSValue()!
    }

    @inlinable public func createComment(data: String) -> Comment {
        let this = jsObject
        return this[Strings.createComment].function!(this: this, arguments: [_toJSValue(data)]).fromJSValue()!
    }

    @inlinable public func createProcessingInstruction(target: String, data: String) -> ProcessingInstruction {
        let this = jsObject
        return this[Strings.createProcessingInstruction].function!(this: this, arguments: [_toJSValue(target), _toJSValue(data)]).fromJSValue()!
    }

    @inlinable public func importNode(node: Node, deep: Bool? = nil) -> Node {
        let this = jsObject
        return this[Strings.importNode].function!(this: this, arguments: [_toJSValue(node), _toJSValue(deep)]).fromJSValue()!
    }

    @inlinable public func adoptNode(node: Node) -> Node {
        let this = jsObject
        return this[Strings.adoptNode].function!(this: this, arguments: [_toJSValue(node)]).fromJSValue()!
    }

    @inlinable public func createAttribute(localName: String) -> Attr {
        let this = jsObject
        return this[Strings.createAttribute].function!(this: this, arguments: [_toJSValue(localName)]).fromJSValue()!
    }

    @inlinable public func createAttributeNS(namespace: String?, qualifiedName: String) -> Attr {
        let this = jsObject
        return this[Strings.createAttributeNS].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(qualifiedName)]).fromJSValue()!
    }

    @inlinable public func createEvent(interface: String) -> Event {
        let this = jsObject
        return this[Strings.createEvent].function!(this: this, arguments: [_toJSValue(interface)]).fromJSValue()!
    }

    @inlinable public func createRange() -> Range {
        let this = jsObject
        return this[Strings.createRange].function!(this: this, arguments: []).fromJSValue()!
    }

    // XXX: member 'createNodeIterator' is ignored

    // XXX: member 'createTreeWalker' is ignored

    @ReadonlyAttribute
    public var location: Location?

    @ReadWriteAttribute
    public var domain: String

    @ReadonlyAttribute
    public var referrer: String

    @ReadWriteAttribute
    public var cookie: String

    @ReadonlyAttribute
    public var lastModified: String

    @ReadonlyAttribute
    public var readyState: DocumentReadyState

    @inlinable public subscript(key: String) -> JSObject {
        jsObject[key].fromJSValue()!
    }

    @ReadWriteAttribute
    public var title: String

    @ReadWriteAttribute
    public var dir: String

    @ReadWriteAttribute
    public var body: HTMLElement?

    @ReadonlyAttribute
    public var head: HTMLHeadElement?

    @ReadonlyAttribute
    public var images: HTMLCollection

    @ReadonlyAttribute
    public var embeds: HTMLCollection

    @ReadonlyAttribute
    public var plugins: HTMLCollection

    @ReadonlyAttribute
    public var links: HTMLCollection

    @ReadonlyAttribute
    public var forms: HTMLCollection

    @ReadonlyAttribute
    public var scripts: HTMLCollection

    @inlinable public func getElementsByName(elementName: String) -> NodeList {
        let this = jsObject
        return this[Strings.getElementsByName].function!(this: this, arguments: [_toJSValue(elementName)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var currentScript: HTMLOrSVGScriptElement?

    @inlinable public func open(unused1: String? = nil, unused2: String? = nil) -> Self {
        let this = jsObject
        return this[Strings.open].function!(this: this, arguments: [_toJSValue(unused1), _toJSValue(unused2)]).fromJSValue()!
    }

    @inlinable public func open(url: String, name: String, features: String) -> WindowProxy? {
        let this = jsObject
        return this[Strings.open].function!(this: this, arguments: [_toJSValue(url), _toJSValue(name), _toJSValue(features)]).fromJSValue()
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @inlinable public func write(text: String...) {
        let this = jsObject
        _ = this[Strings.write].function!(this: this, arguments: text.map(_toJSValue))
    }

    @inlinable public func writeln(text: String...) {
        let this = jsObject
        _ = this[Strings.writeln].function!(this: this, arguments: text.map(_toJSValue))
    }

    @ReadonlyAttribute
    public var defaultView: WindowProxy?

    @inlinable public func hasFocus() -> Bool {
        let this = jsObject
        return this[Strings.hasFocus].function!(this: this, arguments: []).fromJSValue()!
    }

    @ReadWriteAttribute
    public var designMode: String

    @inlinable public func execCommand(commandId: String, showUI: Bool? = nil, value: String? = nil) -> Bool {
        let this = jsObject
        return this[Strings.execCommand].function!(this: this, arguments: [_toJSValue(commandId), _toJSValue(showUI), _toJSValue(value)]).fromJSValue()!
    }

    @inlinable public func queryCommandEnabled(commandId: String) -> Bool {
        let this = jsObject
        return this[Strings.queryCommandEnabled].function!(this: this, arguments: [_toJSValue(commandId)]).fromJSValue()!
    }

    @inlinable public func queryCommandIndeterm(commandId: String) -> Bool {
        let this = jsObject
        return this[Strings.queryCommandIndeterm].function!(this: this, arguments: [_toJSValue(commandId)]).fromJSValue()!
    }

    @inlinable public func queryCommandState(commandId: String) -> Bool {
        let this = jsObject
        return this[Strings.queryCommandState].function!(this: this, arguments: [_toJSValue(commandId)]).fromJSValue()!
    }

    @inlinable public func queryCommandSupported(commandId: String) -> Bool {
        let this = jsObject
        return this[Strings.queryCommandSupported].function!(this: this, arguments: [_toJSValue(commandId)]).fromJSValue()!
    }

    @inlinable public func queryCommandValue(commandId: String) -> String {
        let this = jsObject
        return this[Strings.queryCommandValue].function!(this: this, arguments: [_toJSValue(commandId)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var hidden: Bool

    @ReadonlyAttribute
    public var visibilityState: DocumentVisibilityState

    @ClosureAttribute1Optional
    public var onreadystatechange: EventHandler

    @ClosureAttribute1Optional
    public var onvisibilitychange: EventHandler

    @ReadWriteAttribute
    public var fgColor: String

    @ReadWriteAttribute
    public var linkColor: String

    @ReadWriteAttribute
    public var vlinkColor: String

    @ReadWriteAttribute
    public var alinkColor: String

    @ReadWriteAttribute
    public var bgColor: String

    @ReadonlyAttribute
    public var anchors: HTMLCollection

    @ReadonlyAttribute
    public var applets: HTMLCollection

    @inlinable public func clear() {
        let this = jsObject
        _ = this[Strings.clear].function!(this: this, arguments: [])
    }

    @inlinable public func captureEvents() {
        let this = jsObject
        _ = this[Strings.captureEvents].function!(this: this, arguments: [])
    }

    @inlinable public func releaseEvents() {
        let this = jsObject
        _ = this[Strings.releaseEvents].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var all: HTMLAllCollection

    @inlinable public func elementFromPoint(x: Double, y: Double) -> Element? {
        let this = jsObject
        return this[Strings.elementFromPoint].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)]).fromJSValue()
    }

    @inlinable public func elementsFromPoint(x: Double, y: Double) -> [Element] {
        let this = jsObject
        return this[Strings.elementsFromPoint].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)]).fromJSValue()!
    }

    @inlinable public func caretPositionFromPoint(x: Double, y: Double) -> CaretPosition? {
        let this = jsObject
        return this[Strings.caretPositionFromPoint].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)]).fromJSValue()
    }

    @ReadonlyAttribute
    public var scrollingElement: Element?
}

open class DocumentFragment: Node, NonElementParentNode, ParentNode {
    @inlinable override open class var constructor: JSFunction? { JSObject.global[Strings.DocumentFragment].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }
}

public protocol DocumentOrShadowRoot: JSBridgedClass {}
public extension DocumentOrShadowRoot {
    @inlinable var activeElement: Element? { jsObject[Strings.activeElement].fromJSValue() }
}

public enum DocumentReadyState: JSString, JSValueCompatible {
    case loading = "loading"
    case interactive = "interactive"
    case complete = "complete"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class DocumentType: Node, ChildNode {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.DocumentType].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadonlyAttribute(jsObject: jsObject, name: Strings.name)
        _publicId = ReadonlyAttribute(jsObject: jsObject, name: Strings.publicId)
        _systemId = ReadonlyAttribute(jsObject: jsObject, name: Strings.systemId)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var name: String

    @ReadonlyAttribute
    public var publicId: String

    @ReadonlyAttribute
    public var systemId: String
}

public enum DocumentVisibilityState: JSString, JSValueCompatible {
    case visible = "visible"
    case hidden = "hidden"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class DoubleRange: BridgedDictionary {
    public convenience init(max: Double, min: Double) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.max] = _toJSValue(max)
        object[Strings.min] = _toJSValue(min)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _max = ReadWriteAttribute(jsObject: object, name: Strings.max)
        _min = ReadWriteAttribute(jsObject: object, name: Strings.min)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var max: Double

    @ReadWriteAttribute
    public var min: Double
}

public class DragEvent: MouseEvent {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.DragEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _dataTransfer = ReadonlyAttribute(jsObject: jsObject, name: Strings.dataTransfer)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: DragEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var dataTransfer: DataTransfer?
}

public class DragEventInit: BridgedDictionary {
    public convenience init(dataTransfer: DataTransfer?) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.dataTransfer] = _toJSValue(dataTransfer)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _dataTransfer = ReadWriteAttribute(jsObject: object, name: Strings.dataTransfer)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var dataTransfer: DataTransfer?
}

open class Element: Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slottable, ARIAMixin, GeometryUtils {
    @inlinable override open class var constructor: JSFunction? { JSObject.global[Strings.Element].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _namespaceURI = ReadonlyAttribute(jsObject: jsObject, name: Strings.namespaceURI)
        _prefix = ReadonlyAttribute(jsObject: jsObject, name: Strings.prefix)
        _localName = ReadonlyAttribute(jsObject: jsObject, name: Strings.localName)
        _tagName = ReadonlyAttribute(jsObject: jsObject, name: Strings.tagName)
        _id = ReadWriteAttribute(jsObject: jsObject, name: Strings.id)
        _className = ReadWriteAttribute(jsObject: jsObject, name: Strings.className)
        _classList = ReadonlyAttribute(jsObject: jsObject, name: Strings.classList)
        _slot = ReadWriteAttribute(jsObject: jsObject, name: Strings.slot)
        _attributes = ReadonlyAttribute(jsObject: jsObject, name: Strings.attributes)
        _shadowRoot = ReadonlyAttribute(jsObject: jsObject, name: Strings.shadowRoot)
        _scrollTop = ReadWriteAttribute(jsObject: jsObject, name: Strings.scrollTop)
        _scrollLeft = ReadWriteAttribute(jsObject: jsObject, name: Strings.scrollLeft)
        _scrollWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.scrollWidth)
        _scrollHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.scrollHeight)
        _clientTop = ReadonlyAttribute(jsObject: jsObject, name: Strings.clientTop)
        _clientLeft = ReadonlyAttribute(jsObject: jsObject, name: Strings.clientLeft)
        _clientWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.clientWidth)
        _clientHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.clientHeight)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var namespaceURI: String?

    @ReadonlyAttribute
    public var prefix: String?

    @ReadonlyAttribute
    public var localName: String

    @ReadonlyAttribute
    public var tagName: String

    @ReadWriteAttribute
    public var id: String

    @ReadWriteAttribute
    public var className: String

    @ReadonlyAttribute
    public var classList: DOMTokenList

    @ReadWriteAttribute
    public var slot: String

    @inlinable public func hasAttributes() -> Bool {
        let this = jsObject
        return this[Strings.hasAttributes].function!(this: this, arguments: []).fromJSValue()!
    }

    @ReadonlyAttribute
    public var attributes: NamedNodeMap

    @inlinable public func getAttributeNames() -> [String] {
        let this = jsObject
        return this[Strings.getAttributeNames].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getAttribute(qualifiedName: String) -> String? {
        let this = jsObject
        return this[Strings.getAttribute].function!(this: this, arguments: [_toJSValue(qualifiedName)]).fromJSValue()
    }

    @inlinable public func getAttributeNS(namespace: String?, localName: String) -> String? {
        let this = jsObject
        return this[Strings.getAttributeNS].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(localName)]).fromJSValue()
    }

    @inlinable public func setAttribute(qualifiedName: String, value: String) {
        let this = jsObject
        _ = this[Strings.setAttribute].function!(this: this, arguments: [_toJSValue(qualifiedName), _toJSValue(value)])
    }

    @inlinable public func setAttributeNS(namespace: String?, qualifiedName: String, value: String) {
        let this = jsObject
        _ = this[Strings.setAttributeNS].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(qualifiedName), _toJSValue(value)])
    }

    @inlinable public func removeAttribute(qualifiedName: String) {
        let this = jsObject
        _ = this[Strings.removeAttribute].function!(this: this, arguments: [_toJSValue(qualifiedName)])
    }

    @inlinable public func removeAttributeNS(namespace: String?, localName: String) {
        let this = jsObject
        _ = this[Strings.removeAttributeNS].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(localName)])
    }

    @inlinable public func toggleAttribute(qualifiedName: String, force: Bool? = nil) -> Bool {
        let this = jsObject
        return this[Strings.toggleAttribute].function!(this: this, arguments: [_toJSValue(qualifiedName), _toJSValue(force)]).fromJSValue()!
    }

    @inlinable public func hasAttribute(qualifiedName: String) -> Bool {
        let this = jsObject
        return this[Strings.hasAttribute].function!(this: this, arguments: [_toJSValue(qualifiedName)]).fromJSValue()!
    }

    @inlinable public func hasAttributeNS(namespace: String?, localName: String) -> Bool {
        let this = jsObject
        return this[Strings.hasAttributeNS].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(localName)]).fromJSValue()!
    }

    @inlinable public func getAttributeNode(qualifiedName: String) -> Attr? {
        let this = jsObject
        return this[Strings.getAttributeNode].function!(this: this, arguments: [_toJSValue(qualifiedName)]).fromJSValue()
    }

    @inlinable public func getAttributeNodeNS(namespace: String?, localName: String) -> Attr? {
        let this = jsObject
        return this[Strings.getAttributeNodeNS].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(localName)]).fromJSValue()
    }

    @inlinable public func setAttributeNode(attr: Attr) -> Attr? {
        let this = jsObject
        return this[Strings.setAttributeNode].function!(this: this, arguments: [_toJSValue(attr)]).fromJSValue()
    }

    @inlinable public func setAttributeNodeNS(attr: Attr) -> Attr? {
        let this = jsObject
        return this[Strings.setAttributeNodeNS].function!(this: this, arguments: [_toJSValue(attr)]).fromJSValue()
    }

    @inlinable public func removeAttributeNode(attr: Attr) -> Attr {
        let this = jsObject
        return this[Strings.removeAttributeNode].function!(this: this, arguments: [_toJSValue(attr)]).fromJSValue()!
    }

    @inlinable public func attachShadow(init: ShadowRootInit) -> ShadowRoot {
        let this = jsObject
        return this[Strings.attachShadow].function!(this: this, arguments: [_toJSValue(`init`)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var shadowRoot: ShadowRoot?

    @inlinable public func closest(selectors: String) -> Element? {
        let this = jsObject
        return this[Strings.closest].function!(this: this, arguments: [_toJSValue(selectors)]).fromJSValue()
    }

    @inlinable public func matches(selectors: String) -> Bool {
        let this = jsObject
        return this[Strings.matches].function!(this: this, arguments: [_toJSValue(selectors)]).fromJSValue()!
    }

    @inlinable public func webkitMatchesSelector(selectors: String) -> Bool {
        let this = jsObject
        return this[Strings.webkitMatchesSelector].function!(this: this, arguments: [_toJSValue(selectors)]).fromJSValue()!
    }

    @inlinable public func getElementsByTagName(qualifiedName: String) -> HTMLCollection {
        let this = jsObject
        return this[Strings.getElementsByTagName].function!(this: this, arguments: [_toJSValue(qualifiedName)]).fromJSValue()!
    }

    @inlinable public func getElementsByTagNameNS(namespace: String?, localName: String) -> HTMLCollection {
        let this = jsObject
        return this[Strings.getElementsByTagNameNS].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(localName)]).fromJSValue()!
    }

    @inlinable public func getElementsByClassName(classNames: String) -> HTMLCollection {
        let this = jsObject
        return this[Strings.getElementsByClassName].function!(this: this, arguments: [_toJSValue(classNames)]).fromJSValue()!
    }

    @inlinable public func insertAdjacentElement(where: String, element: Element) -> Element? {
        let this = jsObject
        return this[Strings.insertAdjacentElement].function!(this: this, arguments: [_toJSValue(`where`), _toJSValue(element)]).fromJSValue()
    }

    @inlinable public func insertAdjacentText(where: String, data: String) {
        let this = jsObject
        _ = this[Strings.insertAdjacentText].function!(this: this, arguments: [_toJSValue(`where`), _toJSValue(data)])
    }

    @inlinable public func pseudo(type: String) -> CSSPseudoElement? {
        let this = jsObject
        return this[Strings.pseudo].function!(this: this, arguments: [_toJSValue(type)]).fromJSValue()
    }

    @inlinable public func getClientRects() -> DOMRectList {
        let this = jsObject
        return this[Strings.getClientRects].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getBoundingClientRect() -> DOMRect {
        let this = jsObject
        return this[Strings.getBoundingClientRect].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func checkVisibility(options: CheckVisibilityOptions? = nil) -> Bool {
        let this = jsObject
        return this[Strings.checkVisibility].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func scrollIntoView(arg: Bool_or_ScrollIntoViewOptions? = nil) {
        let this = jsObject
        _ = this[Strings.scrollIntoView].function!(this: this, arguments: [_toJSValue(arg)])
    }

    @inlinable public func scroll(options: ScrollToOptions? = nil) {
        let this = jsObject
        _ = this[Strings.scroll].function!(this: this, arguments: [_toJSValue(options)])
    }

    @inlinable public func scroll(x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.scroll].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @inlinable public func scrollTo(options: ScrollToOptions? = nil) {
        let this = jsObject
        _ = this[Strings.scrollTo].function!(this: this, arguments: [_toJSValue(options)])
    }

    @inlinable public func scrollTo(x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.scrollTo].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @inlinable public func scrollBy(options: ScrollToOptions? = nil) {
        let this = jsObject
        _ = this[Strings.scrollBy].function!(this: this, arguments: [_toJSValue(options)])
    }

    @inlinable public func scrollBy(x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.scrollBy].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @ReadWriteAttribute
    public var scrollTop: Double

    @ReadWriteAttribute
    public var scrollLeft: Double

    @ReadonlyAttribute
    public var scrollWidth: Int32

    @ReadonlyAttribute
    public var scrollHeight: Int32

    @ReadonlyAttribute
    public var clientTop: Int32

    @ReadonlyAttribute
    public var clientLeft: Int32

    @ReadonlyAttribute
    public var clientWidth: Int32

    @ReadonlyAttribute
    public var clientHeight: Int32
}

public protocol ElementContentEditable: JSBridgedClass {}
public extension ElementContentEditable {
    @inlinable var contentEditable: String {
        get { jsObject[Strings.contentEditable].fromJSValue()! }
        nonmutating set { jsObject[Strings.contentEditable] = _toJSValue(newValue) }
    }

    @inlinable var enterKeyHint: String {
        get { jsObject[Strings.enterKeyHint].fromJSValue()! }
        nonmutating set { jsObject[Strings.enterKeyHint] = _toJSValue(newValue) }
    }

    @inlinable var isContentEditable: Bool { jsObject[Strings.isContentEditable].fromJSValue()! }

    @inlinable var inputMode: String {
        get { jsObject[Strings.inputMode].fromJSValue()! }
        nonmutating set { jsObject[Strings.inputMode] = _toJSValue(newValue) }
    }
}

public class ElementCreationOptions: BridgedDictionary {
    public convenience init(is: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.is] = _toJSValue(`is`)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _is = ReadWriteAttribute(jsObject: object, name: Strings.is)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var `is`: String
}

public class ElementDefinitionOptions: BridgedDictionary {
    public convenience init(extends: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.extends] = _toJSValue(extends)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _extends = ReadWriteAttribute(jsObject: object, name: Strings.extends)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var extends: String
}

public class ElementInternals: JSBridgedClass, ARIAMixin {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ElementInternals].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _shadowRoot = ReadonlyAttribute(jsObject: jsObject, name: Strings.shadowRoot)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: Strings.willValidate)
        _validity = ReadonlyAttribute(jsObject: jsObject, name: Strings.validity)
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: Strings.validationMessage)
        _labels = ReadonlyAttribute(jsObject: jsObject, name: Strings.labels)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var shadowRoot: ShadowRoot?

    @inlinable public func setFormValue(value: File_or_FormData_or_String?, state: File_or_FormData_or_String? = nil) {
        let this = jsObject
        _ = this[Strings.setFormValue].function!(this: this, arguments: [_toJSValue(value), _toJSValue(state)])
    }

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @inlinable public func setValidity(flags: ValidityStateFlags? = nil, message: String? = nil, anchor: HTMLElement? = nil) {
        let this = jsObject
        _ = this[Strings.setValidity].function!(this: this, arguments: [_toJSValue(flags), _toJSValue(message), _toJSValue(anchor)])
    }

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    @inlinable public func checkValidity() -> Bool {
        let this = jsObject
        return this[Strings.checkValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func reportValidity() -> Bool {
        let this = jsObject
        return this[Strings.reportValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @ReadonlyAttribute
    public var labels: NodeList
}

public class EncodedAudioChunk: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.EncodedAudioChunk].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _timestamp = ReadonlyAttribute(jsObject: jsObject, name: Strings.timestamp)
        _duration = ReadonlyAttribute(jsObject: jsObject, name: Strings.duration)
        _byteLength = ReadonlyAttribute(jsObject: jsObject, name: Strings.byteLength)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(init: EncodedAudioChunkInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var type: EncodedAudioChunkType

    @ReadonlyAttribute
    public var timestamp: Int64

    @ReadonlyAttribute
    public var duration: UInt64?

    @ReadonlyAttribute
    public var byteLength: UInt32

    @inlinable public func copyTo(destination: AllowSharedBufferSource) {
        let this = jsObject
        _ = this[Strings.copyTo].function!(this: this, arguments: [_toJSValue(destination)])
    }
}

public class EncodedAudioChunkInit: BridgedDictionary {
    public convenience init(type: EncodedAudioChunkType, timestamp: Int64, duration: UInt64, data: BufferSource) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.type] = _toJSValue(type)
        object[Strings.timestamp] = _toJSValue(timestamp)
        object[Strings.duration] = _toJSValue(duration)
        object[Strings.data] = _toJSValue(data)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        _timestamp = ReadWriteAttribute(jsObject: object, name: Strings.timestamp)
        _duration = ReadWriteAttribute(jsObject: object, name: Strings.duration)
        _data = ReadWriteAttribute(jsObject: object, name: Strings.data)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var type: EncodedAudioChunkType

    @ReadWriteAttribute
    public var timestamp: Int64

    @ReadWriteAttribute
    public var duration: UInt64

    @ReadWriteAttribute
    public var data: BufferSource
}

public class EncodedAudioChunkMetadata: BridgedDictionary {
    public convenience init(decoderConfig: AudioDecoderConfig) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.decoderConfig] = _toJSValue(decoderConfig)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _decoderConfig = ReadWriteAttribute(jsObject: object, name: Strings.decoderConfig)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var decoderConfig: AudioDecoderConfig
}

public enum EncodedAudioChunkType: JSString, JSValueCompatible {
    case key = "key"
    case delta = "delta"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class EncodedVideoChunk: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.EncodedVideoChunk].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _timestamp = ReadonlyAttribute(jsObject: jsObject, name: Strings.timestamp)
        _duration = ReadonlyAttribute(jsObject: jsObject, name: Strings.duration)
        _byteLength = ReadonlyAttribute(jsObject: jsObject, name: Strings.byteLength)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(init: EncodedVideoChunkInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var type: EncodedVideoChunkType

    @ReadonlyAttribute
    public var timestamp: Int64

    @ReadonlyAttribute
    public var duration: UInt64?

    @ReadonlyAttribute
    public var byteLength: UInt32

    @inlinable public func copyTo(destination: AllowSharedBufferSource) {
        let this = jsObject
        _ = this[Strings.copyTo].function!(this: this, arguments: [_toJSValue(destination)])
    }
}

public class EncodedVideoChunkInit: BridgedDictionary {
    public convenience init(type: EncodedVideoChunkType, timestamp: Int64, duration: UInt64, data: AllowSharedBufferSource) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.type] = _toJSValue(type)
        object[Strings.timestamp] = _toJSValue(timestamp)
        object[Strings.duration] = _toJSValue(duration)
        object[Strings.data] = _toJSValue(data)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        _timestamp = ReadWriteAttribute(jsObject: object, name: Strings.timestamp)
        _duration = ReadWriteAttribute(jsObject: object, name: Strings.duration)
        _data = ReadWriteAttribute(jsObject: object, name: Strings.data)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var type: EncodedVideoChunkType

    @ReadWriteAttribute
    public var timestamp: Int64

    @ReadWriteAttribute
    public var duration: UInt64

    @ReadWriteAttribute
    public var data: AllowSharedBufferSource
}

public class EncodedVideoChunkMetadata: BridgedDictionary {
    public convenience init(decoderConfig: VideoDecoderConfig, svc: SvcOutputMetadata, alphaSideData: BufferSource) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.decoderConfig] = _toJSValue(decoderConfig)
        object[Strings.svc] = _toJSValue(svc)
        object[Strings.alphaSideData] = _toJSValue(alphaSideData)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _decoderConfig = ReadWriteAttribute(jsObject: object, name: Strings.decoderConfig)
        _svc = ReadWriteAttribute(jsObject: object, name: Strings.svc)
        _alphaSideData = ReadWriteAttribute(jsObject: object, name: Strings.alphaSideData)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var decoderConfig: VideoDecoderConfig

    @ReadWriteAttribute
    public var svc: SvcOutputMetadata

    @ReadWriteAttribute
    public var alphaSideData: BufferSource
}

public enum EncodedVideoChunkType: JSString, JSValueCompatible {
    case key = "key"
    case delta = "delta"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum EndOfStreamError: JSString, JSValueCompatible {
    case network = "network"
    case decode = "decode"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum EndingType: JSString, JSValueCompatible {
    case transparent = "transparent"
    case native = "native"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class ErrorEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ErrorEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _message = ReadonlyAttribute(jsObject: jsObject, name: Strings.message)
        _filename = ReadonlyAttribute(jsObject: jsObject, name: Strings.filename)
        _lineno = ReadonlyAttribute(jsObject: jsObject, name: Strings.lineno)
        _colno = ReadonlyAttribute(jsObject: jsObject, name: Strings.colno)
        _error = ReadonlyAttribute(jsObject: jsObject, name: Strings.error)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: ErrorEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var message: String

    @ReadonlyAttribute
    public var filename: String

    @ReadonlyAttribute
    public var lineno: UInt32

    @ReadonlyAttribute
    public var colno: UInt32

    @ReadonlyAttribute
    public var error: JSValue
}

public class ErrorEventInit: BridgedDictionary {
    public convenience init(message: String, filename: String, lineno: UInt32, colno: UInt32, error: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.message] = _toJSValue(message)
        object[Strings.filename] = _toJSValue(filename)
        object[Strings.lineno] = _toJSValue(lineno)
        object[Strings.colno] = _toJSValue(colno)
        object[Strings.error] = _toJSValue(error)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _message = ReadWriteAttribute(jsObject: object, name: Strings.message)
        _filename = ReadWriteAttribute(jsObject: object, name: Strings.filename)
        _lineno = ReadWriteAttribute(jsObject: object, name: Strings.lineno)
        _colno = ReadWriteAttribute(jsObject: object, name: Strings.colno)
        _error = ReadWriteAttribute(jsObject: object, name: Strings.error)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var message: String

    @ReadWriteAttribute
    public var filename: String

    @ReadWriteAttribute
    public var lineno: UInt32

    @ReadWriteAttribute
    public var colno: UInt32

    @ReadWriteAttribute
    public var error: JSValue
}

open class Event: JSBridgedClass {
    @inlinable open class var constructor: JSFunction? { JSObject.global[Strings.Event].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _target = ReadonlyAttribute(jsObject: jsObject, name: Strings.target)
        _srcElement = ReadonlyAttribute(jsObject: jsObject, name: Strings.srcElement)
        _currentTarget = ReadonlyAttribute(jsObject: jsObject, name: Strings.currentTarget)
        _eventPhase = ReadonlyAttribute(jsObject: jsObject, name: Strings.eventPhase)
        _cancelBubble = ReadWriteAttribute(jsObject: jsObject, name: Strings.cancelBubble)
        _bubbles = ReadonlyAttribute(jsObject: jsObject, name: Strings.bubbles)
        _cancelable = ReadonlyAttribute(jsObject: jsObject, name: Strings.cancelable)
        _returnValue = ReadWriteAttribute(jsObject: jsObject, name: Strings.returnValue)
        _defaultPrevented = ReadonlyAttribute(jsObject: jsObject, name: Strings.defaultPrevented)
        _composed = ReadonlyAttribute(jsObject: jsObject, name: Strings.composed)
        _isTrusted = ReadonlyAttribute(jsObject: jsObject, name: Strings.isTrusted)
        _timeStamp = ReadonlyAttribute(jsObject: jsObject, name: Strings.timeStamp)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(type: String, eventInitDict: EventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var type: String

    @ReadonlyAttribute
    public var target: EventTarget?

    @ReadonlyAttribute
    public var srcElement: EventTarget?

    @ReadonlyAttribute
    public var currentTarget: EventTarget?

    @inlinable public func composedPath() -> [EventTarget] {
        let this = jsObject
        return this[Strings.composedPath].function!(this: this, arguments: []).fromJSValue()!
    }

    public static let NONE: UInt16 = 0

    public static let CAPTURING_PHASE: UInt16 = 1

    public static let AT_TARGET: UInt16 = 2

    public static let BUBBLING_PHASE: UInt16 = 3

    @ReadonlyAttribute
    public var eventPhase: UInt16

    @inlinable public func stopPropagation() {
        let this = jsObject
        _ = this[Strings.stopPropagation].function!(this: this, arguments: [])
    }

    @ReadWriteAttribute
    public var cancelBubble: Bool

    @inlinable public func stopImmediatePropagation() {
        let this = jsObject
        _ = this[Strings.stopImmediatePropagation].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var bubbles: Bool

    @ReadonlyAttribute
    public var cancelable: Bool

    @ReadWriteAttribute
    public var returnValue: Bool

    @inlinable public func preventDefault() {
        let this = jsObject
        _ = this[Strings.preventDefault].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var defaultPrevented: Bool

    @ReadonlyAttribute
    public var composed: Bool

    @ReadonlyAttribute
    public var isTrusted: Bool

    @ReadonlyAttribute
    public var timeStamp: DOMHighResTimeStamp

    @inlinable public func initEvent(type: String, bubbles: Bool? = nil, cancelable: Bool? = nil) {
        let this = jsObject
        _ = this[Strings.initEvent].function!(this: this, arguments: [_toJSValue(type), _toJSValue(bubbles), _toJSValue(cancelable)])
    }
}

public class EventInit: BridgedDictionary {
    public convenience init(bubbles: Bool, cancelable: Bool, composed: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.bubbles] = _toJSValue(bubbles)
        object[Strings.cancelable] = _toJSValue(cancelable)
        object[Strings.composed] = _toJSValue(composed)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _bubbles = ReadWriteAttribute(jsObject: object, name: Strings.bubbles)
        _cancelable = ReadWriteAttribute(jsObject: object, name: Strings.cancelable)
        _composed = ReadWriteAttribute(jsObject: object, name: Strings.composed)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var bubbles: Bool

    @ReadWriteAttribute
    public var cancelable: Bool

    @ReadWriteAttribute
    public var composed: Bool
}

public typealias EventListener = (Event) -> Void
public class EventListenerOptions: BridgedDictionary {
    public convenience init(capture: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.capture] = _toJSValue(capture)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _capture = ReadWriteAttribute(jsObject: object, name: Strings.capture)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var capture: Bool
}

public class EventModifierInit: BridgedDictionary {
    public convenience init(ctrlKey: Bool, shiftKey: Bool, altKey: Bool, metaKey: Bool, modifierAltGraph: Bool, modifierCapsLock: Bool, modifierFn: Bool, modifierFnLock: Bool, modifierHyper: Bool, modifierNumLock: Bool, modifierScrollLock: Bool, modifierSuper: Bool, modifierSymbol: Bool, modifierSymbolLock: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.ctrlKey] = _toJSValue(ctrlKey)
        object[Strings.shiftKey] = _toJSValue(shiftKey)
        object[Strings.altKey] = _toJSValue(altKey)
        object[Strings.metaKey] = _toJSValue(metaKey)
        object[Strings.modifierAltGraph] = _toJSValue(modifierAltGraph)
        object[Strings.modifierCapsLock] = _toJSValue(modifierCapsLock)
        object[Strings.modifierFn] = _toJSValue(modifierFn)
        object[Strings.modifierFnLock] = _toJSValue(modifierFnLock)
        object[Strings.modifierHyper] = _toJSValue(modifierHyper)
        object[Strings.modifierNumLock] = _toJSValue(modifierNumLock)
        object[Strings.modifierScrollLock] = _toJSValue(modifierScrollLock)
        object[Strings.modifierSuper] = _toJSValue(modifierSuper)
        object[Strings.modifierSymbol] = _toJSValue(modifierSymbol)
        object[Strings.modifierSymbolLock] = _toJSValue(modifierSymbolLock)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _ctrlKey = ReadWriteAttribute(jsObject: object, name: Strings.ctrlKey)
        _shiftKey = ReadWriteAttribute(jsObject: object, name: Strings.shiftKey)
        _altKey = ReadWriteAttribute(jsObject: object, name: Strings.altKey)
        _metaKey = ReadWriteAttribute(jsObject: object, name: Strings.metaKey)
        _modifierAltGraph = ReadWriteAttribute(jsObject: object, name: Strings.modifierAltGraph)
        _modifierCapsLock = ReadWriteAttribute(jsObject: object, name: Strings.modifierCapsLock)
        _modifierFn = ReadWriteAttribute(jsObject: object, name: Strings.modifierFn)
        _modifierFnLock = ReadWriteAttribute(jsObject: object, name: Strings.modifierFnLock)
        _modifierHyper = ReadWriteAttribute(jsObject: object, name: Strings.modifierHyper)
        _modifierNumLock = ReadWriteAttribute(jsObject: object, name: Strings.modifierNumLock)
        _modifierScrollLock = ReadWriteAttribute(jsObject: object, name: Strings.modifierScrollLock)
        _modifierSuper = ReadWriteAttribute(jsObject: object, name: Strings.modifierSuper)
        _modifierSymbol = ReadWriteAttribute(jsObject: object, name: Strings.modifierSymbol)
        _modifierSymbolLock = ReadWriteAttribute(jsObject: object, name: Strings.modifierSymbolLock)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var ctrlKey: Bool

    @ReadWriteAttribute
    public var shiftKey: Bool

    @ReadWriteAttribute
    public var altKey: Bool

    @ReadWriteAttribute
    public var metaKey: Bool

    @ReadWriteAttribute
    public var modifierAltGraph: Bool

    @ReadWriteAttribute
    public var modifierCapsLock: Bool

    @ReadWriteAttribute
    public var modifierFn: Bool

    @ReadWriteAttribute
    public var modifierFnLock: Bool

    @ReadWriteAttribute
    public var modifierHyper: Bool

    @ReadWriteAttribute
    public var modifierNumLock: Bool

    @ReadWriteAttribute
    public var modifierScrollLock: Bool

    @ReadWriteAttribute
    public var modifierSuper: Bool

    @ReadWriteAttribute
    public var modifierSymbol: Bool

    @ReadWriteAttribute
    public var modifierSymbolLock: Bool
}

public class EventSource: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.EventSource].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _url = ReadonlyAttribute(jsObject: jsObject, name: Strings.url)
        _withCredentials = ReadonlyAttribute(jsObject: jsObject, name: Strings.withCredentials)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _onopen = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onopen)
        _onmessage = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onmessage)
        _onerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onerror)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(url: String, eventSourceInitDict: EventSourceInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(url), _toJSValue(eventSourceInitDict)]))
    }

    @ReadonlyAttribute
    public var url: String

    @ReadonlyAttribute
    public var withCredentials: Bool

    public static let CONNECTING: UInt16 = 0

    public static let OPEN: UInt16 = 1

    public static let CLOSED: UInt16 = 2

    @ReadonlyAttribute
    public var readyState: UInt16

    @ClosureAttribute1Optional
    public var onopen: EventHandler

    @ClosureAttribute1Optional
    public var onmessage: EventHandler

    @ClosureAttribute1Optional
    public var onerror: EventHandler

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }
}

public class EventSourceInit: BridgedDictionary {
    public convenience init(withCredentials: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.withCredentials] = _toJSValue(withCredentials)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _withCredentials = ReadWriteAttribute(jsObject: object, name: Strings.withCredentials)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var withCredentials: Bool
}

open class EventTarget: JSBridgedClass {
    @inlinable open class var constructor: JSFunction? { JSObject.global[Strings.EventTarget].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @inlinable public func addEventListener(type: String, callback: EventListener?, options: AddEventListenerOptions_or_Bool? = nil) {
        let this = jsObject
        _ = this[Strings.addEventListener].function!(this: this, arguments: [_toJSValue(type), _toJSValue(callback), _toJSValue(options)])
    }

    @inlinable public func removeEventListener(type: String, callback: EventListener?, options: Bool_or_EventListenerOptions? = nil) {
        let this = jsObject
        _ = this[Strings.removeEventListener].function!(this: this, arguments: [_toJSValue(type), _toJSValue(callback), _toJSValue(options)])
    }

    @inlinable public func dispatchEvent(event: Event) -> Bool {
        let this = jsObject
        return this[Strings.dispatchEvent].function!(this: this, arguments: [_toJSValue(event)]).fromJSValue()!
    }
}

public class ExtendableEventInit: BridgedDictionary {
    public convenience init() {
        let object = JSObject.global[Strings.Object].function!.new()

        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        super.init(unsafelyWrapping: object)
    }
}

public class External: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.External].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func AddSearchProvider() {
        let this = jsObject
        _ = this[Strings.AddSearchProvider].function!(this: this, arguments: [])
    }

    @inlinable public func IsSearchProviderInstalled() {
        let this = jsObject
        _ = this[Strings.IsSearchProviderInstalled].function!(this: this, arguments: [])
    }
}

public class FetchEventInit: BridgedDictionary {
    public convenience init(request: Request, preloadResponse: JSPromise, clientId: String, resultingClientId: String, replacesClientId: String, handled: JSPromise) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.request] = _toJSValue(request)
        object[Strings.preloadResponse] = _toJSValue(preloadResponse)
        object[Strings.clientId] = _toJSValue(clientId)
        object[Strings.resultingClientId] = _toJSValue(resultingClientId)
        object[Strings.replacesClientId] = _toJSValue(replacesClientId)
        object[Strings.handled] = _toJSValue(handled)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _request = ReadWriteAttribute(jsObject: object, name: Strings.request)
        _preloadResponse = ReadWriteAttribute(jsObject: object, name: Strings.preloadResponse)
        _clientId = ReadWriteAttribute(jsObject: object, name: Strings.clientId)
        _resultingClientId = ReadWriteAttribute(jsObject: object, name: Strings.resultingClientId)
        _replacesClientId = ReadWriteAttribute(jsObject: object, name: Strings.replacesClientId)
        _handled = ReadWriteAttribute(jsObject: object, name: Strings.handled)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var request: Request

    @ReadWriteAttribute
    public var preloadResponse: JSPromise

    @ReadWriteAttribute
    public var clientId: String

    @ReadWriteAttribute
    public var resultingClientId: String

    @ReadWriteAttribute
    public var replacesClientId: String

    @ReadWriteAttribute
    public var handled: JSPromise
}

public class File: Blob {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.File].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadonlyAttribute(jsObject: jsObject, name: Strings.name)
        _lastModified = ReadonlyAttribute(jsObject: jsObject, name: Strings.lastModified)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(fileBits: [BlobPart], fileName: String, options: FilePropertyBag? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(fileBits), _toJSValue(fileName), _toJSValue(options)]))
    }

    @ReadonlyAttribute
    public var name: String

    @ReadonlyAttribute
    public var lastModified: Int64
}

public class FileList: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.FileList].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @inlinable public subscript(key: Int) -> File? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func item(index: UInt32) -> File? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }

    @ReadonlyAttribute
    public var length: UInt32
}

public class FilePropertyBag: BridgedDictionary {
    public convenience init(lastModified: Int64) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.lastModified] = _toJSValue(lastModified)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _lastModified = ReadWriteAttribute(jsObject: object, name: Strings.lastModified)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var lastModified: Int64
}

public class FileReader: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.FileReader].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _result = ReadonlyAttribute(jsObject: jsObject, name: Strings.result)
        _error = ReadonlyAttribute(jsObject: jsObject, name: Strings.error)
        _onloadstart = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onloadstart)
        _onprogress = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onprogress)
        _onload = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onload)
        _onabort = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onabort)
        _onerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onerror)
        _onloadend = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onloadend)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @inlinable public func readAsArrayBuffer(blob: Blob) {
        let this = jsObject
        _ = this[Strings.readAsArrayBuffer].function!(this: this, arguments: [_toJSValue(blob)])
    }

    @inlinable public func readAsBinaryString(blob: Blob) {
        let this = jsObject
        _ = this[Strings.readAsBinaryString].function!(this: this, arguments: [_toJSValue(blob)])
    }

    @inlinable public func readAsText(blob: Blob, encoding: String? = nil) {
        let this = jsObject
        _ = this[Strings.readAsText].function!(this: this, arguments: [_toJSValue(blob), _toJSValue(encoding)])
    }

    @inlinable public func readAsDataURL(blob: Blob) {
        let this = jsObject
        _ = this[Strings.readAsDataURL].function!(this: this, arguments: [_toJSValue(blob)])
    }

    @inlinable public func abort() {
        let this = jsObject
        _ = this[Strings.abort].function!(this: this, arguments: [])
    }

    public static let EMPTY: UInt16 = 0

    public static let LOADING: UInt16 = 1

    public static let DONE: UInt16 = 2

    @ReadonlyAttribute
    public var readyState: UInt16

    @ReadonlyAttribute
    public var result: ArrayBuffer_or_String?

    @ReadonlyAttribute
    public var error: DOMException?

    @ClosureAttribute1Optional
    public var onloadstart: EventHandler

    @ClosureAttribute1Optional
    public var onprogress: EventHandler

    @ClosureAttribute1Optional
    public var onload: EventHandler

    @ClosureAttribute1Optional
    public var onabort: EventHandler

    @ClosureAttribute1Optional
    public var onerror: EventHandler

    @ClosureAttribute1Optional
    public var onloadend: EventHandler
}

public class FocusEvent: UIEvent {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.FocusEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _relatedTarget = ReadonlyAttribute(jsObject: jsObject, name: Strings.relatedTarget)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: FocusEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var relatedTarget: EventTarget?
}

public class FocusEventInit: BridgedDictionary {
    public convenience init(relatedTarget: EventTarget?) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.relatedTarget] = _toJSValue(relatedTarget)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _relatedTarget = ReadWriteAttribute(jsObject: object, name: Strings.relatedTarget)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var relatedTarget: EventTarget?
}

public class FocusOptions: BridgedDictionary {
    public convenience init(preventScroll: Bool, focusVisible: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.preventScroll] = _toJSValue(preventScroll)
        object[Strings.focusVisible] = _toJSValue(focusVisible)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _preventScroll = ReadWriteAttribute(jsObject: object, name: Strings.preventScroll)
        _focusVisible = ReadWriteAttribute(jsObject: object, name: Strings.focusVisible)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var preventScroll: Bool

    @ReadWriteAttribute
    public var focusVisible: Bool
}

public class FormData: JSBridgedClass, Sequence {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.FormData].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public convenience init(form: HTMLFormElement? = nil, submitter: HTMLElement? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(form), _toJSValue(submitter)]))
    }

    @inlinable public func append(name: String, value: String) {
        let this = jsObject
        _ = this[Strings.append].function!(this: this, arguments: [_toJSValue(name), _toJSValue(value)])
    }

    @inlinable public func append(name: String, blobValue: Blob, filename: String? = nil) {
        let this = jsObject
        _ = this[Strings.append].function!(this: this, arguments: [_toJSValue(name), _toJSValue(blobValue), _toJSValue(filename)])
    }

    @inlinable public func delete(name: String) {
        let this = jsObject
        _ = this[Strings.delete].function!(this: this, arguments: [_toJSValue(name)])
    }

    @inlinable public func get(name: String) -> FormDataEntryValue? {
        let this = jsObject
        return this[Strings.get].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()
    }

    @inlinable public func getAll(name: String) -> [FormDataEntryValue] {
        let this = jsObject
        return this[Strings.getAll].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()!
    }

    @inlinable public func has(name: String) -> Bool {
        let this = jsObject
        return this[Strings.has].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()!
    }

    @inlinable public func set(name: String, value: String) {
        let this = jsObject
        _ = this[Strings.set].function!(this: this, arguments: [_toJSValue(name), _toJSValue(value)])
    }

    @inlinable public func set(name: String, blobValue: Blob, filename: String? = nil) {
        let this = jsObject
        _ = this[Strings.set].function!(this: this, arguments: [_toJSValue(name), _toJSValue(blobValue), _toJSValue(filename)])
    }

    public typealias Element = String
    public func makeIterator() -> ValueIterableIterator<FormData> {
        ValueIterableIterator(sequence: self)
    }
}

public class FormDataEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.FormDataEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _formData = ReadonlyAttribute(jsObject: jsObject, name: Strings.formData)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: FormDataEventInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var formData: FormData
}

public class FormDataEventInit: BridgedDictionary {
    public convenience init(formData: FormData) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.formData] = _toJSValue(formData)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _formData = ReadWriteAttribute(jsObject: object, name: Strings.formData)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var formData: FormData
}

public enum FrameType: JSString, JSValueCompatible {
    case auxiliary = "auxiliary"
    case topLevel = "top-level"
    case nested = "nested"
    case none = "none"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public protocol GenericTransformStream: JSBridgedClass {}
public extension GenericTransformStream {
    @inlinable var readable: ReadableStream { jsObject[Strings.readable].fromJSValue()! }

    @inlinable var writable: WritableStream { jsObject[Strings.writable].fromJSValue()! }
}

public protocol GeometryUtils: JSBridgedClass {}
public extension GeometryUtils {
    @inlinable func getBoxQuads(options: BoxQuadOptions? = nil) -> [DOMQuad] {
        let this = jsObject
        return this[Strings.getBoxQuads].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @inlinable func convertQuadFromNode(quad: DOMQuadInit, from: GeometryNode, options: ConvertCoordinateOptions? = nil) -> DOMQuad {
        let this = jsObject
        return this[Strings.convertQuadFromNode].function!(this: this, arguments: [_toJSValue(quad), _toJSValue(from), _toJSValue(options)]).fromJSValue()!
    }

    @inlinable func convertRectFromNode(rect: DOMRectReadOnly, from: GeometryNode, options: ConvertCoordinateOptions? = nil) -> DOMQuad {
        let this = jsObject
        return this[Strings.convertRectFromNode].function!(this: this, arguments: [_toJSValue(rect), _toJSValue(from), _toJSValue(options)]).fromJSValue()!
    }

    @inlinable func convertPointFromNode(point: DOMPointInit, from: GeometryNode, options: ConvertCoordinateOptions? = nil) -> DOMPoint {
        let this = jsObject
        return this[Strings.convertPointFromNode].function!(this: this, arguments: [_toJSValue(point), _toJSValue(from), _toJSValue(options)]).fromJSValue()!
    }
}

public class GetRootNodeOptions: BridgedDictionary {
    public convenience init(composed: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.composed] = _toJSValue(composed)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _composed = ReadWriteAttribute(jsObject: object, name: Strings.composed)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var composed: Bool
}

public protocol GlobalEventHandlers: JSBridgedClass {}
public extension GlobalEventHandlers {
    @inlinable var onabort: EventHandler {
        get { ClosureAttribute1Optional[Strings.onabort, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onabort, in: jsObject] = newValue }
    }

    @inlinable var onauxclick: EventHandler {
        get { ClosureAttribute1Optional[Strings.onauxclick, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onauxclick, in: jsObject] = newValue }
    }

    @inlinable var onbeforeinput: EventHandler {
        get { ClosureAttribute1Optional[Strings.onbeforeinput, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onbeforeinput, in: jsObject] = newValue }
    }

    @inlinable var onbeforematch: EventHandler {
        get { ClosureAttribute1Optional[Strings.onbeforematch, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onbeforematch, in: jsObject] = newValue }
    }

    @inlinable var onbeforetoggle: EventHandler {
        get { ClosureAttribute1Optional[Strings.onbeforetoggle, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onbeforetoggle, in: jsObject] = newValue }
    }

    @inlinable var onblur: EventHandler {
        get { ClosureAttribute1Optional[Strings.onblur, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onblur, in: jsObject] = newValue }
    }

    @inlinable var oncancel: EventHandler {
        get { ClosureAttribute1Optional[Strings.oncancel, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.oncancel, in: jsObject] = newValue }
    }

    @inlinable var oncanplay: EventHandler {
        get { ClosureAttribute1Optional[Strings.oncanplay, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.oncanplay, in: jsObject] = newValue }
    }

    @inlinable var oncanplaythrough: EventHandler {
        get { ClosureAttribute1Optional[Strings.oncanplaythrough, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.oncanplaythrough, in: jsObject] = newValue }
    }

    @inlinable var onchange: EventHandler {
        get { ClosureAttribute1Optional[Strings.onchange, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onchange, in: jsObject] = newValue }
    }

    @inlinable var onclick: EventHandler {
        get { ClosureAttribute1Optional[Strings.onclick, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onclick, in: jsObject] = newValue }
    }

    @inlinable var onclose: EventHandler {
        get { ClosureAttribute1Optional[Strings.onclose, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onclose, in: jsObject] = newValue }
    }

    @inlinable var oncontextlost: EventHandler {
        get { ClosureAttribute1Optional[Strings.oncontextlost, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.oncontextlost, in: jsObject] = newValue }
    }

    @inlinable var oncontextmenu: EventHandler {
        get { ClosureAttribute1Optional[Strings.oncontextmenu, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.oncontextmenu, in: jsObject] = newValue }
    }

    @inlinable var oncontextrestored: EventHandler {
        get { ClosureAttribute1Optional[Strings.oncontextrestored, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.oncontextrestored, in: jsObject] = newValue }
    }

    @inlinable var oncopy: EventHandler {
        get { ClosureAttribute1Optional[Strings.oncopy, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.oncopy, in: jsObject] = newValue }
    }

    @inlinable var oncuechange: EventHandler {
        get { ClosureAttribute1Optional[Strings.oncuechange, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.oncuechange, in: jsObject] = newValue }
    }

    @inlinable var oncut: EventHandler {
        get { ClosureAttribute1Optional[Strings.oncut, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.oncut, in: jsObject] = newValue }
    }

    @inlinable var ondblclick: EventHandler {
        get { ClosureAttribute1Optional[Strings.ondblclick, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ondblclick, in: jsObject] = newValue }
    }

    @inlinable var ondrag: EventHandler {
        get { ClosureAttribute1Optional[Strings.ondrag, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ondrag, in: jsObject] = newValue }
    }

    @inlinable var ondragend: EventHandler {
        get { ClosureAttribute1Optional[Strings.ondragend, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ondragend, in: jsObject] = newValue }
    }

    @inlinable var ondragenter: EventHandler {
        get { ClosureAttribute1Optional[Strings.ondragenter, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ondragenter, in: jsObject] = newValue }
    }

    @inlinable var ondragleave: EventHandler {
        get { ClosureAttribute1Optional[Strings.ondragleave, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ondragleave, in: jsObject] = newValue }
    }

    @inlinable var ondragover: EventHandler {
        get { ClosureAttribute1Optional[Strings.ondragover, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ondragover, in: jsObject] = newValue }
    }

    @inlinable var ondragstart: EventHandler {
        get { ClosureAttribute1Optional[Strings.ondragstart, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ondragstart, in: jsObject] = newValue }
    }

    @inlinable var ondrop: EventHandler {
        get { ClosureAttribute1Optional[Strings.ondrop, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ondrop, in: jsObject] = newValue }
    }

    @inlinable var ondurationchange: EventHandler {
        get { ClosureAttribute1Optional[Strings.ondurationchange, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ondurationchange, in: jsObject] = newValue }
    }

    @inlinable var onemptied: EventHandler {
        get { ClosureAttribute1Optional[Strings.onemptied, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onemptied, in: jsObject] = newValue }
    }

    @inlinable var onended: EventHandler {
        get { ClosureAttribute1Optional[Strings.onended, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onended, in: jsObject] = newValue }
    }

    @inlinable var onerror: OnErrorEventHandler {
        get { ClosureAttribute5Optional[Strings.onerror, in: jsObject] }
        nonmutating set { ClosureAttribute5Optional[Strings.onerror, in: jsObject] = newValue }
    }

    @inlinable var onfocus: EventHandler {
        get { ClosureAttribute1Optional[Strings.onfocus, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onfocus, in: jsObject] = newValue }
    }

    @inlinable var onformdata: EventHandler {
        get { ClosureAttribute1Optional[Strings.onformdata, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onformdata, in: jsObject] = newValue }
    }

    @inlinable var oninput: EventHandler {
        get { ClosureAttribute1Optional[Strings.oninput, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.oninput, in: jsObject] = newValue }
    }

    @inlinable var oninvalid: EventHandler {
        get { ClosureAttribute1Optional[Strings.oninvalid, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.oninvalid, in: jsObject] = newValue }
    }

    @inlinable var onkeydown: EventHandler {
        get { ClosureAttribute1Optional[Strings.onkeydown, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onkeydown, in: jsObject] = newValue }
    }

    @inlinable var onkeypress: EventHandler {
        get { ClosureAttribute1Optional[Strings.onkeypress, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onkeypress, in: jsObject] = newValue }
    }

    @inlinable var onkeyup: EventHandler {
        get { ClosureAttribute1Optional[Strings.onkeyup, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onkeyup, in: jsObject] = newValue }
    }

    @inlinable var onload: EventHandler {
        get { ClosureAttribute1Optional[Strings.onload, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onload, in: jsObject] = newValue }
    }

    @inlinable var onloadeddata: EventHandler {
        get { ClosureAttribute1Optional[Strings.onloadeddata, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onloadeddata, in: jsObject] = newValue }
    }

    @inlinable var onloadedmetadata: EventHandler {
        get { ClosureAttribute1Optional[Strings.onloadedmetadata, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onloadedmetadata, in: jsObject] = newValue }
    }

    @inlinable var onloadstart: EventHandler {
        get { ClosureAttribute1Optional[Strings.onloadstart, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onloadstart, in: jsObject] = newValue }
    }

    @inlinable var onmousedown: EventHandler {
        get { ClosureAttribute1Optional[Strings.onmousedown, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onmousedown, in: jsObject] = newValue }
    }

    @inlinable var onmouseenter: EventHandler {
        get { ClosureAttribute1Optional[Strings.onmouseenter, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onmouseenter, in: jsObject] = newValue }
    }

    @inlinable var onmouseleave: EventHandler {
        get { ClosureAttribute1Optional[Strings.onmouseleave, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onmouseleave, in: jsObject] = newValue }
    }

    @inlinable var onmousemove: EventHandler {
        get { ClosureAttribute1Optional[Strings.onmousemove, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onmousemove, in: jsObject] = newValue }
    }

    @inlinable var onmouseout: EventHandler {
        get { ClosureAttribute1Optional[Strings.onmouseout, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onmouseout, in: jsObject] = newValue }
    }

    @inlinable var onmouseover: EventHandler {
        get { ClosureAttribute1Optional[Strings.onmouseover, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onmouseover, in: jsObject] = newValue }
    }

    @inlinable var onmouseup: EventHandler {
        get { ClosureAttribute1Optional[Strings.onmouseup, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onmouseup, in: jsObject] = newValue }
    }

    @inlinable var onpaste: EventHandler {
        get { ClosureAttribute1Optional[Strings.onpaste, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onpaste, in: jsObject] = newValue }
    }

    @inlinable var onpause: EventHandler {
        get { ClosureAttribute1Optional[Strings.onpause, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onpause, in: jsObject] = newValue }
    }

    @inlinable var onplay: EventHandler {
        get { ClosureAttribute1Optional[Strings.onplay, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onplay, in: jsObject] = newValue }
    }

    @inlinable var onplaying: EventHandler {
        get { ClosureAttribute1Optional[Strings.onplaying, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onplaying, in: jsObject] = newValue }
    }

    @inlinable var onprogress: EventHandler {
        get { ClosureAttribute1Optional[Strings.onprogress, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onprogress, in: jsObject] = newValue }
    }

    @inlinable var onratechange: EventHandler {
        get { ClosureAttribute1Optional[Strings.onratechange, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onratechange, in: jsObject] = newValue }
    }

    @inlinable var onreset: EventHandler {
        get { ClosureAttribute1Optional[Strings.onreset, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onreset, in: jsObject] = newValue }
    }

    @inlinable var onresize: EventHandler {
        get { ClosureAttribute1Optional[Strings.onresize, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onresize, in: jsObject] = newValue }
    }

    @inlinable var onscroll: EventHandler {
        get { ClosureAttribute1Optional[Strings.onscroll, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onscroll, in: jsObject] = newValue }
    }

    @inlinable var onscrollend: EventHandler {
        get { ClosureAttribute1Optional[Strings.onscrollend, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onscrollend, in: jsObject] = newValue }
    }

    @inlinable var onsecuritypolicyviolation: EventHandler {
        get { ClosureAttribute1Optional[Strings.onsecuritypolicyviolation, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onsecuritypolicyviolation, in: jsObject] = newValue }
    }

    @inlinable var onseeked: EventHandler {
        get { ClosureAttribute1Optional[Strings.onseeked, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onseeked, in: jsObject] = newValue }
    }

    @inlinable var onseeking: EventHandler {
        get { ClosureAttribute1Optional[Strings.onseeking, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onseeking, in: jsObject] = newValue }
    }

    @inlinable var onselect: EventHandler {
        get { ClosureAttribute1Optional[Strings.onselect, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onselect, in: jsObject] = newValue }
    }

    @inlinable var onslotchange: EventHandler {
        get { ClosureAttribute1Optional[Strings.onslotchange, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onslotchange, in: jsObject] = newValue }
    }

    @inlinable var onstalled: EventHandler {
        get { ClosureAttribute1Optional[Strings.onstalled, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onstalled, in: jsObject] = newValue }
    }

    @inlinable var onsubmit: EventHandler {
        get { ClosureAttribute1Optional[Strings.onsubmit, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onsubmit, in: jsObject] = newValue }
    }

    @inlinable var onsuspend: EventHandler {
        get { ClosureAttribute1Optional[Strings.onsuspend, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onsuspend, in: jsObject] = newValue }
    }

    @inlinable var ontimeupdate: EventHandler {
        get { ClosureAttribute1Optional[Strings.ontimeupdate, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ontimeupdate, in: jsObject] = newValue }
    }

    @inlinable var ontoggle: EventHandler {
        get { ClosureAttribute1Optional[Strings.ontoggle, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ontoggle, in: jsObject] = newValue }
    }

    @inlinable var onvolumechange: EventHandler {
        get { ClosureAttribute1Optional[Strings.onvolumechange, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onvolumechange, in: jsObject] = newValue }
    }

    @inlinable var onwaiting: EventHandler {
        get { ClosureAttribute1Optional[Strings.onwaiting, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onwaiting, in: jsObject] = newValue }
    }

    @inlinable var onwebkitanimationend: EventHandler {
        get { ClosureAttribute1Optional[Strings.onwebkitanimationend, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onwebkitanimationend, in: jsObject] = newValue }
    }

    @inlinable var onwebkitanimationiteration: EventHandler {
        get { ClosureAttribute1Optional[Strings.onwebkitanimationiteration, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onwebkitanimationiteration, in: jsObject] = newValue }
    }

    @inlinable var onwebkitanimationstart: EventHandler {
        get { ClosureAttribute1Optional[Strings.onwebkitanimationstart, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onwebkitanimationstart, in: jsObject] = newValue }
    }

    @inlinable var onwebkittransitionend: EventHandler {
        get { ClosureAttribute1Optional[Strings.onwebkittransitionend, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onwebkittransitionend, in: jsObject] = newValue }
    }

    @inlinable var onwheel: EventHandler {
        get { ClosureAttribute1Optional[Strings.onwheel, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onwheel, in: jsObject] = newValue }
    }

    @inlinable var ontouchstart: EventHandler {
        get { ClosureAttribute1Optional[Strings.ontouchstart, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ontouchstart, in: jsObject] = newValue }
    }

    @inlinable var ontouchend: EventHandler {
        get { ClosureAttribute1Optional[Strings.ontouchend, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ontouchend, in: jsObject] = newValue }
    }

    @inlinable var ontouchmove: EventHandler {
        get { ClosureAttribute1Optional[Strings.ontouchmove, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ontouchmove, in: jsObject] = newValue }
    }

    @inlinable var ontouchcancel: EventHandler {
        get { ClosureAttribute1Optional[Strings.ontouchcancel, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ontouchcancel, in: jsObject] = newValue }
    }
}

public class HTMLAllCollection: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.HTMLAllCollection].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> Element {
        jsObject[key].fromJSValue()!
    }

    @inlinable public subscript(key: String) -> Element_or_HTMLCollection? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func namedItem(name: String) -> Element_or_HTMLCollection? {
        let this = jsObject
        return this[Strings.namedItem].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()
    }

    @inlinable public func item(nameOrIndex: String? = nil) -> Element_or_HTMLCollection? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(nameOrIndex)]).fromJSValue()
    }
}

public class HTMLAnchorElement: HTMLElement, HTMLHyperlinkElementUtils {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLAnchorElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _target = ReadWriteAttribute(jsObject: jsObject, name: Strings.target)
        _download = ReadWriteAttribute(jsObject: jsObject, name: Strings.download)
        _ping = ReadWriteAttribute(jsObject: jsObject, name: Strings.ping)
        _rel = ReadWriteAttribute(jsObject: jsObject, name: Strings.rel)
        _relList = ReadonlyAttribute(jsObject: jsObject, name: Strings.relList)
        _hreflang = ReadWriteAttribute(jsObject: jsObject, name: Strings.hreflang)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _text = ReadWriteAttribute(jsObject: jsObject, name: Strings.text)
        _referrerPolicy = ReadWriteAttribute(jsObject: jsObject, name: Strings.referrerPolicy)
        _coords = ReadWriteAttribute(jsObject: jsObject, name: Strings.coords)
        _charset = ReadWriteAttribute(jsObject: jsObject, name: Strings.charset)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _rev = ReadWriteAttribute(jsObject: jsObject, name: Strings.rev)
        _shape = ReadWriteAttribute(jsObject: jsObject, name: Strings.shape)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var target: String

    @ReadWriteAttribute
    public var download: String

    @ReadWriteAttribute
    public var ping: String

    @ReadWriteAttribute
    public var rel: String

    @ReadonlyAttribute
    public var relList: DOMTokenList

    @ReadWriteAttribute
    public var hreflang: String

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var text: String

    @ReadWriteAttribute
    public var referrerPolicy: String

    @ReadWriteAttribute
    public var coords: String

    @ReadWriteAttribute
    public var charset: String

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var rev: String

    @ReadWriteAttribute
    public var shape: String
}

public class HTMLAreaElement: HTMLElement, HTMLHyperlinkElementUtils {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLAreaElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _alt = ReadWriteAttribute(jsObject: jsObject, name: Strings.alt)
        _coords = ReadWriteAttribute(jsObject: jsObject, name: Strings.coords)
        _shape = ReadWriteAttribute(jsObject: jsObject, name: Strings.shape)
        _target = ReadWriteAttribute(jsObject: jsObject, name: Strings.target)
        _download = ReadWriteAttribute(jsObject: jsObject, name: Strings.download)
        _ping = ReadWriteAttribute(jsObject: jsObject, name: Strings.ping)
        _rel = ReadWriteAttribute(jsObject: jsObject, name: Strings.rel)
        _relList = ReadonlyAttribute(jsObject: jsObject, name: Strings.relList)
        _referrerPolicy = ReadWriteAttribute(jsObject: jsObject, name: Strings.referrerPolicy)
        _noHref = ReadWriteAttribute(jsObject: jsObject, name: Strings.noHref)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var alt: String

    @ReadWriteAttribute
    public var coords: String

    @ReadWriteAttribute
    public var shape: String

    @ReadWriteAttribute
    public var target: String

    @ReadWriteAttribute
    public var download: String

    @ReadWriteAttribute
    public var ping: String

    @ReadWriteAttribute
    public var rel: String

    @ReadonlyAttribute
    public var relList: DOMTokenList

    @ReadWriteAttribute
    public var referrerPolicy: String

    @ReadWriteAttribute
    public var noHref: Bool
}

public class HTMLAudioElement: HTMLMediaElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLAudioElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }
}

public class HTMLBRElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLBRElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _clear = ReadWriteAttribute(jsObject: jsObject, name: Strings.clear)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var clear: String
}

public class HTMLBaseElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLBaseElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _href = ReadWriteAttribute(jsObject: jsObject, name: Strings.href)
        _target = ReadWriteAttribute(jsObject: jsObject, name: Strings.target)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var href: String

    @ReadWriteAttribute
    public var target: String
}

public class HTMLBodyElement: HTMLElement, WindowEventHandlers {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLBodyElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _text = ReadWriteAttribute(jsObject: jsObject, name: Strings.text)
        _link = ReadWriteAttribute(jsObject: jsObject, name: Strings.link)
        _vLink = ReadWriteAttribute(jsObject: jsObject, name: Strings.vLink)
        _aLink = ReadWriteAttribute(jsObject: jsObject, name: Strings.aLink)
        _bgColor = ReadWriteAttribute(jsObject: jsObject, name: Strings.bgColor)
        _background = ReadWriteAttribute(jsObject: jsObject, name: Strings.background)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var text: String

    @ReadWriteAttribute
    public var link: String

    @ReadWriteAttribute
    public var vLink: String

    @ReadWriteAttribute
    public var aLink: String

    @ReadWriteAttribute
    public var bgColor: String

    @ReadWriteAttribute
    public var background: String
}

public class HTMLButtonElement: HTMLElement, PopoverInvokerElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLButtonElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _disabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.disabled)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _formAction = ReadWriteAttribute(jsObject: jsObject, name: Strings.formAction)
        _formEnctype = ReadWriteAttribute(jsObject: jsObject, name: Strings.formEnctype)
        _formMethod = ReadWriteAttribute(jsObject: jsObject, name: Strings.formMethod)
        _formNoValidate = ReadWriteAttribute(jsObject: jsObject, name: Strings.formNoValidate)
        _formTarget = ReadWriteAttribute(jsObject: jsObject, name: Strings.formTarget)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: Strings.willValidate)
        _validity = ReadonlyAttribute(jsObject: jsObject, name: Strings.validity)
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: Strings.validationMessage)
        _labels = ReadonlyAttribute(jsObject: jsObject, name: Strings.labels)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var disabled: Bool

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var formAction: String

    @ReadWriteAttribute
    public var formEnctype: String

    @ReadWriteAttribute
    public var formMethod: String

    @ReadWriteAttribute
    public var formNoValidate: Bool

    @ReadWriteAttribute
    public var formTarget: String

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var value: String

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    @inlinable public func checkValidity() -> Bool {
        let this = jsObject
        return this[Strings.checkValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func reportValidity() -> Bool {
        let this = jsObject
        return this[Strings.reportValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func setCustomValidity(error: String) {
        let this = jsObject
        _ = this[Strings.setCustomValidity].function!(this: this, arguments: [_toJSValue(error)])
    }

    @ReadonlyAttribute
    public var labels: NodeList
}

public class HTMLCanvasElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLCanvasElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var width: UInt32

    @ReadWriteAttribute
    public var height: UInt32

    // XXX: member 'getContext' is ignored

    @inlinable public func toDataURL(type: String? = nil, quality: JSValue? = nil) -> String {
        let this = jsObject
        return this[Strings.toDataURL].function!(this: this, arguments: [_toJSValue(type), _toJSValue(quality)]).fromJSValue()!
    }

    @inlinable public func toBlob(callback: @escaping BlobCallback, type: String? = nil, quality: JSValue? = nil) {
        let this = jsObject
        _ = this[Strings.toBlob].function!(this: this, arguments: [_toJSValue(callback), _toJSValue(type), _toJSValue(quality)])
    }

    @inlinable public func transferControlToOffscreen() -> OffscreenCanvas {
        let this = jsObject
        return this[Strings.transferControlToOffscreen].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class HTMLCollection: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.HTMLCollection].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> Element? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func item(index: UInt32) -> Element? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }

    @inlinable public subscript(key: String) -> Element? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func namedItem(name: String) -> Element? {
        let this = jsObject
        return this[Strings.namedItem].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()
    }
}

public class HTMLDListElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLDListElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _compact = ReadWriteAttribute(jsObject: jsObject, name: Strings.compact)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var compact: Bool
}

public class HTMLDataElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLDataElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var value: String
}

public class HTMLDataListElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLDataListElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _options = ReadonlyAttribute(jsObject: jsObject, name: Strings.options)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var options: HTMLCollection
}

public class HTMLDetailsElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLDetailsElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _open = ReadWriteAttribute(jsObject: jsObject, name: Strings.open)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var open: Bool
}

public class HTMLDialogElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLDialogElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _open = ReadWriteAttribute(jsObject: jsObject, name: Strings.open)
        _returnValue = ReadWriteAttribute(jsObject: jsObject, name: Strings.returnValue)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var open: Bool

    @ReadWriteAttribute
    public var returnValue: String

    @inlinable public func show() {
        let this = jsObject
        _ = this[Strings.show].function!(this: this, arguments: [])
    }

    @inlinable public func showModal() {
        let this = jsObject
        _ = this[Strings.showModal].function!(this: this, arguments: [])
    }

    @inlinable public func close(returnValue: String? = nil) {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [_toJSValue(returnValue)])
    }
}

public class HTMLDirectoryElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLDirectoryElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _compact = ReadWriteAttribute(jsObject: jsObject, name: Strings.compact)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var compact: Bool
}

public class HTMLDivElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLDivElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var align: String
}

public class HTMLElement: Element, GlobalEventHandlers, ElementContentEditable, HTMLOrSVGElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _title = ReadWriteAttribute(jsObject: jsObject, name: Strings.title)
        _lang = ReadWriteAttribute(jsObject: jsObject, name: Strings.lang)
        _translate = ReadWriteAttribute(jsObject: jsObject, name: Strings.translate)
        _dir = ReadWriteAttribute(jsObject: jsObject, name: Strings.dir)
        _hidden = ReadWriteAttribute(jsObject: jsObject, name: Strings.hidden)
        _inert = ReadWriteAttribute(jsObject: jsObject, name: Strings.inert)
        _accessKey = ReadWriteAttribute(jsObject: jsObject, name: Strings.accessKey)
        _accessKeyLabel = ReadonlyAttribute(jsObject: jsObject, name: Strings.accessKeyLabel)
        _draggable = ReadWriteAttribute(jsObject: jsObject, name: Strings.draggable)
        _spellcheck = ReadWriteAttribute(jsObject: jsObject, name: Strings.spellcheck)
        _autocapitalize = ReadWriteAttribute(jsObject: jsObject, name: Strings.autocapitalize)
        _innerText = ReadWriteAttribute(jsObject: jsObject, name: Strings.innerText)
        _outerText = ReadWriteAttribute(jsObject: jsObject, name: Strings.outerText)
        _popover = ReadWriteAttribute(jsObject: jsObject, name: Strings.popover)
        _offsetParent = ReadonlyAttribute(jsObject: jsObject, name: Strings.offsetParent)
        _offsetTop = ReadonlyAttribute(jsObject: jsObject, name: Strings.offsetTop)
        _offsetLeft = ReadonlyAttribute(jsObject: jsObject, name: Strings.offsetLeft)
        _offsetWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.offsetWidth)
        _offsetHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.offsetHeight)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var title: String

    @ReadWriteAttribute
    public var lang: String

    @ReadWriteAttribute
    public var translate: Bool

    @ReadWriteAttribute
    public var dir: String

    @ReadWriteAttribute
    public var hidden: Bool_or_Double_or_String?

    @ReadWriteAttribute
    public var inert: Bool

    @inlinable public func click() {
        let this = jsObject
        _ = this[Strings.click].function!(this: this, arguments: [])
    }

    @ReadWriteAttribute
    public var accessKey: String

    @ReadonlyAttribute
    public var accessKeyLabel: String

    @ReadWriteAttribute
    public var draggable: Bool

    @ReadWriteAttribute
    public var spellcheck: Bool

    @ReadWriteAttribute
    public var autocapitalize: String

    @ReadWriteAttribute
    public var innerText: String

    @ReadWriteAttribute
    public var outerText: String

    @inlinable public func attachInternals() -> ElementInternals {
        let this = jsObject
        return this[Strings.attachInternals].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func showPopover() {
        let this = jsObject
        _ = this[Strings.showPopover].function!(this: this, arguments: [])
    }

    @inlinable public func hidePopover() {
        let this = jsObject
        _ = this[Strings.hidePopover].function!(this: this, arguments: [])
    }

    @inlinable public func togglePopover(force: Bool? = nil) -> Bool {
        let this = jsObject
        return this[Strings.togglePopover].function!(this: this, arguments: [_toJSValue(force)]).fromJSValue()!
    }

    @ReadWriteAttribute
    public var popover: String?

    @ReadonlyAttribute
    public var offsetParent: Element?

    @ReadonlyAttribute
    public var offsetTop: Int32

    @ReadonlyAttribute
    public var offsetLeft: Int32

    @ReadonlyAttribute
    public var offsetWidth: Int32

    @ReadonlyAttribute
    public var offsetHeight: Int32
}

public class HTMLEmbedElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLEmbedElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _src = ReadWriteAttribute(jsObject: jsObject, name: Strings.src)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var src: String

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var width: String

    @ReadWriteAttribute
    public var height: String

    @inlinable public func getSVGDocument() -> Document? {
        let this = jsObject
        return this[Strings.getSVGDocument].function!(this: this, arguments: []).fromJSValue()
    }

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var name: String
}

public class HTMLFieldSetElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLFieldSetElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _disabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.disabled)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _elements = ReadonlyAttribute(jsObject: jsObject, name: Strings.elements)
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: Strings.willValidate)
        _validity = ReadonlyAttribute(jsObject: jsObject, name: Strings.validity)
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: Strings.validationMessage)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var disabled: Bool

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var name: String

    @ReadonlyAttribute
    public var type: String

    @ReadonlyAttribute
    public var elements: HTMLCollection

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    @inlinable public func checkValidity() -> Bool {
        let this = jsObject
        return this[Strings.checkValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func reportValidity() -> Bool {
        let this = jsObject
        return this[Strings.reportValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func setCustomValidity(error: String) {
        let this = jsObject
        _ = this[Strings.setCustomValidity].function!(this: this, arguments: [_toJSValue(error)])
    }
}

public class HTMLFontElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLFontElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _color = ReadWriteAttribute(jsObject: jsObject, name: Strings.color)
        _face = ReadWriteAttribute(jsObject: jsObject, name: Strings.face)
        _size = ReadWriteAttribute(jsObject: jsObject, name: Strings.size)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var color: String

    @ReadWriteAttribute
    public var face: String

    @ReadWriteAttribute
    public var size: String
}

public class HTMLFormControlsCollection: HTMLCollection {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLFormControlsCollection].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public subscript(key: String) -> Element_or_RadioNodeList? {
        jsObject[key].fromJSValue()
    }

    // `override` removed since the superclass returns a more constrained type `Element`
    @inlinable func namedItem(name: String) -> Element_or_RadioNodeList? {
        let this = jsObject
        return this[Strings.namedItem].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()
    }
}

public class HTMLFormElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLFormElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _acceptCharset = ReadWriteAttribute(jsObject: jsObject, name: Strings.acceptCharset)
        _action = ReadWriteAttribute(jsObject: jsObject, name: Strings.action)
        _autocomplete = ReadWriteAttribute(jsObject: jsObject, name: Strings.autocomplete)
        _enctype = ReadWriteAttribute(jsObject: jsObject, name: Strings.enctype)
        _encoding = ReadWriteAttribute(jsObject: jsObject, name: Strings.encoding)
        _method = ReadWriteAttribute(jsObject: jsObject, name: Strings.method)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _noValidate = ReadWriteAttribute(jsObject: jsObject, name: Strings.noValidate)
        _target = ReadWriteAttribute(jsObject: jsObject, name: Strings.target)
        _rel = ReadWriteAttribute(jsObject: jsObject, name: Strings.rel)
        _relList = ReadonlyAttribute(jsObject: jsObject, name: Strings.relList)
        _elements = ReadonlyAttribute(jsObject: jsObject, name: Strings.elements)
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var acceptCharset: String

    @ReadWriteAttribute
    public var action: String

    @ReadWriteAttribute
    public var autocomplete: String

    @ReadWriteAttribute
    public var enctype: String

    @ReadWriteAttribute
    public var encoding: String

    @ReadWriteAttribute
    public var method: String

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var noValidate: Bool

    @ReadWriteAttribute
    public var target: String

    @ReadWriteAttribute
    public var rel: String

    @ReadonlyAttribute
    public var relList: DOMTokenList

    @ReadonlyAttribute
    public var elements: HTMLFormControlsCollection

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> Element {
        jsObject[key].fromJSValue()!
    }

    @inlinable public subscript(key: String) -> Element_or_RadioNodeList {
        jsObject[key].fromJSValue()!
    }

    @inlinable public func submit() {
        let this = jsObject
        _ = this[Strings.submit].function!(this: this, arguments: [])
    }

    @inlinable public func requestSubmit(submitter: HTMLElement? = nil) {
        let this = jsObject
        _ = this[Strings.requestSubmit].function!(this: this, arguments: [_toJSValue(submitter)])
    }

    @inlinable public func reset() {
        let this = jsObject
        _ = this[Strings.reset].function!(this: this, arguments: [])
    }

    @inlinable public func checkValidity() -> Bool {
        let this = jsObject
        return this[Strings.checkValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func reportValidity() -> Bool {
        let this = jsObject
        return this[Strings.reportValidity].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class HTMLFrameElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLFrameElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _scrolling = ReadWriteAttribute(jsObject: jsObject, name: Strings.scrolling)
        _src = ReadWriteAttribute(jsObject: jsObject, name: Strings.src)
        _frameBorder = ReadWriteAttribute(jsObject: jsObject, name: Strings.frameBorder)
        _longDesc = ReadWriteAttribute(jsObject: jsObject, name: Strings.longDesc)
        _noResize = ReadWriteAttribute(jsObject: jsObject, name: Strings.noResize)
        _contentDocument = ReadonlyAttribute(jsObject: jsObject, name: Strings.contentDocument)
        _contentWindow = ReadonlyAttribute(jsObject: jsObject, name: Strings.contentWindow)
        _marginHeight = ReadWriteAttribute(jsObject: jsObject, name: Strings.marginHeight)
        _marginWidth = ReadWriteAttribute(jsObject: jsObject, name: Strings.marginWidth)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var scrolling: String

    @ReadWriteAttribute
    public var src: String

    @ReadWriteAttribute
    public var frameBorder: String

    @ReadWriteAttribute
    public var longDesc: String

    @ReadWriteAttribute
    public var noResize: Bool

    @ReadonlyAttribute
    public var contentDocument: Document?

    @ReadonlyAttribute
    public var contentWindow: WindowProxy?

    @ReadWriteAttribute
    public var marginHeight: String

    @ReadWriteAttribute
    public var marginWidth: String
}

public class HTMLFrameSetElement: HTMLElement, WindowEventHandlers {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLFrameSetElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _cols = ReadWriteAttribute(jsObject: jsObject, name: Strings.cols)
        _rows = ReadWriteAttribute(jsObject: jsObject, name: Strings.rows)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var cols: String

    @ReadWriteAttribute
    public var rows: String
}

public class HTMLHRElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLHRElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _color = ReadWriteAttribute(jsObject: jsObject, name: Strings.color)
        _noShade = ReadWriteAttribute(jsObject: jsObject, name: Strings.noShade)
        _size = ReadWriteAttribute(jsObject: jsObject, name: Strings.size)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var color: String

    @ReadWriteAttribute
    public var noShade: Bool

    @ReadWriteAttribute
    public var size: String

    @ReadWriteAttribute
    public var width: String
}

public class HTMLHeadElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLHeadElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }
}

public class HTMLHeadingElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLHeadingElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var align: String
}

public class HTMLHtmlElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLHtmlElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _version = ReadWriteAttribute(jsObject: jsObject, name: Strings.version)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var version: String
}

public protocol HTMLHyperlinkElementUtils: JSBridgedClass {}
public extension HTMLHyperlinkElementUtils {
    @inlinable var href: String {
        get { jsObject[Strings.href].fromJSValue()! }
        nonmutating set { jsObject[Strings.href] = _toJSValue(newValue) }
    }

    @inlinable var origin: String { jsObject[Strings.origin].fromJSValue()! }

    @inlinable var `protocol`: String {
        get { jsObject[Strings.protocol].fromJSValue()! }
        nonmutating set { jsObject[Strings.protocol] = _toJSValue(newValue) }
    }

    @inlinable var username: String {
        get { jsObject[Strings.username].fromJSValue()! }
        nonmutating set { jsObject[Strings.username] = _toJSValue(newValue) }
    }

    @inlinable var password: String {
        get { jsObject[Strings.password].fromJSValue()! }
        nonmutating set { jsObject[Strings.password] = _toJSValue(newValue) }
    }

    @inlinable var host: String {
        get { jsObject[Strings.host].fromJSValue()! }
        nonmutating set { jsObject[Strings.host] = _toJSValue(newValue) }
    }

    @inlinable var hostname: String {
        get { jsObject[Strings.hostname].fromJSValue()! }
        nonmutating set { jsObject[Strings.hostname] = _toJSValue(newValue) }
    }

    @inlinable var port: String {
        get { jsObject[Strings.port].fromJSValue()! }
        nonmutating set { jsObject[Strings.port] = _toJSValue(newValue) }
    }

    @inlinable var pathname: String {
        get { jsObject[Strings.pathname].fromJSValue()! }
        nonmutating set { jsObject[Strings.pathname] = _toJSValue(newValue) }
    }

    @inlinable var search: String {
        get { jsObject[Strings.search].fromJSValue()! }
        nonmutating set { jsObject[Strings.search] = _toJSValue(newValue) }
    }

    @inlinable var hash: String {
        get { jsObject[Strings.hash].fromJSValue()! }
        nonmutating set { jsObject[Strings.hash] = _toJSValue(newValue) }
    }
}

public class HTMLIFrameElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLIFrameElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _src = ReadWriteAttribute(jsObject: jsObject, name: Strings.src)
        _srcdoc = ReadWriteAttribute(jsObject: jsObject, name: Strings.srcdoc)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _sandbox = ReadonlyAttribute(jsObject: jsObject, name: Strings.sandbox)
        _allow = ReadWriteAttribute(jsObject: jsObject, name: Strings.allow)
        _allowFullscreen = ReadWriteAttribute(jsObject: jsObject, name: Strings.allowFullscreen)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        _referrerPolicy = ReadWriteAttribute(jsObject: jsObject, name: Strings.referrerPolicy)
        _loading = ReadWriteAttribute(jsObject: jsObject, name: Strings.loading)
        _contentDocument = ReadonlyAttribute(jsObject: jsObject, name: Strings.contentDocument)
        _contentWindow = ReadonlyAttribute(jsObject: jsObject, name: Strings.contentWindow)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _scrolling = ReadWriteAttribute(jsObject: jsObject, name: Strings.scrolling)
        _frameBorder = ReadWriteAttribute(jsObject: jsObject, name: Strings.frameBorder)
        _longDesc = ReadWriteAttribute(jsObject: jsObject, name: Strings.longDesc)
        _marginHeight = ReadWriteAttribute(jsObject: jsObject, name: Strings.marginHeight)
        _marginWidth = ReadWriteAttribute(jsObject: jsObject, name: Strings.marginWidth)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var src: String

    @ReadWriteAttribute
    public var srcdoc: String

    @ReadWriteAttribute
    public var name: String

    @ReadonlyAttribute
    public var sandbox: DOMTokenList

    @ReadWriteAttribute
    public var allow: String

    @ReadWriteAttribute
    public var allowFullscreen: Bool

    @ReadWriteAttribute
    public var width: String

    @ReadWriteAttribute
    public var height: String

    @ReadWriteAttribute
    public var referrerPolicy: String

    @ReadWriteAttribute
    public var loading: String

    @ReadonlyAttribute
    public var contentDocument: Document?

    @ReadonlyAttribute
    public var contentWindow: WindowProxy?

    @inlinable public func getSVGDocument() -> Document? {
        let this = jsObject
        return this[Strings.getSVGDocument].function!(this: this, arguments: []).fromJSValue()
    }

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var scrolling: String

    @ReadWriteAttribute
    public var frameBorder: String

    @ReadWriteAttribute
    public var longDesc: String

    @ReadWriteAttribute
    public var marginHeight: String

    @ReadWriteAttribute
    public var marginWidth: String
}

public class HTMLImageElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLImageElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _alt = ReadWriteAttribute(jsObject: jsObject, name: Strings.alt)
        _src = ReadWriteAttribute(jsObject: jsObject, name: Strings.src)
        _srcset = ReadWriteAttribute(jsObject: jsObject, name: Strings.srcset)
        _sizes = ReadWriteAttribute(jsObject: jsObject, name: Strings.sizes)
        _crossOrigin = ReadWriteAttribute(jsObject: jsObject, name: Strings.crossOrigin)
        _useMap = ReadWriteAttribute(jsObject: jsObject, name: Strings.useMap)
        _isMap = ReadWriteAttribute(jsObject: jsObject, name: Strings.isMap)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        _naturalWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.naturalWidth)
        _naturalHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.naturalHeight)
        _complete = ReadonlyAttribute(jsObject: jsObject, name: Strings.complete)
        _currentSrc = ReadonlyAttribute(jsObject: jsObject, name: Strings.currentSrc)
        _referrerPolicy = ReadWriteAttribute(jsObject: jsObject, name: Strings.referrerPolicy)
        _decoding = ReadWriteAttribute(jsObject: jsObject, name: Strings.decoding)
        _loading = ReadWriteAttribute(jsObject: jsObject, name: Strings.loading)
        _fetchPriority = ReadWriteAttribute(jsObject: jsObject, name: Strings.fetchPriority)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _lowsrc = ReadWriteAttribute(jsObject: jsObject, name: Strings.lowsrc)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _hspace = ReadWriteAttribute(jsObject: jsObject, name: Strings.hspace)
        _vspace = ReadWriteAttribute(jsObject: jsObject, name: Strings.vspace)
        _longDesc = ReadWriteAttribute(jsObject: jsObject, name: Strings.longDesc)
        _border = ReadWriteAttribute(jsObject: jsObject, name: Strings.border)
        _x = ReadonlyAttribute(jsObject: jsObject, name: Strings.x)
        _y = ReadonlyAttribute(jsObject: jsObject, name: Strings.y)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var alt: String

    @ReadWriteAttribute
    public var src: String

    @ReadWriteAttribute
    public var srcset: String

    @ReadWriteAttribute
    public var sizes: String

    @ReadWriteAttribute
    public var crossOrigin: String?

    @ReadWriteAttribute
    public var useMap: String

    @ReadWriteAttribute
    public var isMap: Bool

    @ReadWriteAttribute
    public var width: UInt32

    @ReadWriteAttribute
    public var height: UInt32

    @ReadonlyAttribute
    public var naturalWidth: UInt32

    @ReadonlyAttribute
    public var naturalHeight: UInt32

    @ReadonlyAttribute
    public var complete: Bool

    @ReadonlyAttribute
    public var currentSrc: String

    @ReadWriteAttribute
    public var referrerPolicy: String

    @ReadWriteAttribute
    public var decoding: String

    @ReadWriteAttribute
    public var loading: String

    @ReadWriteAttribute
    public var fetchPriority: String

    @inlinable public func decode() -> JSPromise {
        let this = jsObject
        return this[Strings.decode].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func decode() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.decode].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var lowsrc: String

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var hspace: UInt32

    @ReadWriteAttribute
    public var vspace: UInt32

    @ReadWriteAttribute
    public var longDesc: String

    @ReadWriteAttribute
    public var border: String

    @ReadonlyAttribute
    public var x: Int32

    @ReadonlyAttribute
    public var y: Int32
}

public class HTMLInputElement: HTMLElement, PopoverInvokerElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLInputElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _accept = ReadWriteAttribute(jsObject: jsObject, name: Strings.accept)
        _alt = ReadWriteAttribute(jsObject: jsObject, name: Strings.alt)
        _autocomplete = ReadWriteAttribute(jsObject: jsObject, name: Strings.autocomplete)
        _defaultChecked = ReadWriteAttribute(jsObject: jsObject, name: Strings.defaultChecked)
        _checked = ReadWriteAttribute(jsObject: jsObject, name: Strings.checked)
        _dirName = ReadWriteAttribute(jsObject: jsObject, name: Strings.dirName)
        _disabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.disabled)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _files = ReadWriteAttribute(jsObject: jsObject, name: Strings.files)
        _formAction = ReadWriteAttribute(jsObject: jsObject, name: Strings.formAction)
        _formEnctype = ReadWriteAttribute(jsObject: jsObject, name: Strings.formEnctype)
        _formMethod = ReadWriteAttribute(jsObject: jsObject, name: Strings.formMethod)
        _formNoValidate = ReadWriteAttribute(jsObject: jsObject, name: Strings.formNoValidate)
        _formTarget = ReadWriteAttribute(jsObject: jsObject, name: Strings.formTarget)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        _indeterminate = ReadWriteAttribute(jsObject: jsObject, name: Strings.indeterminate)
        _list = ReadonlyAttribute(jsObject: jsObject, name: Strings.list)
        _max = ReadWriteAttribute(jsObject: jsObject, name: Strings.max)
        _maxLength = ReadWriteAttribute(jsObject: jsObject, name: Strings.maxLength)
        _min = ReadWriteAttribute(jsObject: jsObject, name: Strings.min)
        _minLength = ReadWriteAttribute(jsObject: jsObject, name: Strings.minLength)
        _multiple = ReadWriteAttribute(jsObject: jsObject, name: Strings.multiple)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _pattern = ReadWriteAttribute(jsObject: jsObject, name: Strings.pattern)
        _placeholder = ReadWriteAttribute(jsObject: jsObject, name: Strings.placeholder)
        _readOnly = ReadWriteAttribute(jsObject: jsObject, name: Strings.readOnly)
        _required = ReadWriteAttribute(jsObject: jsObject, name: Strings.required)
        _size = ReadWriteAttribute(jsObject: jsObject, name: Strings.size)
        _src = ReadWriteAttribute(jsObject: jsObject, name: Strings.src)
        _step = ReadWriteAttribute(jsObject: jsObject, name: Strings.step)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _defaultValue = ReadWriteAttribute(jsObject: jsObject, name: Strings.defaultValue)
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _valueAsDate = ReadWriteAttribute(jsObject: jsObject, name: Strings.valueAsDate)
        _valueAsNumber = ReadWriteAttribute(jsObject: jsObject, name: Strings.valueAsNumber)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: Strings.willValidate)
        _validity = ReadonlyAttribute(jsObject: jsObject, name: Strings.validity)
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: Strings.validationMessage)
        _labels = ReadonlyAttribute(jsObject: jsObject, name: Strings.labels)
        _selectionStart = ReadWriteAttribute(jsObject: jsObject, name: Strings.selectionStart)
        _selectionEnd = ReadWriteAttribute(jsObject: jsObject, name: Strings.selectionEnd)
        _selectionDirection = ReadWriteAttribute(jsObject: jsObject, name: Strings.selectionDirection)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _useMap = ReadWriteAttribute(jsObject: jsObject, name: Strings.useMap)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var accept: String

    @ReadWriteAttribute
    public var alt: String

    @ReadWriteAttribute
    public var autocomplete: String

    @ReadWriteAttribute
    public var defaultChecked: Bool

    @ReadWriteAttribute
    public var checked: Bool

    @ReadWriteAttribute
    public var dirName: String

    @ReadWriteAttribute
    public var disabled: Bool

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var files: FileList?

    @ReadWriteAttribute
    public var formAction: String

    @ReadWriteAttribute
    public var formEnctype: String

    @ReadWriteAttribute
    public var formMethod: String

    @ReadWriteAttribute
    public var formNoValidate: Bool

    @ReadWriteAttribute
    public var formTarget: String

    @ReadWriteAttribute
    public var height: UInt32

    @ReadWriteAttribute
    public var indeterminate: Bool

    @ReadonlyAttribute
    public var list: HTMLDataListElement?

    @ReadWriteAttribute
    public var max: String

    @ReadWriteAttribute
    public var maxLength: Int32

    @ReadWriteAttribute
    public var min: String

    @ReadWriteAttribute
    public var minLength: Int32

    @ReadWriteAttribute
    public var multiple: Bool

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var pattern: String

    @ReadWriteAttribute
    public var placeholder: String

    @ReadWriteAttribute
    public var readOnly: Bool

    @ReadWriteAttribute
    public var required: Bool

    @ReadWriteAttribute
    public var size: UInt32

    @ReadWriteAttribute
    public var src: String

    @ReadWriteAttribute
    public var step: String

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var defaultValue: String

    @ReadWriteAttribute
    public var value: String

    @ReadWriteAttribute
    public var valueAsDate: JSObject?

    @ReadWriteAttribute
    public var valueAsNumber: Double

    @ReadWriteAttribute
    public var width: UInt32

    @inlinable public func stepUp(n: Int32? = nil) {
        let this = jsObject
        _ = this[Strings.stepUp].function!(this: this, arguments: [_toJSValue(n)])
    }

    @inlinable public func stepDown(n: Int32? = nil) {
        let this = jsObject
        _ = this[Strings.stepDown].function!(this: this, arguments: [_toJSValue(n)])
    }

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    @inlinable public func checkValidity() -> Bool {
        let this = jsObject
        return this[Strings.checkValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func reportValidity() -> Bool {
        let this = jsObject
        return this[Strings.reportValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func setCustomValidity(error: String) {
        let this = jsObject
        _ = this[Strings.setCustomValidity].function!(this: this, arguments: [_toJSValue(error)])
    }

    @ReadonlyAttribute
    public var labels: NodeList?

    @inlinable public func select() {
        let this = jsObject
        _ = this[Strings.select].function!(this: this, arguments: [])
    }

    @ReadWriteAttribute
    public var selectionStart: UInt32?

    @ReadWriteAttribute
    public var selectionEnd: UInt32?

    @ReadWriteAttribute
    public var selectionDirection: String?

    @inlinable public func setRangeText(replacement: String) {
        let this = jsObject
        _ = this[Strings.setRangeText].function!(this: this, arguments: [_toJSValue(replacement)])
    }

    @inlinable public func setRangeText(replacement: String, start: UInt32, end: UInt32, selectionMode: SelectionMode? = nil) {
        let this = jsObject
        _ = this[Strings.setRangeText].function!(this: this, arguments: [_toJSValue(replacement), _toJSValue(start), _toJSValue(end), _toJSValue(selectionMode)])
    }

    @inlinable public func setSelectionRange(start: UInt32, end: UInt32, direction: String? = nil) {
        let this = jsObject
        _ = this[Strings.setSelectionRange].function!(this: this, arguments: [_toJSValue(start), _toJSValue(end), _toJSValue(direction)])
    }

    @inlinable public func showPicker() {
        let this = jsObject
        _ = this[Strings.showPicker].function!(this: this, arguments: [])
    }

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var useMap: String
}

public class HTMLLIElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLLIElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var value: Int32

    @ReadWriteAttribute
    public var type: String
}

public class HTMLLabelElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLLabelElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _htmlFor = ReadWriteAttribute(jsObject: jsObject, name: Strings.htmlFor)
        _control = ReadonlyAttribute(jsObject: jsObject, name: Strings.control)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var htmlFor: String

    @ReadonlyAttribute
    public var control: HTMLElement?
}

public class HTMLLegendElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLLegendElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var align: String
}

public class HTMLLinkElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLLinkElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _href = ReadWriteAttribute(jsObject: jsObject, name: Strings.href)
        _crossOrigin = ReadWriteAttribute(jsObject: jsObject, name: Strings.crossOrigin)
        _rel = ReadWriteAttribute(jsObject: jsObject, name: Strings.rel)
        _as = ReadWriteAttribute(jsObject: jsObject, name: Strings.as)
        _relList = ReadonlyAttribute(jsObject: jsObject, name: Strings.relList)
        _media = ReadWriteAttribute(jsObject: jsObject, name: Strings.media)
        _integrity = ReadWriteAttribute(jsObject: jsObject, name: Strings.integrity)
        _hreflang = ReadWriteAttribute(jsObject: jsObject, name: Strings.hreflang)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _sizes = ReadonlyAttribute(jsObject: jsObject, name: Strings.sizes)
        _imageSrcset = ReadWriteAttribute(jsObject: jsObject, name: Strings.imageSrcset)
        _imageSizes = ReadWriteAttribute(jsObject: jsObject, name: Strings.imageSizes)
        _referrerPolicy = ReadWriteAttribute(jsObject: jsObject, name: Strings.referrerPolicy)
        _blocking = ReadonlyAttribute(jsObject: jsObject, name: Strings.blocking)
        _disabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.disabled)
        _fetchPriority = ReadWriteAttribute(jsObject: jsObject, name: Strings.fetchPriority)
        _charset = ReadWriteAttribute(jsObject: jsObject, name: Strings.charset)
        _rev = ReadWriteAttribute(jsObject: jsObject, name: Strings.rev)
        _target = ReadWriteAttribute(jsObject: jsObject, name: Strings.target)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var href: String

    @ReadWriteAttribute
    public var crossOrigin: String?

    @ReadWriteAttribute
    public var rel: String

    @ReadWriteAttribute
    public var `as`: String

    @ReadonlyAttribute
    public var relList: DOMTokenList

    @ReadWriteAttribute
    public var media: String

    @ReadWriteAttribute
    public var integrity: String

    @ReadWriteAttribute
    public var hreflang: String

    @ReadWriteAttribute
    public var type: String

    @ReadonlyAttribute
    public var sizes: DOMTokenList

    @ReadWriteAttribute
    public var imageSrcset: String

    @ReadWriteAttribute
    public var imageSizes: String

    @ReadWriteAttribute
    public var referrerPolicy: String

    @ReadonlyAttribute
    public var blocking: DOMTokenList

    @ReadWriteAttribute
    public var disabled: Bool

    @ReadWriteAttribute
    public var fetchPriority: String

    @ReadWriteAttribute
    public var charset: String

    @ReadWriteAttribute
    public var rev: String

    @ReadWriteAttribute
    public var target: String
}

public class HTMLMapElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLMapElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _areas = ReadonlyAttribute(jsObject: jsObject, name: Strings.areas)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var name: String

    @ReadonlyAttribute
    public var areas: HTMLCollection
}

public class HTMLMarqueeElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLMarqueeElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _behavior = ReadWriteAttribute(jsObject: jsObject, name: Strings.behavior)
        _bgColor = ReadWriteAttribute(jsObject: jsObject, name: Strings.bgColor)
        _direction = ReadWriteAttribute(jsObject: jsObject, name: Strings.direction)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        _hspace = ReadWriteAttribute(jsObject: jsObject, name: Strings.hspace)
        _loop = ReadWriteAttribute(jsObject: jsObject, name: Strings.loop)
        _scrollAmount = ReadWriteAttribute(jsObject: jsObject, name: Strings.scrollAmount)
        _scrollDelay = ReadWriteAttribute(jsObject: jsObject, name: Strings.scrollDelay)
        _trueSpeed = ReadWriteAttribute(jsObject: jsObject, name: Strings.trueSpeed)
        _vspace = ReadWriteAttribute(jsObject: jsObject, name: Strings.vspace)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var behavior: String

    @ReadWriteAttribute
    public var bgColor: String

    @ReadWriteAttribute
    public var direction: String

    @ReadWriteAttribute
    public var height: String

    @ReadWriteAttribute
    public var hspace: UInt32

    @ReadWriteAttribute
    public var loop: Int32

    @ReadWriteAttribute
    public var scrollAmount: UInt32

    @ReadWriteAttribute
    public var scrollDelay: UInt32

    @ReadWriteAttribute
    public var trueSpeed: Bool

    @ReadWriteAttribute
    public var vspace: UInt32

    @ReadWriteAttribute
    public var width: String

    @inlinable public func start() {
        let this = jsObject
        _ = this[Strings.start].function!(this: this, arguments: [])
    }

    @inlinable public func stop() {
        let this = jsObject
        _ = this[Strings.stop].function!(this: this, arguments: [])
    }
}

public class HTMLMediaElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLMediaElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _error = ReadonlyAttribute(jsObject: jsObject, name: Strings.error)
        _src = ReadWriteAttribute(jsObject: jsObject, name: Strings.src)
        _srcObject = ReadWriteAttribute(jsObject: jsObject, name: Strings.srcObject)
        _currentSrc = ReadonlyAttribute(jsObject: jsObject, name: Strings.currentSrc)
        _crossOrigin = ReadWriteAttribute(jsObject: jsObject, name: Strings.crossOrigin)
        _networkState = ReadonlyAttribute(jsObject: jsObject, name: Strings.networkState)
        _preload = ReadWriteAttribute(jsObject: jsObject, name: Strings.preload)
        _buffered = ReadonlyAttribute(jsObject: jsObject, name: Strings.buffered)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _seeking = ReadonlyAttribute(jsObject: jsObject, name: Strings.seeking)
        _currentTime = ReadWriteAttribute(jsObject: jsObject, name: Strings.currentTime)
        _duration = ReadonlyAttribute(jsObject: jsObject, name: Strings.duration)
        _paused = ReadonlyAttribute(jsObject: jsObject, name: Strings.paused)
        _defaultPlaybackRate = ReadWriteAttribute(jsObject: jsObject, name: Strings.defaultPlaybackRate)
        _playbackRate = ReadWriteAttribute(jsObject: jsObject, name: Strings.playbackRate)
        _preservesPitch = ReadWriteAttribute(jsObject: jsObject, name: Strings.preservesPitch)
        _played = ReadonlyAttribute(jsObject: jsObject, name: Strings.played)
        _seekable = ReadonlyAttribute(jsObject: jsObject, name: Strings.seekable)
        _ended = ReadonlyAttribute(jsObject: jsObject, name: Strings.ended)
        _autoplay = ReadWriteAttribute(jsObject: jsObject, name: Strings.autoplay)
        _loop = ReadWriteAttribute(jsObject: jsObject, name: Strings.loop)
        _controls = ReadWriteAttribute(jsObject: jsObject, name: Strings.controls)
        _volume = ReadWriteAttribute(jsObject: jsObject, name: Strings.volume)
        _muted = ReadWriteAttribute(jsObject: jsObject, name: Strings.muted)
        _defaultMuted = ReadWriteAttribute(jsObject: jsObject, name: Strings.defaultMuted)
        _audioTracks = ReadonlyAttribute(jsObject: jsObject, name: Strings.audioTracks)
        _videoTracks = ReadonlyAttribute(jsObject: jsObject, name: Strings.videoTracks)
        _textTracks = ReadonlyAttribute(jsObject: jsObject, name: Strings.textTracks)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var error: MediaError?

    @ReadWriteAttribute
    public var src: String

    @ReadWriteAttribute
    public var srcObject: MediaProvider?

    @ReadonlyAttribute
    public var currentSrc: String

    @ReadWriteAttribute
    public var crossOrigin: String?

    public static let NETWORK_EMPTY: UInt16 = 0

    public static let NETWORK_IDLE: UInt16 = 1

    public static let NETWORK_LOADING: UInt16 = 2

    public static let NETWORK_NO_SOURCE: UInt16 = 3

    @ReadonlyAttribute
    public var networkState: UInt16

    @ReadWriteAttribute
    public var preload: String

    @ReadonlyAttribute
    public var buffered: TimeRanges

    @inlinable public func load() {
        let this = jsObject
        _ = this[Strings.load].function!(this: this, arguments: [])
    }

    @inlinable public func canPlayType(type: String) -> CanPlayTypeResult {
        let this = jsObject
        return this[Strings.canPlayType].function!(this: this, arguments: [_toJSValue(type)]).fromJSValue()!
    }

    public static let HAVE_NOTHING: UInt16 = 0

    public static let HAVE_METADATA: UInt16 = 1

    public static let HAVE_CURRENT_DATA: UInt16 = 2

    public static let HAVE_FUTURE_DATA: UInt16 = 3

    public static let HAVE_ENOUGH_DATA: UInt16 = 4

    @ReadonlyAttribute
    public var readyState: UInt16

    @ReadonlyAttribute
    public var seeking: Bool

    @ReadWriteAttribute
    public var currentTime: Double

    @inlinable public func fastSeek(time: Double) {
        let this = jsObject
        _ = this[Strings.fastSeek].function!(this: this, arguments: [_toJSValue(time)])
    }

    @ReadonlyAttribute
    public var duration: Double

    @inlinable public func getStartDate() -> JSObject {
        let this = jsObject
        return this[Strings.getStartDate].function!(this: this, arguments: []).fromJSValue()!
    }

    @ReadonlyAttribute
    public var paused: Bool

    @ReadWriteAttribute
    public var defaultPlaybackRate: Double

    @ReadWriteAttribute
    public var playbackRate: Double

    @ReadWriteAttribute
    public var preservesPitch: Bool

    @ReadonlyAttribute
    public var played: TimeRanges

    @ReadonlyAttribute
    public var seekable: TimeRanges

    @ReadonlyAttribute
    public var ended: Bool

    @ReadWriteAttribute
    public var autoplay: Bool

    @ReadWriteAttribute
    public var loop: Bool

    @inlinable public func play() -> JSPromise {
        let this = jsObject
        return this[Strings.play].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func play() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.play].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func pause() {
        let this = jsObject
        _ = this[Strings.pause].function!(this: this, arguments: [])
    }

    @ReadWriteAttribute
    public var controls: Bool

    @ReadWriteAttribute
    public var volume: Double

    @ReadWriteAttribute
    public var muted: Bool

    @ReadWriteAttribute
    public var defaultMuted: Bool

    @ReadonlyAttribute
    public var audioTracks: AudioTrackList

    @ReadonlyAttribute
    public var videoTracks: VideoTrackList

    @ReadonlyAttribute
    public var textTracks: TextTrackList

    @inlinable public func addTextTrack(kind: TextTrackKind, label: String? = nil, language: String? = nil) -> TextTrack {
        let this = jsObject
        return this[Strings.addTextTrack].function!(this: this, arguments: [_toJSValue(kind), _toJSValue(label), _toJSValue(language)]).fromJSValue()!
    }
}

public class HTMLMenuElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLMenuElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _compact = ReadWriteAttribute(jsObject: jsObject, name: Strings.compact)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var compact: Bool
}

public class HTMLMetaElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLMetaElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _httpEquiv = ReadWriteAttribute(jsObject: jsObject, name: Strings.httpEquiv)
        _content = ReadWriteAttribute(jsObject: jsObject, name: Strings.content)
        _media = ReadWriteAttribute(jsObject: jsObject, name: Strings.media)
        _scheme = ReadWriteAttribute(jsObject: jsObject, name: Strings.scheme)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var httpEquiv: String

    @ReadWriteAttribute
    public var content: String

    @ReadWriteAttribute
    public var media: String

    @ReadWriteAttribute
    public var scheme: String
}

public class HTMLMeterElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLMeterElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _min = ReadWriteAttribute(jsObject: jsObject, name: Strings.min)
        _max = ReadWriteAttribute(jsObject: jsObject, name: Strings.max)
        _low = ReadWriteAttribute(jsObject: jsObject, name: Strings.low)
        _high = ReadWriteAttribute(jsObject: jsObject, name: Strings.high)
        _optimum = ReadWriteAttribute(jsObject: jsObject, name: Strings.optimum)
        _labels = ReadonlyAttribute(jsObject: jsObject, name: Strings.labels)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var value: Double

    @ReadWriteAttribute
    public var min: Double

    @ReadWriteAttribute
    public var max: Double

    @ReadWriteAttribute
    public var low: Double

    @ReadWriteAttribute
    public var high: Double

    @ReadWriteAttribute
    public var optimum: Double

    @ReadonlyAttribute
    public var labels: NodeList
}

public class HTMLModElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLModElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _cite = ReadWriteAttribute(jsObject: jsObject, name: Strings.cite)
        _dateTime = ReadWriteAttribute(jsObject: jsObject, name: Strings.dateTime)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var cite: String

    @ReadWriteAttribute
    public var dateTime: String
}

public class HTMLOListElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLOListElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _reversed = ReadWriteAttribute(jsObject: jsObject, name: Strings.reversed)
        _start = ReadWriteAttribute(jsObject: jsObject, name: Strings.start)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _compact = ReadWriteAttribute(jsObject: jsObject, name: Strings.compact)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var reversed: Bool

    @ReadWriteAttribute
    public var start: Int32

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var compact: Bool
}

public class HTMLObjectElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLObjectElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _data = ReadWriteAttribute(jsObject: jsObject, name: Strings.data)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        _contentDocument = ReadonlyAttribute(jsObject: jsObject, name: Strings.contentDocument)
        _contentWindow = ReadonlyAttribute(jsObject: jsObject, name: Strings.contentWindow)
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: Strings.willValidate)
        _validity = ReadonlyAttribute(jsObject: jsObject, name: Strings.validity)
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: Strings.validationMessage)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _archive = ReadWriteAttribute(jsObject: jsObject, name: Strings.archive)
        _code = ReadWriteAttribute(jsObject: jsObject, name: Strings.code)
        _declare = ReadWriteAttribute(jsObject: jsObject, name: Strings.declare)
        _hspace = ReadWriteAttribute(jsObject: jsObject, name: Strings.hspace)
        _standby = ReadWriteAttribute(jsObject: jsObject, name: Strings.standby)
        _vspace = ReadWriteAttribute(jsObject: jsObject, name: Strings.vspace)
        _codeBase = ReadWriteAttribute(jsObject: jsObject, name: Strings.codeBase)
        _codeType = ReadWriteAttribute(jsObject: jsObject, name: Strings.codeType)
        _useMap = ReadWriteAttribute(jsObject: jsObject, name: Strings.useMap)
        _border = ReadWriteAttribute(jsObject: jsObject, name: Strings.border)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var data: String

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var name: String

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var width: String

    @ReadWriteAttribute
    public var height: String

    @ReadonlyAttribute
    public var contentDocument: Document?

    @ReadonlyAttribute
    public var contentWindow: WindowProxy?

    @inlinable public func getSVGDocument() -> Document? {
        let this = jsObject
        return this[Strings.getSVGDocument].function!(this: this, arguments: []).fromJSValue()
    }

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    @inlinable public func checkValidity() -> Bool {
        let this = jsObject
        return this[Strings.checkValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func reportValidity() -> Bool {
        let this = jsObject
        return this[Strings.reportValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func setCustomValidity(error: String) {
        let this = jsObject
        _ = this[Strings.setCustomValidity].function!(this: this, arguments: [_toJSValue(error)])
    }

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var archive: String

    @ReadWriteAttribute
    public var code: String

    @ReadWriteAttribute
    public var declare: Bool

    @ReadWriteAttribute
    public var hspace: UInt32

    @ReadWriteAttribute
    public var standby: String

    @ReadWriteAttribute
    public var vspace: UInt32

    @ReadWriteAttribute
    public var codeBase: String

    @ReadWriteAttribute
    public var codeType: String

    @ReadWriteAttribute
    public var useMap: String

    @ReadWriteAttribute
    public var border: String
}

public class HTMLOptGroupElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLOptGroupElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _disabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.disabled)
        _label = ReadWriteAttribute(jsObject: jsObject, name: Strings.label)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var disabled: Bool

    @ReadWriteAttribute
    public var label: String
}

public class HTMLOptionElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLOptionElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _disabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.disabled)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _label = ReadWriteAttribute(jsObject: jsObject, name: Strings.label)
        _defaultSelected = ReadWriteAttribute(jsObject: jsObject, name: Strings.defaultSelected)
        _selected = ReadWriteAttribute(jsObject: jsObject, name: Strings.selected)
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _text = ReadWriteAttribute(jsObject: jsObject, name: Strings.text)
        _index = ReadonlyAttribute(jsObject: jsObject, name: Strings.index)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var disabled: Bool

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var label: String

    @ReadWriteAttribute
    public var defaultSelected: Bool

    @ReadWriteAttribute
    public var selected: Bool

    @ReadWriteAttribute
    public var value: String

    @ReadWriteAttribute
    public var text: String

    @ReadonlyAttribute
    public var index: Int32
}

public class HTMLOptionsCollection: HTMLCollection {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLOptionsCollection].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadWriteAttribute(jsObject: jsObject, name: Strings.length)
        _selectedIndex = ReadWriteAttribute(jsObject: jsObject, name: Strings.selectedIndex)
        super.init(unsafelyWrapping: jsObject)
    }

    @usableFromInline let _length: ReadWriteAttribute<UInt32>
    @inlinable override public var length: UInt32 {
        get { _length.wrappedValue }
        set { _length.wrappedValue = newValue }
    }

    @inlinable override public subscript(key: Int) -> HTMLOptionElement? {
        get {
            super[key] as? HTMLOptionElement
        }
        set {
            jsObject[key] = _toJSValue(newValue)
        }
    }

    @inlinable public func add(element: HTMLOptGroupElement_or_HTMLOptionElement, before: HTMLElement_or_Int32? = nil) {
        let this = jsObject
        _ = this[Strings.add].function!(this: this, arguments: [_toJSValue(element), _toJSValue(before)])
    }

    @inlinable public func remove(index: Int32) {
        let this = jsObject
        _ = this[Strings.remove].function!(this: this, arguments: [_toJSValue(index)])
    }

    @ReadWriteAttribute
    public var selectedIndex: Int32
}

public protocol HTMLOrSVGElement: JSBridgedClass {}
public extension HTMLOrSVGElement {
    @inlinable var dataset: DOMStringMap { jsObject[Strings.dataset].fromJSValue()! }

    @inlinable var nonce: String {
        get { jsObject[Strings.nonce].fromJSValue()! }
        nonmutating set { jsObject[Strings.nonce] = _toJSValue(newValue) }
    }

    @inlinable var autofocus: Bool {
        get { jsObject[Strings.autofocus].fromJSValue()! }
        nonmutating set { jsObject[Strings.autofocus] = _toJSValue(newValue) }
    }

    @inlinable var tabIndex: Int32 {
        get { jsObject[Strings.tabIndex].fromJSValue()! }
        nonmutating set { jsObject[Strings.tabIndex] = _toJSValue(newValue) }
    }

    @inlinable func focus(options: FocusOptions? = nil) {
        let this = jsObject
        _ = this[Strings.focus].function!(this: this, arguments: [_toJSValue(options)])
    }

    @inlinable func blur() {
        let this = jsObject
        _ = this[Strings.blur].function!(this: this, arguments: [])
    }
}

public class HTMLOutputElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLOutputElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _htmlFor = ReadonlyAttribute(jsObject: jsObject, name: Strings.htmlFor)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _defaultValue = ReadWriteAttribute(jsObject: jsObject, name: Strings.defaultValue)
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: Strings.willValidate)
        _validity = ReadonlyAttribute(jsObject: jsObject, name: Strings.validity)
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: Strings.validationMessage)
        _labels = ReadonlyAttribute(jsObject: jsObject, name: Strings.labels)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var htmlFor: DOMTokenList

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var name: String

    @ReadonlyAttribute
    public var type: String

    @ReadWriteAttribute
    public var defaultValue: String

    @ReadWriteAttribute
    public var value: String

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    @inlinable public func checkValidity() -> Bool {
        let this = jsObject
        return this[Strings.checkValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func reportValidity() -> Bool {
        let this = jsObject
        return this[Strings.reportValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func setCustomValidity(error: String) {
        let this = jsObject
        _ = this[Strings.setCustomValidity].function!(this: this, arguments: [_toJSValue(error)])
    }

    @ReadonlyAttribute
    public var labels: NodeList
}

public class HTMLParagraphElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLParagraphElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var align: String
}

public class HTMLParamElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLParamElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _valueType = ReadWriteAttribute(jsObject: jsObject, name: Strings.valueType)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var value: String

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var valueType: String
}

public class HTMLPictureElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLPictureElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }
}

public class HTMLPreElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLPreElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var width: Int32
}

public class HTMLProgressElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLProgressElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _max = ReadWriteAttribute(jsObject: jsObject, name: Strings.max)
        _position = ReadonlyAttribute(jsObject: jsObject, name: Strings.position)
        _labels = ReadonlyAttribute(jsObject: jsObject, name: Strings.labels)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var value: Double

    @ReadWriteAttribute
    public var max: Double

    @ReadonlyAttribute
    public var position: Double

    @ReadonlyAttribute
    public var labels: NodeList
}

public class HTMLQuoteElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLQuoteElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _cite = ReadWriteAttribute(jsObject: jsObject, name: Strings.cite)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var cite: String
}

public class HTMLScriptElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLScriptElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _src = ReadWriteAttribute(jsObject: jsObject, name: Strings.src)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _noModule = ReadWriteAttribute(jsObject: jsObject, name: Strings.noModule)
        _async = ReadWriteAttribute(jsObject: jsObject, name: Strings.async)
        _defer = ReadWriteAttribute(jsObject: jsObject, name: Strings.defer)
        _crossOrigin = ReadWriteAttribute(jsObject: jsObject, name: Strings.crossOrigin)
        _text = ReadWriteAttribute(jsObject: jsObject, name: Strings.text)
        _integrity = ReadWriteAttribute(jsObject: jsObject, name: Strings.integrity)
        _referrerPolicy = ReadWriteAttribute(jsObject: jsObject, name: Strings.referrerPolicy)
        _blocking = ReadonlyAttribute(jsObject: jsObject, name: Strings.blocking)
        _fetchPriority = ReadWriteAttribute(jsObject: jsObject, name: Strings.fetchPriority)
        _charset = ReadWriteAttribute(jsObject: jsObject, name: Strings.charset)
        _event = ReadWriteAttribute(jsObject: jsObject, name: Strings.event)
        _htmlFor = ReadWriteAttribute(jsObject: jsObject, name: Strings.htmlFor)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var src: String

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var noModule: Bool

    @ReadWriteAttribute
    public var async: Bool

    @ReadWriteAttribute
    public var `defer`: Bool

    @ReadWriteAttribute
    public var crossOrigin: String?

    @ReadWriteAttribute
    public var text: String

    @ReadWriteAttribute
    public var integrity: String

    @ReadWriteAttribute
    public var referrerPolicy: String

    @ReadonlyAttribute
    public var blocking: DOMTokenList

    @ReadWriteAttribute
    public var fetchPriority: String

    @inlinable public class func supports(type: String) -> Bool {
        let this = constructor!
        return this[Strings.supports].function!(this: this, arguments: [_toJSValue(type)]).fromJSValue()!
    }

    @ReadWriteAttribute
    public var charset: String

    @ReadWriteAttribute
    public var event: String

    @ReadWriteAttribute
    public var htmlFor: String
}

public class HTMLSelectElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLSelectElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _autocomplete = ReadWriteAttribute(jsObject: jsObject, name: Strings.autocomplete)
        _disabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.disabled)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _multiple = ReadWriteAttribute(jsObject: jsObject, name: Strings.multiple)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _required = ReadWriteAttribute(jsObject: jsObject, name: Strings.required)
        _size = ReadWriteAttribute(jsObject: jsObject, name: Strings.size)
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _options = ReadonlyAttribute(jsObject: jsObject, name: Strings.options)
        _length = ReadWriteAttribute(jsObject: jsObject, name: Strings.length)
        _selectedOptions = ReadonlyAttribute(jsObject: jsObject, name: Strings.selectedOptions)
        _selectedIndex = ReadWriteAttribute(jsObject: jsObject, name: Strings.selectedIndex)
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: Strings.willValidate)
        _validity = ReadonlyAttribute(jsObject: jsObject, name: Strings.validity)
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: Strings.validationMessage)
        _labels = ReadonlyAttribute(jsObject: jsObject, name: Strings.labels)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var autocomplete: String

    @ReadWriteAttribute
    public var disabled: Bool

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var multiple: Bool

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var required: Bool

    @ReadWriteAttribute
    public var size: UInt32

    @ReadonlyAttribute
    public var type: String

    @ReadonlyAttribute
    public var options: HTMLOptionsCollection

    @ReadWriteAttribute
    public var length: UInt32

    @inlinable public func item(index: UInt32) -> HTMLOptionElement? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }

    @inlinable public func namedItem(name: String) -> HTMLOptionElement? {
        let this = jsObject
        return this[Strings.namedItem].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()
    }

    @inlinable public func add(element: HTMLOptGroupElement_or_HTMLOptionElement, before: HTMLElement_or_Int32? = nil) {
        let this = jsObject
        _ = this[Strings.add].function!(this: this, arguments: [_toJSValue(element), _toJSValue(before)])
    }

    @inlinable public func remove() {
        let this = jsObject
        _ = this[Strings.remove].function!(this: this, arguments: [])
    }

    @inlinable public func remove(index: Int32) {
        let this = jsObject
        _ = this[Strings.remove].function!(this: this, arguments: [_toJSValue(index)])
    }

    @inlinable public subscript(key: Int) -> HTMLOptionElement? {
        get {
            jsObject[key].fromJSValue()
        }
        set {
            jsObject[key] = _toJSValue(newValue)
        }
    }

    @ReadonlyAttribute
    public var selectedOptions: HTMLCollection

    @ReadWriteAttribute
    public var selectedIndex: Int32

    @ReadWriteAttribute
    public var value: String

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    @inlinable public func checkValidity() -> Bool {
        let this = jsObject
        return this[Strings.checkValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func reportValidity() -> Bool {
        let this = jsObject
        return this[Strings.reportValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func setCustomValidity(error: String) {
        let this = jsObject
        _ = this[Strings.setCustomValidity].function!(this: this, arguments: [_toJSValue(error)])
    }

    @ReadonlyAttribute
    public var labels: NodeList
}

public class HTMLSlotElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLSlotElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var name: String

    @inlinable public func assignedNodes(options: AssignedNodesOptions? = nil) -> [Node] {
        let this = jsObject
        return this[Strings.assignedNodes].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func assignedElements(options: AssignedNodesOptions? = nil) -> [Element] {
        let this = jsObject
        return this[Strings.assignedElements].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func assign(nodes: Element_or_Text...) {
        let this = jsObject
        _ = this[Strings.assign].function!(this: this, arguments: nodes.map(_toJSValue))
    }
}

public class HTMLSourceElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLSourceElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _src = ReadWriteAttribute(jsObject: jsObject, name: Strings.src)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        _srcset = ReadWriteAttribute(jsObject: jsObject, name: Strings.srcset)
        _sizes = ReadWriteAttribute(jsObject: jsObject, name: Strings.sizes)
        _media = ReadWriteAttribute(jsObject: jsObject, name: Strings.media)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var src: String

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var srcset: String

    @ReadWriteAttribute
    public var sizes: String

    @ReadWriteAttribute
    public var media: String

    @ReadWriteAttribute
    public var width: UInt32

    @ReadWriteAttribute
    public var height: UInt32
}

public class HTMLSpanElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLSpanElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }
}

public class HTMLStyleElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLStyleElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _disabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.disabled)
        _media = ReadWriteAttribute(jsObject: jsObject, name: Strings.media)
        _blocking = ReadonlyAttribute(jsObject: jsObject, name: Strings.blocking)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var disabled: Bool

    @ReadWriteAttribute
    public var media: String

    @ReadonlyAttribute
    public var blocking: DOMTokenList

    @ReadWriteAttribute
    public var type: String
}

public class HTMLTableCaptionElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLTableCaptionElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var align: String
}

public class HTMLTableCellElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLTableCellElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _colSpan = ReadWriteAttribute(jsObject: jsObject, name: Strings.colSpan)
        _rowSpan = ReadWriteAttribute(jsObject: jsObject, name: Strings.rowSpan)
        _headers = ReadWriteAttribute(jsObject: jsObject, name: Strings.headers)
        _cellIndex = ReadonlyAttribute(jsObject: jsObject, name: Strings.cellIndex)
        _scope = ReadWriteAttribute(jsObject: jsObject, name: Strings.scope)
        _abbr = ReadWriteAttribute(jsObject: jsObject, name: Strings.abbr)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _axis = ReadWriteAttribute(jsObject: jsObject, name: Strings.axis)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _ch = ReadWriteAttribute(jsObject: jsObject, name: Strings.ch)
        _chOff = ReadWriteAttribute(jsObject: jsObject, name: Strings.chOff)
        _noWrap = ReadWriteAttribute(jsObject: jsObject, name: Strings.noWrap)
        _vAlign = ReadWriteAttribute(jsObject: jsObject, name: Strings.vAlign)
        _bgColor = ReadWriteAttribute(jsObject: jsObject, name: Strings.bgColor)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var colSpan: UInt32

    @ReadWriteAttribute
    public var rowSpan: UInt32

    @ReadWriteAttribute
    public var headers: String

    @ReadonlyAttribute
    public var cellIndex: Int32

    @ReadWriteAttribute
    public var scope: String

    @ReadWriteAttribute
    public var abbr: String

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var axis: String

    @ReadWriteAttribute
    public var height: String

    @ReadWriteAttribute
    public var width: String

    @ReadWriteAttribute
    public var ch: String

    @ReadWriteAttribute
    public var chOff: String

    @ReadWriteAttribute
    public var noWrap: Bool

    @ReadWriteAttribute
    public var vAlign: String

    @ReadWriteAttribute
    public var bgColor: String
}

public class HTMLTableColElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLTableColElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _span = ReadWriteAttribute(jsObject: jsObject, name: Strings.span)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _ch = ReadWriteAttribute(jsObject: jsObject, name: Strings.ch)
        _chOff = ReadWriteAttribute(jsObject: jsObject, name: Strings.chOff)
        _vAlign = ReadWriteAttribute(jsObject: jsObject, name: Strings.vAlign)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var span: UInt32

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var ch: String

    @ReadWriteAttribute
    public var chOff: String

    @ReadWriteAttribute
    public var vAlign: String

    @ReadWriteAttribute
    public var width: String
}

public class HTMLTableElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLTableElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _caption = ReadWriteAttribute(jsObject: jsObject, name: Strings.caption)
        _tHead = ReadWriteAttribute(jsObject: jsObject, name: Strings.tHead)
        _tFoot = ReadWriteAttribute(jsObject: jsObject, name: Strings.tFoot)
        _tBodies = ReadonlyAttribute(jsObject: jsObject, name: Strings.tBodies)
        _rows = ReadonlyAttribute(jsObject: jsObject, name: Strings.rows)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _border = ReadWriteAttribute(jsObject: jsObject, name: Strings.border)
        _frame = ReadWriteAttribute(jsObject: jsObject, name: Strings.frame)
        _rules = ReadWriteAttribute(jsObject: jsObject, name: Strings.rules)
        _summary = ReadWriteAttribute(jsObject: jsObject, name: Strings.summary)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _bgColor = ReadWriteAttribute(jsObject: jsObject, name: Strings.bgColor)
        _cellPadding = ReadWriteAttribute(jsObject: jsObject, name: Strings.cellPadding)
        _cellSpacing = ReadWriteAttribute(jsObject: jsObject, name: Strings.cellSpacing)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var caption: HTMLTableCaptionElement?

    @inlinable public func createCaption() -> HTMLTableCaptionElement {
        let this = jsObject
        return this[Strings.createCaption].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func deleteCaption() {
        let this = jsObject
        _ = this[Strings.deleteCaption].function!(this: this, arguments: [])
    }

    @ReadWriteAttribute
    public var tHead: HTMLTableSectionElement?

    @inlinable public func createTHead() -> HTMLTableSectionElement {
        let this = jsObject
        return this[Strings.createTHead].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func deleteTHead() {
        let this = jsObject
        _ = this[Strings.deleteTHead].function!(this: this, arguments: [])
    }

    @ReadWriteAttribute
    public var tFoot: HTMLTableSectionElement?

    @inlinable public func createTFoot() -> HTMLTableSectionElement {
        let this = jsObject
        return this[Strings.createTFoot].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func deleteTFoot() {
        let this = jsObject
        _ = this[Strings.deleteTFoot].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var tBodies: HTMLCollection

    @inlinable public func createTBody() -> HTMLTableSectionElement {
        let this = jsObject
        return this[Strings.createTBody].function!(this: this, arguments: []).fromJSValue()!
    }

    @ReadonlyAttribute
    public var rows: HTMLCollection

    @inlinable public func insertRow(index: Int32? = nil) -> HTMLTableRowElement {
        let this = jsObject
        return this[Strings.insertRow].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()!
    }

    @inlinable public func deleteRow(index: Int32) {
        let this = jsObject
        _ = this[Strings.deleteRow].function!(this: this, arguments: [_toJSValue(index)])
    }

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var border: String

    @ReadWriteAttribute
    public var frame: String

    @ReadWriteAttribute
    public var rules: String

    @ReadWriteAttribute
    public var summary: String

    @ReadWriteAttribute
    public var width: String

    @ReadWriteAttribute
    public var bgColor: String

    @ReadWriteAttribute
    public var cellPadding: String

    @ReadWriteAttribute
    public var cellSpacing: String
}

public class HTMLTableRowElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLTableRowElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _rowIndex = ReadonlyAttribute(jsObject: jsObject, name: Strings.rowIndex)
        _sectionRowIndex = ReadonlyAttribute(jsObject: jsObject, name: Strings.sectionRowIndex)
        _cells = ReadonlyAttribute(jsObject: jsObject, name: Strings.cells)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _ch = ReadWriteAttribute(jsObject: jsObject, name: Strings.ch)
        _chOff = ReadWriteAttribute(jsObject: jsObject, name: Strings.chOff)
        _vAlign = ReadWriteAttribute(jsObject: jsObject, name: Strings.vAlign)
        _bgColor = ReadWriteAttribute(jsObject: jsObject, name: Strings.bgColor)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var rowIndex: Int32

    @ReadonlyAttribute
    public var sectionRowIndex: Int32

    @ReadonlyAttribute
    public var cells: HTMLCollection

    @inlinable public func insertCell(index: Int32? = nil) -> HTMLTableCellElement {
        let this = jsObject
        return this[Strings.insertCell].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()!
    }

    @inlinable public func deleteCell(index: Int32) {
        let this = jsObject
        _ = this[Strings.deleteCell].function!(this: this, arguments: [_toJSValue(index)])
    }

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var ch: String

    @ReadWriteAttribute
    public var chOff: String

    @ReadWriteAttribute
    public var vAlign: String

    @ReadWriteAttribute
    public var bgColor: String
}

public class HTMLTableSectionElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLTableSectionElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _rows = ReadonlyAttribute(jsObject: jsObject, name: Strings.rows)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _ch = ReadWriteAttribute(jsObject: jsObject, name: Strings.ch)
        _chOff = ReadWriteAttribute(jsObject: jsObject, name: Strings.chOff)
        _vAlign = ReadWriteAttribute(jsObject: jsObject, name: Strings.vAlign)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var rows: HTMLCollection

    @inlinable public func insertRow(index: Int32? = nil) -> HTMLTableRowElement {
        let this = jsObject
        return this[Strings.insertRow].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()!
    }

    @inlinable public func deleteRow(index: Int32) {
        let this = jsObject
        _ = this[Strings.deleteRow].function!(this: this, arguments: [_toJSValue(index)])
    }

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var ch: String

    @ReadWriteAttribute
    public var chOff: String

    @ReadWriteAttribute
    public var vAlign: String
}

public class HTMLTemplateElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLTemplateElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _content = ReadonlyAttribute(jsObject: jsObject, name: Strings.content)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var content: DocumentFragment
}

public class HTMLTextAreaElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLTextAreaElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _autocomplete = ReadWriteAttribute(jsObject: jsObject, name: Strings.autocomplete)
        _cols = ReadWriteAttribute(jsObject: jsObject, name: Strings.cols)
        _dirName = ReadWriteAttribute(jsObject: jsObject, name: Strings.dirName)
        _disabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.disabled)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _maxLength = ReadWriteAttribute(jsObject: jsObject, name: Strings.maxLength)
        _minLength = ReadWriteAttribute(jsObject: jsObject, name: Strings.minLength)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _placeholder = ReadWriteAttribute(jsObject: jsObject, name: Strings.placeholder)
        _readOnly = ReadWriteAttribute(jsObject: jsObject, name: Strings.readOnly)
        _required = ReadWriteAttribute(jsObject: jsObject, name: Strings.required)
        _rows = ReadWriteAttribute(jsObject: jsObject, name: Strings.rows)
        _wrap = ReadWriteAttribute(jsObject: jsObject, name: Strings.wrap)
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _defaultValue = ReadWriteAttribute(jsObject: jsObject, name: Strings.defaultValue)
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _textLength = ReadonlyAttribute(jsObject: jsObject, name: Strings.textLength)
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: Strings.willValidate)
        _validity = ReadonlyAttribute(jsObject: jsObject, name: Strings.validity)
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: Strings.validationMessage)
        _labels = ReadonlyAttribute(jsObject: jsObject, name: Strings.labels)
        _selectionStart = ReadWriteAttribute(jsObject: jsObject, name: Strings.selectionStart)
        _selectionEnd = ReadWriteAttribute(jsObject: jsObject, name: Strings.selectionEnd)
        _selectionDirection = ReadWriteAttribute(jsObject: jsObject, name: Strings.selectionDirection)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var autocomplete: String

    @ReadWriteAttribute
    public var cols: UInt32

    @ReadWriteAttribute
    public var dirName: String

    @ReadWriteAttribute
    public var disabled: Bool

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var maxLength: Int32

    @ReadWriteAttribute
    public var minLength: Int32

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var placeholder: String

    @ReadWriteAttribute
    public var readOnly: Bool

    @ReadWriteAttribute
    public var required: Bool

    @ReadWriteAttribute
    public var rows: UInt32

    @ReadWriteAttribute
    public var wrap: String

    @ReadonlyAttribute
    public var type: String

    @ReadWriteAttribute
    public var defaultValue: String

    @ReadWriteAttribute
    public var value: String

    @ReadonlyAttribute
    public var textLength: UInt32

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    @inlinable public func checkValidity() -> Bool {
        let this = jsObject
        return this[Strings.checkValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func reportValidity() -> Bool {
        let this = jsObject
        return this[Strings.reportValidity].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func setCustomValidity(error: String) {
        let this = jsObject
        _ = this[Strings.setCustomValidity].function!(this: this, arguments: [_toJSValue(error)])
    }

    @ReadonlyAttribute
    public var labels: NodeList

    @inlinable public func select() {
        let this = jsObject
        _ = this[Strings.select].function!(this: this, arguments: [])
    }

    @ReadWriteAttribute
    public var selectionStart: UInt32

    @ReadWriteAttribute
    public var selectionEnd: UInt32

    @ReadWriteAttribute
    public var selectionDirection: String

    @inlinable public func setRangeText(replacement: String) {
        let this = jsObject
        _ = this[Strings.setRangeText].function!(this: this, arguments: [_toJSValue(replacement)])
    }

    @inlinable public func setRangeText(replacement: String, start: UInt32, end: UInt32, selectionMode: SelectionMode? = nil) {
        let this = jsObject
        _ = this[Strings.setRangeText].function!(this: this, arguments: [_toJSValue(replacement), _toJSValue(start), _toJSValue(end), _toJSValue(selectionMode)])
    }

    @inlinable public func setSelectionRange(start: UInt32, end: UInt32, direction: String? = nil) {
        let this = jsObject
        _ = this[Strings.setSelectionRange].function!(this: this, arguments: [_toJSValue(start), _toJSValue(end), _toJSValue(direction)])
    }
}

public class HTMLTimeElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLTimeElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _dateTime = ReadWriteAttribute(jsObject: jsObject, name: Strings.dateTime)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var dateTime: String
}

public class HTMLTitleElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLTitleElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _text = ReadWriteAttribute(jsObject: jsObject, name: Strings.text)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var text: String
}

public class HTMLTrackElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLTrackElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _kind = ReadWriteAttribute(jsObject: jsObject, name: Strings.kind)
        _src = ReadWriteAttribute(jsObject: jsObject, name: Strings.src)
        _srclang = ReadWriteAttribute(jsObject: jsObject, name: Strings.srclang)
        _label = ReadWriteAttribute(jsObject: jsObject, name: Strings.label)
        _default = ReadWriteAttribute(jsObject: jsObject, name: Strings.default)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _track = ReadonlyAttribute(jsObject: jsObject, name: Strings.track)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var kind: String

    @ReadWriteAttribute
    public var src: String

    @ReadWriteAttribute
    public var srclang: String

    @ReadWriteAttribute
    public var label: String

    @ReadWriteAttribute
    public var `default`: Bool

    public static let NONE: UInt16 = 0

    public static let LOADING: UInt16 = 1

    public static let LOADED: UInt16 = 2

    public static let ERROR: UInt16 = 3

    @ReadonlyAttribute
    public var readyState: UInt16

    @ReadonlyAttribute
    public var track: TextTrack
}

public class HTMLUListElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLUListElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _compact = ReadWriteAttribute(jsObject: jsObject, name: Strings.compact)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Strings.type)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var compact: Bool

    @ReadWriteAttribute
    public var type: String
}

public class HTMLUnknownElement: HTMLElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLUnknownElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }
}

public class HTMLVideoElement: HTMLMediaElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HTMLVideoElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        _videoWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.videoWidth)
        _videoHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.videoHeight)
        _poster = ReadWriteAttribute(jsObject: jsObject, name: Strings.poster)
        _playsInline = ReadWriteAttribute(jsObject: jsObject, name: Strings.playsInline)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadWriteAttribute
    public var width: UInt32

    @ReadWriteAttribute
    public var height: UInt32

    @ReadonlyAttribute
    public var videoWidth: UInt32

    @ReadonlyAttribute
    public var videoHeight: UInt32

    @ReadWriteAttribute
    public var poster: String

    @ReadWriteAttribute
    public var playsInline: Bool
}

public enum HardwareAcceleration: JSString, JSValueCompatible {
    case noPreference = "no-preference"
    case preferHardware = "prefer-hardware"
    case preferSoftware = "prefer-software"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class HashChangeEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.HashChangeEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _oldURL = ReadonlyAttribute(jsObject: jsObject, name: Strings.oldURL)
        _newURL = ReadonlyAttribute(jsObject: jsObject, name: Strings.newURL)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: HashChangeEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var oldURL: String

    @ReadonlyAttribute
    public var newURL: String
}

public class HashChangeEventInit: BridgedDictionary {
    public convenience init(oldURL: String, newURL: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.oldURL] = _toJSValue(oldURL)
        object[Strings.newURL] = _toJSValue(newURL)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _oldURL = ReadWriteAttribute(jsObject: object, name: Strings.oldURL)
        _newURL = ReadWriteAttribute(jsObject: object, name: Strings.newURL)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var oldURL: String

    @ReadWriteAttribute
    public var newURL: String
}

public class Headers: JSBridgedClass, Sequence {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Headers].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public convenience init(init: HeadersInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @inlinable public func append(name: String, value: String) {
        let this = jsObject
        _ = this[Strings.append].function!(this: this, arguments: [_toJSValue(name), _toJSValue(value)])
    }

    @inlinable public func delete(name: String) {
        let this = jsObject
        _ = this[Strings.delete].function!(this: this, arguments: [_toJSValue(name)])
    }

    @inlinable public func get(name: String) -> String? {
        let this = jsObject
        return this[Strings.get].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()
    }

    @inlinable public func getSetCookie() -> [String] {
        let this = jsObject
        return this[Strings.getSetCookie].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func has(name: String) -> Bool {
        let this = jsObject
        return this[Strings.has].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()!
    }

    @inlinable public func set(name: String, value: String) {
        let this = jsObject
        _ = this[Strings.set].function!(this: this, arguments: [_toJSValue(name), _toJSValue(value)])
    }

    public typealias Element = String
    public func makeIterator() -> ValueIterableIterator<Headers> {
        ValueIterableIterator(sequence: self)
    }
}

public class History: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.History].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        _scrollRestoration = ReadWriteAttribute(jsObject: jsObject, name: Strings.scrollRestoration)
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @ReadWriteAttribute
    public var scrollRestoration: ScrollRestoration

    @ReadonlyAttribute
    public var state: JSValue

    @inlinable public func go(delta: Int32? = nil) {
        let this = jsObject
        _ = this[Strings.go].function!(this: this, arguments: [_toJSValue(delta)])
    }

    @inlinable public func back() {
        let this = jsObject
        _ = this[Strings.back].function!(this: this, arguments: [])
    }

    @inlinable public func forward() {
        let this = jsObject
        _ = this[Strings.forward].function!(this: this, arguments: [])
    }

    @inlinable public func pushState(data: JSValue, unused: String, url: String? = nil) {
        let this = jsObject
        _ = this[Strings.pushState].function!(this: this, arguments: [_toJSValue(data), _toJSValue(unused), _toJSValue(url)])
    }

    @inlinable public func replaceState(data: JSValue, unused: String, url: String? = nil) {
        let this = jsObject
        _ = this[Strings.replaceState].function!(this: this, arguments: [_toJSValue(data), _toJSValue(unused), _toJSValue(url)])
    }
}

public class ImageBitmap: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ImageBitmap].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _width = ReadonlyAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadonlyAttribute(jsObject: jsObject, name: Strings.height)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var width: UInt32

    @ReadonlyAttribute
    public var height: UInt32

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }
}

public class ImageBitmapOptions: BridgedDictionary {
    public convenience init(imageOrientation: ImageOrientation, premultiplyAlpha: PremultiplyAlpha, colorSpaceConversion: ColorSpaceConversion, resizeWidth: UInt32, resizeHeight: UInt32, resizeQuality: ResizeQuality) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.imageOrientation] = _toJSValue(imageOrientation)
        object[Strings.premultiplyAlpha] = _toJSValue(premultiplyAlpha)
        object[Strings.colorSpaceConversion] = _toJSValue(colorSpaceConversion)
        object[Strings.resizeWidth] = _toJSValue(resizeWidth)
        object[Strings.resizeHeight] = _toJSValue(resizeHeight)
        object[Strings.resizeQuality] = _toJSValue(resizeQuality)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _imageOrientation = ReadWriteAttribute(jsObject: object, name: Strings.imageOrientation)
        _premultiplyAlpha = ReadWriteAttribute(jsObject: object, name: Strings.premultiplyAlpha)
        _colorSpaceConversion = ReadWriteAttribute(jsObject: object, name: Strings.colorSpaceConversion)
        _resizeWidth = ReadWriteAttribute(jsObject: object, name: Strings.resizeWidth)
        _resizeHeight = ReadWriteAttribute(jsObject: object, name: Strings.resizeHeight)
        _resizeQuality = ReadWriteAttribute(jsObject: object, name: Strings.resizeQuality)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var imageOrientation: ImageOrientation

    @ReadWriteAttribute
    public var premultiplyAlpha: PremultiplyAlpha

    @ReadWriteAttribute
    public var colorSpaceConversion: ColorSpaceConversion

    @ReadWriteAttribute
    public var resizeWidth: UInt32

    @ReadWriteAttribute
    public var resizeHeight: UInt32

    @ReadWriteAttribute
    public var resizeQuality: ResizeQuality
}

public class ImageBitmapRenderingContext: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ImageBitmapRenderingContext].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _canvas = ReadonlyAttribute(jsObject: jsObject, name: Strings.canvas)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var canvas: HTMLCanvasElement_or_OffscreenCanvas

    @inlinable public func transferFromImageBitmap(bitmap: ImageBitmap?) {
        let this = jsObject
        _ = this[Strings.transferFromImageBitmap].function!(this: this, arguments: [_toJSValue(bitmap)])
    }
}

public class ImageBitmapRenderingContextSettings: BridgedDictionary {
    public convenience init(alpha: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.alpha] = _toJSValue(alpha)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _alpha = ReadWriteAttribute(jsObject: object, name: Strings.alpha)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var alpha: Bool
}

public class ImageData: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ImageData].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _width = ReadonlyAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadonlyAttribute(jsObject: jsObject, name: Strings.height)
        _data = ReadonlyAttribute(jsObject: jsObject, name: Strings.data)
        _colorSpace = ReadonlyAttribute(jsObject: jsObject, name: Strings.colorSpace)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(sw: UInt32, sh: UInt32, settings: ImageDataSettings? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(sw), _toJSValue(sh), _toJSValue(settings)]))
    }

    @inlinable public convenience init(data: Uint8ClampedArray, sw: UInt32, sh: UInt32? = nil, settings: ImageDataSettings? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(data), _toJSValue(sw), _toJSValue(sh), _toJSValue(settings)]))
    }

    @ReadonlyAttribute
    public var width: UInt32

    @ReadonlyAttribute
    public var height: UInt32

    @ReadonlyAttribute
    public var data: Uint8ClampedArray

    @ReadonlyAttribute
    public var colorSpace: PredefinedColorSpace
}

public class ImageDataSettings: BridgedDictionary {
    public convenience init(colorSpace: PredefinedColorSpace) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.colorSpace] = _toJSValue(colorSpace)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _colorSpace = ReadWriteAttribute(jsObject: object, name: Strings.colorSpace)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var colorSpace: PredefinedColorSpace
}

public class ImageDecodeOptions: BridgedDictionary {
    public convenience init(frameIndex: UInt32, completeFramesOnly: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.frameIndex] = _toJSValue(frameIndex)
        object[Strings.completeFramesOnly] = _toJSValue(completeFramesOnly)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _frameIndex = ReadWriteAttribute(jsObject: object, name: Strings.frameIndex)
        _completeFramesOnly = ReadWriteAttribute(jsObject: object, name: Strings.completeFramesOnly)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var frameIndex: UInt32

    @ReadWriteAttribute
    public var completeFramesOnly: Bool
}

public class ImageDecodeResult: BridgedDictionary {
    public convenience init(image: VideoFrame, complete: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.image] = _toJSValue(image)
        object[Strings.complete] = _toJSValue(complete)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _image = ReadWriteAttribute(jsObject: object, name: Strings.image)
        _complete = ReadWriteAttribute(jsObject: object, name: Strings.complete)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var image: VideoFrame

    @ReadWriteAttribute
    public var complete: Bool
}

public class ImageDecoder: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ImageDecoder].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _complete = ReadonlyAttribute(jsObject: jsObject, name: Strings.complete)
        _completed = ReadonlyAttribute(jsObject: jsObject, name: Strings.completed)
        _tracks = ReadonlyAttribute(jsObject: jsObject, name: Strings.tracks)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(init: ImageDecoderInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var type: String

    @ReadonlyAttribute
    public var complete: Bool

    @ReadonlyAttribute
    public var completed: JSPromise

    @ReadonlyAttribute
    public var tracks: ImageTrackList

    @inlinable public func decode(options: ImageDecodeOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.decode].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func decode(options: ImageDecodeOptions? = nil) async throws -> ImageDecodeResult {
        let this = jsObject
        let _promise: JSPromise = this[Strings.decode].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func reset() {
        let this = jsObject
        _ = this[Strings.reset].function!(this: this, arguments: [])
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @inlinable public class func isTypeSupported(type: String) -> JSPromise {
        let this = constructor!
        return this[Strings.isTypeSupported].function!(this: this, arguments: [_toJSValue(type)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public class func isTypeSupported(type: String) async throws -> Bool {
        let this = constructor!
        let _promise: JSPromise = this[Strings.isTypeSupported].function!(this: this, arguments: [_toJSValue(type)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public class ImageDecoderInit: BridgedDictionary {
    public convenience init(type: String, data: ImageBufferSource, colorSpaceConversion: ColorSpaceConversion, desiredWidth: UInt32, desiredHeight: UInt32, preferAnimation: Bool, transfer: [ArrayBuffer]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.type] = _toJSValue(type)
        object[Strings.data] = _toJSValue(data)
        object[Strings.colorSpaceConversion] = _toJSValue(colorSpaceConversion)
        object[Strings.desiredWidth] = _toJSValue(desiredWidth)
        object[Strings.desiredHeight] = _toJSValue(desiredHeight)
        object[Strings.preferAnimation] = _toJSValue(preferAnimation)
        object[Strings.transfer] = _toJSValue(transfer)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        _data = ReadWriteAttribute(jsObject: object, name: Strings.data)
        _colorSpaceConversion = ReadWriteAttribute(jsObject: object, name: Strings.colorSpaceConversion)
        _desiredWidth = ReadWriteAttribute(jsObject: object, name: Strings.desiredWidth)
        _desiredHeight = ReadWriteAttribute(jsObject: object, name: Strings.desiredHeight)
        _preferAnimation = ReadWriteAttribute(jsObject: object, name: Strings.preferAnimation)
        _transfer = ReadWriteAttribute(jsObject: object, name: Strings.transfer)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var data: ImageBufferSource

    @ReadWriteAttribute
    public var colorSpaceConversion: ColorSpaceConversion

    @ReadWriteAttribute
    public var desiredWidth: UInt32

    @ReadWriteAttribute
    public var desiredHeight: UInt32

    @ReadWriteAttribute
    public var preferAnimation: Bool

    @ReadWriteAttribute
    public var transfer: [ArrayBuffer]
}

public class ImageEncodeOptions: BridgedDictionary {
    public convenience init(type: String, quality: Double) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.type] = _toJSValue(type)
        object[Strings.quality] = _toJSValue(quality)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        _quality = ReadWriteAttribute(jsObject: object, name: Strings.quality)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var quality: Double
}

public enum ImageOrientation: JSString, JSValueCompatible {
    case fromImage = "from-image"
    case flipY = "flipY"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum ImageSmoothingQuality: JSString, JSValueCompatible {
    case low = "low"
    case medium = "medium"
    case high = "high"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class ImageTrack: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ImageTrack].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _animated = ReadonlyAttribute(jsObject: jsObject, name: Strings.animated)
        _frameCount = ReadonlyAttribute(jsObject: jsObject, name: Strings.frameCount)
        _repetitionCount = ReadonlyAttribute(jsObject: jsObject, name: Strings.repetitionCount)
        _selected = ReadWriteAttribute(jsObject: jsObject, name: Strings.selected)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var animated: Bool

    @ReadonlyAttribute
    public var frameCount: UInt32

    @ReadonlyAttribute
    public var repetitionCount: Float

    @ReadWriteAttribute
    public var selected: Bool
}

public class ImageTrackList: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ImageTrackList].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _ready = ReadonlyAttribute(jsObject: jsObject, name: Strings.ready)
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        _selectedIndex = ReadonlyAttribute(jsObject: jsObject, name: Strings.selectedIndex)
        _selectedTrack = ReadonlyAttribute(jsObject: jsObject, name: Strings.selectedTrack)
        self.jsObject = jsObject
    }

    @inlinable public subscript(key: Int) -> ImageTrack {
        jsObject[key].fromJSValue()!
    }

    @ReadonlyAttribute
    public var ready: JSPromise

    @ReadonlyAttribute
    public var length: UInt32

    @ReadonlyAttribute
    public var selectedIndex: Int32

    @ReadonlyAttribute
    public var selectedTrack: ImageTrack?
}

public class InputDeviceInfo: MediaDeviceInfo {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.InputDeviceInfo].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public func getCapabilities() -> MediaTrackCapabilities {
        let this = jsObject
        return this[Strings.getCapabilities].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class InputEvent: UIEvent {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.InputEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _data = ReadonlyAttribute(jsObject: jsObject, name: Strings.data)
        _isComposing = ReadonlyAttribute(jsObject: jsObject, name: Strings.isComposing)
        _inputType = ReadonlyAttribute(jsObject: jsObject, name: Strings.inputType)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: InputEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var data: String?

    @ReadonlyAttribute
    public var isComposing: Bool

    @ReadonlyAttribute
    public var inputType: String
}

public class InputEventInit: BridgedDictionary {
    public convenience init(data: String?, isComposing: Bool, inputType: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.data] = _toJSValue(data)
        object[Strings.isComposing] = _toJSValue(isComposing)
        object[Strings.inputType] = _toJSValue(inputType)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _data = ReadWriteAttribute(jsObject: object, name: Strings.data)
        _isComposing = ReadWriteAttribute(jsObject: object, name: Strings.isComposing)
        _inputType = ReadWriteAttribute(jsObject: object, name: Strings.inputType)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var data: String?

    @ReadWriteAttribute
    public var isComposing: Bool

    @ReadWriteAttribute
    public var inputType: String
}

public class KeyboardEvent: UIEvent {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.KeyboardEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _key = ReadonlyAttribute(jsObject: jsObject, name: Strings.key)
        _code = ReadonlyAttribute(jsObject: jsObject, name: Strings.code)
        _location = ReadonlyAttribute(jsObject: jsObject, name: Strings.location)
        _ctrlKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.ctrlKey)
        _shiftKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.shiftKey)
        _altKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.altKey)
        _metaKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.metaKey)
        _repeat = ReadonlyAttribute(jsObject: jsObject, name: Strings.repeat)
        _isComposing = ReadonlyAttribute(jsObject: jsObject, name: Strings.isComposing)
        _charCode = ReadonlyAttribute(jsObject: jsObject, name: Strings.charCode)
        _keyCode = ReadonlyAttribute(jsObject: jsObject, name: Strings.keyCode)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: KeyboardEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    public static let DOM_KEY_LOCATION_STANDARD: UInt32 = 0x00

    public static let DOM_KEY_LOCATION_LEFT: UInt32 = 0x01

    public static let DOM_KEY_LOCATION_RIGHT: UInt32 = 0x02

    public static let DOM_KEY_LOCATION_NUMPAD: UInt32 = 0x03

    @ReadonlyAttribute
    public var key: String

    @ReadonlyAttribute
    public var code: String

    @ReadonlyAttribute
    public var location: UInt32

    @ReadonlyAttribute
    public var ctrlKey: Bool

    @ReadonlyAttribute
    public var shiftKey: Bool

    @ReadonlyAttribute
    public var altKey: Bool

    @ReadonlyAttribute
    public var metaKey: Bool

    @ReadonlyAttribute
    public var `repeat`: Bool

    @ReadonlyAttribute
    public var isComposing: Bool

    @inlinable public func getModifierState(keyArg: String) -> Bool {
        let this = jsObject
        return this[Strings.getModifierState].function!(this: this, arguments: [_toJSValue(keyArg)]).fromJSValue()!
    }

    @inlinable public func initKeyboardEvent(typeArg: String, bubblesArg: Bool? = nil, cancelableArg: Bool? = nil, viewArg: Window? = nil, keyArg: String? = nil, locationArg: UInt32? = nil, ctrlKey: Bool? = nil, altKey: Bool? = nil, shiftKey: Bool? = nil, metaKey: Bool? = nil) {
        let this = jsObject
        _ = this[Strings.initKeyboardEvent].function!(this: this, arguments: [_toJSValue(typeArg), _toJSValue(bubblesArg), _toJSValue(cancelableArg), _toJSValue(viewArg), _toJSValue(keyArg), _toJSValue(locationArg), _toJSValue(ctrlKey), _toJSValue(altKey), _toJSValue(shiftKey), _toJSValue(metaKey)])
    }

    @ReadonlyAttribute
    public var charCode: UInt32

    @ReadonlyAttribute
    public var keyCode: UInt32
}

public class KeyboardEventInit: BridgedDictionary {
    public convenience init(key: String, code: String, location: UInt32, repeat: Bool, isComposing: Bool, charCode: UInt32, keyCode: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.key] = _toJSValue(key)
        object[Strings.code] = _toJSValue(code)
        object[Strings.location] = _toJSValue(location)
        object[Strings.repeat] = _toJSValue(`repeat`)
        object[Strings.isComposing] = _toJSValue(isComposing)
        object[Strings.charCode] = _toJSValue(charCode)
        object[Strings.keyCode] = _toJSValue(keyCode)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _key = ReadWriteAttribute(jsObject: object, name: Strings.key)
        _code = ReadWriteAttribute(jsObject: object, name: Strings.code)
        _location = ReadWriteAttribute(jsObject: object, name: Strings.location)
        _repeat = ReadWriteAttribute(jsObject: object, name: Strings.repeat)
        _isComposing = ReadWriteAttribute(jsObject: object, name: Strings.isComposing)
        _charCode = ReadWriteAttribute(jsObject: object, name: Strings.charCode)
        _keyCode = ReadWriteAttribute(jsObject: object, name: Strings.keyCode)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var key: String

    @ReadWriteAttribute
    public var code: String

    @ReadWriteAttribute
    public var location: UInt32

    @ReadWriteAttribute
    public var `repeat`: Bool

    @ReadWriteAttribute
    public var isComposing: Bool

    @ReadWriteAttribute
    public var charCode: UInt32

    @ReadWriteAttribute
    public var keyCode: UInt32
}

public enum LatencyMode: JSString, JSValueCompatible {
    case quality = "quality"
    case realtime = "realtime"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class Location: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Location].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _href = ReadWriteAttribute(jsObject: jsObject, name: Strings.href)
        _origin = ReadonlyAttribute(jsObject: jsObject, name: Strings.origin)
        _protocol = ReadWriteAttribute(jsObject: jsObject, name: Strings.protocol)
        _host = ReadWriteAttribute(jsObject: jsObject, name: Strings.host)
        _hostname = ReadWriteAttribute(jsObject: jsObject, name: Strings.hostname)
        _port = ReadWriteAttribute(jsObject: jsObject, name: Strings.port)
        _pathname = ReadWriteAttribute(jsObject: jsObject, name: Strings.pathname)
        _search = ReadWriteAttribute(jsObject: jsObject, name: Strings.search)
        _hash = ReadWriteAttribute(jsObject: jsObject, name: Strings.hash)
        _ancestorOrigins = ReadonlyAttribute(jsObject: jsObject, name: Strings.ancestorOrigins)
        self.jsObject = jsObject
    }

    @ReadWriteAttribute
    public var href: String

    @ReadonlyAttribute
    public var origin: String

    @ReadWriteAttribute
    public var `protocol`: String

    @ReadWriteAttribute
    public var host: String

    @ReadWriteAttribute
    public var hostname: String

    @ReadWriteAttribute
    public var port: String

    @ReadWriteAttribute
    public var pathname: String

    @ReadWriteAttribute
    public var search: String

    @ReadWriteAttribute
    public var hash: String

    @inlinable public func assign(url: String) {
        let this = jsObject
        _ = this[Strings.assign].function!(this: this, arguments: [_toJSValue(url)])
    }

    @inlinable public func replace(url: String) {
        let this = jsObject
        _ = this[Strings.replace].function!(this: this, arguments: [_toJSValue(url)])
    }

    @inlinable public func reload() {
        let this = jsObject
        _ = this[Strings.reload].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var ancestorOrigins: DOMStringList
}

public class MathMLElement: Element, GlobalEventHandlers, HTMLOrSVGElement {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MathMLElement].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }
}

public class MediaDeviceInfo: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.MediaDeviceInfo].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _deviceId = ReadonlyAttribute(jsObject: jsObject, name: Strings.deviceId)
        _kind = ReadonlyAttribute(jsObject: jsObject, name: Strings.kind)
        _label = ReadonlyAttribute(jsObject: jsObject, name: Strings.label)
        _groupId = ReadonlyAttribute(jsObject: jsObject, name: Strings.groupId)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var deviceId: String

    @ReadonlyAttribute
    public var kind: MediaDeviceKind

    @ReadonlyAttribute
    public var label: String

    @ReadonlyAttribute
    public var groupId: String

    @inlinable public func toJSON() -> JSObject {
        let this = jsObject
        return this[Strings.toJSON].function!(this: this, arguments: []).fromJSValue()!
    }
}

public enum MediaDeviceKind: JSString, JSValueCompatible {
    case audioinput = "audioinput"
    case audiooutput = "audiooutput"
    case videoinput = "videoinput"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class MediaDevices: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaDevices].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _ondevicechange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.ondevicechange)
        super.init(unsafelyWrapping: jsObject)
    }

    @ClosureAttribute1Optional
    public var ondevicechange: EventHandler

    @inlinable public func enumerateDevices() -> JSPromise {
        let this = jsObject
        return this[Strings.enumerateDevices].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func enumerateDevices() async throws -> [MediaDeviceInfo] {
        let this = jsObject
        let _promise: JSPromise = this[Strings.enumerateDevices].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func getSupportedConstraints() -> MediaTrackSupportedConstraints {
        let this = jsObject
        return this[Strings.getSupportedConstraints].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getUserMedia(constraints: MediaStreamConstraints? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.getUserMedia].function!(this: this, arguments: [_toJSValue(constraints)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func getUserMedia(constraints: MediaStreamConstraints? = nil) async throws -> MediaStream {
        let this = jsObject
        let _promise: JSPromise = this[Strings.getUserMedia].function!(this: this, arguments: [_toJSValue(constraints)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public class MediaError: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.MediaError].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _code = ReadonlyAttribute(jsObject: jsObject, name: Strings.code)
        _message = ReadonlyAttribute(jsObject: jsObject, name: Strings.message)
        self.jsObject = jsObject
    }

    public static let MEDIA_ERR_ABORTED: UInt16 = 1

    public static let MEDIA_ERR_NETWORK: UInt16 = 2

    public static let MEDIA_ERR_DECODE: UInt16 = 3

    public static let MEDIA_ERR_SRC_NOT_SUPPORTED: UInt16 = 4

    @ReadonlyAttribute
    public var code: UInt16

    @ReadonlyAttribute
    public var message: String
}

public class MediaQueryList: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaQueryList].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _media = ReadonlyAttribute(jsObject: jsObject, name: Strings.media)
        _matches = ReadonlyAttribute(jsObject: jsObject, name: Strings.matches)
        _onchange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onchange)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var media: String

    @ReadonlyAttribute
    public var matches: Bool

    @inlinable public func addListener(callback: EventListener?) {
        let this = jsObject
        _ = this[Strings.addListener].function!(this: this, arguments: [_toJSValue(callback)])
    }

    @inlinable public func removeListener(callback: EventListener?) {
        let this = jsObject
        _ = this[Strings.removeListener].function!(this: this, arguments: [_toJSValue(callback)])
    }

    @ClosureAttribute1Optional
    public var onchange: EventHandler
}

public class MediaQueryListEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaQueryListEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _media = ReadonlyAttribute(jsObject: jsObject, name: Strings.media)
        _matches = ReadonlyAttribute(jsObject: jsObject, name: Strings.matches)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: MediaQueryListEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var media: String

    @ReadonlyAttribute
    public var matches: Bool
}

public class MediaQueryListEventInit: BridgedDictionary {
    public convenience init(media: String, matches: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.media] = _toJSValue(media)
        object[Strings.matches] = _toJSValue(matches)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _media = ReadWriteAttribute(jsObject: object, name: Strings.media)
        _matches = ReadWriteAttribute(jsObject: object, name: Strings.matches)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var media: String

    @ReadWriteAttribute
    public var matches: Bool
}

public class MediaRecorder: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaRecorder].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _stream = ReadonlyAttribute(jsObject: jsObject, name: Strings.stream)
        _mimeType = ReadonlyAttribute(jsObject: jsObject, name: Strings.mimeType)
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _onstart = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onstart)
        _onstop = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onstop)
        _ondataavailable = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.ondataavailable)
        _onpause = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onpause)
        _onresume = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onresume)
        _onerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onerror)
        _videoBitsPerSecond = ReadonlyAttribute(jsObject: jsObject, name: Strings.videoBitsPerSecond)
        _audioBitsPerSecond = ReadonlyAttribute(jsObject: jsObject, name: Strings.audioBitsPerSecond)
        _audioBitrateMode = ReadonlyAttribute(jsObject: jsObject, name: Strings.audioBitrateMode)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(stream: MediaStream, options: MediaRecorderOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(stream), _toJSValue(options)]))
    }

    @ReadonlyAttribute
    public var stream: MediaStream

    @ReadonlyAttribute
    public var mimeType: String

    @ReadonlyAttribute
    public var state: RecordingState

    @ClosureAttribute1Optional
    public var onstart: EventHandler

    @ClosureAttribute1Optional
    public var onstop: EventHandler

    @ClosureAttribute1Optional
    public var ondataavailable: EventHandler

    @ClosureAttribute1Optional
    public var onpause: EventHandler

    @ClosureAttribute1Optional
    public var onresume: EventHandler

    @ClosureAttribute1Optional
    public var onerror: EventHandler

    @ReadonlyAttribute
    public var videoBitsPerSecond: UInt32

    @ReadonlyAttribute
    public var audioBitsPerSecond: UInt32

    @ReadonlyAttribute
    public var audioBitrateMode: BitrateMode

    @inlinable public func start(timeslice: UInt32? = nil) {
        let this = jsObject
        _ = this[Strings.start].function!(this: this, arguments: [_toJSValue(timeslice)])
    }

    @inlinable public func stop() {
        let this = jsObject
        _ = this[Strings.stop].function!(this: this, arguments: [])
    }

    @inlinable public func pause() {
        let this = jsObject
        _ = this[Strings.pause].function!(this: this, arguments: [])
    }

    @inlinable public func resume() {
        let this = jsObject
        _ = this[Strings.resume].function!(this: this, arguments: [])
    }

    @inlinable public func requestData() {
        let this = jsObject
        _ = this[Strings.requestData].function!(this: this, arguments: [])
    }

    @inlinable public class func isTypeSupported(type: String) -> Bool {
        let this = constructor!
        return this[Strings.isTypeSupported].function!(this: this, arguments: [_toJSValue(type)]).fromJSValue()!
    }
}

public class MediaRecorderOptions: BridgedDictionary {
    public convenience init(mimeType: String, audioBitsPerSecond: UInt32, videoBitsPerSecond: UInt32, bitsPerSecond: UInt32, audioBitrateMode: BitrateMode, videoKeyFrameIntervalDuration: DOMHighResTimeStamp, videoKeyFrameIntervalCount: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.mimeType] = _toJSValue(mimeType)
        object[Strings.audioBitsPerSecond] = _toJSValue(audioBitsPerSecond)
        object[Strings.videoBitsPerSecond] = _toJSValue(videoBitsPerSecond)
        object[Strings.bitsPerSecond] = _toJSValue(bitsPerSecond)
        object[Strings.audioBitrateMode] = _toJSValue(audioBitrateMode)
        object[Strings.videoKeyFrameIntervalDuration] = _toJSValue(videoKeyFrameIntervalDuration)
        object[Strings.videoKeyFrameIntervalCount] = _toJSValue(videoKeyFrameIntervalCount)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _mimeType = ReadWriteAttribute(jsObject: object, name: Strings.mimeType)
        _audioBitsPerSecond = ReadWriteAttribute(jsObject: object, name: Strings.audioBitsPerSecond)
        _videoBitsPerSecond = ReadWriteAttribute(jsObject: object, name: Strings.videoBitsPerSecond)
        _bitsPerSecond = ReadWriteAttribute(jsObject: object, name: Strings.bitsPerSecond)
        _audioBitrateMode = ReadWriteAttribute(jsObject: object, name: Strings.audioBitrateMode)
        _videoKeyFrameIntervalDuration = ReadWriteAttribute(jsObject: object, name: Strings.videoKeyFrameIntervalDuration)
        _videoKeyFrameIntervalCount = ReadWriteAttribute(jsObject: object, name: Strings.videoKeyFrameIntervalCount)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var mimeType: String

    @ReadWriteAttribute
    public var audioBitsPerSecond: UInt32

    @ReadWriteAttribute
    public var videoBitsPerSecond: UInt32

    @ReadWriteAttribute
    public var bitsPerSecond: UInt32

    @ReadWriteAttribute
    public var audioBitrateMode: BitrateMode

    @ReadWriteAttribute
    public var videoKeyFrameIntervalDuration: DOMHighResTimeStamp

    @ReadWriteAttribute
    public var videoKeyFrameIntervalCount: UInt32
}

public class MediaSource: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaSource].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _handle = ReadonlyAttribute(jsObject: jsObject, name: Strings.handle)
        _sourceBuffers = ReadonlyAttribute(jsObject: jsObject, name: Strings.sourceBuffers)
        _activeSourceBuffers = ReadonlyAttribute(jsObject: jsObject, name: Strings.activeSourceBuffers)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _duration = ReadWriteAttribute(jsObject: jsObject, name: Strings.duration)
        _onsourceopen = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsourceopen)
        _onsourceended = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsourceended)
        _onsourceclose = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsourceclose)
        _canConstructInDedicatedWorker = ReadonlyAttribute(jsObject: jsObject, name: Strings.canConstructInDedicatedWorker)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var handle: MediaSourceHandle

    @ReadonlyAttribute
    public var sourceBuffers: SourceBufferList

    @ReadonlyAttribute
    public var activeSourceBuffers: SourceBufferList

    @ReadonlyAttribute
    public var readyState: ReadyState

    @ReadWriteAttribute
    public var duration: Double

    @ClosureAttribute1Optional
    public var onsourceopen: EventHandler

    @ClosureAttribute1Optional
    public var onsourceended: EventHandler

    @ClosureAttribute1Optional
    public var onsourceclose: EventHandler

    @ReadonlyAttribute
    public var canConstructInDedicatedWorker: Bool

    @inlinable public func addSourceBuffer(type: String) -> SourceBuffer {
        let this = jsObject
        return this[Strings.addSourceBuffer].function!(this: this, arguments: [_toJSValue(type)]).fromJSValue()!
    }

    @inlinable public func removeSourceBuffer(sourceBuffer: SourceBuffer) {
        let this = jsObject
        _ = this[Strings.removeSourceBuffer].function!(this: this, arguments: [_toJSValue(sourceBuffer)])
    }

    @inlinable public func endOfStream(error: EndOfStreamError? = nil) {
        let this = jsObject
        _ = this[Strings.endOfStream].function!(this: this, arguments: [_toJSValue(error)])
    }

    @inlinable public func setLiveSeekableRange(start: Double, end: Double) {
        let this = jsObject
        _ = this[Strings.setLiveSeekableRange].function!(this: this, arguments: [_toJSValue(start), _toJSValue(end)])
    }

    @inlinable public func clearLiveSeekableRange() {
        let this = jsObject
        _ = this[Strings.clearLiveSeekableRange].function!(this: this, arguments: [])
    }

    @inlinable public class func isTypeSupported(type: String) -> Bool {
        let this = constructor!
        return this[Strings.isTypeSupported].function!(this: this, arguments: [_toJSValue(type)]).fromJSValue()!
    }
}

public class MediaSourceHandle: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.MediaSourceHandle].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }
}

public class MediaStream: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaStream].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _active = ReadonlyAttribute(jsObject: jsObject, name: Strings.active)
        _onaddtrack = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onaddtrack)
        _onremovetrack = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onremovetrack)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @inlinable public convenience init(stream: MediaStream) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(stream)]))
    }

    @inlinable public convenience init(tracks: [MediaStreamTrack]) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(tracks)]))
    }

    @ReadonlyAttribute
    public var id: String

    @inlinable public func getAudioTracks() -> [MediaStreamTrack] {
        let this = jsObject
        return this[Strings.getAudioTracks].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getVideoTracks() -> [MediaStreamTrack] {
        let this = jsObject
        return this[Strings.getVideoTracks].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getTracks() -> [MediaStreamTrack] {
        let this = jsObject
        return this[Strings.getTracks].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getTrackById(trackId: String) -> MediaStreamTrack? {
        let this = jsObject
        return this[Strings.getTrackById].function!(this: this, arguments: [_toJSValue(trackId)]).fromJSValue()
    }

    @inlinable public func addTrack(track: MediaStreamTrack) {
        let this = jsObject
        _ = this[Strings.addTrack].function!(this: this, arguments: [_toJSValue(track)])
    }

    @inlinable public func removeTrack(track: MediaStreamTrack) {
        let this = jsObject
        _ = this[Strings.removeTrack].function!(this: this, arguments: [_toJSValue(track)])
    }

    @inlinable public func clone() -> Self {
        let this = jsObject
        return this[Strings.clone].function!(this: this, arguments: []).fromJSValue()!
    }

    @ReadonlyAttribute
    public var active: Bool

    @ClosureAttribute1Optional
    public var onaddtrack: EventHandler

    @ClosureAttribute1Optional
    public var onremovetrack: EventHandler
}

public class MediaStreamConstraints: BridgedDictionary {
    public convenience init(video: Bool_or_MediaTrackConstraints, audio: Bool_or_MediaTrackConstraints) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.video] = _toJSValue(video)
        object[Strings.audio] = _toJSValue(audio)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _video = ReadWriteAttribute(jsObject: object, name: Strings.video)
        _audio = ReadWriteAttribute(jsObject: object, name: Strings.audio)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var video: Bool_or_MediaTrackConstraints

    @ReadWriteAttribute
    public var audio: Bool_or_MediaTrackConstraints
}

public class MediaStreamTrack: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaStreamTrack].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _kind = ReadonlyAttribute(jsObject: jsObject, name: Strings.kind)
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _label = ReadonlyAttribute(jsObject: jsObject, name: Strings.label)
        _enabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.enabled)
        _muted = ReadonlyAttribute(jsObject: jsObject, name: Strings.muted)
        _onmute = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onmute)
        _onunmute = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onunmute)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _onended = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onended)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var kind: String

    @ReadonlyAttribute
    public var id: String

    @ReadonlyAttribute
    public var label: String

    @ReadWriteAttribute
    public var enabled: Bool

    @ReadonlyAttribute
    public var muted: Bool

    @ClosureAttribute1Optional
    public var onmute: EventHandler

    @ClosureAttribute1Optional
    public var onunmute: EventHandler

    @ReadonlyAttribute
    public var readyState: MediaStreamTrackState

    @ClosureAttribute1Optional
    public var onended: EventHandler

    @inlinable public func clone() -> Self {
        let this = jsObject
        return this[Strings.clone].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func stop() {
        let this = jsObject
        _ = this[Strings.stop].function!(this: this, arguments: [])
    }

    @inlinable public func getCapabilities() -> MediaTrackCapabilities {
        let this = jsObject
        return this[Strings.getCapabilities].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getConstraints() -> MediaTrackConstraints {
        let this = jsObject
        return this[Strings.getConstraints].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getSettings() -> MediaTrackSettings {
        let this = jsObject
        return this[Strings.getSettings].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func applyConstraints(constraints: MediaTrackConstraints? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.applyConstraints].function!(this: this, arguments: [_toJSValue(constraints)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func applyConstraints(constraints: MediaTrackConstraints? = nil) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.applyConstraints].function!(this: this, arguments: [_toJSValue(constraints)]).fromJSValue()!
        _ = try await _promise.value
    }
}

public class MediaStreamTrackEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MediaStreamTrackEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _track = ReadonlyAttribute(jsObject: jsObject, name: Strings.track)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: MediaStreamTrackEventInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var track: MediaStreamTrack
}

public class MediaStreamTrackEventInit: BridgedDictionary {
    public convenience init(track: MediaStreamTrack) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.track] = _toJSValue(track)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _track = ReadWriteAttribute(jsObject: object, name: Strings.track)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var track: MediaStreamTrack
}

public enum MediaStreamTrackState: JSString, JSValueCompatible {
    case live = "live"
    case ended = "ended"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class MediaTrackCapabilities: BridgedDictionary {
    public convenience init(width: ULongRange, height: ULongRange, aspectRatio: DoubleRange, frameRate: DoubleRange, facingMode: [String], resizeMode: [String], sampleRate: ULongRange, sampleSize: ULongRange, echoCancellation: [Bool], autoGainControl: [Bool], noiseSuppression: [Bool], latency: DoubleRange, channelCount: ULongRange, deviceId: String, groupId: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.width] = _toJSValue(width)
        object[Strings.height] = _toJSValue(height)
        object[Strings.aspectRatio] = _toJSValue(aspectRatio)
        object[Strings.frameRate] = _toJSValue(frameRate)
        object[Strings.facingMode] = _toJSValue(facingMode)
        object[Strings.resizeMode] = _toJSValue(resizeMode)
        object[Strings.sampleRate] = _toJSValue(sampleRate)
        object[Strings.sampleSize] = _toJSValue(sampleSize)
        object[Strings.echoCancellation] = _toJSValue(echoCancellation)
        object[Strings.autoGainControl] = _toJSValue(autoGainControl)
        object[Strings.noiseSuppression] = _toJSValue(noiseSuppression)
        object[Strings.latency] = _toJSValue(latency)
        object[Strings.channelCount] = _toJSValue(channelCount)
        object[Strings.deviceId] = _toJSValue(deviceId)
        object[Strings.groupId] = _toJSValue(groupId)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _width = ReadWriteAttribute(jsObject: object, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: object, name: Strings.height)
        _aspectRatio = ReadWriteAttribute(jsObject: object, name: Strings.aspectRatio)
        _frameRate = ReadWriteAttribute(jsObject: object, name: Strings.frameRate)
        _facingMode = ReadWriteAttribute(jsObject: object, name: Strings.facingMode)
        _resizeMode = ReadWriteAttribute(jsObject: object, name: Strings.resizeMode)
        _sampleRate = ReadWriteAttribute(jsObject: object, name: Strings.sampleRate)
        _sampleSize = ReadWriteAttribute(jsObject: object, name: Strings.sampleSize)
        _echoCancellation = ReadWriteAttribute(jsObject: object, name: Strings.echoCancellation)
        _autoGainControl = ReadWriteAttribute(jsObject: object, name: Strings.autoGainControl)
        _noiseSuppression = ReadWriteAttribute(jsObject: object, name: Strings.noiseSuppression)
        _latency = ReadWriteAttribute(jsObject: object, name: Strings.latency)
        _channelCount = ReadWriteAttribute(jsObject: object, name: Strings.channelCount)
        _deviceId = ReadWriteAttribute(jsObject: object, name: Strings.deviceId)
        _groupId = ReadWriteAttribute(jsObject: object, name: Strings.groupId)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var width: ULongRange

    @ReadWriteAttribute
    public var height: ULongRange

    @ReadWriteAttribute
    public var aspectRatio: DoubleRange

    @ReadWriteAttribute
    public var frameRate: DoubleRange

    @ReadWriteAttribute
    public var facingMode: [String]

    @ReadWriteAttribute
    public var resizeMode: [String]

    @ReadWriteAttribute
    public var sampleRate: ULongRange

    @ReadWriteAttribute
    public var sampleSize: ULongRange

    @ReadWriteAttribute
    public var echoCancellation: [Bool]

    @ReadWriteAttribute
    public var autoGainControl: [Bool]

    @ReadWriteAttribute
    public var noiseSuppression: [Bool]

    @ReadWriteAttribute
    public var latency: DoubleRange

    @ReadWriteAttribute
    public var channelCount: ULongRange

    @ReadWriteAttribute
    public var deviceId: String

    @ReadWriteAttribute
    public var groupId: String
}

public class MediaTrackConstraintSet: BridgedDictionary {
    public convenience init(width: ConstrainULong, height: ConstrainULong, aspectRatio: ConstrainDouble, frameRate: ConstrainDouble, facingMode: ConstrainDOMString, resizeMode: ConstrainDOMString, sampleRate: ConstrainULong, sampleSize: ConstrainULong, echoCancellation: ConstrainBoolean, autoGainControl: ConstrainBoolean, noiseSuppression: ConstrainBoolean, latency: ConstrainDouble, channelCount: ConstrainULong, deviceId: ConstrainDOMString, groupId: ConstrainDOMString) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.width] = _toJSValue(width)
        object[Strings.height] = _toJSValue(height)
        object[Strings.aspectRatio] = _toJSValue(aspectRatio)
        object[Strings.frameRate] = _toJSValue(frameRate)
        object[Strings.facingMode] = _toJSValue(facingMode)
        object[Strings.resizeMode] = _toJSValue(resizeMode)
        object[Strings.sampleRate] = _toJSValue(sampleRate)
        object[Strings.sampleSize] = _toJSValue(sampleSize)
        object[Strings.echoCancellation] = _toJSValue(echoCancellation)
        object[Strings.autoGainControl] = _toJSValue(autoGainControl)
        object[Strings.noiseSuppression] = _toJSValue(noiseSuppression)
        object[Strings.latency] = _toJSValue(latency)
        object[Strings.channelCount] = _toJSValue(channelCount)
        object[Strings.deviceId] = _toJSValue(deviceId)
        object[Strings.groupId] = _toJSValue(groupId)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _width = ReadWriteAttribute(jsObject: object, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: object, name: Strings.height)
        _aspectRatio = ReadWriteAttribute(jsObject: object, name: Strings.aspectRatio)
        _frameRate = ReadWriteAttribute(jsObject: object, name: Strings.frameRate)
        _facingMode = ReadWriteAttribute(jsObject: object, name: Strings.facingMode)
        _resizeMode = ReadWriteAttribute(jsObject: object, name: Strings.resizeMode)
        _sampleRate = ReadWriteAttribute(jsObject: object, name: Strings.sampleRate)
        _sampleSize = ReadWriteAttribute(jsObject: object, name: Strings.sampleSize)
        _echoCancellation = ReadWriteAttribute(jsObject: object, name: Strings.echoCancellation)
        _autoGainControl = ReadWriteAttribute(jsObject: object, name: Strings.autoGainControl)
        _noiseSuppression = ReadWriteAttribute(jsObject: object, name: Strings.noiseSuppression)
        _latency = ReadWriteAttribute(jsObject: object, name: Strings.latency)
        _channelCount = ReadWriteAttribute(jsObject: object, name: Strings.channelCount)
        _deviceId = ReadWriteAttribute(jsObject: object, name: Strings.deviceId)
        _groupId = ReadWriteAttribute(jsObject: object, name: Strings.groupId)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var width: ConstrainULong

    @ReadWriteAttribute
    public var height: ConstrainULong

    @ReadWriteAttribute
    public var aspectRatio: ConstrainDouble

    @ReadWriteAttribute
    public var frameRate: ConstrainDouble

    @ReadWriteAttribute
    public var facingMode: ConstrainDOMString

    @ReadWriteAttribute
    public var resizeMode: ConstrainDOMString

    @ReadWriteAttribute
    public var sampleRate: ConstrainULong

    @ReadWriteAttribute
    public var sampleSize: ConstrainULong

    @ReadWriteAttribute
    public var echoCancellation: ConstrainBoolean

    @ReadWriteAttribute
    public var autoGainControl: ConstrainBoolean

    @ReadWriteAttribute
    public var noiseSuppression: ConstrainBoolean

    @ReadWriteAttribute
    public var latency: ConstrainDouble

    @ReadWriteAttribute
    public var channelCount: ConstrainULong

    @ReadWriteAttribute
    public var deviceId: ConstrainDOMString

    @ReadWriteAttribute
    public var groupId: ConstrainDOMString
}

public class MediaTrackConstraints: BridgedDictionary {
    public convenience init(advanced: [MediaTrackConstraintSet]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.advanced] = _toJSValue(advanced)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _advanced = ReadWriteAttribute(jsObject: object, name: Strings.advanced)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var advanced: [MediaTrackConstraintSet]
}

public class MediaTrackSettings: BridgedDictionary {
    public convenience init(width: UInt32, height: UInt32, aspectRatio: Double, frameRate: Double, facingMode: String, resizeMode: String, sampleRate: UInt32, sampleSize: UInt32, echoCancellation: Bool, autoGainControl: Bool, noiseSuppression: Bool, latency: Double, channelCount: UInt32, deviceId: String, groupId: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.width] = _toJSValue(width)
        object[Strings.height] = _toJSValue(height)
        object[Strings.aspectRatio] = _toJSValue(aspectRatio)
        object[Strings.frameRate] = _toJSValue(frameRate)
        object[Strings.facingMode] = _toJSValue(facingMode)
        object[Strings.resizeMode] = _toJSValue(resizeMode)
        object[Strings.sampleRate] = _toJSValue(sampleRate)
        object[Strings.sampleSize] = _toJSValue(sampleSize)
        object[Strings.echoCancellation] = _toJSValue(echoCancellation)
        object[Strings.autoGainControl] = _toJSValue(autoGainControl)
        object[Strings.noiseSuppression] = _toJSValue(noiseSuppression)
        object[Strings.latency] = _toJSValue(latency)
        object[Strings.channelCount] = _toJSValue(channelCount)
        object[Strings.deviceId] = _toJSValue(deviceId)
        object[Strings.groupId] = _toJSValue(groupId)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _width = ReadWriteAttribute(jsObject: object, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: object, name: Strings.height)
        _aspectRatio = ReadWriteAttribute(jsObject: object, name: Strings.aspectRatio)
        _frameRate = ReadWriteAttribute(jsObject: object, name: Strings.frameRate)
        _facingMode = ReadWriteAttribute(jsObject: object, name: Strings.facingMode)
        _resizeMode = ReadWriteAttribute(jsObject: object, name: Strings.resizeMode)
        _sampleRate = ReadWriteAttribute(jsObject: object, name: Strings.sampleRate)
        _sampleSize = ReadWriteAttribute(jsObject: object, name: Strings.sampleSize)
        _echoCancellation = ReadWriteAttribute(jsObject: object, name: Strings.echoCancellation)
        _autoGainControl = ReadWriteAttribute(jsObject: object, name: Strings.autoGainControl)
        _noiseSuppression = ReadWriteAttribute(jsObject: object, name: Strings.noiseSuppression)
        _latency = ReadWriteAttribute(jsObject: object, name: Strings.latency)
        _channelCount = ReadWriteAttribute(jsObject: object, name: Strings.channelCount)
        _deviceId = ReadWriteAttribute(jsObject: object, name: Strings.deviceId)
        _groupId = ReadWriteAttribute(jsObject: object, name: Strings.groupId)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var width: UInt32

    @ReadWriteAttribute
    public var height: UInt32

    @ReadWriteAttribute
    public var aspectRatio: Double

    @ReadWriteAttribute
    public var frameRate: Double

    @ReadWriteAttribute
    public var facingMode: String

    @ReadWriteAttribute
    public var resizeMode: String

    @ReadWriteAttribute
    public var sampleRate: UInt32

    @ReadWriteAttribute
    public var sampleSize: UInt32

    @ReadWriteAttribute
    public var echoCancellation: Bool

    @ReadWriteAttribute
    public var autoGainControl: Bool

    @ReadWriteAttribute
    public var noiseSuppression: Bool

    @ReadWriteAttribute
    public var latency: Double

    @ReadWriteAttribute
    public var channelCount: UInt32

    @ReadWriteAttribute
    public var deviceId: String

    @ReadWriteAttribute
    public var groupId: String
}

public class MediaTrackSupportedConstraints: BridgedDictionary {
    public convenience init(width: Bool, height: Bool, aspectRatio: Bool, frameRate: Bool, facingMode: Bool, resizeMode: Bool, sampleRate: Bool, sampleSize: Bool, echoCancellation: Bool, autoGainControl: Bool, noiseSuppression: Bool, latency: Bool, channelCount: Bool, deviceId: Bool, groupId: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.width] = _toJSValue(width)
        object[Strings.height] = _toJSValue(height)
        object[Strings.aspectRatio] = _toJSValue(aspectRatio)
        object[Strings.frameRate] = _toJSValue(frameRate)
        object[Strings.facingMode] = _toJSValue(facingMode)
        object[Strings.resizeMode] = _toJSValue(resizeMode)
        object[Strings.sampleRate] = _toJSValue(sampleRate)
        object[Strings.sampleSize] = _toJSValue(sampleSize)
        object[Strings.echoCancellation] = _toJSValue(echoCancellation)
        object[Strings.autoGainControl] = _toJSValue(autoGainControl)
        object[Strings.noiseSuppression] = _toJSValue(noiseSuppression)
        object[Strings.latency] = _toJSValue(latency)
        object[Strings.channelCount] = _toJSValue(channelCount)
        object[Strings.deviceId] = _toJSValue(deviceId)
        object[Strings.groupId] = _toJSValue(groupId)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _width = ReadWriteAttribute(jsObject: object, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: object, name: Strings.height)
        _aspectRatio = ReadWriteAttribute(jsObject: object, name: Strings.aspectRatio)
        _frameRate = ReadWriteAttribute(jsObject: object, name: Strings.frameRate)
        _facingMode = ReadWriteAttribute(jsObject: object, name: Strings.facingMode)
        _resizeMode = ReadWriteAttribute(jsObject: object, name: Strings.resizeMode)
        _sampleRate = ReadWriteAttribute(jsObject: object, name: Strings.sampleRate)
        _sampleSize = ReadWriteAttribute(jsObject: object, name: Strings.sampleSize)
        _echoCancellation = ReadWriteAttribute(jsObject: object, name: Strings.echoCancellation)
        _autoGainControl = ReadWriteAttribute(jsObject: object, name: Strings.autoGainControl)
        _noiseSuppression = ReadWriteAttribute(jsObject: object, name: Strings.noiseSuppression)
        _latency = ReadWriteAttribute(jsObject: object, name: Strings.latency)
        _channelCount = ReadWriteAttribute(jsObject: object, name: Strings.channelCount)
        _deviceId = ReadWriteAttribute(jsObject: object, name: Strings.deviceId)
        _groupId = ReadWriteAttribute(jsObject: object, name: Strings.groupId)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var width: Bool

    @ReadWriteAttribute
    public var height: Bool

    @ReadWriteAttribute
    public var aspectRatio: Bool

    @ReadWriteAttribute
    public var frameRate: Bool

    @ReadWriteAttribute
    public var facingMode: Bool

    @ReadWriteAttribute
    public var resizeMode: Bool

    @ReadWriteAttribute
    public var sampleRate: Bool

    @ReadWriteAttribute
    public var sampleSize: Bool

    @ReadWriteAttribute
    public var echoCancellation: Bool

    @ReadWriteAttribute
    public var autoGainControl: Bool

    @ReadWriteAttribute
    public var noiseSuppression: Bool

    @ReadWriteAttribute
    public var latency: Bool

    @ReadWriteAttribute
    public var channelCount: Bool

    @ReadWriteAttribute
    public var deviceId: Bool

    @ReadWriteAttribute
    public var groupId: Bool
}

public class MessageChannel: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.MessageChannel].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _port1 = ReadonlyAttribute(jsObject: jsObject, name: Strings.port1)
        _port2 = ReadonlyAttribute(jsObject: jsObject, name: Strings.port2)
        self.jsObject = jsObject
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var port1: MessagePort

    @ReadonlyAttribute
    public var port2: MessagePort
}

public class MessageEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MessageEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _data = ReadonlyAttribute(jsObject: jsObject, name: Strings.data)
        _origin = ReadonlyAttribute(jsObject: jsObject, name: Strings.origin)
        _lastEventId = ReadonlyAttribute(jsObject: jsObject, name: Strings.lastEventId)
        _source = ReadonlyAttribute(jsObject: jsObject, name: Strings.source)
        _ports = ReadonlyAttribute(jsObject: jsObject, name: Strings.ports)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: MessageEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var data: JSValue

    @ReadonlyAttribute
    public var origin: String

    @ReadonlyAttribute
    public var lastEventId: String

    @ReadonlyAttribute
    public var source: MessageEventSource?

    @ReadonlyAttribute
    public var ports: [MessagePort]

    @inlinable public func initMessageEvent(type: String, bubbles: Bool? = nil, cancelable: Bool? = nil, data: JSValue? = nil, origin: String? = nil, lastEventId: String? = nil, source: MessageEventSource? = nil, ports: [MessagePort]? = nil) {
        let this = jsObject
        _ = this[Strings.initMessageEvent].function!(this: this, arguments: [_toJSValue(type), _toJSValue(bubbles), _toJSValue(cancelable), _toJSValue(data), _toJSValue(origin), _toJSValue(lastEventId), _toJSValue(source), _toJSValue(ports)])
    }
}

public class MessageEventInit: BridgedDictionary {
    public convenience init(data: JSValue, origin: String, lastEventId: String, source: MessageEventSource?, ports: [MessagePort]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.data] = _toJSValue(data)
        object[Strings.origin] = _toJSValue(origin)
        object[Strings.lastEventId] = _toJSValue(lastEventId)
        object[Strings.source] = _toJSValue(source)
        object[Strings.ports] = _toJSValue(ports)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _data = ReadWriteAttribute(jsObject: object, name: Strings.data)
        _origin = ReadWriteAttribute(jsObject: object, name: Strings.origin)
        _lastEventId = ReadWriteAttribute(jsObject: object, name: Strings.lastEventId)
        _source = ReadWriteAttribute(jsObject: object, name: Strings.source)
        _ports = ReadWriteAttribute(jsObject: object, name: Strings.ports)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var data: JSValue

    @ReadWriteAttribute
    public var origin: String

    @ReadWriteAttribute
    public var lastEventId: String

    @ReadWriteAttribute
    public var source: MessageEventSource?

    @ReadWriteAttribute
    public var ports: [MessagePort]
}

public class MessagePort: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MessagePort].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _onmessage = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onmessage)
        _onmessageerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onmessageerror)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public func postMessage(message: JSValue, transfer: [JSObject]) {
        let this = jsObject
        _ = this[Strings.postMessage].function!(this: this, arguments: [_toJSValue(message), _toJSValue(transfer)])
    }

    @inlinable public func postMessage(message: JSValue, options: StructuredSerializeOptions? = nil) {
        let this = jsObject
        _ = this[Strings.postMessage].function!(this: this, arguments: [_toJSValue(message), _toJSValue(options)])
    }

    @inlinable public func start() {
        let this = jsObject
        _ = this[Strings.start].function!(this: this, arguments: [])
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @ClosureAttribute1Optional
    public var onmessage: EventHandler

    @ClosureAttribute1Optional
    public var onmessageerror: EventHandler
}

public class MimeType: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.MimeType].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _description = ReadonlyAttribute(jsObject: jsObject, name: Strings.description)
        _suffixes = ReadonlyAttribute(jsObject: jsObject, name: Strings.suffixes)
        _enabledPlugin = ReadonlyAttribute(jsObject: jsObject, name: Strings.enabledPlugin)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var type: String

    @ReadonlyAttribute
    public var description: String

    @ReadonlyAttribute
    public var suffixes: String

    @ReadonlyAttribute
    public var enabledPlugin: Plugin
}

public class MimeTypeArray: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.MimeTypeArray].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> MimeType? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func item(index: UInt32) -> MimeType? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }

    @inlinable public subscript(key: String) -> MimeType? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func namedItem(name: String) -> MimeType? {
        let this = jsObject
        return this[Strings.namedItem].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()
    }
}

public class MouseEvent: UIEvent {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MouseEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _screenX = ReadonlyAttribute(jsObject: jsObject, name: Strings.screenX)
        _screenY = ReadonlyAttribute(jsObject: jsObject, name: Strings.screenY)
        _clientX = ReadonlyAttribute(jsObject: jsObject, name: Strings.clientX)
        _clientY = ReadonlyAttribute(jsObject: jsObject, name: Strings.clientY)
        _ctrlKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.ctrlKey)
        _shiftKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.shiftKey)
        _altKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.altKey)
        _metaKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.metaKey)
        _button = ReadonlyAttribute(jsObject: jsObject, name: Strings.button)
        _buttons = ReadonlyAttribute(jsObject: jsObject, name: Strings.buttons)
        _relatedTarget = ReadonlyAttribute(jsObject: jsObject, name: Strings.relatedTarget)
        _pageX = ReadonlyAttribute(jsObject: jsObject, name: Strings.pageX)
        _pageY = ReadonlyAttribute(jsObject: jsObject, name: Strings.pageY)
        _x = ReadonlyAttribute(jsObject: jsObject, name: Strings.x)
        _y = ReadonlyAttribute(jsObject: jsObject, name: Strings.y)
        _offsetX = ReadonlyAttribute(jsObject: jsObject, name: Strings.offsetX)
        _offsetY = ReadonlyAttribute(jsObject: jsObject, name: Strings.offsetY)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: MouseEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var screenX: Int32

    @ReadonlyAttribute
    public var screenY: Int32

    @ReadonlyAttribute
    public var clientX: Int32

    @ReadonlyAttribute
    public var clientY: Int32

    @ReadonlyAttribute
    public var ctrlKey: Bool

    @ReadonlyAttribute
    public var shiftKey: Bool

    @ReadonlyAttribute
    public var altKey: Bool

    @ReadonlyAttribute
    public var metaKey: Bool

    @ReadonlyAttribute
    public var button: Int16

    @ReadonlyAttribute
    public var buttons: UInt16

    @ReadonlyAttribute
    public var relatedTarget: EventTarget?

    @inlinable public func getModifierState(keyArg: String) -> Bool {
        let this = jsObject
        return this[Strings.getModifierState].function!(this: this, arguments: [_toJSValue(keyArg)]).fromJSValue()!
    }

    @inlinable public func initMouseEvent(typeArg: String, bubblesArg: Bool? = nil, cancelableArg: Bool? = nil, viewArg: Window? = nil, detailArg: Int32? = nil, screenXArg: Int32? = nil, screenYArg: Int32? = nil, clientXArg: Int32? = nil, clientYArg: Int32? = nil, ctrlKeyArg: Bool? = nil, altKeyArg: Bool? = nil, shiftKeyArg: Bool? = nil, metaKeyArg: Bool? = nil, buttonArg: Int16? = nil, relatedTargetArg: EventTarget? = nil) {
        let this = jsObject
        _ = this[Strings.initMouseEvent].function!(this: this, arguments: [_toJSValue(typeArg), _toJSValue(bubblesArg), _toJSValue(cancelableArg), _toJSValue(viewArg), _toJSValue(detailArg), _toJSValue(screenXArg), _toJSValue(screenYArg), _toJSValue(clientXArg), _toJSValue(clientYArg), _toJSValue(ctrlKeyArg), _toJSValue(altKeyArg), _toJSValue(shiftKeyArg), _toJSValue(metaKeyArg), _toJSValue(buttonArg), _toJSValue(relatedTargetArg)])
    }

    @ReadonlyAttribute
    public var pageX: Double

    @ReadonlyAttribute
    public var pageY: Double

    @ReadonlyAttribute
    public var x: Double

    @ReadonlyAttribute
    public var y: Double

    @ReadonlyAttribute
    public var offsetX: Double

    @ReadonlyAttribute
    public var offsetY: Double
}

public class MouseEventInit: BridgedDictionary {
    public convenience init(screenX: Int32, screenY: Int32, clientX: Int32, clientY: Int32, button: Int16, buttons: UInt16, relatedTarget: EventTarget?) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.screenX] = _toJSValue(screenX)
        object[Strings.screenY] = _toJSValue(screenY)
        object[Strings.clientX] = _toJSValue(clientX)
        object[Strings.clientY] = _toJSValue(clientY)
        object[Strings.button] = _toJSValue(button)
        object[Strings.buttons] = _toJSValue(buttons)
        object[Strings.relatedTarget] = _toJSValue(relatedTarget)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _screenX = ReadWriteAttribute(jsObject: object, name: Strings.screenX)
        _screenY = ReadWriteAttribute(jsObject: object, name: Strings.screenY)
        _clientX = ReadWriteAttribute(jsObject: object, name: Strings.clientX)
        _clientY = ReadWriteAttribute(jsObject: object, name: Strings.clientY)
        _button = ReadWriteAttribute(jsObject: object, name: Strings.button)
        _buttons = ReadWriteAttribute(jsObject: object, name: Strings.buttons)
        _relatedTarget = ReadWriteAttribute(jsObject: object, name: Strings.relatedTarget)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var screenX: Int32

    @ReadWriteAttribute
    public var screenY: Int32

    @ReadWriteAttribute
    public var clientX: Int32

    @ReadWriteAttribute
    public var clientY: Int32

    @ReadWriteAttribute
    public var button: Int16

    @ReadWriteAttribute
    public var buttons: UInt16

    @ReadWriteAttribute
    public var relatedTarget: EventTarget?
}

public class MultiCacheQueryOptions: BridgedDictionary {
    public convenience init(cacheName: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.cacheName] = _toJSValue(cacheName)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _cacheName = ReadWriteAttribute(jsObject: object, name: Strings.cacheName)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var cacheName: String
}

public class MutationEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.MutationEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _relatedNode = ReadonlyAttribute(jsObject: jsObject, name: Strings.relatedNode)
        _prevValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.prevValue)
        _newValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.newValue)
        _attrName = ReadonlyAttribute(jsObject: jsObject, name: Strings.attrName)
        _attrChange = ReadonlyAttribute(jsObject: jsObject, name: Strings.attrChange)
        super.init(unsafelyWrapping: jsObject)
    }

    public static let MODIFICATION: UInt16 = 1

    public static let ADDITION: UInt16 = 2

    public static let REMOVAL: UInt16 = 3

    @ReadonlyAttribute
    public var relatedNode: Node?

    @ReadonlyAttribute
    public var prevValue: String

    @ReadonlyAttribute
    public var newValue: String

    @ReadonlyAttribute
    public var attrName: String

    @ReadonlyAttribute
    public var attrChange: UInt16

    @inlinable public func initMutationEvent(typeArg: String, bubblesArg: Bool? = nil, cancelableArg: Bool? = nil, relatedNodeArg: Node? = nil, prevValueArg: String? = nil, newValueArg: String? = nil, attrNameArg: String? = nil, attrChangeArg: UInt16? = nil) {
        let this = jsObject
        _ = this[Strings.initMutationEvent].function!(this: this, arguments: [_toJSValue(typeArg), _toJSValue(bubblesArg), _toJSValue(cancelableArg), _toJSValue(relatedNodeArg), _toJSValue(prevValueArg), _toJSValue(newValueArg), _toJSValue(attrNameArg), _toJSValue(attrChangeArg)])
    }
}

public class MutationObserver: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.MutationObserver].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public convenience init(callback: @escaping MutationCallback) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(callback)]))
    }

    @inlinable public func observe(target: Node, options: MutationObserverInit? = nil) {
        let this = jsObject
        _ = this[Strings.observe].function!(this: this, arguments: [_toJSValue(target), _toJSValue(options)])
    }

    @inlinable public func disconnect() {
        let this = jsObject
        _ = this[Strings.disconnect].function!(this: this, arguments: [])
    }

    @inlinable public func takeRecords() -> [MutationRecord] {
        let this = jsObject
        return this[Strings.takeRecords].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class MutationObserverInit: BridgedDictionary {
    public convenience init(childList: Bool, attributes: Bool, characterData: Bool, subtree: Bool, attributeOldValue: Bool, characterDataOldValue: Bool, attributeFilter: [String]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.childList] = _toJSValue(childList)
        object[Strings.attributes] = _toJSValue(attributes)
        object[Strings.characterData] = _toJSValue(characterData)
        object[Strings.subtree] = _toJSValue(subtree)
        object[Strings.attributeOldValue] = _toJSValue(attributeOldValue)
        object[Strings.characterDataOldValue] = _toJSValue(characterDataOldValue)
        object[Strings.attributeFilter] = _toJSValue(attributeFilter)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _childList = ReadWriteAttribute(jsObject: object, name: Strings.childList)
        _attributes = ReadWriteAttribute(jsObject: object, name: Strings.attributes)
        _characterData = ReadWriteAttribute(jsObject: object, name: Strings.characterData)
        _subtree = ReadWriteAttribute(jsObject: object, name: Strings.subtree)
        _attributeOldValue = ReadWriteAttribute(jsObject: object, name: Strings.attributeOldValue)
        _characterDataOldValue = ReadWriteAttribute(jsObject: object, name: Strings.characterDataOldValue)
        _attributeFilter = ReadWriteAttribute(jsObject: object, name: Strings.attributeFilter)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var childList: Bool

    @ReadWriteAttribute
    public var attributes: Bool

    @ReadWriteAttribute
    public var characterData: Bool

    @ReadWriteAttribute
    public var subtree: Bool

    @ReadWriteAttribute
    public var attributeOldValue: Bool

    @ReadWriteAttribute
    public var characterDataOldValue: Bool

    @ReadWriteAttribute
    public var attributeFilter: [String]
}

public class MutationRecord: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.MutationRecord].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _target = ReadonlyAttribute(jsObject: jsObject, name: Strings.target)
        _addedNodes = ReadonlyAttribute(jsObject: jsObject, name: Strings.addedNodes)
        _removedNodes = ReadonlyAttribute(jsObject: jsObject, name: Strings.removedNodes)
        _previousSibling = ReadonlyAttribute(jsObject: jsObject, name: Strings.previousSibling)
        _nextSibling = ReadonlyAttribute(jsObject: jsObject, name: Strings.nextSibling)
        _attributeName = ReadonlyAttribute(jsObject: jsObject, name: Strings.attributeName)
        _attributeNamespace = ReadonlyAttribute(jsObject: jsObject, name: Strings.attributeNamespace)
        _oldValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.oldValue)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var type: String

    @ReadonlyAttribute
    public var target: Node

    @ReadonlyAttribute
    public var addedNodes: NodeList

    @ReadonlyAttribute
    public var removedNodes: NodeList

    @ReadonlyAttribute
    public var previousSibling: Node?

    @ReadonlyAttribute
    public var nextSibling: Node?

    @ReadonlyAttribute
    public var attributeName: String?

    @ReadonlyAttribute
    public var attributeNamespace: String?

    @ReadonlyAttribute
    public var oldValue: String?
}

public class NamedNodeMap: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.NamedNodeMap].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> Attr? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func item(index: UInt32) -> Attr? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }

    @inlinable public subscript(key: String) -> Attr? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func getNamedItem(qualifiedName: String) -> Attr? {
        let this = jsObject
        return this[Strings.getNamedItem].function!(this: this, arguments: [_toJSValue(qualifiedName)]).fromJSValue()
    }

    @inlinable public func getNamedItemNS(namespace: String?, localName: String) -> Attr? {
        let this = jsObject
        return this[Strings.getNamedItemNS].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(localName)]).fromJSValue()
    }

    @inlinable public func setNamedItem(attr: Attr) -> Attr? {
        let this = jsObject
        return this[Strings.setNamedItem].function!(this: this, arguments: [_toJSValue(attr)]).fromJSValue()
    }

    @inlinable public func setNamedItemNS(attr: Attr) -> Attr? {
        let this = jsObject
        return this[Strings.setNamedItemNS].function!(this: this, arguments: [_toJSValue(attr)]).fromJSValue()
    }

    @inlinable public func removeNamedItem(qualifiedName: String) -> Attr {
        let this = jsObject
        return this[Strings.removeNamedItem].function!(this: this, arguments: [_toJSValue(qualifiedName)]).fromJSValue()!
    }

    @inlinable public func removeNamedItemNS(namespace: String?, localName: String) -> Attr {
        let this = jsObject
        return this[Strings.removeNamedItemNS].function!(this: this, arguments: [_toJSValue(namespace), _toJSValue(localName)]).fromJSValue()!
    }
}

public class NavigateEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.NavigateEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _navigationType = ReadonlyAttribute(jsObject: jsObject, name: Strings.navigationType)
        _destination = ReadonlyAttribute(jsObject: jsObject, name: Strings.destination)
        _canIntercept = ReadonlyAttribute(jsObject: jsObject, name: Strings.canIntercept)
        _userInitiated = ReadonlyAttribute(jsObject: jsObject, name: Strings.userInitiated)
        _hashChange = ReadonlyAttribute(jsObject: jsObject, name: Strings.hashChange)
        _signal = ReadonlyAttribute(jsObject: jsObject, name: Strings.signal)
        _formData = ReadonlyAttribute(jsObject: jsObject, name: Strings.formData)
        _downloadRequest = ReadonlyAttribute(jsObject: jsObject, name: Strings.downloadRequest)
        _info = ReadonlyAttribute(jsObject: jsObject, name: Strings.info)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: NavigateEventInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var navigationType: NavigationType

    @ReadonlyAttribute
    public var destination: NavigationDestination

    @ReadonlyAttribute
    public var canIntercept: Bool

    @ReadonlyAttribute
    public var userInitiated: Bool

    @ReadonlyAttribute
    public var hashChange: Bool

    @ReadonlyAttribute
    public var signal: AbortSignal

    @ReadonlyAttribute
    public var formData: FormData?

    @ReadonlyAttribute
    public var downloadRequest: String?

    @ReadonlyAttribute
    public var info: JSValue

    @inlinable public func intercept(options: NavigationInterceptOptions? = nil) {
        let this = jsObject
        _ = this[Strings.intercept].function!(this: this, arguments: [_toJSValue(options)])
    }

    @inlinable public func scroll() {
        let this = jsObject
        _ = this[Strings.scroll].function!(this: this, arguments: [])
    }
}

public class NavigateEventInit: BridgedDictionary {
    public convenience init(navigationType: NavigationType, destination: NavigationDestination, canIntercept: Bool, userInitiated: Bool, hashChange: Bool, signal: AbortSignal, formData: FormData?, downloadRequest: String?, info: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.navigationType] = _toJSValue(navigationType)
        object[Strings.destination] = _toJSValue(destination)
        object[Strings.canIntercept] = _toJSValue(canIntercept)
        object[Strings.userInitiated] = _toJSValue(userInitiated)
        object[Strings.hashChange] = _toJSValue(hashChange)
        object[Strings.signal] = _toJSValue(signal)
        object[Strings.formData] = _toJSValue(formData)
        object[Strings.downloadRequest] = _toJSValue(downloadRequest)
        object[Strings.info] = _toJSValue(info)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _navigationType = ReadWriteAttribute(jsObject: object, name: Strings.navigationType)
        _destination = ReadWriteAttribute(jsObject: object, name: Strings.destination)
        _canIntercept = ReadWriteAttribute(jsObject: object, name: Strings.canIntercept)
        _userInitiated = ReadWriteAttribute(jsObject: object, name: Strings.userInitiated)
        _hashChange = ReadWriteAttribute(jsObject: object, name: Strings.hashChange)
        _signal = ReadWriteAttribute(jsObject: object, name: Strings.signal)
        _formData = ReadWriteAttribute(jsObject: object, name: Strings.formData)
        _downloadRequest = ReadWriteAttribute(jsObject: object, name: Strings.downloadRequest)
        _info = ReadWriteAttribute(jsObject: object, name: Strings.info)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var navigationType: NavigationType

    @ReadWriteAttribute
    public var destination: NavigationDestination

    @ReadWriteAttribute
    public var canIntercept: Bool

    @ReadWriteAttribute
    public var userInitiated: Bool

    @ReadWriteAttribute
    public var hashChange: Bool

    @ReadWriteAttribute
    public var signal: AbortSignal

    @ReadWriteAttribute
    public var formData: FormData?

    @ReadWriteAttribute
    public var downloadRequest: String?

    @ReadWriteAttribute
    public var info: JSValue
}

public class Navigation: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.Navigation].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _currentEntry = ReadonlyAttribute(jsObject: jsObject, name: Strings.currentEntry)
        _transition = ReadonlyAttribute(jsObject: jsObject, name: Strings.transition)
        _canGoBack = ReadonlyAttribute(jsObject: jsObject, name: Strings.canGoBack)
        _canGoForward = ReadonlyAttribute(jsObject: jsObject, name: Strings.canGoForward)
        _onnavigate = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onnavigate)
        _onnavigatesuccess = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onnavigatesuccess)
        _onnavigateerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onnavigateerror)
        _oncurrententrychange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.oncurrententrychange)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public func entries() -> [NavigationHistoryEntry] {
        let this = jsObject
        return this[Strings.entries].function!(this: this, arguments: []).fromJSValue()!
    }

    @ReadonlyAttribute
    public var currentEntry: NavigationHistoryEntry?

    @inlinable public func updateCurrentEntry(options: NavigationUpdateCurrentEntryOptions) {
        let this = jsObject
        _ = this[Strings.updateCurrentEntry].function!(this: this, arguments: [_toJSValue(options)])
    }

    @ReadonlyAttribute
    public var transition: NavigationTransition?

    @ReadonlyAttribute
    public var canGoBack: Bool

    @ReadonlyAttribute
    public var canGoForward: Bool

    @inlinable public func navigate(url: String, options: NavigationNavigateOptions? = nil) -> NavigationResult {
        let this = jsObject
        return this[Strings.navigate].function!(this: this, arguments: [_toJSValue(url), _toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func reload(options: NavigationReloadOptions? = nil) -> NavigationResult {
        let this = jsObject
        return this[Strings.reload].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func traverseTo(key: String, options: NavigationOptions? = nil) -> NavigationResult {
        let this = jsObject
        return this[Strings.traverseTo].function!(this: this, arguments: [_toJSValue(key), _toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func back(options: NavigationOptions? = nil) -> NavigationResult {
        let this = jsObject
        return this[Strings.back].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func forward(options: NavigationOptions? = nil) -> NavigationResult {
        let this = jsObject
        return this[Strings.forward].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @ClosureAttribute1Optional
    public var onnavigate: EventHandler

    @ClosureAttribute1Optional
    public var onnavigatesuccess: EventHandler

    @ClosureAttribute1Optional
    public var onnavigateerror: EventHandler

    @ClosureAttribute1Optional
    public var oncurrententrychange: EventHandler
}

public class NavigationCurrentEntryChangeEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.NavigationCurrentEntryChangeEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _navigationType = ReadonlyAttribute(jsObject: jsObject, name: Strings.navigationType)
        _from = ReadonlyAttribute(jsObject: jsObject, name: Strings.from)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: NavigationCurrentEntryChangeEventInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var navigationType: NavigationType?

    @ReadonlyAttribute
    public var from: NavigationHistoryEntry
}

public class NavigationCurrentEntryChangeEventInit: BridgedDictionary {
    public convenience init(navigationType: NavigationType?, from: NavigationHistoryEntry) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.navigationType] = _toJSValue(navigationType)
        object[Strings.from] = _toJSValue(from)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _navigationType = ReadWriteAttribute(jsObject: object, name: Strings.navigationType)
        _from = ReadWriteAttribute(jsObject: object, name: Strings.from)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var navigationType: NavigationType?

    @ReadWriteAttribute
    public var from: NavigationHistoryEntry
}

public class NavigationDestination: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.NavigationDestination].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _url = ReadonlyAttribute(jsObject: jsObject, name: Strings.url)
        _key = ReadonlyAttribute(jsObject: jsObject, name: Strings.key)
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _index = ReadonlyAttribute(jsObject: jsObject, name: Strings.index)
        _sameDocument = ReadonlyAttribute(jsObject: jsObject, name: Strings.sameDocument)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var url: String

    @ReadonlyAttribute
    public var key: String

    @ReadonlyAttribute
    public var id: String

    @ReadonlyAttribute
    public var index: Int64

    @ReadonlyAttribute
    public var sameDocument: Bool

    @inlinable public func getState() -> JSValue {
        let this = jsObject
        return this[Strings.getState].function!(this: this, arguments: []).fromJSValue()!
    }
}

public enum NavigationFocusReset: JSString, JSValueCompatible {
    case afterTransition = "after-transition"
    case manual = "manual"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum NavigationHistoryBehavior: JSString, JSValueCompatible {
    case auto = "auto"
    case push = "push"
    case replace = "replace"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class NavigationHistoryEntry: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.NavigationHistoryEntry].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _url = ReadonlyAttribute(jsObject: jsObject, name: Strings.url)
        _key = ReadonlyAttribute(jsObject: jsObject, name: Strings.key)
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _index = ReadonlyAttribute(jsObject: jsObject, name: Strings.index)
        _sameDocument = ReadonlyAttribute(jsObject: jsObject, name: Strings.sameDocument)
        _ondispose = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.ondispose)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var url: String?

    @ReadonlyAttribute
    public var key: String

    @ReadonlyAttribute
    public var id: String

    @ReadonlyAttribute
    public var index: Int64

    @ReadonlyAttribute
    public var sameDocument: Bool

    @inlinable public func getState() -> JSValue {
        let this = jsObject
        return this[Strings.getState].function!(this: this, arguments: []).fromJSValue()!
    }

    @ClosureAttribute1Optional
    public var ondispose: EventHandler
}

public class NavigationInterceptOptions: BridgedDictionary {
    public convenience init(handler: @escaping NavigationInterceptHandler, focusReset: NavigationFocusReset, scroll: NavigationScrollBehavior) {
        let object = JSObject.global[Strings.Object].function!.new()
        ClosureAttribute0[Strings.handler, in: object] = handler
        object[Strings.focusReset] = _toJSValue(focusReset)
        object[Strings.scroll] = _toJSValue(scroll)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _handler = ClosureAttribute0(jsObject: object, name: Strings.handler)
        _focusReset = ReadWriteAttribute(jsObject: object, name: Strings.focusReset)
        _scroll = ReadWriteAttribute(jsObject: object, name: Strings.scroll)
        super.init(unsafelyWrapping: object)
    }

    @ClosureAttribute0
    public var handler: NavigationInterceptHandler

    @ReadWriteAttribute
    public var focusReset: NavigationFocusReset

    @ReadWriteAttribute
    public var scroll: NavigationScrollBehavior
}

public class NavigationNavigateOptions: BridgedDictionary {
    public convenience init(state: JSValue, history: NavigationHistoryBehavior) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.state] = _toJSValue(state)
        object[Strings.history] = _toJSValue(history)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _state = ReadWriteAttribute(jsObject: object, name: Strings.state)
        _history = ReadWriteAttribute(jsObject: object, name: Strings.history)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var state: JSValue

    @ReadWriteAttribute
    public var history: NavigationHistoryBehavior
}

public class NavigationOptions: BridgedDictionary {
    public convenience init(info: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.info] = _toJSValue(info)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _info = ReadWriteAttribute(jsObject: object, name: Strings.info)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var info: JSValue
}

public class NavigationPreloadManager: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.NavigationPreloadManager].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func enable() -> JSPromise {
        let this = jsObject
        return this[Strings.enable].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func enable() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.enable].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func disable() -> JSPromise {
        let this = jsObject
        return this[Strings.disable].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func disable() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.disable].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func setHeaderValue(value: String) -> JSPromise {
        let this = jsObject
        return this[Strings.setHeaderValue].function!(this: this, arguments: [_toJSValue(value)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func setHeaderValue(value: String) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.setHeaderValue].function!(this: this, arguments: [_toJSValue(value)]).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func getState() -> JSPromise {
        let this = jsObject
        return this[Strings.getState].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func getState() async throws -> NavigationPreloadState {
        let this = jsObject
        let _promise: JSPromise = this[Strings.getState].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public class NavigationPreloadState: BridgedDictionary {
    public convenience init(enabled: Bool, headerValue: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.enabled] = _toJSValue(enabled)
        object[Strings.headerValue] = _toJSValue(headerValue)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _enabled = ReadWriteAttribute(jsObject: object, name: Strings.enabled)
        _headerValue = ReadWriteAttribute(jsObject: object, name: Strings.headerValue)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var enabled: Bool

    @ReadWriteAttribute
    public var headerValue: String
}

public class NavigationReloadOptions: BridgedDictionary {
    public convenience init(state: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.state] = _toJSValue(state)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _state = ReadWriteAttribute(jsObject: object, name: Strings.state)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var state: JSValue
}

public class NavigationResult: BridgedDictionary {
    public convenience init(committed: JSPromise, finished: JSPromise) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.committed] = _toJSValue(committed)
        object[Strings.finished] = _toJSValue(finished)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _committed = ReadWriteAttribute(jsObject: object, name: Strings.committed)
        _finished = ReadWriteAttribute(jsObject: object, name: Strings.finished)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var committed: JSPromise

    @ReadWriteAttribute
    public var finished: JSPromise
}

public enum NavigationScrollBehavior: JSString, JSValueCompatible {
    case afterTransition = "after-transition"
    case manual = "manual"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class NavigationTransition: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.NavigationTransition].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _navigationType = ReadonlyAttribute(jsObject: jsObject, name: Strings.navigationType)
        _from = ReadonlyAttribute(jsObject: jsObject, name: Strings.from)
        _finished = ReadonlyAttribute(jsObject: jsObject, name: Strings.finished)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var navigationType: NavigationType

    @ReadonlyAttribute
    public var from: NavigationHistoryEntry

    @ReadonlyAttribute
    public var finished: JSPromise
}

public enum NavigationType: JSString, JSValueCompatible {
    case push = "push"
    case replace = "replace"
    case reload = "reload"
    case traverse = "traverse"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class NavigationUpdateCurrentEntryOptions: BridgedDictionary {
    public convenience init(state: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.state] = _toJSValue(state)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _state = ReadWriteAttribute(jsObject: object, name: Strings.state)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var state: JSValue
}

public class Navigator: JSBridgedClass, NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Navigator].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _userActivation = ReadonlyAttribute(jsObject: jsObject, name: Strings.userActivation)
        _mediaDevices = ReadonlyAttribute(jsObject: jsObject, name: Strings.mediaDevices)
        _serviceWorker = ReadonlyAttribute(jsObject: jsObject, name: Strings.serviceWorker)
        _permissions = ReadonlyAttribute(jsObject: jsObject, name: Strings.permissions)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var userActivation: UserActivation

    @ReadonlyAttribute
    public var mediaDevices: MediaDevices

    @inlinable public func getUserMedia(constraints: MediaStreamConstraints, successCallback: @escaping NavigatorUserMediaSuccessCallback, errorCallback: @escaping NavigatorUserMediaErrorCallback) {
        let this = jsObject
        _ = this[Strings.getUserMedia].function!(this: this, arguments: [_toJSValue(constraints), _toJSValue(successCallback), _toJSValue(errorCallback)])
    }

    @ReadonlyAttribute
    public var serviceWorker: ServiceWorkerContainer

    @ReadonlyAttribute
    public var permissions: Permissions
}

public protocol NavigatorConcurrentHardware: JSBridgedClass {}
public extension NavigatorConcurrentHardware {
    @inlinable var hardwareConcurrency: UInt64 { jsObject[Strings.hardwareConcurrency].fromJSValue()! }
}

public protocol NavigatorContentUtils: JSBridgedClass {}
public extension NavigatorContentUtils {
    @inlinable func registerProtocolHandler(scheme: String, url: String) {
        let this = jsObject
        _ = this[Strings.registerProtocolHandler].function!(this: this, arguments: [_toJSValue(scheme), _toJSValue(url)])
    }

    @inlinable func unregisterProtocolHandler(scheme: String, url: String) {
        let this = jsObject
        _ = this[Strings.unregisterProtocolHandler].function!(this: this, arguments: [_toJSValue(scheme), _toJSValue(url)])
    }
}

public protocol NavigatorCookies: JSBridgedClass {}
public extension NavigatorCookies {
    @inlinable var cookieEnabled: Bool { jsObject[Strings.cookieEnabled].fromJSValue()! }
}

public protocol NavigatorID: JSBridgedClass {}
public extension NavigatorID {
    @inlinable var appCodeName: String { jsObject[Strings.appCodeName].fromJSValue()! }

    @inlinable var appName: String { jsObject[Strings.appName].fromJSValue()! }

    @inlinable var appVersion: String { jsObject[Strings.appVersion].fromJSValue()! }

    @inlinable var platform: String { jsObject[Strings.platform].fromJSValue()! }

    @inlinable var product: String { jsObject[Strings.product].fromJSValue()! }

    @inlinable var productSub: String { jsObject[Strings.productSub].fromJSValue()! }

    @inlinable var userAgent: String { jsObject[Strings.userAgent].fromJSValue()! }

    @inlinable var vendor: String { jsObject[Strings.vendor].fromJSValue()! }

    @inlinable var vendorSub: String { jsObject[Strings.vendorSub].fromJSValue()! }

    @inlinable func taintEnabled() -> Bool {
        let this = jsObject
        return this[Strings.taintEnabled].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable var oscpu: String { jsObject[Strings.oscpu].fromJSValue()! }
}

public protocol NavigatorLanguage: JSBridgedClass {}
public extension NavigatorLanguage {
    @inlinable var language: String { jsObject[Strings.language].fromJSValue()! }

    @inlinable var languages: [String] { jsObject[Strings.languages].fromJSValue()! }
}

public protocol NavigatorOnLine: JSBridgedClass {}
public extension NavigatorOnLine {
    @inlinable var onLine: Bool { jsObject[Strings.onLine].fromJSValue()! }
}

public protocol NavigatorPlugins: JSBridgedClass {}
public extension NavigatorPlugins {
    @inlinable var plugins: PluginArray { jsObject[Strings.plugins].fromJSValue()! }

    @inlinable var mimeTypes: MimeTypeArray { jsObject[Strings.mimeTypes].fromJSValue()! }

    @inlinable func javaEnabled() -> Bool {
        let this = jsObject
        return this[Strings.javaEnabled].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable var pdfViewerEnabled: Bool { jsObject[Strings.pdfViewerEnabled].fromJSValue()! }
}

open class Node: EventTarget {
    @inlinable override open class var constructor: JSFunction? { JSObject.global[Strings.Node].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _nodeType = ReadonlyAttribute(jsObject: jsObject, name: Strings.nodeType)
        _nodeName = ReadonlyAttribute(jsObject: jsObject, name: Strings.nodeName)
        _baseURI = ReadonlyAttribute(jsObject: jsObject, name: Strings.baseURI)
        _isConnected = ReadonlyAttribute(jsObject: jsObject, name: Strings.isConnected)
        _ownerDocument = ReadonlyAttribute(jsObject: jsObject, name: Strings.ownerDocument)
        _parentNode = ReadonlyAttribute(jsObject: jsObject, name: Strings.parentNode)
        _parentElement = ReadonlyAttribute(jsObject: jsObject, name: Strings.parentElement)
        _childNodes = ReadonlyAttribute(jsObject: jsObject, name: Strings.childNodes)
        _firstChild = ReadonlyAttribute(jsObject: jsObject, name: Strings.firstChild)
        _lastChild = ReadonlyAttribute(jsObject: jsObject, name: Strings.lastChild)
        _previousSibling = ReadonlyAttribute(jsObject: jsObject, name: Strings.previousSibling)
        _nextSibling = ReadonlyAttribute(jsObject: jsObject, name: Strings.nextSibling)
        _nodeValue = ReadWriteAttribute(jsObject: jsObject, name: Strings.nodeValue)
        _textContent = ReadWriteAttribute(jsObject: jsObject, name: Strings.textContent)
        super.init(unsafelyWrapping: jsObject)
    }

    public static let ELEMENT_NODE: UInt16 = 1

    public static let ATTRIBUTE_NODE: UInt16 = 2

    public static let TEXT_NODE: UInt16 = 3

    public static let CDATA_SECTION_NODE: UInt16 = 4

    public static let ENTITY_REFERENCE_NODE: UInt16 = 5

    public static let ENTITY_NODE: UInt16 = 6

    public static let PROCESSING_INSTRUCTION_NODE: UInt16 = 7

    public static let COMMENT_NODE: UInt16 = 8

    public static let DOCUMENT_NODE: UInt16 = 9

    public static let DOCUMENT_TYPE_NODE: UInt16 = 10

    public static let DOCUMENT_FRAGMENT_NODE: UInt16 = 11

    public static let NOTATION_NODE: UInt16 = 12

    @ReadonlyAttribute
    public var nodeType: UInt16

    @ReadonlyAttribute
    public var nodeName: String

    @ReadonlyAttribute
    public var baseURI: String

    @ReadonlyAttribute
    public var isConnected: Bool

    @ReadonlyAttribute
    public var ownerDocument: Document?

    @inlinable public func getRootNode(options: GetRootNodeOptions? = nil) -> Self {
        let this = jsObject
        return this[Strings.getRootNode].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var parentNode: Node?

    @ReadonlyAttribute
    public var parentElement: Element?

    @inlinable public func hasChildNodes() -> Bool {
        let this = jsObject
        return this[Strings.hasChildNodes].function!(this: this, arguments: []).fromJSValue()!
    }

    @ReadonlyAttribute
    public var childNodes: NodeList

    @ReadonlyAttribute
    public var firstChild: Node?

    @ReadonlyAttribute
    public var lastChild: Node?

    @ReadonlyAttribute
    public var previousSibling: Node?

    @ReadonlyAttribute
    public var nextSibling: Node?

    @ReadWriteAttribute
    public var nodeValue: String?

    @ReadWriteAttribute
    public var textContent: String?

    @inlinable public func normalize() {
        let this = jsObject
        _ = this[Strings.normalize].function!(this: this, arguments: [])
    }

    @inlinable public func cloneNode(deep: Bool? = nil) -> Self {
        let this = jsObject
        return this[Strings.cloneNode].function!(this: this, arguments: [_toJSValue(deep)]).fromJSValue()!
    }

    @inlinable public func isEqualNode(otherNode: Node?) -> Bool {
        let this = jsObject
        return this[Strings.isEqualNode].function!(this: this, arguments: [_toJSValue(otherNode)]).fromJSValue()!
    }

    @inlinable public func isSameNode(otherNode: Node?) -> Bool {
        let this = jsObject
        return this[Strings.isSameNode].function!(this: this, arguments: [_toJSValue(otherNode)]).fromJSValue()!
    }

    public static let DOCUMENT_POSITION_DISCONNECTED: UInt16 = 0x01

    public static let DOCUMENT_POSITION_PRECEDING: UInt16 = 0x02

    public static let DOCUMENT_POSITION_FOLLOWING: UInt16 = 0x04

    public static let DOCUMENT_POSITION_CONTAINS: UInt16 = 0x08

    public static let DOCUMENT_POSITION_CONTAINED_BY: UInt16 = 0x10

    public static let DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: UInt16 = 0x20

    @inlinable public func compareDocumentPosition(other: Node) -> UInt16 {
        let this = jsObject
        return this[Strings.compareDocumentPosition].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @inlinable public func contains(other: Node?) -> Bool {
        let this = jsObject
        return this[Strings.contains].function!(this: this, arguments: [_toJSValue(other)]).fromJSValue()!
    }

    @inlinable public func lookupPrefix(namespace: String?) -> String? {
        let this = jsObject
        return this[Strings.lookupPrefix].function!(this: this, arguments: [_toJSValue(namespace)]).fromJSValue()
    }

    @inlinable public func lookupNamespaceURI(prefix: String?) -> String? {
        let this = jsObject
        return this[Strings.lookupNamespaceURI].function!(this: this, arguments: [_toJSValue(prefix)]).fromJSValue()
    }

    @inlinable public func isDefaultNamespace(namespace: String?) -> Bool {
        let this = jsObject
        return this[Strings.isDefaultNamespace].function!(this: this, arguments: [_toJSValue(namespace)]).fromJSValue()!
    }

    @discardableResult @inlinable public func insertBefore<NodeType: Node>(node: NodeType, child: Node?) -> NodeType {
        let this = jsObject
        return this[Strings.insertBefore].function!(this: this, arguments: [_toJSValue(node), _toJSValue(child)]).fromJSValue()!
    }

    @discardableResult @inlinable public func appendChild<NodeType: Node>(node: NodeType) -> NodeType {
        let this = jsObject
        return this[Strings.appendChild].function!(this: this, arguments: [_toJSValue(node)]).fromJSValue()!
    }

    @discardableResult @inlinable public func replaceChild<NodeType: Node>(node: Node, child: NodeType) -> NodeType {
        let this = jsObject
        return this[Strings.replaceChild].function!(this: this, arguments: [_toJSValue(node), _toJSValue(child)]).fromJSValue()!
    }

    @discardableResult @inlinable public func removeChild<NodeType: Node>(child: NodeType) -> NodeType {
        let this = jsObject
        return this[Strings.removeChild].function!(this: this, arguments: [_toJSValue(child)]).fromJSValue()!
    }
}

public class NodeIterator: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.NodeIterator].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _root = ReadonlyAttribute(jsObject: jsObject, name: Strings.root)
        _referenceNode = ReadonlyAttribute(jsObject: jsObject, name: Strings.referenceNode)
        _pointerBeforeReferenceNode = ReadonlyAttribute(jsObject: jsObject, name: Strings.pointerBeforeReferenceNode)
        _whatToShow = ReadonlyAttribute(jsObject: jsObject, name: Strings.whatToShow)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var root: Node

    @ReadonlyAttribute
    public var referenceNode: Node

    @ReadonlyAttribute
    public var pointerBeforeReferenceNode: Bool

    @ReadonlyAttribute
    public var whatToShow: UInt32

    // XXX: member 'filter' is ignored

    @inlinable public func nextNode() -> Node? {
        let this = jsObject
        return this[Strings.nextNode].function!(this: this, arguments: []).fromJSValue()
    }

    @inlinable public func previousNode() -> Node? {
        let this = jsObject
        return this[Strings.previousNode].function!(this: this, arguments: []).fromJSValue()
    }

    @inlinable public func detach() {
        let this = jsObject
        _ = this[Strings.detach].function!(this: this, arguments: [])
    }
}

public class NodeList: JSBridgedClass, Sequence {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.NodeList].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @inlinable public subscript(key: Int) -> Node? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func item(index: UInt32) -> Node? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }

    @ReadonlyAttribute
    public var length: UInt32

    public typealias Element = Node
    public func makeIterator() -> ValueIterableIterator<NodeList> {
        ValueIterableIterator(sequence: self)
    }
}

public protocol NonDocumentTypeChildNode: JSBridgedClass {}
public extension NonDocumentTypeChildNode {
    @inlinable var previousElementSibling: Element? { jsObject[Strings.previousElementSibling].fromJSValue() }

    @inlinable var nextElementSibling: Element? { jsObject[Strings.nextElementSibling].fromJSValue() }
}

public protocol NonElementParentNode: JSBridgedClass {}
public extension NonElementParentNode {
    @inlinable func getElementById(elementId: String) -> Element? {
        let this = jsObject
        return this[Strings.getElementById].function!(this: this, arguments: [_toJSValue(elementId)]).fromJSValue()
    }
}

public class OffscreenCanvas: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.OffscreenCanvas].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        _oncontextlost = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.oncontextlost)
        _oncontextrestored = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.oncontextrestored)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(width: UInt64, height: UInt64) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(width), _toJSValue(height)]))
    }

    @ReadWriteAttribute
    public var width: UInt64

    @ReadWriteAttribute
    public var height: UInt64

    // XXX: member 'getContext' is ignored

    @inlinable public func transferToImageBitmap() -> ImageBitmap {
        let this = jsObject
        return this[Strings.transferToImageBitmap].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func convertToBlob(options: ImageEncodeOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.convertToBlob].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func convertToBlob(options: ImageEncodeOptions? = nil) async throws -> Blob {
        let this = jsObject
        let _promise: JSPromise = this[Strings.convertToBlob].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @ClosureAttribute1Optional
    public var oncontextlost: EventHandler

    @ClosureAttribute1Optional
    public var oncontextrestored: EventHandler
}

public class OffscreenCanvasRenderingContext2D: JSBridgedClass, CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasText, CanvasDrawImage, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.OffscreenCanvasRenderingContext2D].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _canvas = ReadonlyAttribute(jsObject: jsObject, name: Strings.canvas)
        self.jsObject = jsObject
    }

    @inlinable public func commit() {
        let this = jsObject
        _ = this[Strings.commit].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var canvas: OffscreenCanvas
}

public class OverconstrainedError: DOMException {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.OverconstrainedError].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _constraint = ReadonlyAttribute(jsObject: jsObject, name: Strings.constraint)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(constraint: String, message: String? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(constraint), _toJSValue(message)]))
    }

    @ReadonlyAttribute
    public var constraint: String
}

public class PageTransitionEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.PageTransitionEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _persisted = ReadonlyAttribute(jsObject: jsObject, name: Strings.persisted)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: PageTransitionEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var persisted: Bool
}

public class PageTransitionEventInit: BridgedDictionary {
    public convenience init(persisted: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.persisted] = _toJSValue(persisted)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _persisted = ReadWriteAttribute(jsObject: object, name: Strings.persisted)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var persisted: Bool
}

public protocol ParentNode: JSBridgedClass {}
public extension ParentNode {
    @inlinable var children: HTMLCollection { jsObject[Strings.children].fromJSValue()! }

    @inlinable var firstElementChild: Element? { jsObject[Strings.firstElementChild].fromJSValue() }

    @inlinable var lastElementChild: Element? { jsObject[Strings.lastElementChild].fromJSValue() }

    @inlinable var childElementCount: UInt32 { jsObject[Strings.childElementCount].fromJSValue()! }

    @inlinable func prepend(nodes: Node_or_String...) {
        let this = jsObject
        _ = this[Strings.prepend].function!(this: this, arguments: nodes.map(_toJSValue))
    }

    @inlinable func append(nodes: Node_or_String...) {
        let this = jsObject
        _ = this[Strings.append].function!(this: this, arguments: nodes.map(_toJSValue))
    }

    @inlinable func replaceChildren(nodes: Node_or_String...) {
        let this = jsObject
        _ = this[Strings.replaceChildren].function!(this: this, arguments: nodes.map(_toJSValue))
    }

    @inlinable func querySelector(selectors: String) -> Element? {
        let this = jsObject
        return this[Strings.querySelector].function!(this: this, arguments: [_toJSValue(selectors)]).fromJSValue()
    }

    @inlinable func querySelectorAll(selectors: String) -> NodeList {
        let this = jsObject
        return this[Strings.querySelectorAll].function!(this: this, arguments: [_toJSValue(selectors)]).fromJSValue()!
    }
}

public class Path2D: JSBridgedClass, CanvasPath {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Path2D].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public convenience init(path: Path2D_or_String? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(path)]))
    }

    @inlinable public func addPath(path: Path2D, transform: DOMMatrix2DInit? = nil) {
        let this = jsObject
        _ = this[Strings.addPath].function!(this: this, arguments: [_toJSValue(path), _toJSValue(transform)])
    }
}

public class Performance: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.Performance].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _timeOrigin = ReadonlyAttribute(jsObject: jsObject, name: Strings.timeOrigin)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public func now() -> DOMHighResTimeStamp {
        let this = jsObject
        return this[Strings.now].function!(this: this, arguments: []).fromJSValue()!
    }

    @ReadonlyAttribute
    public var timeOrigin: DOMHighResTimeStamp

    @inlinable public func toJSON() -> JSObject {
        let this = jsObject
        return this[Strings.toJSON].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getEntries() -> PerformanceEntryList {
        let this = jsObject
        return this[Strings.getEntries].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getEntriesByType(type: String) -> PerformanceEntryList {
        let this = jsObject
        return this[Strings.getEntriesByType].function!(this: this, arguments: [_toJSValue(type)]).fromJSValue()!
    }

    @inlinable public func getEntriesByName(name: String, type: String? = nil) -> PerformanceEntryList {
        let this = jsObject
        return this[Strings.getEntriesByName].function!(this: this, arguments: [_toJSValue(name), _toJSValue(type)]).fromJSValue()!
    }
}

public class PerformanceEntry: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.PerformanceEntry].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadonlyAttribute(jsObject: jsObject, name: Strings.name)
        _entryType = ReadonlyAttribute(jsObject: jsObject, name: Strings.entryType)
        _startTime = ReadonlyAttribute(jsObject: jsObject, name: Strings.startTime)
        _duration = ReadonlyAttribute(jsObject: jsObject, name: Strings.duration)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var name: String

    @ReadonlyAttribute
    public var entryType: String

    @ReadonlyAttribute
    public var startTime: DOMHighResTimeStamp

    @ReadonlyAttribute
    public var duration: DOMHighResTimeStamp

    @inlinable public func toJSON() -> JSObject {
        let this = jsObject
        return this[Strings.toJSON].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class PerformanceObserver: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.PerformanceObserver].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _supportedEntryTypes = ReadonlyAttribute(jsObject: jsObject, name: Strings.supportedEntryTypes)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(callback: @escaping PerformanceObserverCallback) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(callback)]))
    }

    @inlinable public func observe(options: PerformanceObserverInit? = nil) {
        let this = jsObject
        _ = this[Strings.observe].function!(this: this, arguments: [_toJSValue(options)])
    }

    @inlinable public func disconnect() {
        let this = jsObject
        _ = this[Strings.disconnect].function!(this: this, arguments: [])
    }

    @inlinable public func takeRecords() -> PerformanceEntryList {
        let this = jsObject
        return this[Strings.takeRecords].function!(this: this, arguments: []).fromJSValue()!
    }

    @ReadonlyAttribute
    public var supportedEntryTypes: [String]
}

public class PerformanceObserverCallbackOptions: BridgedDictionary {
    public convenience init(droppedEntriesCount: UInt64) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.droppedEntriesCount] = _toJSValue(droppedEntriesCount)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _droppedEntriesCount = ReadWriteAttribute(jsObject: object, name: Strings.droppedEntriesCount)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var droppedEntriesCount: UInt64
}

public class PerformanceObserverEntryList: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.PerformanceObserverEntryList].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func getEntries() -> PerformanceEntryList {
        let this = jsObject
        return this[Strings.getEntries].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getEntriesByType(type: String) -> PerformanceEntryList {
        let this = jsObject
        return this[Strings.getEntriesByType].function!(this: this, arguments: [_toJSValue(type)]).fromJSValue()!
    }

    @inlinable public func getEntriesByName(name: String, type: String? = nil) -> PerformanceEntryList {
        let this = jsObject
        return this[Strings.getEntriesByName].function!(this: this, arguments: [_toJSValue(name), _toJSValue(type)]).fromJSValue()!
    }
}

public class PerformanceObserverInit: BridgedDictionary {
    public convenience init(entryTypes: [String], type: String, buffered: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.entryTypes] = _toJSValue(entryTypes)
        object[Strings.type] = _toJSValue(type)
        object[Strings.buffered] = _toJSValue(buffered)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _entryTypes = ReadWriteAttribute(jsObject: object, name: Strings.entryTypes)
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        _buffered = ReadWriteAttribute(jsObject: object, name: Strings.buffered)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var entryTypes: [String]

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var buffered: Bool
}

public class PermissionDescriptor: BridgedDictionary {
    public convenience init(name: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.name] = _toJSValue(name)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _name = ReadWriteAttribute(jsObject: object, name: Strings.name)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var name: String
}

public class PermissionSetParameters: BridgedDictionary {
    public convenience init(descriptor: PermissionDescriptor, state: PermissionState) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.descriptor] = _toJSValue(descriptor)
        object[Strings.state] = _toJSValue(state)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _descriptor = ReadWriteAttribute(jsObject: object, name: Strings.descriptor)
        _state = ReadWriteAttribute(jsObject: object, name: Strings.state)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var descriptor: PermissionDescriptor

    @ReadWriteAttribute
    public var state: PermissionState
}

public enum PermissionState: JSString, JSValueCompatible {
    case granted = "granted"
    case denied = "denied"
    case prompt = "prompt"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class PermissionStatus: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.PermissionStatus].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _name = ReadonlyAttribute(jsObject: jsObject, name: Strings.name)
        _onchange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onchange)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var state: PermissionState

    @ReadonlyAttribute
    public var name: String

    @ClosureAttribute1Optional
    public var onchange: EventHandler
}

public class Permissions: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Permissions].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func query(permissionDesc: JSObject) -> JSPromise {
        let this = jsObject
        return this[Strings.query].function!(this: this, arguments: [_toJSValue(permissionDesc)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func query(permissionDesc: JSObject) async throws -> PermissionStatus {
        let this = jsObject
        let _promise: JSPromise = this[Strings.query].function!(this: this, arguments: [_toJSValue(permissionDesc)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public class PlaneLayout: BridgedDictionary {
    public convenience init(offset: UInt32, stride: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.offset] = _toJSValue(offset)
        object[Strings.stride] = _toJSValue(stride)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _offset = ReadWriteAttribute(jsObject: object, name: Strings.offset)
        _stride = ReadWriteAttribute(jsObject: object, name: Strings.stride)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var offset: UInt32

    @ReadWriteAttribute
    public var stride: UInt32
}

public class Plugin: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Plugin].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadonlyAttribute(jsObject: jsObject, name: Strings.name)
        _description = ReadonlyAttribute(jsObject: jsObject, name: Strings.description)
        _filename = ReadonlyAttribute(jsObject: jsObject, name: Strings.filename)
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var name: String

    @ReadonlyAttribute
    public var description: String

    @ReadonlyAttribute
    public var filename: String

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> MimeType? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func item(index: UInt32) -> MimeType? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }

    @inlinable public subscript(key: String) -> MimeType? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func namedItem(name: String) -> MimeType? {
        let this = jsObject
        return this[Strings.namedItem].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()
    }
}

public class PluginArray: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.PluginArray].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @inlinable public func refresh() {
        let this = jsObject
        _ = this[Strings.refresh].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> Plugin? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func item(index: UInt32) -> Plugin? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }

    @inlinable public subscript(key: String) -> Plugin? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func namedItem(name: String) -> Plugin? {
        let this = jsObject
        return this[Strings.namedItem].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()
    }
}

public class PopStateEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.PopStateEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: PopStateEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var state: JSValue
}

public class PopStateEventInit: BridgedDictionary {
    public convenience init(state: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.state] = _toJSValue(state)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _state = ReadWriteAttribute(jsObject: object, name: Strings.state)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var state: JSValue
}

public protocol PopoverInvokerElement: JSBridgedClass {}
public extension PopoverInvokerElement {
    @inlinable var popoverTargetElement: Element? {
        get { jsObject[Strings.popoverTargetElement].fromJSValue() }
        nonmutating set { jsObject[Strings.popoverTargetElement] = _toJSValue(newValue) }
    }

    @inlinable var popoverTargetAction: String {
        get { jsObject[Strings.popoverTargetAction].fromJSValue()! }
        nonmutating set { jsObject[Strings.popoverTargetAction] = _toJSValue(newValue) }
    }
}

public enum PredefinedColorSpace: JSString, JSValueCompatible {
    case srgb = "srgb"
    case displayP3 = "display-p3"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum PremultiplyAlpha: JSString, JSValueCompatible {
    case none = "none"
    case premultiply = "premultiply"
    case `default` = "default"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class ProcessingInstruction: CharacterData {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ProcessingInstruction].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _target = ReadonlyAttribute(jsObject: jsObject, name: Strings.target)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var target: String
}

public class ProgressEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ProgressEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _lengthComputable = ReadonlyAttribute(jsObject: jsObject, name: Strings.lengthComputable)
        _loaded = ReadonlyAttribute(jsObject: jsObject, name: Strings.loaded)
        _total = ReadonlyAttribute(jsObject: jsObject, name: Strings.total)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: ProgressEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var lengthComputable: Bool

    @ReadonlyAttribute
    public var loaded: UInt64

    @ReadonlyAttribute
    public var total: UInt64
}

public class ProgressEventInit: BridgedDictionary {
    public convenience init(lengthComputable: Bool, loaded: UInt64, total: UInt64) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.lengthComputable] = _toJSValue(lengthComputable)
        object[Strings.loaded] = _toJSValue(loaded)
        object[Strings.total] = _toJSValue(total)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _lengthComputable = ReadWriteAttribute(jsObject: object, name: Strings.lengthComputable)
        _loaded = ReadWriteAttribute(jsObject: object, name: Strings.loaded)
        _total = ReadWriteAttribute(jsObject: object, name: Strings.total)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var lengthComputable: Bool

    @ReadWriteAttribute
    public var loaded: UInt64

    @ReadWriteAttribute
    public var total: UInt64
}

public class PromiseRejectionEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.PromiseRejectionEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _promise = ReadonlyAttribute(jsObject: jsObject, name: Strings.promise)
        _reason = ReadonlyAttribute(jsObject: jsObject, name: Strings.reason)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: PromiseRejectionEventInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var promise: JSPromise

    @ReadonlyAttribute
    public var reason: JSValue
}

public class PromiseRejectionEventInit: BridgedDictionary {
    public convenience init(promise: JSPromise, reason: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.promise] = _toJSValue(promise)
        object[Strings.reason] = _toJSValue(reason)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _promise = ReadWriteAttribute(jsObject: object, name: Strings.promise)
        _reason = ReadWriteAttribute(jsObject: object, name: Strings.reason)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var promise: JSPromise

    @ReadWriteAttribute
    public var reason: JSValue
}

public class QueuingStrategy: BridgedDictionary {
    public convenience init(highWaterMark: Double, size: @escaping QueuingStrategySize) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.highWaterMark] = _toJSValue(highWaterMark)
        ClosureAttribute1[Strings.size, in: object] = size
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _highWaterMark = ReadWriteAttribute(jsObject: object, name: Strings.highWaterMark)
        _size = ClosureAttribute1(jsObject: object, name: Strings.size)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var highWaterMark: Double

    @ClosureAttribute1
    public var size: QueuingStrategySize
}

public class QueuingStrategyInit: BridgedDictionary {
    public convenience init(highWaterMark: Double) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.highWaterMark] = _toJSValue(highWaterMark)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _highWaterMark = ReadWriteAttribute(jsObject: object, name: Strings.highWaterMark)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var highWaterMark: Double
}

public class RadioNodeList: NodeList {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.RadioNodeList].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadWriteAttribute
    public var value: String
}

public class Range: AbstractRange {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.Range].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _commonAncestorContainer = ReadonlyAttribute(jsObject: jsObject, name: Strings.commonAncestorContainer)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ReadonlyAttribute
    public var commonAncestorContainer: Node

    @inlinable public func setStart(node: Node, offset: UInt32) {
        let this = jsObject
        _ = this[Strings.setStart].function!(this: this, arguments: [_toJSValue(node), _toJSValue(offset)])
    }

    @inlinable public func setEnd(node: Node, offset: UInt32) {
        let this = jsObject
        _ = this[Strings.setEnd].function!(this: this, arguments: [_toJSValue(node), _toJSValue(offset)])
    }

    @inlinable public func setStartBefore(node: Node) {
        let this = jsObject
        _ = this[Strings.setStartBefore].function!(this: this, arguments: [_toJSValue(node)])
    }

    @inlinable public func setStartAfter(node: Node) {
        let this = jsObject
        _ = this[Strings.setStartAfter].function!(this: this, arguments: [_toJSValue(node)])
    }

    @inlinable public func setEndBefore(node: Node) {
        let this = jsObject
        _ = this[Strings.setEndBefore].function!(this: this, arguments: [_toJSValue(node)])
    }

    @inlinable public func setEndAfter(node: Node) {
        let this = jsObject
        _ = this[Strings.setEndAfter].function!(this: this, arguments: [_toJSValue(node)])
    }

    @inlinable public func collapse(toStart: Bool? = nil) {
        let this = jsObject
        _ = this[Strings.collapse].function!(this: this, arguments: [_toJSValue(toStart)])
    }

    @inlinable public func selectNode(node: Node) {
        let this = jsObject
        _ = this[Strings.selectNode].function!(this: this, arguments: [_toJSValue(node)])
    }

    @inlinable public func selectNodeContents(node: Node) {
        let this = jsObject
        _ = this[Strings.selectNodeContents].function!(this: this, arguments: [_toJSValue(node)])
    }

    public static let START_TO_START: UInt16 = 0

    public static let START_TO_END: UInt16 = 1

    public static let END_TO_END: UInt16 = 2

    public static let END_TO_START: UInt16 = 3

    @inlinable public func compareBoundaryPoints(how: UInt16, sourceRange: Range) -> Int16 {
        let this = jsObject
        return this[Strings.compareBoundaryPoints].function!(this: this, arguments: [_toJSValue(how), _toJSValue(sourceRange)]).fromJSValue()!
    }

    @inlinable public func deleteContents() {
        let this = jsObject
        _ = this[Strings.deleteContents].function!(this: this, arguments: [])
    }

    @inlinable public func extractContents() -> DocumentFragment {
        let this = jsObject
        return this[Strings.extractContents].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func cloneContents() -> DocumentFragment {
        let this = jsObject
        return this[Strings.cloneContents].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func insertNode(node: Node) {
        let this = jsObject
        _ = this[Strings.insertNode].function!(this: this, arguments: [_toJSValue(node)])
    }

    @inlinable public func surroundContents(newParent: Node) {
        let this = jsObject
        _ = this[Strings.surroundContents].function!(this: this, arguments: [_toJSValue(newParent)])
    }

    @inlinable public func cloneRange() -> Self {
        let this = jsObject
        return this[Strings.cloneRange].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func detach() {
        let this = jsObject
        _ = this[Strings.detach].function!(this: this, arguments: [])
    }

    @inlinable public func isPointInRange(node: Node, offset: UInt32) -> Bool {
        let this = jsObject
        return this[Strings.isPointInRange].function!(this: this, arguments: [_toJSValue(node), _toJSValue(offset)]).fromJSValue()!
    }

    @inlinable public func comparePoint(node: Node, offset: UInt32) -> Int16 {
        let this = jsObject
        return this[Strings.comparePoint].function!(this: this, arguments: [_toJSValue(node), _toJSValue(offset)]).fromJSValue()!
    }

    @inlinable public func intersectsNode(node: Node) -> Bool {
        let this = jsObject
        return this[Strings.intersectsNode].function!(this: this, arguments: [_toJSValue(node)]).fromJSValue()!
    }

    @inlinable public var description: String {
        jsObject[Strings.toString]!().fromJSValue()!
    }

    @inlinable public func getClientRects() -> DOMRectList {
        let this = jsObject
        return this[Strings.getClientRects].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getBoundingClientRect() -> DOMRect {
        let this = jsObject
        return this[Strings.getBoundingClientRect].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class ReadableByteStreamController: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ReadableByteStreamController].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _byobRequest = ReadonlyAttribute(jsObject: jsObject, name: Strings.byobRequest)
        _desiredSize = ReadonlyAttribute(jsObject: jsObject, name: Strings.desiredSize)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var byobRequest: ReadableStreamBYOBRequest?

    @ReadonlyAttribute
    public var desiredSize: Double?

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @inlinable public func enqueue(chunk: ArrayBufferView) {
        let this = jsObject
        _ = this[Strings.enqueue].function!(this: this, arguments: [_toJSValue(chunk)])
    }

    @inlinable public func error(e: JSValue? = nil) {
        let this = jsObject
        _ = this[Strings.error].function!(this: this, arguments: [_toJSValue(e)])
    }
}

public class ReadableStream: JSBridgedClass, AsyncSequence {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ReadableStream].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _locked = ReadonlyAttribute(jsObject: jsObject, name: Strings.locked)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(underlyingSource: JSObject? = nil, strategy: QueuingStrategy? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(underlyingSource), _toJSValue(strategy)]))
    }

    @inlinable public class func from(asyncIterable: JSValue) -> Self {
        let this = constructor!
        return this[Strings.from].function!(this: this, arguments: [_toJSValue(asyncIterable)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var locked: Bool

    @inlinable public func cancel(reason: JSValue? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.cancel].function!(this: this, arguments: [_toJSValue(reason)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func cancel(reason: JSValue? = nil) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.cancel].function!(this: this, arguments: [_toJSValue(reason)]).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func getReader(options: ReadableStreamGetReaderOptions? = nil) -> ReadableStreamReader {
        let this = jsObject
        return this[Strings.getReader].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func pipeThrough(transform: ReadableWritablePair, options: StreamPipeOptions? = nil) -> Self {
        let this = jsObject
        return this[Strings.pipeThrough].function!(this: this, arguments: [_toJSValue(transform), _toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func pipeTo(destination: WritableStream, options: StreamPipeOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.pipeTo].function!(this: this, arguments: [_toJSValue(destination), _toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func pipeTo(destination: WritableStream, options: StreamPipeOptions? = nil) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.pipeTo].function!(this: this, arguments: [_toJSValue(destination), _toJSValue(options)]).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func tee() -> [ReadableStream] {
        let this = jsObject
        return this[Strings.tee].function!(this: this, arguments: []).fromJSValue()!
    }

    public typealias Element = JSValue
    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func makeAsyncIterator() -> ValueIterableAsyncIterator<ReadableStream> {
        ValueIterableAsyncIterator(sequence: self)
    }
}

public class ReadableStreamBYOBReader: JSBridgedClass, ReadableStreamGenericReader {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ReadableStreamBYOBReader].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public convenience init(stream: ReadableStream) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(stream)]))
    }

    @inlinable public func read(view: ArrayBufferView) -> JSPromise {
        let this = jsObject
        return this[Strings.read].function!(this: this, arguments: [_toJSValue(view)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func read(view: ArrayBufferView) async throws -> ReadableStreamReadResult {
        let this = jsObject
        let _promise: JSPromise = this[Strings.read].function!(this: this, arguments: [_toJSValue(view)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func releaseLock() {
        let this = jsObject
        _ = this[Strings.releaseLock].function!(this: this, arguments: [])
    }
}

public class ReadableStreamBYOBRequest: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ReadableStreamBYOBRequest].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _view = ReadonlyAttribute(jsObject: jsObject, name: Strings.view)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var view: ArrayBufferView?

    @inlinable public func respond(bytesWritten: UInt64) {
        let this = jsObject
        _ = this[Strings.respond].function!(this: this, arguments: [_toJSValue(bytesWritten)])
    }

    @inlinable public func respondWithNewView(view: ArrayBufferView) {
        let this = jsObject
        _ = this[Strings.respondWithNewView].function!(this: this, arguments: [_toJSValue(view)])
    }
}

public class ReadableStreamDefaultController: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ReadableStreamDefaultController].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _desiredSize = ReadonlyAttribute(jsObject: jsObject, name: Strings.desiredSize)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var desiredSize: Double?

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @inlinable public func enqueue(chunk: JSValue? = nil) {
        let this = jsObject
        _ = this[Strings.enqueue].function!(this: this, arguments: [_toJSValue(chunk)])
    }

    @inlinable public func error(e: JSValue? = nil) {
        let this = jsObject
        _ = this[Strings.error].function!(this: this, arguments: [_toJSValue(e)])
    }
}

public class ReadableStreamDefaultReader: JSBridgedClass, ReadableStreamGenericReader {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ReadableStreamDefaultReader].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public convenience init(stream: ReadableStream) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(stream)]))
    }

    @inlinable public func read() -> JSPromise {
        let this = jsObject
        return this[Strings.read].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func read() async throws -> ReadableStreamReadResult {
        let this = jsObject
        let _promise: JSPromise = this[Strings.read].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func releaseLock() {
        let this = jsObject
        _ = this[Strings.releaseLock].function!(this: this, arguments: [])
    }
}

public protocol ReadableStreamGenericReader: JSBridgedClass {}
public extension ReadableStreamGenericReader {
    @inlinable var closed: JSPromise { jsObject[Strings.closed].fromJSValue()! }

    @inlinable func cancel(reason: JSValue? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.cancel].function!(this: this, arguments: [_toJSValue(reason)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable func cancel(reason: JSValue? = nil) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.cancel].function!(this: this, arguments: [_toJSValue(reason)]).fromJSValue()!
        _ = try await _promise.value
    }
}

public class ReadableStreamGetReaderOptions: BridgedDictionary {
    public convenience init(mode: ReadableStreamReaderMode) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.mode] = _toJSValue(mode)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _mode = ReadWriteAttribute(jsObject: object, name: Strings.mode)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var mode: ReadableStreamReaderMode
}

public class ReadableStreamIteratorOptions: BridgedDictionary {
    public convenience init(preventCancel: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.preventCancel] = _toJSValue(preventCancel)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _preventCancel = ReadWriteAttribute(jsObject: object, name: Strings.preventCancel)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var preventCancel: Bool
}

public class ReadableStreamReadResult: BridgedDictionary {
    public convenience init(value: JSValue, done: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.value] = _toJSValue(value)
        object[Strings.done] = _toJSValue(done)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _value = ReadWriteAttribute(jsObject: object, name: Strings.value)
        _done = ReadWriteAttribute(jsObject: object, name: Strings.done)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var value: JSValue

    @ReadWriteAttribute
    public var done: Bool
}

public enum ReadableStreamReaderMode: JSString, JSValueCompatible {
    case byob = "byob"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum ReadableStreamType: JSString, JSValueCompatible {
    case bytes = "bytes"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class ReadableWritablePair: BridgedDictionary {
    public convenience init(readable: ReadableStream, writable: WritableStream) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.readable] = _toJSValue(readable)
        object[Strings.writable] = _toJSValue(writable)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _readable = ReadWriteAttribute(jsObject: object, name: Strings.readable)
        _writable = ReadWriteAttribute(jsObject: object, name: Strings.writable)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var readable: ReadableStream

    @ReadWriteAttribute
    public var writable: WritableStream
}

public enum ReadyState: JSString, JSValueCompatible {
    case closed = "closed"
    case open = "open"
    case ended = "ended"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum RecordingState: JSString, JSValueCompatible {
    case inactive = "inactive"
    case recording = "recording"
    case paused = "paused"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum ReferrerPolicy: JSString, JSValueCompatible {
    case _empty = ""
    case noReferrer = "no-referrer"
    case noReferrerWhenDowngrade = "no-referrer-when-downgrade"
    case sameOrigin = "same-origin"
    case origin = "origin"
    case strictOrigin = "strict-origin"
    case originWhenCrossOrigin = "origin-when-cross-origin"
    case strictOriginWhenCrossOrigin = "strict-origin-when-cross-origin"
    case unsafeUrl = "unsafe-url"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class RegistrationOptions: BridgedDictionary {
    public convenience init(scope: String, type: WorkerType, updateViaCache: ServiceWorkerUpdateViaCache) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.scope] = _toJSValue(scope)
        object[Strings.type] = _toJSValue(type)
        object[Strings.updateViaCache] = _toJSValue(updateViaCache)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _scope = ReadWriteAttribute(jsObject: object, name: Strings.scope)
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        _updateViaCache = ReadWriteAttribute(jsObject: object, name: Strings.updateViaCache)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var scope: String

    @ReadWriteAttribute
    public var type: WorkerType

    @ReadWriteAttribute
    public var updateViaCache: ServiceWorkerUpdateViaCache
}

public class Request: JSBridgedClass, Body {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Request].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _method = ReadonlyAttribute(jsObject: jsObject, name: Strings.method)
        _url = ReadonlyAttribute(jsObject: jsObject, name: Strings.url)
        _headers = ReadonlyAttribute(jsObject: jsObject, name: Strings.headers)
        _destination = ReadonlyAttribute(jsObject: jsObject, name: Strings.destination)
        _referrer = ReadonlyAttribute(jsObject: jsObject, name: Strings.referrer)
        _referrerPolicy = ReadonlyAttribute(jsObject: jsObject, name: Strings.referrerPolicy)
        _mode = ReadonlyAttribute(jsObject: jsObject, name: Strings.mode)
        _credentials = ReadonlyAttribute(jsObject: jsObject, name: Strings.credentials)
        _cache = ReadonlyAttribute(jsObject: jsObject, name: Strings.cache)
        _redirect = ReadonlyAttribute(jsObject: jsObject, name: Strings.redirect)
        _integrity = ReadonlyAttribute(jsObject: jsObject, name: Strings.integrity)
        _keepalive = ReadonlyAttribute(jsObject: jsObject, name: Strings.keepalive)
        _isReloadNavigation = ReadonlyAttribute(jsObject: jsObject, name: Strings.isReloadNavigation)
        _isHistoryNavigation = ReadonlyAttribute(jsObject: jsObject, name: Strings.isHistoryNavigation)
        _signal = ReadonlyAttribute(jsObject: jsObject, name: Strings.signal)
        _duplex = ReadonlyAttribute(jsObject: jsObject, name: Strings.duplex)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(input: RequestInfo, init: RequestInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(input), _toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var method: String

    @ReadonlyAttribute
    public var url: String

    @ReadonlyAttribute
    public var headers: Headers

    @ReadonlyAttribute
    public var destination: RequestDestination

    @ReadonlyAttribute
    public var referrer: String

    @ReadonlyAttribute
    public var referrerPolicy: ReferrerPolicy

    @ReadonlyAttribute
    public var mode: RequestMode

    @ReadonlyAttribute
    public var credentials: RequestCredentials

    @ReadonlyAttribute
    public var cache: RequestCache

    @ReadonlyAttribute
    public var redirect: RequestRedirect

    @ReadonlyAttribute
    public var integrity: String

    @ReadonlyAttribute
    public var keepalive: Bool

    @ReadonlyAttribute
    public var isReloadNavigation: Bool

    @ReadonlyAttribute
    public var isHistoryNavigation: Bool

    @ReadonlyAttribute
    public var signal: AbortSignal

    @ReadonlyAttribute
    public var duplex: RequestDuplex

    @inlinable public func clone() -> Self {
        let this = jsObject
        return this[Strings.clone].function!(this: this, arguments: []).fromJSValue()!
    }
}

public enum RequestCache: JSString, JSValueCompatible {
    case `default` = "default"
    case noStore = "no-store"
    case reload = "reload"
    case noCache = "no-cache"
    case forceCache = "force-cache"
    case onlyIfCached = "only-if-cached"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum RequestCredentials: JSString, JSValueCompatible {
    case omit = "omit"
    case sameOrigin = "same-origin"
    case include = "include"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum RequestDestination: JSString, JSValueCompatible {
    case _empty = ""
    case audio = "audio"
    case audioworklet = "audioworklet"
    case document = "document"
    case embed = "embed"
    case font = "font"
    case frame = "frame"
    case iframe = "iframe"
    case image = "image"
    case manifest = "manifest"
    case object = "object"
    case paintworklet = "paintworklet"
    case report = "report"
    case script = "script"
    case sharedworker = "sharedworker"
    case style = "style"
    case track = "track"
    case video = "video"
    case worker = "worker"
    case xslt = "xslt"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum RequestDuplex: JSString, JSValueCompatible {
    case half = "half"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class RequestInit: BridgedDictionary {
    public convenience init(method: String, headers: HeadersInit, body: BodyInit?, referrer: String, referrerPolicy: ReferrerPolicy, mode: RequestMode, credentials: RequestCredentials, cache: RequestCache, redirect: RequestRedirect, integrity: String, keepalive: Bool, signal: AbortSignal?, duplex: RequestDuplex, priority: RequestPriority, window: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.method] = _toJSValue(method)
        object[Strings.headers] = _toJSValue(headers)
        object[Strings.body] = _toJSValue(body)
        object[Strings.referrer] = _toJSValue(referrer)
        object[Strings.referrerPolicy] = _toJSValue(referrerPolicy)
        object[Strings.mode] = _toJSValue(mode)
        object[Strings.credentials] = _toJSValue(credentials)
        object[Strings.cache] = _toJSValue(cache)
        object[Strings.redirect] = _toJSValue(redirect)
        object[Strings.integrity] = _toJSValue(integrity)
        object[Strings.keepalive] = _toJSValue(keepalive)
        object[Strings.signal] = _toJSValue(signal)
        object[Strings.duplex] = _toJSValue(duplex)
        object[Strings.priority] = _toJSValue(priority)
        object[Strings.window] = _toJSValue(window)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _method = ReadWriteAttribute(jsObject: object, name: Strings.method)
        _headers = ReadWriteAttribute(jsObject: object, name: Strings.headers)
        _body = ReadWriteAttribute(jsObject: object, name: Strings.body)
        _referrer = ReadWriteAttribute(jsObject: object, name: Strings.referrer)
        _referrerPolicy = ReadWriteAttribute(jsObject: object, name: Strings.referrerPolicy)
        _mode = ReadWriteAttribute(jsObject: object, name: Strings.mode)
        _credentials = ReadWriteAttribute(jsObject: object, name: Strings.credentials)
        _cache = ReadWriteAttribute(jsObject: object, name: Strings.cache)
        _redirect = ReadWriteAttribute(jsObject: object, name: Strings.redirect)
        _integrity = ReadWriteAttribute(jsObject: object, name: Strings.integrity)
        _keepalive = ReadWriteAttribute(jsObject: object, name: Strings.keepalive)
        _signal = ReadWriteAttribute(jsObject: object, name: Strings.signal)
        _duplex = ReadWriteAttribute(jsObject: object, name: Strings.duplex)
        _priority = ReadWriteAttribute(jsObject: object, name: Strings.priority)
        _window = ReadWriteAttribute(jsObject: object, name: Strings.window)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var method: String

    @ReadWriteAttribute
    public var headers: HeadersInit

    @ReadWriteAttribute
    public var body: BodyInit?

    @ReadWriteAttribute
    public var referrer: String

    @ReadWriteAttribute
    public var referrerPolicy: ReferrerPolicy

    @ReadWriteAttribute
    public var mode: RequestMode

    @ReadWriteAttribute
    public var credentials: RequestCredentials

    @ReadWriteAttribute
    public var cache: RequestCache

    @ReadWriteAttribute
    public var redirect: RequestRedirect

    @ReadWriteAttribute
    public var integrity: String

    @ReadWriteAttribute
    public var keepalive: Bool

    @ReadWriteAttribute
    public var signal: AbortSignal?

    @ReadWriteAttribute
    public var duplex: RequestDuplex

    @ReadWriteAttribute
    public var priority: RequestPriority

    @ReadWriteAttribute
    public var window: JSValue
}

public enum RequestMode: JSString, JSValueCompatible {
    case navigate = "navigate"
    case sameOrigin = "same-origin"
    case noCors = "no-cors"
    case cors = "cors"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum RequestPriority: JSString, JSValueCompatible {
    case high = "high"
    case low = "low"
    case auto = "auto"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum RequestRedirect: JSString, JSValueCompatible {
    case follow = "follow"
    case error = "error"
    case manual = "manual"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum ResizeQuality: JSString, JSValueCompatible {
    case pixelated = "pixelated"
    case low = "low"
    case medium = "medium"
    case high = "high"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class Response: JSBridgedClass, Body {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Response].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _url = ReadonlyAttribute(jsObject: jsObject, name: Strings.url)
        _redirected = ReadonlyAttribute(jsObject: jsObject, name: Strings.redirected)
        _status = ReadonlyAttribute(jsObject: jsObject, name: Strings.status)
        _ok = ReadonlyAttribute(jsObject: jsObject, name: Strings.ok)
        _statusText = ReadonlyAttribute(jsObject: jsObject, name: Strings.statusText)
        _headers = ReadonlyAttribute(jsObject: jsObject, name: Strings.headers)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(body: BodyInit? = nil, init: ResponseInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(body), _toJSValue(`init`)]))
    }

    @inlinable public class func error() -> Self {
        let this = constructor!
        return this[Strings.error].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public class func redirect(url: String, status: UInt16? = nil) -> Self {
        let this = constructor!
        return this[Strings.redirect].function!(this: this, arguments: [_toJSValue(url), _toJSValue(status)]).fromJSValue()!
    }

    @inlinable public class func json(data: JSValue, init: ResponseInit? = nil) -> Self {
        let this = constructor!
        return this[Strings.json].function!(this: this, arguments: [_toJSValue(data), _toJSValue(`init`)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var type: ResponseType

    @ReadonlyAttribute
    public var url: String

    @ReadonlyAttribute
    public var redirected: Bool

    @ReadonlyAttribute
    public var status: UInt16

    @ReadonlyAttribute
    public var ok: Bool

    @ReadonlyAttribute
    public var statusText: String

    @ReadonlyAttribute
    public var headers: Headers

    @inlinable public func clone() -> Self {
        let this = jsObject
        return this[Strings.clone].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class ResponseInit: BridgedDictionary {
    public convenience init(status: UInt16, statusText: String, headers: HeadersInit) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.status] = _toJSValue(status)
        object[Strings.statusText] = _toJSValue(statusText)
        object[Strings.headers] = _toJSValue(headers)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _status = ReadWriteAttribute(jsObject: object, name: Strings.status)
        _statusText = ReadWriteAttribute(jsObject: object, name: Strings.statusText)
        _headers = ReadWriteAttribute(jsObject: object, name: Strings.headers)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var status: UInt16

    @ReadWriteAttribute
    public var statusText: String

    @ReadWriteAttribute
    public var headers: HeadersInit
}

public enum ResponseType: JSString, JSValueCompatible {
    case basic = "basic"
    case cors = "cors"
    case `default` = "default"
    case error = "error"
    case opaque = "opaque"
    case opaqueredirect = "opaqueredirect"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class Screen: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Screen].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _availWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.availWidth)
        _availHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.availHeight)
        _width = ReadonlyAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadonlyAttribute(jsObject: jsObject, name: Strings.height)
        _colorDepth = ReadonlyAttribute(jsObject: jsObject, name: Strings.colorDepth)
        _pixelDepth = ReadonlyAttribute(jsObject: jsObject, name: Strings.pixelDepth)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var availWidth: Int32

    @ReadonlyAttribute
    public var availHeight: Int32

    @ReadonlyAttribute
    public var width: Int32

    @ReadonlyAttribute
    public var height: Int32

    @ReadonlyAttribute
    public var colorDepth: UInt32

    @ReadonlyAttribute
    public var pixelDepth: UInt32
}

public enum ScrollBehavior: JSString, JSValueCompatible {
    case auto = "auto"
    case instant = "instant"
    case smooth = "smooth"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class ScrollIntoViewOptions: BridgedDictionary {
    public convenience init(block: ScrollLogicalPosition, inline: ScrollLogicalPosition) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.block] = _toJSValue(block)
        object[Strings.inline] = _toJSValue(inline)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _block = ReadWriteAttribute(jsObject: object, name: Strings.block)
        _inline = ReadWriteAttribute(jsObject: object, name: Strings.inline)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var block: ScrollLogicalPosition

    @ReadWriteAttribute
    public var inline: ScrollLogicalPosition
}

public enum ScrollLogicalPosition: JSString, JSValueCompatible {
    case start = "start"
    case center = "center"
    case end = "end"
    case nearest = "nearest"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class ScrollOptions: BridgedDictionary {
    public convenience init(behavior: ScrollBehavior) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.behavior] = _toJSValue(behavior)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _behavior = ReadWriteAttribute(jsObject: object, name: Strings.behavior)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var behavior: ScrollBehavior
}

public enum ScrollRestoration: JSString, JSValueCompatible {
    case auto = "auto"
    case manual = "manual"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class ScrollToOptions: BridgedDictionary {
    public convenience init(left: Double, top: Double) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.left] = _toJSValue(left)
        object[Strings.top] = _toJSValue(top)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _left = ReadWriteAttribute(jsObject: object, name: Strings.left)
        _top = ReadWriteAttribute(jsObject: object, name: Strings.top)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var left: Double

    @ReadWriteAttribute
    public var top: Double
}

public enum SelectionMode: JSString, JSValueCompatible {
    case select = "select"
    case start = "start"
    case end = "end"
    case preserve = "preserve"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class ServiceWorker: EventTarget, AbstractWorker {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ServiceWorker].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _scriptURL = ReadonlyAttribute(jsObject: jsObject, name: Strings.scriptURL)
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _onstatechange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onstatechange)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var scriptURL: String

    @ReadonlyAttribute
    public var state: ServiceWorkerState

    @inlinable public func postMessage(message: JSValue, transfer: [JSObject]) {
        let this = jsObject
        _ = this[Strings.postMessage].function!(this: this, arguments: [_toJSValue(message), _toJSValue(transfer)])
    }

    @inlinable public func postMessage(message: JSValue, options: StructuredSerializeOptions? = nil) {
        let this = jsObject
        _ = this[Strings.postMessage].function!(this: this, arguments: [_toJSValue(message), _toJSValue(options)])
    }

    @ClosureAttribute1Optional
    public var onstatechange: EventHandler
}

public class ServiceWorkerContainer: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ServiceWorkerContainer].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _controller = ReadonlyAttribute(jsObject: jsObject, name: Strings.controller)
        _ready = ReadonlyAttribute(jsObject: jsObject, name: Strings.ready)
        _oncontrollerchange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.oncontrollerchange)
        _onmessage = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onmessage)
        _onmessageerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onmessageerror)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var controller: ServiceWorker?

    @ReadonlyAttribute
    public var ready: JSPromise

    @inlinable public func register(scriptURL: String, options: RegistrationOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.register].function!(this: this, arguments: [_toJSValue(scriptURL), _toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func register(scriptURL: String, options: RegistrationOptions? = nil) async throws -> ServiceWorkerRegistration {
        let this = jsObject
        let _promise: JSPromise = this[Strings.register].function!(this: this, arguments: [_toJSValue(scriptURL), _toJSValue(options)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func getRegistration(clientURL: String? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.getRegistration].function!(this: this, arguments: [_toJSValue(clientURL)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func getRegistration(clientURL: String? = nil) async throws -> ServiceWorkerRegistration? {
        let this = jsObject
        let _promise: JSPromise = this[Strings.getRegistration].function!(this: this, arguments: [_toJSValue(clientURL)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func getRegistrations() -> JSPromise {
        let this = jsObject
        return this[Strings.getRegistrations].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func getRegistrations() async throws -> [ServiceWorkerRegistration] {
        let this = jsObject
        let _promise: JSPromise = this[Strings.getRegistrations].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func startMessages() {
        let this = jsObject
        _ = this[Strings.startMessages].function!(this: this, arguments: [])
    }

    @ClosureAttribute1Optional
    public var oncontrollerchange: EventHandler

    @ClosureAttribute1Optional
    public var onmessage: EventHandler

    @ClosureAttribute1Optional
    public var onmessageerror: EventHandler
}

public class ServiceWorkerRegistration: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ServiceWorkerRegistration].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _installing = ReadonlyAttribute(jsObject: jsObject, name: Strings.installing)
        _waiting = ReadonlyAttribute(jsObject: jsObject, name: Strings.waiting)
        _active = ReadonlyAttribute(jsObject: jsObject, name: Strings.active)
        _navigationPreload = ReadonlyAttribute(jsObject: jsObject, name: Strings.navigationPreload)
        _scope = ReadonlyAttribute(jsObject: jsObject, name: Strings.scope)
        _updateViaCache = ReadonlyAttribute(jsObject: jsObject, name: Strings.updateViaCache)
        _onupdatefound = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onupdatefound)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var installing: ServiceWorker?

    @ReadonlyAttribute
    public var waiting: ServiceWorker?

    @ReadonlyAttribute
    public var active: ServiceWorker?

    @ReadonlyAttribute
    public var navigationPreload: NavigationPreloadManager

    @ReadonlyAttribute
    public var scope: String

    @ReadonlyAttribute
    public var updateViaCache: ServiceWorkerUpdateViaCache

    @inlinable public func update() -> JSPromise {
        let this = jsObject
        return this[Strings.update].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func update() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.update].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func unregister() -> JSPromise {
        let this = jsObject
        return this[Strings.unregister].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func unregister() async throws -> Bool {
        let this = jsObject
        let _promise: JSPromise = this[Strings.unregister].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @ClosureAttribute1Optional
    public var onupdatefound: EventHandler
}

public enum ServiceWorkerState: JSString, JSValueCompatible {
    case parsed = "parsed"
    case installing = "installing"
    case installed = "installed"
    case activating = "activating"
    case activated = "activated"
    case redundant = "redundant"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum ServiceWorkerUpdateViaCache: JSString, JSValueCompatible {
    case imports = "imports"
    case all = "all"
    case none = "none"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

open class ShadowRoot: DocumentFragment, DocumentOrShadowRoot {
    @inlinable override open class var constructor: JSFunction? { JSObject.global[Strings.ShadowRoot].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _mode = ReadonlyAttribute(jsObject: jsObject, name: Strings.mode)
        _delegatesFocus = ReadonlyAttribute(jsObject: jsObject, name: Strings.delegatesFocus)
        _slotAssignment = ReadonlyAttribute(jsObject: jsObject, name: Strings.slotAssignment)
        _host = ReadonlyAttribute(jsObject: jsObject, name: Strings.host)
        _onslotchange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onslotchange)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var mode: ShadowRootMode

    @ReadonlyAttribute
    public var delegatesFocus: Bool

    @ReadonlyAttribute
    public var slotAssignment: SlotAssignmentMode

    @ReadonlyAttribute
    public var host: Element

    @ClosureAttribute1Optional
    public var onslotchange: EventHandler
}

public class ShadowRootInit: BridgedDictionary {
    public convenience init(mode: ShadowRootMode, delegatesFocus: Bool, slotAssignment: SlotAssignmentMode) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.mode] = _toJSValue(mode)
        object[Strings.delegatesFocus] = _toJSValue(delegatesFocus)
        object[Strings.slotAssignment] = _toJSValue(slotAssignment)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _mode = ReadWriteAttribute(jsObject: object, name: Strings.mode)
        _delegatesFocus = ReadWriteAttribute(jsObject: object, name: Strings.delegatesFocus)
        _slotAssignment = ReadWriteAttribute(jsObject: object, name: Strings.slotAssignment)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var mode: ShadowRootMode

    @ReadWriteAttribute
    public var delegatesFocus: Bool

    @ReadWriteAttribute
    public var slotAssignment: SlotAssignmentMode
}

public enum ShadowRootMode: JSString, JSValueCompatible {
    case open = "open"
    case closed = "closed"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class SharedWorker: EventTarget, AbstractWorker {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.SharedWorker].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _port = ReadonlyAttribute(jsObject: jsObject, name: Strings.port)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(scriptURL: String, options: String_or_WorkerOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(scriptURL), _toJSValue(options)]))
    }

    @ReadonlyAttribute
    public var port: MessagePort
}

public enum SlotAssignmentMode: JSString, JSValueCompatible {
    case manual = "manual"
    case named = "named"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public protocol Slottable: JSBridgedClass {}
public extension Slottable {
    @inlinable var assignedSlot: HTMLSlotElement? { jsObject[Strings.assignedSlot].fromJSValue() }
}

public class SourceBuffer: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.SourceBuffer].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _mode = ReadWriteAttribute(jsObject: jsObject, name: Strings.mode)
        _updating = ReadonlyAttribute(jsObject: jsObject, name: Strings.updating)
        _buffered = ReadonlyAttribute(jsObject: jsObject, name: Strings.buffered)
        _timestampOffset = ReadWriteAttribute(jsObject: jsObject, name: Strings.timestampOffset)
        _audioTracks = ReadonlyAttribute(jsObject: jsObject, name: Strings.audioTracks)
        _videoTracks = ReadonlyAttribute(jsObject: jsObject, name: Strings.videoTracks)
        _textTracks = ReadonlyAttribute(jsObject: jsObject, name: Strings.textTracks)
        _appendWindowStart = ReadWriteAttribute(jsObject: jsObject, name: Strings.appendWindowStart)
        _appendWindowEnd = ReadWriteAttribute(jsObject: jsObject, name: Strings.appendWindowEnd)
        _onupdatestart = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onupdatestart)
        _onupdate = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onupdate)
        _onupdateend = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onupdateend)
        _onerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onerror)
        _onabort = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onabort)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadWriteAttribute
    public var mode: AppendMode

    @ReadonlyAttribute
    public var updating: Bool

    @ReadonlyAttribute
    public var buffered: TimeRanges

    @ReadWriteAttribute
    public var timestampOffset: Double

    @ReadonlyAttribute
    public var audioTracks: AudioTrackList

    @ReadonlyAttribute
    public var videoTracks: VideoTrackList

    @ReadonlyAttribute
    public var textTracks: TextTrackList

    @ReadWriteAttribute
    public var appendWindowStart: Double

    @ReadWriteAttribute
    public var appendWindowEnd: Double

    @ClosureAttribute1Optional
    public var onupdatestart: EventHandler

    @ClosureAttribute1Optional
    public var onupdate: EventHandler

    @ClosureAttribute1Optional
    public var onupdateend: EventHandler

    @ClosureAttribute1Optional
    public var onerror: EventHandler

    @ClosureAttribute1Optional
    public var onabort: EventHandler

    @inlinable public func appendBuffer(data: BufferSource) {
        let this = jsObject
        _ = this[Strings.appendBuffer].function!(this: this, arguments: [_toJSValue(data)])
    }

    @inlinable public func abort() {
        let this = jsObject
        _ = this[Strings.abort].function!(this: this, arguments: [])
    }

    @inlinable public func changeType(type: String) {
        let this = jsObject
        _ = this[Strings.changeType].function!(this: this, arguments: [_toJSValue(type)])
    }

    @inlinable public func remove(start: Double, end: Double) {
        let this = jsObject
        _ = this[Strings.remove].function!(this: this, arguments: [_toJSValue(start), _toJSValue(end)])
    }
}

public class SourceBufferList: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.SourceBufferList].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        _onaddsourcebuffer = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onaddsourcebuffer)
        _onremovesourcebuffer = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onremovesourcebuffer)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var length: UInt32

    @ClosureAttribute1Optional
    public var onaddsourcebuffer: EventHandler

    @ClosureAttribute1Optional
    public var onremovesourcebuffer: EventHandler

    @inlinable public subscript(key: Int) -> SourceBuffer {
        jsObject[key].fromJSValue()!
    }
}

public class StaticRange: AbstractRange {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.StaticRange].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(init: StaticRangeInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }
}

public class StaticRangeInit: BridgedDictionary {
    public convenience init(startContainer: Node, startOffset: UInt32, endContainer: Node, endOffset: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.startContainer] = _toJSValue(startContainer)
        object[Strings.startOffset] = _toJSValue(startOffset)
        object[Strings.endContainer] = _toJSValue(endContainer)
        object[Strings.endOffset] = _toJSValue(endOffset)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _startContainer = ReadWriteAttribute(jsObject: object, name: Strings.startContainer)
        _startOffset = ReadWriteAttribute(jsObject: object, name: Strings.startOffset)
        _endContainer = ReadWriteAttribute(jsObject: object, name: Strings.endContainer)
        _endOffset = ReadWriteAttribute(jsObject: object, name: Strings.endOffset)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var startContainer: Node

    @ReadWriteAttribute
    public var startOffset: UInt32

    @ReadWriteAttribute
    public var endContainer: Node

    @ReadWriteAttribute
    public var endOffset: UInt32
}

public class Storage: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Storage].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public func key(index: UInt32) -> String? {
        let this = jsObject
        return this[Strings.key].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }

    @inlinable public func getItem(key: String) -> String? {
        let this = jsObject
        return this[Strings.getItem].function!(this: this, arguments: [_toJSValue(key)]).fromJSValue()
    }

    @inlinable public subscript(key: String) -> String? {
        get {
            jsObject[key].fromJSValue()
        }
        set {
            jsObject[key] = _toJSValue(newValue)
        }
    }

    @inlinable public func removeValue(forKey key: String) {
        _ = JSObject.global.Reflect.deleteProperty(jsObject, _toJSValue(key))
    }

    @inlinable public func clear() {
        let this = jsObject
        _ = this[Strings.clear].function!(this: this, arguments: [])
    }
}

public class StorageEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.StorageEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _key = ReadonlyAttribute(jsObject: jsObject, name: Strings.key)
        _oldValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.oldValue)
        _newValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.newValue)
        _url = ReadonlyAttribute(jsObject: jsObject, name: Strings.url)
        _storageArea = ReadonlyAttribute(jsObject: jsObject, name: Strings.storageArea)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: StorageEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var key: String?

    @ReadonlyAttribute
    public var oldValue: String?

    @ReadonlyAttribute
    public var newValue: String?

    @ReadonlyAttribute
    public var url: String

    @ReadonlyAttribute
    public var storageArea: Storage?

    @inlinable public func initStorageEvent(type: String, bubbles: Bool? = nil, cancelable: Bool? = nil, key: String? = nil, oldValue: String? = nil, newValue: String? = nil, url: String? = nil, storageArea: Storage? = nil) {
        let this = jsObject
        _ = this[Strings.initStorageEvent].function!(this: this, arguments: [_toJSValue(type), _toJSValue(bubbles), _toJSValue(cancelable), _toJSValue(key), _toJSValue(oldValue), _toJSValue(newValue), _toJSValue(url), _toJSValue(storageArea)])
    }
}

public class StorageEventInit: BridgedDictionary {
    public convenience init(key: String?, oldValue: String?, newValue: String?, url: String, storageArea: Storage?) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.key] = _toJSValue(key)
        object[Strings.oldValue] = _toJSValue(oldValue)
        object[Strings.newValue] = _toJSValue(newValue)
        object[Strings.url] = _toJSValue(url)
        object[Strings.storageArea] = _toJSValue(storageArea)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _key = ReadWriteAttribute(jsObject: object, name: Strings.key)
        _oldValue = ReadWriteAttribute(jsObject: object, name: Strings.oldValue)
        _newValue = ReadWriteAttribute(jsObject: object, name: Strings.newValue)
        _url = ReadWriteAttribute(jsObject: object, name: Strings.url)
        _storageArea = ReadWriteAttribute(jsObject: object, name: Strings.storageArea)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var key: String?

    @ReadWriteAttribute
    public var oldValue: String?

    @ReadWriteAttribute
    public var newValue: String?

    @ReadWriteAttribute
    public var url: String

    @ReadWriteAttribute
    public var storageArea: Storage?
}

public class StreamPipeOptions: BridgedDictionary {
    public convenience init(preventClose: Bool, preventAbort: Bool, preventCancel: Bool, signal: AbortSignal) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.preventClose] = _toJSValue(preventClose)
        object[Strings.preventAbort] = _toJSValue(preventAbort)
        object[Strings.preventCancel] = _toJSValue(preventCancel)
        object[Strings.signal] = _toJSValue(signal)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _preventClose = ReadWriteAttribute(jsObject: object, name: Strings.preventClose)
        _preventAbort = ReadWriteAttribute(jsObject: object, name: Strings.preventAbort)
        _preventCancel = ReadWriteAttribute(jsObject: object, name: Strings.preventCancel)
        _signal = ReadWriteAttribute(jsObject: object, name: Strings.signal)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var preventClose: Bool

    @ReadWriteAttribute
    public var preventAbort: Bool

    @ReadWriteAttribute
    public var preventCancel: Bool

    @ReadWriteAttribute
    public var signal: AbortSignal
}

public class StructuredSerializeOptions: BridgedDictionary {
    public convenience init(transfer: [JSObject]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.transfer] = _toJSValue(transfer)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _transfer = ReadWriteAttribute(jsObject: object, name: Strings.transfer)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var transfer: [JSObject]
}

public class SubmitEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.SubmitEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _submitter = ReadonlyAttribute(jsObject: jsObject, name: Strings.submitter)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: SubmitEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var submitter: HTMLElement?
}

public class SubmitEventInit: BridgedDictionary {
    public convenience init(submitter: HTMLElement?) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.submitter] = _toJSValue(submitter)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _submitter = ReadWriteAttribute(jsObject: object, name: Strings.submitter)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var submitter: HTMLElement?
}

public class SvcOutputMetadata: BridgedDictionary {
    public convenience init(temporalLayerId: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.temporalLayerId] = _toJSValue(temporalLayerId)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _temporalLayerId = ReadWriteAttribute(jsObject: object, name: Strings.temporalLayerId)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var temporalLayerId: UInt32
}

public class Text: CharacterData, Slottable, GeometryUtils {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.Text].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _wholeText = ReadonlyAttribute(jsObject: jsObject, name: Strings.wholeText)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(data: String? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(data)]))
    }

    @inlinable public func splitText(offset: UInt32) -> Self {
        let this = jsObject
        return this[Strings.splitText].function!(this: this, arguments: [_toJSValue(offset)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var wholeText: String
}

public class TextMetrics: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.TextMetrics].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _width = ReadonlyAttribute(jsObject: jsObject, name: Strings.width)
        _actualBoundingBoxLeft = ReadonlyAttribute(jsObject: jsObject, name: Strings.actualBoundingBoxLeft)
        _actualBoundingBoxRight = ReadonlyAttribute(jsObject: jsObject, name: Strings.actualBoundingBoxRight)
        _fontBoundingBoxAscent = ReadonlyAttribute(jsObject: jsObject, name: Strings.fontBoundingBoxAscent)
        _fontBoundingBoxDescent = ReadonlyAttribute(jsObject: jsObject, name: Strings.fontBoundingBoxDescent)
        _actualBoundingBoxAscent = ReadonlyAttribute(jsObject: jsObject, name: Strings.actualBoundingBoxAscent)
        _actualBoundingBoxDescent = ReadonlyAttribute(jsObject: jsObject, name: Strings.actualBoundingBoxDescent)
        _emHeightAscent = ReadonlyAttribute(jsObject: jsObject, name: Strings.emHeightAscent)
        _emHeightDescent = ReadonlyAttribute(jsObject: jsObject, name: Strings.emHeightDescent)
        _hangingBaseline = ReadonlyAttribute(jsObject: jsObject, name: Strings.hangingBaseline)
        _alphabeticBaseline = ReadonlyAttribute(jsObject: jsObject, name: Strings.alphabeticBaseline)
        _ideographicBaseline = ReadonlyAttribute(jsObject: jsObject, name: Strings.ideographicBaseline)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var width: Double

    @ReadonlyAttribute
    public var actualBoundingBoxLeft: Double

    @ReadonlyAttribute
    public var actualBoundingBoxRight: Double

    @ReadonlyAttribute
    public var fontBoundingBoxAscent: Double

    @ReadonlyAttribute
    public var fontBoundingBoxDescent: Double

    @ReadonlyAttribute
    public var actualBoundingBoxAscent: Double

    @ReadonlyAttribute
    public var actualBoundingBoxDescent: Double

    @ReadonlyAttribute
    public var emHeightAscent: Double

    @ReadonlyAttribute
    public var emHeightDescent: Double

    @ReadonlyAttribute
    public var hangingBaseline: Double

    @ReadonlyAttribute
    public var alphabeticBaseline: Double

    @ReadonlyAttribute
    public var ideographicBaseline: Double
}

public class TextTrack: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.TextTrack].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _kind = ReadonlyAttribute(jsObject: jsObject, name: Strings.kind)
        _label = ReadonlyAttribute(jsObject: jsObject, name: Strings.label)
        _language = ReadonlyAttribute(jsObject: jsObject, name: Strings.language)
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _inBandMetadataTrackDispatchType = ReadonlyAttribute(jsObject: jsObject, name: Strings.inBandMetadataTrackDispatchType)
        _mode = ReadWriteAttribute(jsObject: jsObject, name: Strings.mode)
        _cues = ReadonlyAttribute(jsObject: jsObject, name: Strings.cues)
        _activeCues = ReadonlyAttribute(jsObject: jsObject, name: Strings.activeCues)
        _oncuechange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.oncuechange)
        _sourceBuffer = ReadonlyAttribute(jsObject: jsObject, name: Strings.sourceBuffer)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var kind: TextTrackKind

    @ReadonlyAttribute
    public var label: String

    @ReadonlyAttribute
    public var language: String

    @ReadonlyAttribute
    public var id: String

    @ReadonlyAttribute
    public var inBandMetadataTrackDispatchType: String

    @ReadWriteAttribute
    public var mode: TextTrackMode

    @ReadonlyAttribute
    public var cues: TextTrackCueList?

    @ReadonlyAttribute
    public var activeCues: TextTrackCueList?

    @inlinable public func addCue(cue: TextTrackCue) {
        let this = jsObject
        _ = this[Strings.addCue].function!(this: this, arguments: [_toJSValue(cue)])
    }

    @inlinable public func removeCue(cue: TextTrackCue) {
        let this = jsObject
        _ = this[Strings.removeCue].function!(this: this, arguments: [_toJSValue(cue)])
    }

    @ClosureAttribute1Optional
    public var oncuechange: EventHandler

    @ReadonlyAttribute
    public var sourceBuffer: SourceBuffer?
}

public class TextTrackCue: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.TextTrackCue].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _track = ReadonlyAttribute(jsObject: jsObject, name: Strings.track)
        _id = ReadWriteAttribute(jsObject: jsObject, name: Strings.id)
        _startTime = ReadWriteAttribute(jsObject: jsObject, name: Strings.startTime)
        _endTime = ReadWriteAttribute(jsObject: jsObject, name: Strings.endTime)
        _pauseOnExit = ReadWriteAttribute(jsObject: jsObject, name: Strings.pauseOnExit)
        _onenter = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onenter)
        _onexit = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onexit)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var track: TextTrack?

    @ReadWriteAttribute
    public var id: String

    @ReadWriteAttribute
    public var startTime: Double

    @ReadWriteAttribute
    public var endTime: Double

    @ReadWriteAttribute
    public var pauseOnExit: Bool

    @ClosureAttribute1Optional
    public var onenter: EventHandler

    @ClosureAttribute1Optional
    public var onexit: EventHandler
}

public class TextTrackCueList: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.TextTrackCueList].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> TextTrackCue {
        jsObject[key].fromJSValue()!
    }

    @inlinable public func getCueById(id: String) -> TextTrackCue? {
        let this = jsObject
        return this[Strings.getCueById].function!(this: this, arguments: [_toJSValue(id)]).fromJSValue()
    }
}

public enum TextTrackKind: JSString, JSValueCompatible {
    case subtitles = "subtitles"
    case captions = "captions"
    case descriptions = "descriptions"
    case chapters = "chapters"
    case metadata = "metadata"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class TextTrackList: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.TextTrackList].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        _onchange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onchange)
        _onaddtrack = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onaddtrack)
        _onremovetrack = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onremovetrack)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> TextTrack {
        jsObject[key].fromJSValue()!
    }

    @inlinable public func getTrackById(id: String) -> TextTrack? {
        let this = jsObject
        return this[Strings.getTrackById].function!(this: this, arguments: [_toJSValue(id)]).fromJSValue()
    }

    @ClosureAttribute1Optional
    public var onchange: EventHandler

    @ClosureAttribute1Optional
    public var onaddtrack: EventHandler

    @ClosureAttribute1Optional
    public var onremovetrack: EventHandler
}

public enum TextTrackMode: JSString, JSValueCompatible {
    case disabled = "disabled"
    case hidden = "hidden"
    case showing = "showing"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class TimeRanges: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.TimeRanges].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public func start(index: UInt32) -> Double {
        let this = jsObject
        return this[Strings.start].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()!
    }

    @inlinable public func end(index: UInt32) -> Double {
        let this = jsObject
        return this[Strings.end].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()!
    }
}

public class ToggleEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.ToggleEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _oldState = ReadonlyAttribute(jsObject: jsObject, name: Strings.oldState)
        _newState = ReadonlyAttribute(jsObject: jsObject, name: Strings.newState)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: ToggleEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var oldState: String

    @ReadonlyAttribute
    public var newState: String
}

public class ToggleEventInit: BridgedDictionary {
    public convenience init(oldState: String, newState: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.oldState] = _toJSValue(oldState)
        object[Strings.newState] = _toJSValue(newState)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _oldState = ReadWriteAttribute(jsObject: object, name: Strings.oldState)
        _newState = ReadWriteAttribute(jsObject: object, name: Strings.newState)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var oldState: String

    @ReadWriteAttribute
    public var newState: String
}

public class Touch: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Touch].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _identifier = ReadonlyAttribute(jsObject: jsObject, name: Strings.identifier)
        _target = ReadonlyAttribute(jsObject: jsObject, name: Strings.target)
        _screenX = ReadonlyAttribute(jsObject: jsObject, name: Strings.screenX)
        _screenY = ReadonlyAttribute(jsObject: jsObject, name: Strings.screenY)
        _clientX = ReadonlyAttribute(jsObject: jsObject, name: Strings.clientX)
        _clientY = ReadonlyAttribute(jsObject: jsObject, name: Strings.clientY)
        _pageX = ReadonlyAttribute(jsObject: jsObject, name: Strings.pageX)
        _pageY = ReadonlyAttribute(jsObject: jsObject, name: Strings.pageY)
        _radiusX = ReadonlyAttribute(jsObject: jsObject, name: Strings.radiusX)
        _radiusY = ReadonlyAttribute(jsObject: jsObject, name: Strings.radiusY)
        _rotationAngle = ReadonlyAttribute(jsObject: jsObject, name: Strings.rotationAngle)
        _force = ReadonlyAttribute(jsObject: jsObject, name: Strings.force)
        _altitudeAngle = ReadonlyAttribute(jsObject: jsObject, name: Strings.altitudeAngle)
        _azimuthAngle = ReadonlyAttribute(jsObject: jsObject, name: Strings.azimuthAngle)
        _touchType = ReadonlyAttribute(jsObject: jsObject, name: Strings.touchType)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(touchInitDict: TouchInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(touchInitDict)]))
    }

    @ReadonlyAttribute
    public var identifier: Int32

    @ReadonlyAttribute
    public var target: EventTarget

    @ReadonlyAttribute
    public var screenX: Double

    @ReadonlyAttribute
    public var screenY: Double

    @ReadonlyAttribute
    public var clientX: Double

    @ReadonlyAttribute
    public var clientY: Double

    @ReadonlyAttribute
    public var pageX: Double

    @ReadonlyAttribute
    public var pageY: Double

    @ReadonlyAttribute
    public var radiusX: Float

    @ReadonlyAttribute
    public var radiusY: Float

    @ReadonlyAttribute
    public var rotationAngle: Float

    @ReadonlyAttribute
    public var force: Float

    @ReadonlyAttribute
    public var altitudeAngle: Float

    @ReadonlyAttribute
    public var azimuthAngle: Float

    @ReadonlyAttribute
    public var touchType: TouchType
}

public class TouchEvent: UIEvent {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.TouchEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _touches = ReadonlyAttribute(jsObject: jsObject, name: Strings.touches)
        _targetTouches = ReadonlyAttribute(jsObject: jsObject, name: Strings.targetTouches)
        _changedTouches = ReadonlyAttribute(jsObject: jsObject, name: Strings.changedTouches)
        _altKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.altKey)
        _metaKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.metaKey)
        _ctrlKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.ctrlKey)
        _shiftKey = ReadonlyAttribute(jsObject: jsObject, name: Strings.shiftKey)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: TouchEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var touches: TouchList

    @ReadonlyAttribute
    public var targetTouches: TouchList

    @ReadonlyAttribute
    public var changedTouches: TouchList

    @ReadonlyAttribute
    public var altKey: Bool

    @ReadonlyAttribute
    public var metaKey: Bool

    @ReadonlyAttribute
    public var ctrlKey: Bool

    @ReadonlyAttribute
    public var shiftKey: Bool

    @inlinable public subscript(key: String) -> Bool {
        jsObject[key].fromJSValue()!
    }

    @inlinable public func getModifierState(keyArg: String) -> Bool {
        let this = jsObject
        return this[Strings.getModifierState].function!(this: this, arguments: [_toJSValue(keyArg)]).fromJSValue()!
    }
}

public class TouchEventInit: BridgedDictionary {
    public convenience init(touches: [Touch], targetTouches: [Touch], changedTouches: [Touch]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.touches] = _toJSValue(touches)
        object[Strings.targetTouches] = _toJSValue(targetTouches)
        object[Strings.changedTouches] = _toJSValue(changedTouches)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _touches = ReadWriteAttribute(jsObject: object, name: Strings.touches)
        _targetTouches = ReadWriteAttribute(jsObject: object, name: Strings.targetTouches)
        _changedTouches = ReadWriteAttribute(jsObject: object, name: Strings.changedTouches)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var touches: [Touch]

    @ReadWriteAttribute
    public var targetTouches: [Touch]

    @ReadWriteAttribute
    public var changedTouches: [Touch]
}

public class TouchInit: BridgedDictionary {
    public convenience init(identifier: Int32, target: EventTarget, clientX: Double, clientY: Double, screenX: Double, screenY: Double, pageX: Double, pageY: Double, radiusX: Float, radiusY: Float, rotationAngle: Float, force: Float, altitudeAngle: Double, azimuthAngle: Double, touchType: TouchType) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.identifier] = _toJSValue(identifier)
        object[Strings.target] = _toJSValue(target)
        object[Strings.clientX] = _toJSValue(clientX)
        object[Strings.clientY] = _toJSValue(clientY)
        object[Strings.screenX] = _toJSValue(screenX)
        object[Strings.screenY] = _toJSValue(screenY)
        object[Strings.pageX] = _toJSValue(pageX)
        object[Strings.pageY] = _toJSValue(pageY)
        object[Strings.radiusX] = _toJSValue(radiusX)
        object[Strings.radiusY] = _toJSValue(radiusY)
        object[Strings.rotationAngle] = _toJSValue(rotationAngle)
        object[Strings.force] = _toJSValue(force)
        object[Strings.altitudeAngle] = _toJSValue(altitudeAngle)
        object[Strings.azimuthAngle] = _toJSValue(azimuthAngle)
        object[Strings.touchType] = _toJSValue(touchType)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _identifier = ReadWriteAttribute(jsObject: object, name: Strings.identifier)
        _target = ReadWriteAttribute(jsObject: object, name: Strings.target)
        _clientX = ReadWriteAttribute(jsObject: object, name: Strings.clientX)
        _clientY = ReadWriteAttribute(jsObject: object, name: Strings.clientY)
        _screenX = ReadWriteAttribute(jsObject: object, name: Strings.screenX)
        _screenY = ReadWriteAttribute(jsObject: object, name: Strings.screenY)
        _pageX = ReadWriteAttribute(jsObject: object, name: Strings.pageX)
        _pageY = ReadWriteAttribute(jsObject: object, name: Strings.pageY)
        _radiusX = ReadWriteAttribute(jsObject: object, name: Strings.radiusX)
        _radiusY = ReadWriteAttribute(jsObject: object, name: Strings.radiusY)
        _rotationAngle = ReadWriteAttribute(jsObject: object, name: Strings.rotationAngle)
        _force = ReadWriteAttribute(jsObject: object, name: Strings.force)
        _altitudeAngle = ReadWriteAttribute(jsObject: object, name: Strings.altitudeAngle)
        _azimuthAngle = ReadWriteAttribute(jsObject: object, name: Strings.azimuthAngle)
        _touchType = ReadWriteAttribute(jsObject: object, name: Strings.touchType)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var identifier: Int32

    @ReadWriteAttribute
    public var target: EventTarget

    @ReadWriteAttribute
    public var clientX: Double

    @ReadWriteAttribute
    public var clientY: Double

    @ReadWriteAttribute
    public var screenX: Double

    @ReadWriteAttribute
    public var screenY: Double

    @ReadWriteAttribute
    public var pageX: Double

    @ReadWriteAttribute
    public var pageY: Double

    @ReadWriteAttribute
    public var radiusX: Float

    @ReadWriteAttribute
    public var radiusY: Float

    @ReadWriteAttribute
    public var rotationAngle: Float

    @ReadWriteAttribute
    public var force: Float

    @ReadWriteAttribute
    public var altitudeAngle: Double

    @ReadWriteAttribute
    public var azimuthAngle: Double

    @ReadWriteAttribute
    public var touchType: TouchType
}

public class TouchList: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.TouchList].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> Touch? {
        jsObject[key].fromJSValue()
    }

    @inlinable public func item(index: UInt32) -> Touch? {
        let this = jsObject
        return this[Strings.item].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }
}

public enum TouchType: JSString, JSValueCompatible {
    case direct = "direct"
    case stylus = "stylus"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class TrackEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.TrackEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _track = ReadonlyAttribute(jsObject: jsObject, name: Strings.track)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: TrackEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var track: AudioTrack_or_TextTrack_or_VideoTrack?
}

public class TrackEventInit: BridgedDictionary {
    public convenience init(track: AudioTrack_or_TextTrack_or_VideoTrack?) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.track] = _toJSValue(track)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _track = ReadWriteAttribute(jsObject: object, name: Strings.track)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var track: AudioTrack_or_TextTrack_or_VideoTrack?
}

public class TransformStream: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.TransformStream].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _readable = ReadonlyAttribute(jsObject: jsObject, name: Strings.readable)
        _writable = ReadonlyAttribute(jsObject: jsObject, name: Strings.writable)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(transformer: JSObject? = nil, writableStrategy: QueuingStrategy? = nil, readableStrategy: QueuingStrategy? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(transformer), _toJSValue(writableStrategy), _toJSValue(readableStrategy)]))
    }

    @ReadonlyAttribute
    public var readable: ReadableStream

    @ReadonlyAttribute
    public var writable: WritableStream
}

public class TransformStreamDefaultController: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.TransformStreamDefaultController].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _desiredSize = ReadonlyAttribute(jsObject: jsObject, name: Strings.desiredSize)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var desiredSize: Double?

    @inlinable public func enqueue(chunk: JSValue? = nil) {
        let this = jsObject
        _ = this[Strings.enqueue].function!(this: this, arguments: [_toJSValue(chunk)])
    }

    @inlinable public func error(reason: JSValue? = nil) {
        let this = jsObject
        _ = this[Strings.error].function!(this: this, arguments: [_toJSValue(reason)])
    }

    @inlinable public func terminate() {
        let this = jsObject
        _ = this[Strings.terminate].function!(this: this, arguments: [])
    }
}

public class Transformer: BridgedDictionary {
    public convenience init(start: @escaping TransformerStartCallback, transform: @escaping TransformerTransformCallback, flush: @escaping TransformerFlushCallback, readableType: JSValue, writableType: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        ClosureAttribute1[Strings.start, in: object] = start
        ClosureAttribute2[Strings.transform, in: object] = transform
        ClosureAttribute1[Strings.flush, in: object] = flush
        object[Strings.readableType] = _toJSValue(readableType)
        object[Strings.writableType] = _toJSValue(writableType)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _start = ClosureAttribute1(jsObject: object, name: Strings.start)
        _transform = ClosureAttribute2(jsObject: object, name: Strings.transform)
        _flush = ClosureAttribute1(jsObject: object, name: Strings.flush)
        _readableType = ReadWriteAttribute(jsObject: object, name: Strings.readableType)
        _writableType = ReadWriteAttribute(jsObject: object, name: Strings.writableType)
        super.init(unsafelyWrapping: object)
    }

    @ClosureAttribute1
    public var start: TransformerStartCallback

    @ClosureAttribute2
    public var transform: TransformerTransformCallback

    @ClosureAttribute1
    public var flush: TransformerFlushCallback

    @ReadWriteAttribute
    public var readableType: JSValue

    @ReadWriteAttribute
    public var writableType: JSValue
}

public class TreeWalker: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.TreeWalker].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _root = ReadonlyAttribute(jsObject: jsObject, name: Strings.root)
        _whatToShow = ReadonlyAttribute(jsObject: jsObject, name: Strings.whatToShow)
        _currentNode = ReadWriteAttribute(jsObject: jsObject, name: Strings.currentNode)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var root: Node

    @ReadonlyAttribute
    public var whatToShow: UInt32

    // XXX: member 'filter' is ignored

    @ReadWriteAttribute
    public var currentNode: Node

    @inlinable public func parentNode() -> Node? {
        let this = jsObject
        return this[Strings.parentNode].function!(this: this, arguments: []).fromJSValue()
    }

    @inlinable public func firstChild() -> Node? {
        let this = jsObject
        return this[Strings.firstChild].function!(this: this, arguments: []).fromJSValue()
    }

    @inlinable public func lastChild() -> Node? {
        let this = jsObject
        return this[Strings.lastChild].function!(this: this, arguments: []).fromJSValue()
    }

    @inlinable public func previousSibling() -> Node? {
        let this = jsObject
        return this[Strings.previousSibling].function!(this: this, arguments: []).fromJSValue()
    }

    @inlinable public func nextSibling() -> Node? {
        let this = jsObject
        return this[Strings.nextSibling].function!(this: this, arguments: []).fromJSValue()
    }

    @inlinable public func previousNode() -> Node? {
        let this = jsObject
        return this[Strings.previousNode].function!(this: this, arguments: []).fromJSValue()
    }

    @inlinable public func nextNode() -> Node? {
        let this = jsObject
        return this[Strings.nextNode].function!(this: this, arguments: []).fromJSValue()
    }
}

public typealias EventHandler = EventHandlerNonNull?
public typealias OnErrorEventHandler = OnErrorEventHandlerNonNull?
public typealias OnBeforeUnloadEventHandler = OnBeforeUnloadEventHandlerNonNull?

public typealias DOMHighResTimeStamp = Double
public typealias EpochTimeStamp = UInt64

public typealias PerformanceEntryList = [PerformanceEntry]
public typealias MutationCallback = ([MutationRecord], MutationObserver) -> Void
public typealias BlobCallback = (Blob?) -> Void
public typealias FunctionStringCallback = (String) -> Void
public typealias NavigationInterceptHandler = () -> JSPromise
public typealias EventHandlerNonNull = (Event) -> JSValue
public typealias OnErrorEventHandlerNonNull = (Event_or_String, String, UInt32, UInt32, JSValue) -> JSValue
public typealias OnBeforeUnloadEventHandlerNonNull = (Event) -> String?
public typealias FrameRequestCallback = (DOMHighResTimeStamp) -> Void
public typealias UnderlyingSourceStartCallback = (ReadableStreamController) -> JSValue
public typealias UnderlyingSourcePullCallback = (ReadableStreamController) -> JSPromise
public typealias UnderlyingSourceCancelCallback = (JSValue) -> JSPromise
public typealias UnderlyingSinkStartCallback = (WritableStreamDefaultController) -> JSValue
public typealias UnderlyingSinkWriteCallback = (JSValue, WritableStreamDefaultController) -> JSPromise
public typealias UnderlyingSinkCloseCallback = () -> JSPromise
public typealias UnderlyingSinkAbortCallback = (JSValue) -> JSPromise
public typealias TransformerStartCallback = (TransformStreamDefaultController) -> JSValue
public typealias TransformerFlushCallback = (TransformStreamDefaultController) -> JSPromise
public typealias TransformerTransformCallback = (JSValue, TransformStreamDefaultController) -> JSPromise
public typealias QueuingStrategySize = (JSValue) -> Double
public typealias NavigatorUserMediaSuccessCallback = (MediaStream) -> Void
public typealias NavigatorUserMediaErrorCallback = (DOMException) -> Void
public typealias AudioDataOutputCallback = (AudioData) -> Void
public typealias VideoFrameOutputCallback = (VideoFrame) -> Void
public typealias EncodedAudioChunkOutputCallback = (EncodedAudioChunk, EncodedAudioChunkMetadata) -> Void
public typealias EncodedVideoChunkOutputCallback = (EncodedVideoChunk, EncodedVideoChunkMetadata) -> Void
public typealias WebCodecsErrorCallback = (DOMException) -> Void
public typealias PerformanceObserverCallback = (PerformanceObserverEntryList, PerformanceObserver, PerformanceObserverCallbackOptions) -> Void
public class UIEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.UIEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _view = ReadonlyAttribute(jsObject: jsObject, name: Strings.view)
        _detail = ReadonlyAttribute(jsObject: jsObject, name: Strings.detail)
        _which = ReadonlyAttribute(jsObject: jsObject, name: Strings.which)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: UIEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    @ReadonlyAttribute
    public var view: Window?

    @ReadonlyAttribute
    public var detail: Int32

    @inlinable public func initUIEvent(typeArg: String, bubblesArg: Bool? = nil, cancelableArg: Bool? = nil, viewArg: Window? = nil, detailArg: Int32? = nil) {
        let this = jsObject
        _ = this[Strings.initUIEvent].function!(this: this, arguments: [_toJSValue(typeArg), _toJSValue(bubblesArg), _toJSValue(cancelableArg), _toJSValue(viewArg), _toJSValue(detailArg)])
    }

    @ReadonlyAttribute
    public var which: UInt32
}

public class UIEventInit: BridgedDictionary {
    public convenience init(view: Window?, detail: Int32, which: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.view] = _toJSValue(view)
        object[Strings.detail] = _toJSValue(detail)
        object[Strings.which] = _toJSValue(which)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _view = ReadWriteAttribute(jsObject: object, name: Strings.view)
        _detail = ReadWriteAttribute(jsObject: object, name: Strings.detail)
        _which = ReadWriteAttribute(jsObject: object, name: Strings.which)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var view: Window?

    @ReadWriteAttribute
    public var detail: Int32

    @ReadWriteAttribute
    public var which: UInt32
}

public class ULongRange: BridgedDictionary {
    public convenience init(max: UInt32, min: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.max] = _toJSValue(max)
        object[Strings.min] = _toJSValue(min)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _max = ReadWriteAttribute(jsObject: object, name: Strings.max)
        _min = ReadWriteAttribute(jsObject: object, name: Strings.min)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var max: UInt32

    @ReadWriteAttribute
    public var min: UInt32
}

public extension URL {
    @inlinable class func createObjectURL(obj: Blob_or_MediaSource) -> String {
        let this = constructor!
        return this[Strings.createObjectURL].function!(this: this, arguments: [_toJSValue(obj)]).fromJSValue()!
    }

    @inlinable class func revokeObjectURL(url: String) {
        let this = constructor!
        _ = this[Strings.revokeObjectURL].function!(this: this, arguments: [_toJSValue(url)])
    }
}

public class UnderlyingSink: BridgedDictionary {
    public convenience init(start: @escaping UnderlyingSinkStartCallback, write: @escaping UnderlyingSinkWriteCallback, close: @escaping UnderlyingSinkCloseCallback, abort: @escaping UnderlyingSinkAbortCallback, type: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        ClosureAttribute1[Strings.start, in: object] = start
        ClosureAttribute2[Strings.write, in: object] = write
        ClosureAttribute0[Strings.close, in: object] = close
        ClosureAttribute1[Strings.abort, in: object] = abort
        object[Strings.type] = _toJSValue(type)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _start = ClosureAttribute1(jsObject: object, name: Strings.start)
        _write = ClosureAttribute2(jsObject: object, name: Strings.write)
        _close = ClosureAttribute0(jsObject: object, name: Strings.close)
        _abort = ClosureAttribute1(jsObject: object, name: Strings.abort)
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        super.init(unsafelyWrapping: object)
    }

    @ClosureAttribute1
    public var start: UnderlyingSinkStartCallback

    @ClosureAttribute2
    public var write: UnderlyingSinkWriteCallback

    @ClosureAttribute0
    public var close: UnderlyingSinkCloseCallback

    @ClosureAttribute1
    public var abort: UnderlyingSinkAbortCallback

    @ReadWriteAttribute
    public var type: JSValue
}

public class UnderlyingSource: BridgedDictionary {
    public convenience init(start: @escaping UnderlyingSourceStartCallback, pull: @escaping UnderlyingSourcePullCallback, cancel: @escaping UnderlyingSourceCancelCallback, type: ReadableStreamType, autoAllocateChunkSize: UInt64) {
        let object = JSObject.global[Strings.Object].function!.new()
        ClosureAttribute1[Strings.start, in: object] = start
        ClosureAttribute1[Strings.pull, in: object] = pull
        ClosureAttribute1[Strings.cancel, in: object] = cancel
        object[Strings.type] = _toJSValue(type)
        object[Strings.autoAllocateChunkSize] = _toJSValue(autoAllocateChunkSize)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _start = ClosureAttribute1(jsObject: object, name: Strings.start)
        _pull = ClosureAttribute1(jsObject: object, name: Strings.pull)
        _cancel = ClosureAttribute1(jsObject: object, name: Strings.cancel)
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        _autoAllocateChunkSize = ReadWriteAttribute(jsObject: object, name: Strings.autoAllocateChunkSize)
        super.init(unsafelyWrapping: object)
    }

    @ClosureAttribute1
    public var start: UnderlyingSourceStartCallback

    @ClosureAttribute1
    public var pull: UnderlyingSourcePullCallback

    @ClosureAttribute1
    public var cancel: UnderlyingSourceCancelCallback

    @ReadWriteAttribute
    public var type: ReadableStreamType

    @ReadWriteAttribute
    public var autoAllocateChunkSize: UInt64
}

public class UserActivation: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.UserActivation].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _hasBeenActive = ReadonlyAttribute(jsObject: jsObject, name: Strings.hasBeenActive)
        _isActive = ReadonlyAttribute(jsObject: jsObject, name: Strings.isActive)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var hasBeenActive: Bool

    @ReadonlyAttribute
    public var isActive: Bool
}

public class ValidityState: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.ValidityState].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _valueMissing = ReadonlyAttribute(jsObject: jsObject, name: Strings.valueMissing)
        _typeMismatch = ReadonlyAttribute(jsObject: jsObject, name: Strings.typeMismatch)
        _patternMismatch = ReadonlyAttribute(jsObject: jsObject, name: Strings.patternMismatch)
        _tooLong = ReadonlyAttribute(jsObject: jsObject, name: Strings.tooLong)
        _tooShort = ReadonlyAttribute(jsObject: jsObject, name: Strings.tooShort)
        _rangeUnderflow = ReadonlyAttribute(jsObject: jsObject, name: Strings.rangeUnderflow)
        _rangeOverflow = ReadonlyAttribute(jsObject: jsObject, name: Strings.rangeOverflow)
        _stepMismatch = ReadonlyAttribute(jsObject: jsObject, name: Strings.stepMismatch)
        _badInput = ReadonlyAttribute(jsObject: jsObject, name: Strings.badInput)
        _customError = ReadonlyAttribute(jsObject: jsObject, name: Strings.customError)
        _valid = ReadonlyAttribute(jsObject: jsObject, name: Strings.valid)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var valueMissing: Bool

    @ReadonlyAttribute
    public var typeMismatch: Bool

    @ReadonlyAttribute
    public var patternMismatch: Bool

    @ReadonlyAttribute
    public var tooLong: Bool

    @ReadonlyAttribute
    public var tooShort: Bool

    @ReadonlyAttribute
    public var rangeUnderflow: Bool

    @ReadonlyAttribute
    public var rangeOverflow: Bool

    @ReadonlyAttribute
    public var stepMismatch: Bool

    @ReadonlyAttribute
    public var badInput: Bool

    @ReadonlyAttribute
    public var customError: Bool

    @ReadonlyAttribute
    public var valid: Bool
}

public class ValidityStateFlags: BridgedDictionary {
    public convenience init(valueMissing: Bool, typeMismatch: Bool, patternMismatch: Bool, tooLong: Bool, tooShort: Bool, rangeUnderflow: Bool, rangeOverflow: Bool, stepMismatch: Bool, badInput: Bool, customError: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.valueMissing] = _toJSValue(valueMissing)
        object[Strings.typeMismatch] = _toJSValue(typeMismatch)
        object[Strings.patternMismatch] = _toJSValue(patternMismatch)
        object[Strings.tooLong] = _toJSValue(tooLong)
        object[Strings.tooShort] = _toJSValue(tooShort)
        object[Strings.rangeUnderflow] = _toJSValue(rangeUnderflow)
        object[Strings.rangeOverflow] = _toJSValue(rangeOverflow)
        object[Strings.stepMismatch] = _toJSValue(stepMismatch)
        object[Strings.badInput] = _toJSValue(badInput)
        object[Strings.customError] = _toJSValue(customError)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _valueMissing = ReadWriteAttribute(jsObject: object, name: Strings.valueMissing)
        _typeMismatch = ReadWriteAttribute(jsObject: object, name: Strings.typeMismatch)
        _patternMismatch = ReadWriteAttribute(jsObject: object, name: Strings.patternMismatch)
        _tooLong = ReadWriteAttribute(jsObject: object, name: Strings.tooLong)
        _tooShort = ReadWriteAttribute(jsObject: object, name: Strings.tooShort)
        _rangeUnderflow = ReadWriteAttribute(jsObject: object, name: Strings.rangeUnderflow)
        _rangeOverflow = ReadWriteAttribute(jsObject: object, name: Strings.rangeOverflow)
        _stepMismatch = ReadWriteAttribute(jsObject: object, name: Strings.stepMismatch)
        _badInput = ReadWriteAttribute(jsObject: object, name: Strings.badInput)
        _customError = ReadWriteAttribute(jsObject: object, name: Strings.customError)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var valueMissing: Bool

    @ReadWriteAttribute
    public var typeMismatch: Bool

    @ReadWriteAttribute
    public var patternMismatch: Bool

    @ReadWriteAttribute
    public var tooLong: Bool

    @ReadWriteAttribute
    public var tooShort: Bool

    @ReadWriteAttribute
    public var rangeUnderflow: Bool

    @ReadWriteAttribute
    public var rangeOverflow: Bool

    @ReadWriteAttribute
    public var stepMismatch: Bool

    @ReadWriteAttribute
    public var badInput: Bool

    @ReadWriteAttribute
    public var customError: Bool
}

public enum VideoColorPrimaries: JSString, JSValueCompatible {
    case bt709 = "bt709"
    case bt470bg = "bt470bg"
    case smpte170m = "smpte170m"
    case bt2020 = "bt2020"
    case smpte432 = "smpte432"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class VideoColorSpace: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.VideoColorSpace].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _primaries = ReadonlyAttribute(jsObject: jsObject, name: Strings.primaries)
        _transfer = ReadonlyAttribute(jsObject: jsObject, name: Strings.transfer)
        _matrix = ReadonlyAttribute(jsObject: jsObject, name: Strings.matrix)
        _fullRange = ReadonlyAttribute(jsObject: jsObject, name: Strings.fullRange)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(init: VideoColorSpaceInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var primaries: VideoColorPrimaries?

    @ReadonlyAttribute
    public var transfer: VideoTransferCharacteristics?

    @ReadonlyAttribute
    public var matrix: VideoMatrixCoefficients?

    @ReadonlyAttribute
    public var fullRange: Bool?

    @inlinable public func toJSON() -> VideoColorSpaceInit {
        let this = jsObject
        return this[Strings.toJSON].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class VideoColorSpaceInit: BridgedDictionary {
    public convenience init(primaries: VideoColorPrimaries?, transfer: VideoTransferCharacteristics?, matrix: VideoMatrixCoefficients?, fullRange: Bool?) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.primaries] = _toJSValue(primaries)
        object[Strings.transfer] = _toJSValue(transfer)
        object[Strings.matrix] = _toJSValue(matrix)
        object[Strings.fullRange] = _toJSValue(fullRange)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _primaries = ReadWriteAttribute(jsObject: object, name: Strings.primaries)
        _transfer = ReadWriteAttribute(jsObject: object, name: Strings.transfer)
        _matrix = ReadWriteAttribute(jsObject: object, name: Strings.matrix)
        _fullRange = ReadWriteAttribute(jsObject: object, name: Strings.fullRange)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var primaries: VideoColorPrimaries?

    @ReadWriteAttribute
    public var transfer: VideoTransferCharacteristics?

    @ReadWriteAttribute
    public var matrix: VideoMatrixCoefficients?

    @ReadWriteAttribute
    public var fullRange: Bool?
}

public class VideoDecoder: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.VideoDecoder].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _decodeQueueSize = ReadonlyAttribute(jsObject: jsObject, name: Strings.decodeQueueSize)
        _ondequeue = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.ondequeue)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(init: VideoDecoderInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var state: CodecState

    @ReadonlyAttribute
    public var decodeQueueSize: UInt32

    @ClosureAttribute1Optional
    public var ondequeue: EventHandler

    @inlinable public func configure(config: VideoDecoderConfig) {
        let this = jsObject
        _ = this[Strings.configure].function!(this: this, arguments: [_toJSValue(config)])
    }

    @inlinable public func decode(chunk: EncodedVideoChunk) {
        let this = jsObject
        _ = this[Strings.decode].function!(this: this, arguments: [_toJSValue(chunk)])
    }

    @inlinable public func flush() -> JSPromise {
        let this = jsObject
        return this[Strings.flush].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func flush() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.flush].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func reset() {
        let this = jsObject
        _ = this[Strings.reset].function!(this: this, arguments: [])
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @inlinable public class func isConfigSupported(config: VideoDecoderConfig) -> JSPromise {
        let this = constructor!
        return this[Strings.isConfigSupported].function!(this: this, arguments: [_toJSValue(config)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public class func isConfigSupported(config: VideoDecoderConfig) async throws -> VideoDecoderSupport {
        let this = constructor!
        let _promise: JSPromise = this[Strings.isConfigSupported].function!(this: this, arguments: [_toJSValue(config)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public class VideoDecoderConfig: BridgedDictionary {
    public convenience init(codec: String, description: AllowSharedBufferSource, codedWidth: UInt32, codedHeight: UInt32, displayAspectWidth: UInt32, displayAspectHeight: UInt32, colorSpace: VideoColorSpaceInit, hardwareAcceleration: HardwareAcceleration, optimizeForLatency: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.codec] = _toJSValue(codec)
        object[Strings.description] = _toJSValue(description)
        object[Strings.codedWidth] = _toJSValue(codedWidth)
        object[Strings.codedHeight] = _toJSValue(codedHeight)
        object[Strings.displayAspectWidth] = _toJSValue(displayAspectWidth)
        object[Strings.displayAspectHeight] = _toJSValue(displayAspectHeight)
        object[Strings.colorSpace] = _toJSValue(colorSpace)
        object[Strings.hardwareAcceleration] = _toJSValue(hardwareAcceleration)
        object[Strings.optimizeForLatency] = _toJSValue(optimizeForLatency)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _codec = ReadWriteAttribute(jsObject: object, name: Strings.codec)
        _description = ReadWriteAttribute(jsObject: object, name: Strings.description)
        _codedWidth = ReadWriteAttribute(jsObject: object, name: Strings.codedWidth)
        _codedHeight = ReadWriteAttribute(jsObject: object, name: Strings.codedHeight)
        _displayAspectWidth = ReadWriteAttribute(jsObject: object, name: Strings.displayAspectWidth)
        _displayAspectHeight = ReadWriteAttribute(jsObject: object, name: Strings.displayAspectHeight)
        _colorSpace = ReadWriteAttribute(jsObject: object, name: Strings.colorSpace)
        _hardwareAcceleration = ReadWriteAttribute(jsObject: object, name: Strings.hardwareAcceleration)
        _optimizeForLatency = ReadWriteAttribute(jsObject: object, name: Strings.optimizeForLatency)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var codec: String

    @ReadWriteAttribute
    public var description: AllowSharedBufferSource

    @ReadWriteAttribute
    public var codedWidth: UInt32

    @ReadWriteAttribute
    public var codedHeight: UInt32

    @ReadWriteAttribute
    public var displayAspectWidth: UInt32

    @ReadWriteAttribute
    public var displayAspectHeight: UInt32

    @ReadWriteAttribute
    public var colorSpace: VideoColorSpaceInit

    @ReadWriteAttribute
    public var hardwareAcceleration: HardwareAcceleration

    @ReadWriteAttribute
    public var optimizeForLatency: Bool
}

public class VideoDecoderInit: BridgedDictionary {
    public convenience init(output: @escaping VideoFrameOutputCallback, error: @escaping WebCodecsErrorCallback) {
        let object = JSObject.global[Strings.Object].function!.new()
        ClosureAttribute1Void[Strings.output, in: object] = output
        ClosureAttribute1Void[Strings.error, in: object] = error
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _output = ClosureAttribute1Void(jsObject: object, name: Strings.output)
        _error = ClosureAttribute1Void(jsObject: object, name: Strings.error)
        super.init(unsafelyWrapping: object)
    }

    @ClosureAttribute1Void
    public var output: VideoFrameOutputCallback

    @ClosureAttribute1Void
    public var error: WebCodecsErrorCallback
}

public class VideoDecoderSupport: BridgedDictionary {
    public convenience init(supported: Bool, config: VideoDecoderConfig) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.supported] = _toJSValue(supported)
        object[Strings.config] = _toJSValue(config)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _supported = ReadWriteAttribute(jsObject: object, name: Strings.supported)
        _config = ReadWriteAttribute(jsObject: object, name: Strings.config)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var supported: Bool

    @ReadWriteAttribute
    public var config: VideoDecoderConfig
}

public class VideoEncoder: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.VideoEncoder].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _encodeQueueSize = ReadonlyAttribute(jsObject: jsObject, name: Strings.encodeQueueSize)
        _ondequeue = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.ondequeue)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(init: VideoEncoderInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var state: CodecState

    @ReadonlyAttribute
    public var encodeQueueSize: UInt32

    @ClosureAttribute1Optional
    public var ondequeue: EventHandler

    @inlinable public func configure(config: VideoEncoderConfig) {
        let this = jsObject
        _ = this[Strings.configure].function!(this: this, arguments: [_toJSValue(config)])
    }

    @inlinable public func encode(frame: VideoFrame, options: VideoEncoderEncodeOptions? = nil) {
        let this = jsObject
        _ = this[Strings.encode].function!(this: this, arguments: [_toJSValue(frame), _toJSValue(options)])
    }

    @inlinable public func flush() -> JSPromise {
        let this = jsObject
        return this[Strings.flush].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func flush() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.flush].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func reset() {
        let this = jsObject
        _ = this[Strings.reset].function!(this: this, arguments: [])
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @inlinable public class func isConfigSupported(config: VideoEncoderConfig) -> JSPromise {
        let this = constructor!
        return this[Strings.isConfigSupported].function!(this: this, arguments: [_toJSValue(config)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public class func isConfigSupported(config: VideoEncoderConfig) async throws -> VideoEncoderSupport {
        let this = constructor!
        let _promise: JSPromise = this[Strings.isConfigSupported].function!(this: this, arguments: [_toJSValue(config)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public enum VideoEncoderBitrateMode: JSString, JSValueCompatible {
    case constant = "constant"
    case variable = "variable"
    case quantizer = "quantizer"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class VideoEncoderConfig: BridgedDictionary {
    public convenience init(codec: String, width: UInt32, height: UInt32, displayWidth: UInt32, displayHeight: UInt32, bitrate: UInt64, framerate: Double, hardwareAcceleration: HardwareAcceleration, alpha: AlphaOption, scalabilityMode: String, bitrateMode: VideoEncoderBitrateMode, latencyMode: LatencyMode) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.codec] = _toJSValue(codec)
        object[Strings.width] = _toJSValue(width)
        object[Strings.height] = _toJSValue(height)
        object[Strings.displayWidth] = _toJSValue(displayWidth)
        object[Strings.displayHeight] = _toJSValue(displayHeight)
        object[Strings.bitrate] = _toJSValue(bitrate)
        object[Strings.framerate] = _toJSValue(framerate)
        object[Strings.hardwareAcceleration] = _toJSValue(hardwareAcceleration)
        object[Strings.alpha] = _toJSValue(alpha)
        object[Strings.scalabilityMode] = _toJSValue(scalabilityMode)
        object[Strings.bitrateMode] = _toJSValue(bitrateMode)
        object[Strings.latencyMode] = _toJSValue(latencyMode)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _codec = ReadWriteAttribute(jsObject: object, name: Strings.codec)
        _width = ReadWriteAttribute(jsObject: object, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: object, name: Strings.height)
        _displayWidth = ReadWriteAttribute(jsObject: object, name: Strings.displayWidth)
        _displayHeight = ReadWriteAttribute(jsObject: object, name: Strings.displayHeight)
        _bitrate = ReadWriteAttribute(jsObject: object, name: Strings.bitrate)
        _framerate = ReadWriteAttribute(jsObject: object, name: Strings.framerate)
        _hardwareAcceleration = ReadWriteAttribute(jsObject: object, name: Strings.hardwareAcceleration)
        _alpha = ReadWriteAttribute(jsObject: object, name: Strings.alpha)
        _scalabilityMode = ReadWriteAttribute(jsObject: object, name: Strings.scalabilityMode)
        _bitrateMode = ReadWriteAttribute(jsObject: object, name: Strings.bitrateMode)
        _latencyMode = ReadWriteAttribute(jsObject: object, name: Strings.latencyMode)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var codec: String

    @ReadWriteAttribute
    public var width: UInt32

    @ReadWriteAttribute
    public var height: UInt32

    @ReadWriteAttribute
    public var displayWidth: UInt32

    @ReadWriteAttribute
    public var displayHeight: UInt32

    @ReadWriteAttribute
    public var bitrate: UInt64

    @ReadWriteAttribute
    public var framerate: Double

    @ReadWriteAttribute
    public var hardwareAcceleration: HardwareAcceleration

    @ReadWriteAttribute
    public var alpha: AlphaOption

    @ReadWriteAttribute
    public var scalabilityMode: String

    @ReadWriteAttribute
    public var bitrateMode: VideoEncoderBitrateMode

    @ReadWriteAttribute
    public var latencyMode: LatencyMode
}

public class VideoEncoderEncodeOptions: BridgedDictionary {
    public convenience init(keyFrame: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.keyFrame] = _toJSValue(keyFrame)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _keyFrame = ReadWriteAttribute(jsObject: object, name: Strings.keyFrame)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var keyFrame: Bool
}

public class VideoEncoderInit: BridgedDictionary {
    public convenience init(output: @escaping EncodedVideoChunkOutputCallback, error: @escaping WebCodecsErrorCallback) {
        let object = JSObject.global[Strings.Object].function!.new()
        ClosureAttribute2Void[Strings.output, in: object] = output
        ClosureAttribute1Void[Strings.error, in: object] = error
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _output = ClosureAttribute2Void(jsObject: object, name: Strings.output)
        _error = ClosureAttribute1Void(jsObject: object, name: Strings.error)
        super.init(unsafelyWrapping: object)
    }

    @ClosureAttribute2Void
    public var output: EncodedVideoChunkOutputCallback

    @ClosureAttribute1Void
    public var error: WebCodecsErrorCallback
}

public class VideoEncoderSupport: BridgedDictionary {
    public convenience init(supported: Bool, config: VideoEncoderConfig) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.supported] = _toJSValue(supported)
        object[Strings.config] = _toJSValue(config)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _supported = ReadWriteAttribute(jsObject: object, name: Strings.supported)
        _config = ReadWriteAttribute(jsObject: object, name: Strings.config)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var supported: Bool

    @ReadWriteAttribute
    public var config: VideoEncoderConfig
}

public enum VideoFacingModeEnum: JSString, JSValueCompatible {
    case user = "user"
    case environment = "environment"
    case left = "left"
    case right = "right"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class VideoFrame: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.VideoFrame].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _format = ReadonlyAttribute(jsObject: jsObject, name: Strings.format)
        _codedWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.codedWidth)
        _codedHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.codedHeight)
        _codedRect = ReadonlyAttribute(jsObject: jsObject, name: Strings.codedRect)
        _visibleRect = ReadonlyAttribute(jsObject: jsObject, name: Strings.visibleRect)
        _displayWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.displayWidth)
        _displayHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.displayHeight)
        _duration = ReadonlyAttribute(jsObject: jsObject, name: Strings.duration)
        _timestamp = ReadonlyAttribute(jsObject: jsObject, name: Strings.timestamp)
        _colorSpace = ReadonlyAttribute(jsObject: jsObject, name: Strings.colorSpace)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(image: CanvasImageSource, init: VideoFrameInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(image), _toJSValue(`init`)]))
    }

    @inlinable public convenience init(data: AllowSharedBufferSource, init: VideoFrameBufferInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(data), _toJSValue(`init`)]))
    }

    @ReadonlyAttribute
    public var format: VideoPixelFormat?

    @ReadonlyAttribute
    public var codedWidth: UInt32

    @ReadonlyAttribute
    public var codedHeight: UInt32

    @ReadonlyAttribute
    public var codedRect: DOMRectReadOnly?

    @ReadonlyAttribute
    public var visibleRect: DOMRectReadOnly?

    @ReadonlyAttribute
    public var displayWidth: UInt32

    @ReadonlyAttribute
    public var displayHeight: UInt32

    @ReadonlyAttribute
    public var duration: UInt64?

    @ReadonlyAttribute
    public var timestamp: Int64

    @ReadonlyAttribute
    public var colorSpace: VideoColorSpace

    @inlinable public func metadata() -> VideoFrameMetadata {
        let this = jsObject
        return this[Strings.metadata].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func allocationSize(options: VideoFrameCopyToOptions? = nil) -> UInt32 {
        let this = jsObject
        return this[Strings.allocationSize].function!(this: this, arguments: [_toJSValue(options)]).fromJSValue()!
    }

    @inlinable public func copyTo(destination: AllowSharedBufferSource, options: VideoFrameCopyToOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.copyTo].function!(this: this, arguments: [_toJSValue(destination), _toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func copyTo(destination: AllowSharedBufferSource, options: VideoFrameCopyToOptions? = nil) async throws -> [PlaneLayout] {
        let this = jsObject
        let _promise: JSPromise = this[Strings.copyTo].function!(this: this, arguments: [_toJSValue(destination), _toJSValue(options)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func clone() -> Self {
        let this = jsObject
        return this[Strings.clone].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }
}

public class VideoFrameBufferInit: BridgedDictionary {
    public convenience init(format: VideoPixelFormat, codedWidth: UInt32, codedHeight: UInt32, timestamp: Int64, duration: UInt64, layout: [PlaneLayout], visibleRect: DOMRectInit, displayWidth: UInt32, displayHeight: UInt32, colorSpace: VideoColorSpaceInit, transfer: [ArrayBuffer]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.format] = _toJSValue(format)
        object[Strings.codedWidth] = _toJSValue(codedWidth)
        object[Strings.codedHeight] = _toJSValue(codedHeight)
        object[Strings.timestamp] = _toJSValue(timestamp)
        object[Strings.duration] = _toJSValue(duration)
        object[Strings.layout] = _toJSValue(layout)
        object[Strings.visibleRect] = _toJSValue(visibleRect)
        object[Strings.displayWidth] = _toJSValue(displayWidth)
        object[Strings.displayHeight] = _toJSValue(displayHeight)
        object[Strings.colorSpace] = _toJSValue(colorSpace)
        object[Strings.transfer] = _toJSValue(transfer)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _format = ReadWriteAttribute(jsObject: object, name: Strings.format)
        _codedWidth = ReadWriteAttribute(jsObject: object, name: Strings.codedWidth)
        _codedHeight = ReadWriteAttribute(jsObject: object, name: Strings.codedHeight)
        _timestamp = ReadWriteAttribute(jsObject: object, name: Strings.timestamp)
        _duration = ReadWriteAttribute(jsObject: object, name: Strings.duration)
        _layout = ReadWriteAttribute(jsObject: object, name: Strings.layout)
        _visibleRect = ReadWriteAttribute(jsObject: object, name: Strings.visibleRect)
        _displayWidth = ReadWriteAttribute(jsObject: object, name: Strings.displayWidth)
        _displayHeight = ReadWriteAttribute(jsObject: object, name: Strings.displayHeight)
        _colorSpace = ReadWriteAttribute(jsObject: object, name: Strings.colorSpace)
        _transfer = ReadWriteAttribute(jsObject: object, name: Strings.transfer)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var format: VideoPixelFormat

    @ReadWriteAttribute
    public var codedWidth: UInt32

    @ReadWriteAttribute
    public var codedHeight: UInt32

    @ReadWriteAttribute
    public var timestamp: Int64

    @ReadWriteAttribute
    public var duration: UInt64

    @ReadWriteAttribute
    public var layout: [PlaneLayout]

    @ReadWriteAttribute
    public var visibleRect: DOMRectInit

    @ReadWriteAttribute
    public var displayWidth: UInt32

    @ReadWriteAttribute
    public var displayHeight: UInt32

    @ReadWriteAttribute
    public var colorSpace: VideoColorSpaceInit

    @ReadWriteAttribute
    public var transfer: [ArrayBuffer]
}

public class VideoFrameCopyToOptions: BridgedDictionary {
    public convenience init(rect: DOMRectInit, layout: [PlaneLayout]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.rect] = _toJSValue(rect)
        object[Strings.layout] = _toJSValue(layout)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _rect = ReadWriteAttribute(jsObject: object, name: Strings.rect)
        _layout = ReadWriteAttribute(jsObject: object, name: Strings.layout)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var rect: DOMRectInit

    @ReadWriteAttribute
    public var layout: [PlaneLayout]
}

public class VideoFrameInit: BridgedDictionary {
    public convenience init(duration: UInt64, timestamp: Int64, alpha: AlphaOption, visibleRect: DOMRectInit, displayWidth: UInt32, displayHeight: UInt32, metadata: VideoFrameMetadata) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.duration] = _toJSValue(duration)
        object[Strings.timestamp] = _toJSValue(timestamp)
        object[Strings.alpha] = _toJSValue(alpha)
        object[Strings.visibleRect] = _toJSValue(visibleRect)
        object[Strings.displayWidth] = _toJSValue(displayWidth)
        object[Strings.displayHeight] = _toJSValue(displayHeight)
        object[Strings.metadata] = _toJSValue(metadata)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _duration = ReadWriteAttribute(jsObject: object, name: Strings.duration)
        _timestamp = ReadWriteAttribute(jsObject: object, name: Strings.timestamp)
        _alpha = ReadWriteAttribute(jsObject: object, name: Strings.alpha)
        _visibleRect = ReadWriteAttribute(jsObject: object, name: Strings.visibleRect)
        _displayWidth = ReadWriteAttribute(jsObject: object, name: Strings.displayWidth)
        _displayHeight = ReadWriteAttribute(jsObject: object, name: Strings.displayHeight)
        _metadata = ReadWriteAttribute(jsObject: object, name: Strings.metadata)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var duration: UInt64

    @ReadWriteAttribute
    public var timestamp: Int64

    @ReadWriteAttribute
    public var alpha: AlphaOption

    @ReadWriteAttribute
    public var visibleRect: DOMRectInit

    @ReadWriteAttribute
    public var displayWidth: UInt32

    @ReadWriteAttribute
    public var displayHeight: UInt32

    @ReadWriteAttribute
    public var metadata: VideoFrameMetadata
}

public class VideoFrameMetadata: BridgedDictionary {
    public convenience init() {
        let object = JSObject.global[Strings.Object].function!.new()

        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        super.init(unsafelyWrapping: object)
    }
}

public enum VideoMatrixCoefficients: JSString, JSValueCompatible {
    case rgb = "rgb"
    case bt709 = "bt709"
    case bt470bg = "bt470bg"
    case smpte170m = "smpte170m"
    case bt2020Ncl = "bt2020-ncl"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum VideoPixelFormat: JSString, JSValueCompatible {
    case i420 = "I420"
    case i420A = "I420A"
    case i422 = "I422"
    case i444 = "I444"
    case nV12 = "NV12"
    case rGBA = "RGBA"
    case rGBX = "RGBX"
    case bGRA = "BGRA"
    case bGRX = "BGRX"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum VideoResizeModeEnum: JSString, JSValueCompatible {
    case none = "none"
    case cropAndScale = "crop-and-scale"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class VideoTrack: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.VideoTrack].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _kind = ReadonlyAttribute(jsObject: jsObject, name: Strings.kind)
        _label = ReadonlyAttribute(jsObject: jsObject, name: Strings.label)
        _language = ReadonlyAttribute(jsObject: jsObject, name: Strings.language)
        _selected = ReadWriteAttribute(jsObject: jsObject, name: Strings.selected)
        _sourceBuffer = ReadonlyAttribute(jsObject: jsObject, name: Strings.sourceBuffer)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var id: String

    @ReadonlyAttribute
    public var kind: String

    @ReadonlyAttribute
    public var label: String

    @ReadonlyAttribute
    public var language: String

    @ReadWriteAttribute
    public var selected: Bool

    @ReadonlyAttribute
    public var sourceBuffer: SourceBuffer?
}

public class VideoTrackList: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.VideoTrackList].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        _selectedIndex = ReadonlyAttribute(jsObject: jsObject, name: Strings.selectedIndex)
        _onchange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onchange)
        _onaddtrack = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onaddtrack)
        _onremovetrack = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onremovetrack)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var length: UInt32

    @inlinable public subscript(key: Int) -> VideoTrack {
        jsObject[key].fromJSValue()!
    }

    @inlinable public func getTrackById(id: String) -> VideoTrack? {
        let this = jsObject
        return this[Strings.getTrackById].function!(this: this, arguments: [_toJSValue(id)]).fromJSValue()
    }

    @ReadonlyAttribute
    public var selectedIndex: Int32

    @ClosureAttribute1Optional
    public var onchange: EventHandler

    @ClosureAttribute1Optional
    public var onaddtrack: EventHandler

    @ClosureAttribute1Optional
    public var onremovetrack: EventHandler
}

public enum VideoTransferCharacteristics: JSString, JSValueCompatible {
    case bt709 = "bt709"
    case smpte170m = "smpte170m"
    case iec6196621 = "iec61966-2-1"
    case linear = "linear"
    case pq = "pq"
    case hlg = "hlg"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class VisibilityStateEntry: PerformanceEntry {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.VisibilityStateEntry].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadonlyAttribute(jsObject: jsObject, name: Strings.name)
        _entryType = ReadonlyAttribute(jsObject: jsObject, name: Strings.entryType)
        _startTime = ReadonlyAttribute(jsObject: jsObject, name: Strings.startTime)
        super.init(unsafelyWrapping: jsObject)
    }

    @usableFromInline let _name: ReadonlyAttribute<String>
    @inlinable override public var name: String { _name.wrappedValue }

    @usableFromInline let _entryType: ReadonlyAttribute<String>
    @inlinable override public var entryType: String { _entryType.wrappedValue }

    @usableFromInline let _startTime: ReadonlyAttribute<DOMHighResTimeStamp>
    @inlinable override public var startTime: DOMHighResTimeStamp { _startTime.wrappedValue }

    // XXX: override of property `duration` removed because the type here is UInt32 but the
    // type in the superclass is DOMHighResTimestamp (Double).
}

public class VisualViewport: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.VisualViewport].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _offsetLeft = ReadonlyAttribute(jsObject: jsObject, name: Strings.offsetLeft)
        _offsetTop = ReadonlyAttribute(jsObject: jsObject, name: Strings.offsetTop)
        _pageLeft = ReadonlyAttribute(jsObject: jsObject, name: Strings.pageLeft)
        _pageTop = ReadonlyAttribute(jsObject: jsObject, name: Strings.pageTop)
        _width = ReadonlyAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadonlyAttribute(jsObject: jsObject, name: Strings.height)
        _scale = ReadonlyAttribute(jsObject: jsObject, name: Strings.scale)
        _onresize = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onresize)
        _onscroll = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onscroll)
        _onscrollend = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onscrollend)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var offsetLeft: Double

    @ReadonlyAttribute
    public var offsetTop: Double

    @ReadonlyAttribute
    public var pageLeft: Double

    @ReadonlyAttribute
    public var pageTop: Double

    @ReadonlyAttribute
    public var width: Double

    @ReadonlyAttribute
    public var height: Double

    @ReadonlyAttribute
    public var scale: Double

    @ClosureAttribute1Optional
    public var onresize: EventHandler

    @ClosureAttribute1Optional
    public var onscroll: EventHandler

    @ClosureAttribute1Optional
    public var onscrollend: EventHandler
}

public class WheelEvent: MouseEvent {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.WheelEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _deltaX = ReadonlyAttribute(jsObject: jsObject, name: Strings.deltaX)
        _deltaY = ReadonlyAttribute(jsObject: jsObject, name: Strings.deltaY)
        _deltaZ = ReadonlyAttribute(jsObject: jsObject, name: Strings.deltaZ)
        _deltaMode = ReadonlyAttribute(jsObject: jsObject, name: Strings.deltaMode)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: WheelEventInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(type), _toJSValue(eventInitDict)]))
    }

    public static let DOM_DELTA_PIXEL: UInt32 = 0x00

    public static let DOM_DELTA_LINE: UInt32 = 0x01

    public static let DOM_DELTA_PAGE: UInt32 = 0x02

    @ReadonlyAttribute
    public var deltaX: Double

    @ReadonlyAttribute
    public var deltaY: Double

    @ReadonlyAttribute
    public var deltaZ: Double

    @ReadonlyAttribute
    public var deltaMode: UInt32
}

public class WheelEventInit: BridgedDictionary {
    public convenience init(deltaX: Double, deltaY: Double, deltaZ: Double, deltaMode: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.deltaX] = _toJSValue(deltaX)
        object[Strings.deltaY] = _toJSValue(deltaY)
        object[Strings.deltaZ] = _toJSValue(deltaZ)
        object[Strings.deltaMode] = _toJSValue(deltaMode)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _deltaX = ReadWriteAttribute(jsObject: object, name: Strings.deltaX)
        _deltaY = ReadWriteAttribute(jsObject: object, name: Strings.deltaY)
        _deltaZ = ReadWriteAttribute(jsObject: object, name: Strings.deltaZ)
        _deltaMode = ReadWriteAttribute(jsObject: object, name: Strings.deltaMode)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var deltaX: Double

    @ReadWriteAttribute
    public var deltaY: Double

    @ReadWriteAttribute
    public var deltaZ: Double

    @ReadWriteAttribute
    public var deltaMode: UInt32
}

public class Window: EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, AnimationFrameProvider, WindowSessionStorage, WindowLocalStorage {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.Window].function }

    @inlinable public static var global: Window {
        Window(unsafelyWrapping: JSObject.global)
    }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _event = ReadonlyAttribute(jsObject: jsObject, name: Strings.event)
        _window = ReadonlyAttribute(jsObject: jsObject, name: Strings.window)
        _self = ReadonlyAttribute(jsObject: jsObject, name: Strings._self)
        _document = ReadonlyAttribute(jsObject: jsObject, name: Strings.document)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _location = ReadonlyAttribute(jsObject: jsObject, name: Strings.location)
        _history = ReadonlyAttribute(jsObject: jsObject, name: Strings.history)
        _navigation = ReadonlyAttribute(jsObject: jsObject, name: Strings.navigation)
        _customElements = ReadonlyAttribute(jsObject: jsObject, name: Strings.customElements)
        _locationbar = ReadonlyAttribute(jsObject: jsObject, name: Strings.locationbar)
        _menubar = ReadonlyAttribute(jsObject: jsObject, name: Strings.menubar)
        _personalbar = ReadonlyAttribute(jsObject: jsObject, name: Strings.personalbar)
        _scrollbars = ReadonlyAttribute(jsObject: jsObject, name: Strings.scrollbars)
        _statusbar = ReadonlyAttribute(jsObject: jsObject, name: Strings.statusbar)
        _toolbar = ReadonlyAttribute(jsObject: jsObject, name: Strings.toolbar)
        _status = ReadWriteAttribute(jsObject: jsObject, name: Strings.status)
        _closed = ReadonlyAttribute(jsObject: jsObject, name: Strings.closed)
        _frames = ReadonlyAttribute(jsObject: jsObject, name: Strings.frames)
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        _top = ReadonlyAttribute(jsObject: jsObject, name: Strings.top)
        _opener = ReadWriteAttribute(jsObject: jsObject, name: Strings.opener)
        _parent = ReadonlyAttribute(jsObject: jsObject, name: Strings.parent)
        _frameElement = ReadonlyAttribute(jsObject: jsObject, name: Strings.frameElement)
        _navigator = ReadonlyAttribute(jsObject: jsObject, name: Strings.navigator)
        _clientInformation = ReadonlyAttribute(jsObject: jsObject, name: Strings.clientInformation)
        _originAgentCluster = ReadonlyAttribute(jsObject: jsObject, name: Strings.originAgentCluster)
        _external = ReadonlyAttribute(jsObject: jsObject, name: Strings.external)
        _screen = ReadonlyAttribute(jsObject: jsObject, name: Strings.screen)
        _visualViewport = ReadonlyAttribute(jsObject: jsObject, name: Strings.visualViewport)
        _innerWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.innerWidth)
        _innerHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.innerHeight)
        _scrollX = ReadonlyAttribute(jsObject: jsObject, name: Strings.scrollX)
        _pageXOffset = ReadonlyAttribute(jsObject: jsObject, name: Strings.pageXOffset)
        _scrollY = ReadonlyAttribute(jsObject: jsObject, name: Strings.scrollY)
        _pageYOffset = ReadonlyAttribute(jsObject: jsObject, name: Strings.pageYOffset)
        _screenX = ReadonlyAttribute(jsObject: jsObject, name: Strings.screenX)
        _screenLeft = ReadonlyAttribute(jsObject: jsObject, name: Strings.screenLeft)
        _screenY = ReadonlyAttribute(jsObject: jsObject, name: Strings.screenY)
        _screenTop = ReadonlyAttribute(jsObject: jsObject, name: Strings.screenTop)
        _outerWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.outerWidth)
        _outerHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.outerHeight)
        _devicePixelRatio = ReadonlyAttribute(jsObject: jsObject, name: Strings.devicePixelRatio)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var event: Event?

    @ReadonlyAttribute
    public var window: WindowProxy

    @ReadonlyAttribute
    public var `self`: WindowProxy

    @ReadonlyAttribute
    public var document: Document

    @ReadWriteAttribute
    public var name: String

    @ReadonlyAttribute
    public var location: Location

    @ReadonlyAttribute
    public var history: History

    @ReadonlyAttribute
    public var navigation: Navigation

    @ReadonlyAttribute
    public var customElements: CustomElementRegistry

    @ReadonlyAttribute
    public var locationbar: BarProp

    @ReadonlyAttribute
    public var menubar: BarProp

    @ReadonlyAttribute
    public var personalbar: BarProp

    @ReadonlyAttribute
    public var scrollbars: BarProp

    @ReadonlyAttribute
    public var statusbar: BarProp

    @ReadonlyAttribute
    public var toolbar: BarProp

    @ReadWriteAttribute
    public var status: String

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var closed: Bool

    @inlinable public func stop() {
        let this = jsObject
        _ = this[Strings.stop].function!(this: this, arguments: [])
    }

    @inlinable public func focus() {
        let this = jsObject
        _ = this[Strings.focus].function!(this: this, arguments: [])
    }

    @inlinable public func blur() {
        let this = jsObject
        _ = this[Strings.blur].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var frames: WindowProxy

    @ReadonlyAttribute
    public var length: UInt32

    @ReadonlyAttribute
    public var top: WindowProxy?

    @ReadWriteAttribute
    public var opener: JSValue

    @ReadonlyAttribute
    public var parent: WindowProxy?

    @ReadonlyAttribute
    public var frameElement: Element?

    @inlinable public func open(url: String? = nil, target: String? = nil, features: String? = nil) -> WindowProxy? {
        let this = jsObject
        return this[Strings.open].function!(this: this, arguments: [_toJSValue(url), _toJSValue(target), _toJSValue(features)]).fromJSValue()
    }

    @inlinable public subscript(key: String) -> JSObject {
        jsObject[key].fromJSValue()!
    }

    @ReadonlyAttribute
    public var navigator: Navigator

    @ReadonlyAttribute
    public var clientInformation: Navigator

    @ReadonlyAttribute
    public var originAgentCluster: Bool

    @inlinable public func alert() {
        let this = jsObject
        _ = this[Strings.alert].function!(this: this, arguments: [])
    }

    @inlinable public func alert(message: String) {
        let this = jsObject
        _ = this[Strings.alert].function!(this: this, arguments: [_toJSValue(message)])
    }

    @inlinable public func confirm(message: String? = nil) -> Bool {
        let this = jsObject
        return this[Strings.confirm].function!(this: this, arguments: [_toJSValue(message)]).fromJSValue()!
    }

    @inlinable public func prompt(message: String? = nil, default: String? = nil) -> String? {
        let this = jsObject
        return this[Strings.prompt].function!(this: this, arguments: [_toJSValue(message), _toJSValue(`default`)]).fromJSValue()
    }

    @inlinable public func print() {
        let this = jsObject
        _ = this[Strings.print].function!(this: this, arguments: [])
    }

    @inlinable public func postMessage(message: JSValue, targetOrigin: String, transfer: [JSObject]? = nil) {
        let this = jsObject
        _ = this[Strings.postMessage].function!(this: this, arguments: [_toJSValue(message), _toJSValue(targetOrigin), _toJSValue(transfer)])
    }

    @inlinable public func postMessage(message: JSValue, options: WindowPostMessageOptions? = nil) {
        let this = jsObject
        _ = this[Strings.postMessage].function!(this: this, arguments: [_toJSValue(message), _toJSValue(options)])
    }

    @inlinable public func captureEvents() {
        let this = jsObject
        _ = this[Strings.captureEvents].function!(this: this, arguments: [])
    }

    @inlinable public func releaseEvents() {
        let this = jsObject
        _ = this[Strings.releaseEvents].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var external: External

    @inlinable public func matchMedia(query: String) -> MediaQueryList {
        let this = jsObject
        return this[Strings.matchMedia].function!(this: this, arguments: [_toJSValue(query)]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var screen: Screen

    @ReadonlyAttribute
    public var visualViewport: VisualViewport?

    @inlinable public func moveTo(x: Int32, y: Int32) {
        let this = jsObject
        _ = this[Strings.moveTo].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @inlinable public func moveBy(x: Int32, y: Int32) {
        let this = jsObject
        _ = this[Strings.moveBy].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @inlinable public func resizeTo(width: Int32, height: Int32) {
        let this = jsObject
        _ = this[Strings.resizeTo].function!(this: this, arguments: [_toJSValue(width), _toJSValue(height)])
    }

    @inlinable public func resizeBy(x: Int32, y: Int32) {
        let this = jsObject
        _ = this[Strings.resizeBy].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @ReadonlyAttribute
    public var innerWidth: Int32

    @ReadonlyAttribute
    public var innerHeight: Int32

    @ReadonlyAttribute
    public var scrollX: Double

    @ReadonlyAttribute
    public var pageXOffset: Double

    @ReadonlyAttribute
    public var scrollY: Double

    @ReadonlyAttribute
    public var pageYOffset: Double

    @inlinable public func scroll(options: ScrollToOptions? = nil) {
        let this = jsObject
        _ = this[Strings.scroll].function!(this: this, arguments: [_toJSValue(options)])
    }

    @inlinable public func scroll(x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.scroll].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @inlinable public func scrollTo(options: ScrollToOptions? = nil) {
        let this = jsObject
        _ = this[Strings.scrollTo].function!(this: this, arguments: [_toJSValue(options)])
    }

    @inlinable public func scrollTo(x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.scrollTo].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @inlinable public func scrollBy(options: ScrollToOptions? = nil) {
        let this = jsObject
        _ = this[Strings.scrollBy].function!(this: this, arguments: [_toJSValue(options)])
    }

    @inlinable public func scrollBy(x: Double, y: Double) {
        let this = jsObject
        _ = this[Strings.scrollBy].function!(this: this, arguments: [_toJSValue(x), _toJSValue(y)])
    }

    @ReadonlyAttribute
    public var screenX: Int32

    @ReadonlyAttribute
    public var screenLeft: Int32

    @ReadonlyAttribute
    public var screenY: Int32

    @ReadonlyAttribute
    public var screenTop: Int32

    @ReadonlyAttribute
    public var outerWidth: Int32

    @ReadonlyAttribute
    public var outerHeight: Int32

    @ReadonlyAttribute
    public var devicePixelRatio: Double
}

public protocol WindowEventHandlers: JSBridgedClass {}
public extension WindowEventHandlers {
    @inlinable var onafterprint: EventHandler {
        get { ClosureAttribute1Optional[Strings.onafterprint, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onafterprint, in: jsObject] = newValue }
    }

    @inlinable var onbeforeprint: EventHandler {
        get { ClosureAttribute1Optional[Strings.onbeforeprint, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onbeforeprint, in: jsObject] = newValue }
    }

    @inlinable var onbeforeunload: OnBeforeUnloadEventHandler {
        get { ClosureAttribute1Optional[Strings.onbeforeunload, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onbeforeunload, in: jsObject] = newValue }
    }

    @inlinable var onhashchange: EventHandler {
        get { ClosureAttribute1Optional[Strings.onhashchange, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onhashchange, in: jsObject] = newValue }
    }

    @inlinable var onlanguagechange: EventHandler {
        get { ClosureAttribute1Optional[Strings.onlanguagechange, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onlanguagechange, in: jsObject] = newValue }
    }

    @inlinable var onmessage: EventHandler {
        get { ClosureAttribute1Optional[Strings.onmessage, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onmessage, in: jsObject] = newValue }
    }

    @inlinable var onmessageerror: EventHandler {
        get { ClosureAttribute1Optional[Strings.onmessageerror, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onmessageerror, in: jsObject] = newValue }
    }

    @inlinable var onoffline: EventHandler {
        get { ClosureAttribute1Optional[Strings.onoffline, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onoffline, in: jsObject] = newValue }
    }

    @inlinable var ononline: EventHandler {
        get { ClosureAttribute1Optional[Strings.ononline, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ononline, in: jsObject] = newValue }
    }

    @inlinable var onpagehide: EventHandler {
        get { ClosureAttribute1Optional[Strings.onpagehide, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onpagehide, in: jsObject] = newValue }
    }

    @inlinable var onpageshow: EventHandler {
        get { ClosureAttribute1Optional[Strings.onpageshow, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onpageshow, in: jsObject] = newValue }
    }

    @inlinable var onpopstate: EventHandler {
        get { ClosureAttribute1Optional[Strings.onpopstate, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onpopstate, in: jsObject] = newValue }
    }

    @inlinable var onrejectionhandled: EventHandler {
        get { ClosureAttribute1Optional[Strings.onrejectionhandled, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onrejectionhandled, in: jsObject] = newValue }
    }

    @inlinable var onstorage: EventHandler {
        get { ClosureAttribute1Optional[Strings.onstorage, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onstorage, in: jsObject] = newValue }
    }

    @inlinable var onunhandledrejection: EventHandler {
        get { ClosureAttribute1Optional[Strings.onunhandledrejection, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onunhandledrejection, in: jsObject] = newValue }
    }

    @inlinable var onunload: EventHandler {
        get { ClosureAttribute1Optional[Strings.onunload, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.onunload, in: jsObject] = newValue }
    }
}

public protocol WindowLocalStorage: JSBridgedClass {}
public extension WindowLocalStorage {
    @inlinable var localStorage: Storage { jsObject[Strings.localStorage].fromJSValue()! }
}

public protocol WindowOrWorkerGlobalScope: JSBridgedClass {}
public extension WindowOrWorkerGlobalScope {
    @inlinable var origin: String { jsObject[Strings.origin].fromJSValue()! }

    @inlinable var isSecureContext: Bool { jsObject[Strings.isSecureContext].fromJSValue()! }

    @inlinable var crossOriginIsolated: Bool { jsObject[Strings.crossOriginIsolated].fromJSValue()! }

    @inlinable func reportError(e: JSValue) {
        let this = jsObject
        _ = this[Strings.reportError].function!(this: this, arguments: [_toJSValue(e)])
    }

    @inlinable func btoa(data: String) -> String {
        let this = jsObject
        return this[Strings.btoa].function!(this: this, arguments: [_toJSValue(data)]).fromJSValue()!
    }

    @inlinable func atob(data: String) -> String {
        let this = jsObject
        return this[Strings.atob].function!(this: this, arguments: [_toJSValue(data)]).fromJSValue()!
    }

    @inlinable func setTimeout(handler: TimerHandler, timeout: Int32? = nil, arguments: JSValue...) -> Int32 {
        let this = jsObject
        return this[Strings.setTimeout].function!(this: this, arguments: [_toJSValue(handler), _toJSValue(timeout)] + arguments.map(_toJSValue)).fromJSValue()!
    }

    @inlinable func clearTimeout(id: Int32? = nil) {
        let this = jsObject
        _ = this[Strings.clearTimeout].function!(this: this, arguments: [_toJSValue(id)])
    }

    @inlinable func setInterval(handler: TimerHandler, timeout: Int32? = nil, arguments: JSValue...) -> Int32 {
        let this = jsObject
        return this[Strings.setInterval].function!(this: this, arguments: [_toJSValue(handler), _toJSValue(timeout)] + arguments.map(_toJSValue)).fromJSValue()!
    }

    @inlinable func clearInterval(id: Int32? = nil) {
        let this = jsObject
        _ = this[Strings.clearInterval].function!(this: this, arguments: [_toJSValue(id)])
    }

    @inlinable func queueMicrotask(callback: @escaping VoidFunction) {
        let this = jsObject
        _ = this[Strings.queueMicrotask].function!(this: this, arguments: [_toJSValue(callback)])
    }

    @inlinable func createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.createImageBitmap].function!(this: this, arguments: [_toJSValue(image), _toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable func createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions? = nil) async throws -> ImageBitmap {
        let this = jsObject
        let _promise: JSPromise = this[Strings.createImageBitmap].function!(this: this, arguments: [_toJSValue(image), _toJSValue(options)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable func createImageBitmap(image: ImageBitmapSource, sx: Int32, sy: Int32, sw: Int32, sh: Int32, options: ImageBitmapOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.createImageBitmap].function!(this: this, arguments: [_toJSValue(image), _toJSValue(sx), _toJSValue(sy), _toJSValue(sw), _toJSValue(sh), _toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable func createImageBitmap(image: ImageBitmapSource, sx: Int32, sy: Int32, sw: Int32, sh: Int32, options: ImageBitmapOptions? = nil) async throws -> ImageBitmap {
        let this = jsObject
        let _promise: JSPromise = this[Strings.createImageBitmap].function!(this: this, arguments: [_toJSValue(image), _toJSValue(sx), _toJSValue(sy), _toJSValue(sw), _toJSValue(sh), _toJSValue(options)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable func structuredClone(value: JSValue, options: StructuredSerializeOptions? = nil) -> JSValue {
        let this = jsObject
        return this[Strings.structuredClone].function!(this: this, arguments: [_toJSValue(value), _toJSValue(options)]).fromJSValue()!
    }

    @inlinable var performance: Performance { jsObject[Strings.performance].fromJSValue()! }

    @inlinable func fetch(input: RequestInfo, init: RequestInit? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.fetch].function!(this: this, arguments: [_toJSValue(input), _toJSValue(`init`)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable func fetch(input: RequestInfo, init: RequestInit? = nil) async throws -> Response {
        let this = jsObject
        let _promise: JSPromise = this[Strings.fetch].function!(this: this, arguments: [_toJSValue(input), _toJSValue(`init`)]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable var caches: CacheStorage { jsObject[Strings.caches].fromJSValue()! }
}

public class WindowPostMessageOptions: BridgedDictionary {
    public convenience init(targetOrigin: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.targetOrigin] = _toJSValue(targetOrigin)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _targetOrigin = ReadWriteAttribute(jsObject: object, name: Strings.targetOrigin)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var targetOrigin: String
}

public protocol WindowSessionStorage: JSBridgedClass {}
public extension WindowSessionStorage {
    @inlinable var sessionStorage: Storage { jsObject[Strings.sessionStorage].fromJSValue()! }
}

public class Worker: EventTarget, AbstractWorker {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.Worker].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _onmessage = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onmessage)
        _onmessageerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onmessageerror)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(scriptURL: String, options: WorkerOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(scriptURL), _toJSValue(options)]))
    }

    @inlinable public func terminate() {
        let this = jsObject
        _ = this[Strings.terminate].function!(this: this, arguments: [])
    }

    @inlinable public func postMessage(message: JSValue, transfer: [JSObject]) {
        let this = jsObject
        _ = this[Strings.postMessage].function!(this: this, arguments: [_toJSValue(message), _toJSValue(transfer)])
    }

    @inlinable public func postMessage(message: JSValue, options: StructuredSerializeOptions? = nil) {
        let this = jsObject
        _ = this[Strings.postMessage].function!(this: this, arguments: [_toJSValue(message), _toJSValue(options)])
    }

    @ClosureAttribute1Optional
    public var onmessage: EventHandler

    @ClosureAttribute1Optional
    public var onmessageerror: EventHandler
}

public class WorkerOptions: BridgedDictionary {
    public convenience init(type: WorkerType, credentials: RequestCredentials, name: String) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.type] = _toJSValue(type)
        object[Strings.credentials] = _toJSValue(credentials)
        object[Strings.name] = _toJSValue(name)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _type = ReadWriteAttribute(jsObject: object, name: Strings.type)
        _credentials = ReadWriteAttribute(jsObject: object, name: Strings.credentials)
        _name = ReadWriteAttribute(jsObject: object, name: Strings.name)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var type: WorkerType

    @ReadWriteAttribute
    public var credentials: RequestCredentials

    @ReadWriteAttribute
    public var name: String
}

public enum WorkerType: JSString, JSValueCompatible {
    case classic = "classic"
    case module = "module"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

open class Worklet: JSBridgedClass {
    @inlinable open class var constructor: JSFunction? { JSObject.global[Strings.Worklet].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func addModule(moduleURL: String, options: WorkletOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.addModule].function!(this: this, arguments: [_toJSValue(moduleURL), _toJSValue(options)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func addModule(moduleURL: String, options: WorkletOptions? = nil) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.addModule].function!(this: this, arguments: [_toJSValue(moduleURL), _toJSValue(options)]).fromJSValue()!
        _ = try await _promise.value
    }
}

public class WorkletOptions: BridgedDictionary {
    public convenience init(credentials: RequestCredentials) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.credentials] = _toJSValue(credentials)
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _credentials = ReadWriteAttribute(jsObject: object, name: Strings.credentials)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var credentials: RequestCredentials
}

open class WritableStream: JSBridgedClass {
    @inlinable open class var constructor: JSFunction? { JSObject.global[Strings.WritableStream].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _locked = ReadonlyAttribute(jsObject: jsObject, name: Strings.locked)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(underlyingSink: JSObject? = nil, strategy: QueuingStrategy? = nil) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(underlyingSink), _toJSValue(strategy)]))
    }

    @ReadonlyAttribute
    public var locked: Bool

    @inlinable public func abort(reason: JSValue? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.abort].function!(this: this, arguments: [_toJSValue(reason)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func abort(reason: JSValue? = nil) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.abort].function!(this: this, arguments: [_toJSValue(reason)]).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func close() -> JSPromise {
        let this = jsObject
        return this[Strings.close].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func close() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.close].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func getWriter() -> WritableStreamDefaultWriter {
        let this = jsObject
        return this[Strings.getWriter].function!(this: this, arguments: []).fromJSValue()!
    }
}

public class WritableStreamDefaultController: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.WritableStreamDefaultController].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _signal = ReadonlyAttribute(jsObject: jsObject, name: Strings.signal)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var signal: AbortSignal

    @inlinable public func error(e: JSValue? = nil) {
        let this = jsObject
        _ = this[Strings.error].function!(this: this, arguments: [_toJSValue(e)])
    }
}

public class WritableStreamDefaultWriter: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.WritableStreamDefaultWriter].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _closed = ReadonlyAttribute(jsObject: jsObject, name: Strings.closed)
        _desiredSize = ReadonlyAttribute(jsObject: jsObject, name: Strings.desiredSize)
        _ready = ReadonlyAttribute(jsObject: jsObject, name: Strings.ready)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(stream: WritableStream) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(stream)]))
    }

    @ReadonlyAttribute
    public var closed: JSPromise

    @ReadonlyAttribute
    public var desiredSize: Double?

    @ReadonlyAttribute
    public var ready: JSPromise

    @inlinable public func abort(reason: JSValue? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.abort].function!(this: this, arguments: [_toJSValue(reason)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func abort(reason: JSValue? = nil) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.abort].function!(this: this, arguments: [_toJSValue(reason)]).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func close() -> JSPromise {
        let this = jsObject
        return this[Strings.close].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func close() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.close].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func releaseLock() {
        let this = jsObject
        _ = this[Strings.releaseLock].function!(this: this, arguments: [])
    }

    @inlinable public func write(chunk: JSValue? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.write].function!(this: this, arguments: [_toJSValue(chunk)]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func write(chunk: JSValue? = nil) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.write].function!(this: this, arguments: [_toJSValue(chunk)]).fromJSValue()!
        _ = try await _promise.value
    }
}

public class XMLDocument: Document {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.XMLDocument].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }
}

public class XMLHttpRequest: XMLHttpRequestEventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.XMLHttpRequest].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _onreadystatechange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onreadystatechange)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _timeout = ReadWriteAttribute(jsObject: jsObject, name: Strings.timeout)
        _withCredentials = ReadWriteAttribute(jsObject: jsObject, name: Strings.withCredentials)
        _upload = ReadonlyAttribute(jsObject: jsObject, name: Strings.upload)
        _responseURL = ReadonlyAttribute(jsObject: jsObject, name: Strings.responseURL)
        _status = ReadonlyAttribute(jsObject: jsObject, name: Strings.status)
        _statusText = ReadonlyAttribute(jsObject: jsObject, name: Strings.statusText)
        _responseType = ReadWriteAttribute(jsObject: jsObject, name: Strings.responseType)
        _response = ReadonlyAttribute(jsObject: jsObject, name: Strings.response)
        _responseText = ReadonlyAttribute(jsObject: jsObject, name: Strings.responseText)
        _responseXML = ReadonlyAttribute(jsObject: jsObject, name: Strings.responseXML)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @ClosureAttribute1Optional
    public var onreadystatechange: EventHandler

    public static let UNSENT: UInt16 = 0

    public static let OPENED: UInt16 = 1

    public static let HEADERS_RECEIVED: UInt16 = 2

    public static let LOADING: UInt16 = 3

    public static let DONE: UInt16 = 4

    @ReadonlyAttribute
    public var readyState: UInt16

    @inlinable public func open(method: String, url: String) {
        let this = jsObject
        _ = this[Strings.open].function!(this: this, arguments: [_toJSValue(method), _toJSValue(url)])
    }

    @inlinable public func open(method: String, url: String, async: Bool, username: String? = nil, password: String? = nil) {
        let this = jsObject
        _ = this[Strings.open].function!(this: this, arguments: [_toJSValue(method), _toJSValue(url), _toJSValue(async), _toJSValue(username), _toJSValue(password)])
    }

    @inlinable public func setRequestHeader(name: String, value: String) {
        let this = jsObject
        _ = this[Strings.setRequestHeader].function!(this: this, arguments: [_toJSValue(name), _toJSValue(value)])
    }

    @ReadWriteAttribute
    public var timeout: UInt32

    @ReadWriteAttribute
    public var withCredentials: Bool

    @ReadonlyAttribute
    public var upload: XMLHttpRequestUpload

    @inlinable public func send(body: Document_or_XMLHttpRequestBodyInit? = nil) {
        let this = jsObject
        _ = this[Strings.send].function!(this: this, arguments: [_toJSValue(body)])
    }

    @inlinable public func abort() {
        let this = jsObject
        _ = this[Strings.abort].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var responseURL: String

    @ReadonlyAttribute
    public var status: UInt16

    @ReadonlyAttribute
    public var statusText: String

    @inlinable public func getResponseHeader(name: String) -> String? {
        let this = jsObject
        return this[Strings.getResponseHeader].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()
    }

    @inlinable public func getAllResponseHeaders() -> String {
        let this = jsObject
        return this[Strings.getAllResponseHeaders].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func overrideMimeType(mime: String) {
        let this = jsObject
        _ = this[Strings.overrideMimeType].function!(this: this, arguments: [_toJSValue(mime)])
    }

    @ReadWriteAttribute
    public var responseType: XMLHttpRequestResponseType

    @ReadonlyAttribute
    public var response: JSValue

    @ReadonlyAttribute
    public var responseText: String

    @ReadonlyAttribute
    public var responseXML: Document?
}

public class XMLHttpRequestEventTarget: EventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.XMLHttpRequestEventTarget].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _onloadstart = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onloadstart)
        _onprogress = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onprogress)
        _onabort = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onabort)
        _onerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onerror)
        _onload = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onload)
        _ontimeout = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.ontimeout)
        _onloadend = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onloadend)
        super.init(unsafelyWrapping: jsObject)
    }

    @ClosureAttribute1Optional
    public var onloadstart: EventHandler

    @ClosureAttribute1Optional
    public var onprogress: EventHandler

    @ClosureAttribute1Optional
    public var onabort: EventHandler

    @ClosureAttribute1Optional
    public var onerror: EventHandler

    @ClosureAttribute1Optional
    public var onload: EventHandler

    @ClosureAttribute1Optional
    public var ontimeout: EventHandler

    @ClosureAttribute1Optional
    public var onloadend: EventHandler
}

public enum XMLHttpRequestResponseType: JSString, JSValueCompatible {
    case _empty = ""
    case arraybuffer = "arraybuffer"
    case blob = "blob"
    case document = "document"
    case json = "json"
    case text = "text"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class XMLHttpRequestUpload: XMLHttpRequestEventTarget {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.XMLHttpRequestUpload].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        super.init(unsafelyWrapping: jsObject)
    }
}

public class XPathEvaluator: JSBridgedClass, XPathEvaluatorBase {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.XPathEvaluator].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }
}

public protocol XPathEvaluatorBase: JSBridgedClass {}
public extension XPathEvaluatorBase {
    // XXX: method 'createExpression' is ignored

    // XXX: method 'createNSResolver' is ignored

    // XXX: method 'evaluate' is ignored
}

public class XPathExpression: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.XPathExpression].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func evaluate(contextNode: Node, type: UInt16? = nil, result: XPathResult? = nil) -> XPathResult {
        let this = jsObject
        return this[Strings.evaluate].function!(this: this, arguments: [_toJSValue(contextNode), _toJSValue(type), _toJSValue(result)]).fromJSValue()!
    }
}

public class XPathResult: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.XPathResult].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _resultType = ReadonlyAttribute(jsObject: jsObject, name: Strings.resultType)
        _numberValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.numberValue)
        _stringValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.stringValue)
        _booleanValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.booleanValue)
        _singleNodeValue = ReadonlyAttribute(jsObject: jsObject, name: Strings.singleNodeValue)
        _invalidIteratorState = ReadonlyAttribute(jsObject: jsObject, name: Strings.invalidIteratorState)
        _snapshotLength = ReadonlyAttribute(jsObject: jsObject, name: Strings.snapshotLength)
        self.jsObject = jsObject
    }

    public static let ANY_TYPE: UInt16 = 0

    public static let NUMBER_TYPE: UInt16 = 1

    public static let STRING_TYPE: UInt16 = 2

    public static let BOOLEAN_TYPE: UInt16 = 3

    public static let UNORDERED_NODE_ITERATOR_TYPE: UInt16 = 4

    public static let ORDERED_NODE_ITERATOR_TYPE: UInt16 = 5

    public static let UNORDERED_NODE_SNAPSHOT_TYPE: UInt16 = 6

    public static let ORDERED_NODE_SNAPSHOT_TYPE: UInt16 = 7

    public static let ANY_UNORDERED_NODE_TYPE: UInt16 = 8

    public static let FIRST_ORDERED_NODE_TYPE: UInt16 = 9

    @ReadonlyAttribute
    public var resultType: UInt16

    @ReadonlyAttribute
    public var numberValue: Double

    @ReadonlyAttribute
    public var stringValue: String

    @ReadonlyAttribute
    public var booleanValue: Bool

    @ReadonlyAttribute
    public var singleNodeValue: Node?

    @ReadonlyAttribute
    public var invalidIteratorState: Bool

    @ReadonlyAttribute
    public var snapshotLength: UInt32

    @inlinable public func iterateNext() -> Node? {
        let this = jsObject
        return this[Strings.iterateNext].function!(this: this, arguments: []).fromJSValue()
    }

    @inlinable public func snapshotItem(index: UInt32) -> Node? {
        let this = jsObject
        return this[Strings.snapshotItem].function!(this: this, arguments: [_toJSValue(index)]).fromJSValue()
    }
}

public class XSLTProcessor: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.XSLTProcessor].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: []))
    }

    @inlinable public func importStylesheet(style: Node) {
        let this = jsObject
        _ = this[Strings.importStylesheet].function!(this: this, arguments: [_toJSValue(style)])
    }

    @inlinable public func transformToFragment(source: Node, output: Document) -> DocumentFragment {
        let this = jsObject
        return this[Strings.transformToFragment].function!(this: this, arguments: [_toJSValue(source), _toJSValue(output)]).fromJSValue()!
    }

    @inlinable public func transformToDocument(source: Node) -> Document {
        let this = jsObject
        return this[Strings.transformToDocument].function!(this: this, arguments: [_toJSValue(source)]).fromJSValue()!
    }

    @inlinable public func setParameter(namespaceURI: String, localName: String, value: JSValue) {
        let this = jsObject
        _ = this[Strings.setParameter].function!(this: this, arguments: [_toJSValue(namespaceURI), _toJSValue(localName), _toJSValue(value)])
    }

    @inlinable public func getParameter(namespaceURI: String, localName: String) -> JSValue {
        let this = jsObject
        return this[Strings.getParameter].function!(this: this, arguments: [_toJSValue(namespaceURI), _toJSValue(localName)]).fromJSValue()!
    }

    @inlinable public func removeParameter(namespaceURI: String, localName: String) {
        let this = jsObject
        _ = this[Strings.removeParameter].function!(this: this, arguments: [_toJSValue(namespaceURI), _toJSValue(localName)])
    }

    @inlinable public func clearParameters() {
        let this = jsObject
        _ = this[Strings.clearParameters].function!(this: this, arguments: [])
    }

    @inlinable public func reset() {
        let this = jsObject
        _ = this[Strings.reset].function!(this: this, arguments: [])
    }
}

@usableFromInline enum Strings {
    @usableFromInline static let _self: JSString = "self"
    @usableFromInline static let AbortController: JSString = "AbortController"
    @usableFromInline static let AbortSignal: JSString = "AbortSignal"
    @usableFromInline static let AbstractRange: JSString = "AbstractRange"
    @usableFromInline static let AddSearchProvider: JSString = "AddSearchProvider"
    @usableFromInline static let Attr: JSString = "Attr"
    @usableFromInline static let AudioData: JSString = "AudioData"
    @usableFromInline static let AudioDecoder: JSString = "AudioDecoder"
    @usableFromInline static let AudioEncoder: JSString = "AudioEncoder"
    @usableFromInline static let AudioTrack: JSString = "AudioTrack"
    @usableFromInline static let AudioTrackList: JSString = "AudioTrackList"
    @usableFromInline static let BarProp: JSString = "BarProp"
    @usableFromInline static let BeforeUnloadEvent: JSString = "BeforeUnloadEvent"
    @usableFromInline static let Blob: JSString = "Blob"
    @usableFromInline static let BlobEvent: JSString = "BlobEvent"
    @usableFromInline static let BroadcastChannel: JSString = "BroadcastChannel"
    @usableFromInline static let ByteLengthQueuingStrategy: JSString = "ByteLengthQueuingStrategy"
    @usableFromInline static let CDATASection: JSString = "CDATASection"
    @usableFromInline static let CSSPseudoElement: JSString = "CSSPseudoElement"
    @usableFromInline static let Cache: JSString = "Cache"
    @usableFromInline static let CacheStorage: JSString = "CacheStorage"
    @usableFromInline static let CanvasGradient: JSString = "CanvasGradient"
    @usableFromInline static let CanvasPattern: JSString = "CanvasPattern"
    @usableFromInline static let CanvasRenderingContext2D: JSString = "CanvasRenderingContext2D"
    @usableFromInline static let CaretPosition: JSString = "CaretPosition"
    @usableFromInline static let CharacterData: JSString = "CharacterData"
    @usableFromInline static let Comment: JSString = "Comment"
    @usableFromInline static let CompositionEvent: JSString = "CompositionEvent"
    @usableFromInline static let CountQueuingStrategy: JSString = "CountQueuingStrategy"
    @usableFromInline static let CustomElementRegistry: JSString = "CustomElementRegistry"
    @usableFromInline static let CustomEvent: JSString = "CustomEvent"
    @usableFromInline static let DOMImplementation: JSString = "DOMImplementation"
    @usableFromInline static let DOMMatrix: JSString = "DOMMatrix"
    @usableFromInline static let DOMMatrixReadOnly: JSString = "DOMMatrixReadOnly"
    @usableFromInline static let DOMParser: JSString = "DOMParser"
    @usableFromInline static let DOMPoint: JSString = "DOMPoint"
    @usableFromInline static let DOMPointReadOnly: JSString = "DOMPointReadOnly"
    @usableFromInline static let DOMQuad: JSString = "DOMQuad"
    @usableFromInline static let DOMRect: JSString = "DOMRect"
    @usableFromInline static let DOMRectList: JSString = "DOMRectList"
    @usableFromInline static let DOMRectReadOnly: JSString = "DOMRectReadOnly"
    @usableFromInline static let DOMStringList: JSString = "DOMStringList"
    @usableFromInline static let DOMStringMap: JSString = "DOMStringMap"
    @usableFromInline static let DOMTokenList: JSString = "DOMTokenList"
    @usableFromInline static let DataTransfer: JSString = "DataTransfer"
    @usableFromInline static let DataTransferItem: JSString = "DataTransferItem"
    @usableFromInline static let DataTransferItemList: JSString = "DataTransferItemList"
    @usableFromInline static let Document: JSString = "Document"
    @usableFromInline static let DocumentFragment: JSString = "DocumentFragment"
    @usableFromInline static let DocumentType: JSString = "DocumentType"
    @usableFromInline static let DragEvent: JSString = "DragEvent"
    @usableFromInline static let Element: JSString = "Element"
    @usableFromInline static let ElementInternals: JSString = "ElementInternals"
    @usableFromInline static let EncodedAudioChunk: JSString = "EncodedAudioChunk"
    @usableFromInline static let EncodedVideoChunk: JSString = "EncodedVideoChunk"
    @usableFromInline static let ErrorEvent: JSString = "ErrorEvent"
    @usableFromInline static let Event: JSString = "Event"
    @usableFromInline static let EventSource: JSString = "EventSource"
    @usableFromInline static let EventTarget: JSString = "EventTarget"
    @usableFromInline static let External: JSString = "External"
    @usableFromInline static let File: JSString = "File"
    @usableFromInline static let FileList: JSString = "FileList"
    @usableFromInline static let FileReader: JSString = "FileReader"
    @usableFromInline static let FocusEvent: JSString = "FocusEvent"
    @usableFromInline static let FormData: JSString = "FormData"
    @usableFromInline static let FormDataEvent: JSString = "FormDataEvent"
    @usableFromInline static let HTMLAllCollection: JSString = "HTMLAllCollection"
    @usableFromInline static let HTMLAnchorElement: JSString = "HTMLAnchorElement"
    @usableFromInline static let HTMLAreaElement: JSString = "HTMLAreaElement"
    @usableFromInline static let HTMLAudioElement: JSString = "HTMLAudioElement"
    @usableFromInline static let HTMLBRElement: JSString = "HTMLBRElement"
    @usableFromInline static let HTMLBaseElement: JSString = "HTMLBaseElement"
    @usableFromInline static let HTMLBodyElement: JSString = "HTMLBodyElement"
    @usableFromInline static let HTMLButtonElement: JSString = "HTMLButtonElement"
    @usableFromInline static let HTMLCanvasElement: JSString = "HTMLCanvasElement"
    @usableFromInline static let HTMLCollection: JSString = "HTMLCollection"
    @usableFromInline static let HTMLDListElement: JSString = "HTMLDListElement"
    @usableFromInline static let HTMLDataElement: JSString = "HTMLDataElement"
    @usableFromInline static let HTMLDataListElement: JSString = "HTMLDataListElement"
    @usableFromInline static let HTMLDetailsElement: JSString = "HTMLDetailsElement"
    @usableFromInline static let HTMLDialogElement: JSString = "HTMLDialogElement"
    @usableFromInline static let HTMLDirectoryElement: JSString = "HTMLDirectoryElement"
    @usableFromInline static let HTMLDivElement: JSString = "HTMLDivElement"
    @usableFromInline static let HTMLElement: JSString = "HTMLElement"
    @usableFromInline static let HTMLEmbedElement: JSString = "HTMLEmbedElement"
    @usableFromInline static let HTMLFieldSetElement: JSString = "HTMLFieldSetElement"
    @usableFromInline static let HTMLFontElement: JSString = "HTMLFontElement"
    @usableFromInline static let HTMLFormControlsCollection: JSString = "HTMLFormControlsCollection"
    @usableFromInline static let HTMLFormElement: JSString = "HTMLFormElement"
    @usableFromInline static let HTMLFrameElement: JSString = "HTMLFrameElement"
    @usableFromInline static let HTMLFrameSetElement: JSString = "HTMLFrameSetElement"
    @usableFromInline static let HTMLHRElement: JSString = "HTMLHRElement"
    @usableFromInline static let HTMLHeadElement: JSString = "HTMLHeadElement"
    @usableFromInline static let HTMLHeadingElement: JSString = "HTMLHeadingElement"
    @usableFromInline static let HTMLHtmlElement: JSString = "HTMLHtmlElement"
    @usableFromInline static let HTMLIFrameElement: JSString = "HTMLIFrameElement"
    @usableFromInline static let HTMLImageElement: JSString = "HTMLImageElement"
    @usableFromInline static let HTMLInputElement: JSString = "HTMLInputElement"
    @usableFromInline static let HTMLLIElement: JSString = "HTMLLIElement"
    @usableFromInline static let HTMLLabelElement: JSString = "HTMLLabelElement"
    @usableFromInline static let HTMLLegendElement: JSString = "HTMLLegendElement"
    @usableFromInline static let HTMLLinkElement: JSString = "HTMLLinkElement"
    @usableFromInline static let HTMLMapElement: JSString = "HTMLMapElement"
    @usableFromInline static let HTMLMarqueeElement: JSString = "HTMLMarqueeElement"
    @usableFromInline static let HTMLMediaElement: JSString = "HTMLMediaElement"
    @usableFromInline static let HTMLMenuElement: JSString = "HTMLMenuElement"
    @usableFromInline static let HTMLMetaElement: JSString = "HTMLMetaElement"
    @usableFromInline static let HTMLMeterElement: JSString = "HTMLMeterElement"
    @usableFromInline static let HTMLModElement: JSString = "HTMLModElement"
    @usableFromInline static let HTMLOListElement: JSString = "HTMLOListElement"
    @usableFromInline static let HTMLObjectElement: JSString = "HTMLObjectElement"
    @usableFromInline static let HTMLOptGroupElement: JSString = "HTMLOptGroupElement"
    @usableFromInline static let HTMLOptionElement: JSString = "HTMLOptionElement"
    @usableFromInline static let HTMLOptionsCollection: JSString = "HTMLOptionsCollection"
    @usableFromInline static let HTMLOutputElement: JSString = "HTMLOutputElement"
    @usableFromInline static let HTMLParagraphElement: JSString = "HTMLParagraphElement"
    @usableFromInline static let HTMLParamElement: JSString = "HTMLParamElement"
    @usableFromInline static let HTMLPictureElement: JSString = "HTMLPictureElement"
    @usableFromInline static let HTMLPreElement: JSString = "HTMLPreElement"
    @usableFromInline static let HTMLProgressElement: JSString = "HTMLProgressElement"
    @usableFromInline static let HTMLQuoteElement: JSString = "HTMLQuoteElement"
    @usableFromInline static let HTMLScriptElement: JSString = "HTMLScriptElement"
    @usableFromInline static let HTMLSelectElement: JSString = "HTMLSelectElement"
    @usableFromInline static let HTMLSlotElement: JSString = "HTMLSlotElement"
    @usableFromInline static let HTMLSourceElement: JSString = "HTMLSourceElement"
    @usableFromInline static let HTMLSpanElement: JSString = "HTMLSpanElement"
    @usableFromInline static let HTMLStyleElement: JSString = "HTMLStyleElement"
    @usableFromInline static let HTMLTableCaptionElement: JSString = "HTMLTableCaptionElement"
    @usableFromInline static let HTMLTableCellElement: JSString = "HTMLTableCellElement"
    @usableFromInline static let HTMLTableColElement: JSString = "HTMLTableColElement"
    @usableFromInline static let HTMLTableElement: JSString = "HTMLTableElement"
    @usableFromInline static let HTMLTableRowElement: JSString = "HTMLTableRowElement"
    @usableFromInline static let HTMLTableSectionElement: JSString = "HTMLTableSectionElement"
    @usableFromInline static let HTMLTemplateElement: JSString = "HTMLTemplateElement"
    @usableFromInline static let HTMLTextAreaElement: JSString = "HTMLTextAreaElement"
    @usableFromInline static let HTMLTimeElement: JSString = "HTMLTimeElement"
    @usableFromInline static let HTMLTitleElement: JSString = "HTMLTitleElement"
    @usableFromInline static let HTMLTrackElement: JSString = "HTMLTrackElement"
    @usableFromInline static let HTMLUListElement: JSString = "HTMLUListElement"
    @usableFromInline static let HTMLUnknownElement: JSString = "HTMLUnknownElement"
    @usableFromInline static let HTMLVideoElement: JSString = "HTMLVideoElement"
    @usableFromInline static let HashChangeEvent: JSString = "HashChangeEvent"
    @usableFromInline static let Headers: JSString = "Headers"
    @usableFromInline static let History: JSString = "History"
    @usableFromInline static let ImageBitmap: JSString = "ImageBitmap"
    @usableFromInline static let ImageBitmapRenderingContext: JSString = "ImageBitmapRenderingContext"
    @usableFromInline static let ImageData: JSString = "ImageData"
    @usableFromInline static let ImageDecoder: JSString = "ImageDecoder"
    @usableFromInline static let ImageTrack: JSString = "ImageTrack"
    @usableFromInline static let ImageTrackList: JSString = "ImageTrackList"
    @usableFromInline static let InputDeviceInfo: JSString = "InputDeviceInfo"
    @usableFromInline static let InputEvent: JSString = "InputEvent"
    @usableFromInline static let IsSearchProviderInstalled: JSString = "IsSearchProviderInstalled"
    @usableFromInline static let KeyboardEvent: JSString = "KeyboardEvent"
    @usableFromInline static let Location: JSString = "Location"
    @usableFromInline static let MathMLElement: JSString = "MathMLElement"
    @usableFromInline static let MediaDeviceInfo: JSString = "MediaDeviceInfo"
    @usableFromInline static let MediaDevices: JSString = "MediaDevices"
    @usableFromInline static let MediaError: JSString = "MediaError"
    @usableFromInline static let MediaQueryList: JSString = "MediaQueryList"
    @usableFromInline static let MediaQueryListEvent: JSString = "MediaQueryListEvent"
    @usableFromInline static let MediaRecorder: JSString = "MediaRecorder"
    @usableFromInline static let MediaSource: JSString = "MediaSource"
    @usableFromInline static let MediaSourceHandle: JSString = "MediaSourceHandle"
    @usableFromInline static let MediaStream: JSString = "MediaStream"
    @usableFromInline static let MediaStreamTrack: JSString = "MediaStreamTrack"
    @usableFromInline static let MediaStreamTrackEvent: JSString = "MediaStreamTrackEvent"
    @usableFromInline static let MessageChannel: JSString = "MessageChannel"
    @usableFromInline static let MessageEvent: JSString = "MessageEvent"
    @usableFromInline static let MessagePort: JSString = "MessagePort"
    @usableFromInline static let MimeType: JSString = "MimeType"
    @usableFromInline static let MimeTypeArray: JSString = "MimeTypeArray"
    @usableFromInline static let MouseEvent: JSString = "MouseEvent"
    @usableFromInline static let MutationEvent: JSString = "MutationEvent"
    @usableFromInline static let MutationObserver: JSString = "MutationObserver"
    @usableFromInline static let MutationRecord: JSString = "MutationRecord"
    @usableFromInline static let NamedNodeMap: JSString = "NamedNodeMap"
    @usableFromInline static let NavigateEvent: JSString = "NavigateEvent"
    @usableFromInline static let Navigation: JSString = "Navigation"
    @usableFromInline static let NavigationCurrentEntryChangeEvent: JSString = "NavigationCurrentEntryChangeEvent"
    @usableFromInline static let NavigationDestination: JSString = "NavigationDestination"
    @usableFromInline static let NavigationHistoryEntry: JSString = "NavigationHistoryEntry"
    @usableFromInline static let NavigationPreloadManager: JSString = "NavigationPreloadManager"
    @usableFromInline static let NavigationTransition: JSString = "NavigationTransition"
    @usableFromInline static let Navigator: JSString = "Navigator"
    @usableFromInline static let Node: JSString = "Node"
    @usableFromInline static let NodeIterator: JSString = "NodeIterator"
    @usableFromInline static let NodeList: JSString = "NodeList"
    @usableFromInline static let Object: JSString = "Object"
    @usableFromInline static let OffscreenCanvas: JSString = "OffscreenCanvas"
    @usableFromInline static let OffscreenCanvasRenderingContext2D: JSString = "OffscreenCanvasRenderingContext2D"
    @usableFromInline static let OverconstrainedError: JSString = "OverconstrainedError"
    @usableFromInline static let PageTransitionEvent: JSString = "PageTransitionEvent"
    @usableFromInline static let Path2D: JSString = "Path2D"
    @usableFromInline static let Performance: JSString = "Performance"
    @usableFromInline static let PerformanceEntry: JSString = "PerformanceEntry"
    @usableFromInline static let PerformanceObserver: JSString = "PerformanceObserver"
    @usableFromInline static let PerformanceObserverEntryList: JSString = "PerformanceObserverEntryList"
    @usableFromInline static let PermissionStatus: JSString = "PermissionStatus"
    @usableFromInline static let Permissions: JSString = "Permissions"
    @usableFromInline static let Plugin: JSString = "Plugin"
    @usableFromInline static let PluginArray: JSString = "PluginArray"
    @usableFromInline static let PopStateEvent: JSString = "PopStateEvent"
    @usableFromInline static let ProcessingInstruction: JSString = "ProcessingInstruction"
    @usableFromInline static let ProgressEvent: JSString = "ProgressEvent"
    @usableFromInline static let PromiseRejectionEvent: JSString = "PromiseRejectionEvent"
    @usableFromInline static let RadioNodeList: JSString = "RadioNodeList"
    @usableFromInline static let Range: JSString = "Range"
    @usableFromInline static let ReadableByteStreamController: JSString = "ReadableByteStreamController"
    @usableFromInline static let ReadableStream: JSString = "ReadableStream"
    @usableFromInline static let ReadableStreamBYOBReader: JSString = "ReadableStreamBYOBReader"
    @usableFromInline static let ReadableStreamBYOBRequest: JSString = "ReadableStreamBYOBRequest"
    @usableFromInline static let ReadableStreamDefaultController: JSString = "ReadableStreamDefaultController"
    @usableFromInline static let ReadableStreamDefaultReader: JSString = "ReadableStreamDefaultReader"
    @usableFromInline static let Request: JSString = "Request"
    @usableFromInline static let Response: JSString = "Response"
    @usableFromInline static let Screen: JSString = "Screen"
    @usableFromInline static let ServiceWorker: JSString = "ServiceWorker"
    @usableFromInline static let ServiceWorkerContainer: JSString = "ServiceWorkerContainer"
    @usableFromInline static let ServiceWorkerRegistration: JSString = "ServiceWorkerRegistration"
    @usableFromInline static let ShadowRoot: JSString = "ShadowRoot"
    @usableFromInline static let SharedWorker: JSString = "SharedWorker"
    @usableFromInline static let SourceBuffer: JSString = "SourceBuffer"
    @usableFromInline static let SourceBufferList: JSString = "SourceBufferList"
    @usableFromInline static let StaticRange: JSString = "StaticRange"
    @usableFromInline static let Storage: JSString = "Storage"
    @usableFromInline static let StorageEvent: JSString = "StorageEvent"
    @usableFromInline static let SubmitEvent: JSString = "SubmitEvent"
    @usableFromInline static let Text: JSString = "Text"
    @usableFromInline static let TextMetrics: JSString = "TextMetrics"
    @usableFromInline static let TextTrack: JSString = "TextTrack"
    @usableFromInline static let TextTrackCue: JSString = "TextTrackCue"
    @usableFromInline static let TextTrackCueList: JSString = "TextTrackCueList"
    @usableFromInline static let TextTrackList: JSString = "TextTrackList"
    @usableFromInline static let TimeRanges: JSString = "TimeRanges"
    @usableFromInline static let ToggleEvent: JSString = "ToggleEvent"
    @usableFromInline static let Touch: JSString = "Touch"
    @usableFromInline static let TouchEvent: JSString = "TouchEvent"
    @usableFromInline static let TouchList: JSString = "TouchList"
    @usableFromInline static let TrackEvent: JSString = "TrackEvent"
    @usableFromInline static let TransformStream: JSString = "TransformStream"
    @usableFromInline static let TransformStreamDefaultController: JSString = "TransformStreamDefaultController"
    @usableFromInline static let TreeWalker: JSString = "TreeWalker"
    @usableFromInline static let UIEvent: JSString = "UIEvent"
    @usableFromInline static let URL: JSString = "URL"
    @usableFromInline static let UserActivation: JSString = "UserActivation"
    @usableFromInline static let ValidityState: JSString = "ValidityState"
    @usableFromInline static let VideoColorSpace: JSString = "VideoColorSpace"
    @usableFromInline static let VideoDecoder: JSString = "VideoDecoder"
    @usableFromInline static let VideoEncoder: JSString = "VideoEncoder"
    @usableFromInline static let VideoFrame: JSString = "VideoFrame"
    @usableFromInline static let VideoTrack: JSString = "VideoTrack"
    @usableFromInline static let VideoTrackList: JSString = "VideoTrackList"
    @usableFromInline static let VisibilityStateEntry: JSString = "VisibilityStateEntry"
    @usableFromInline static let VisualViewport: JSString = "VisualViewport"
    @usableFromInline static let WheelEvent: JSString = "WheelEvent"
    @usableFromInline static let Window: JSString = "Window"
    @usableFromInline static let Worker: JSString = "Worker"
    @usableFromInline static let Worklet: JSString = "Worklet"
    @usableFromInline static let WritableStream: JSString = "WritableStream"
    @usableFromInline static let WritableStreamDefaultController: JSString = "WritableStreamDefaultController"
    @usableFromInline static let WritableStreamDefaultWriter: JSString = "WritableStreamDefaultWriter"
    @usableFromInline static let XMLDocument: JSString = "XMLDocument"
    @usableFromInline static let XMLHttpRequest: JSString = "XMLHttpRequest"
    @usableFromInline static let XMLHttpRequestEventTarget: JSString = "XMLHttpRequestEventTarget"
    @usableFromInline static let XMLHttpRequestUpload: JSString = "XMLHttpRequestUpload"
    @usableFromInline static let XPathEvaluator: JSString = "XPathEvaluator"
    @usableFromInline static let XPathExpression: JSString = "XPathExpression"
    @usableFromInline static let XPathResult: JSString = "XPathResult"
    @usableFromInline static let XSLTProcessor: JSString = "XSLTProcessor"
    @usableFromInline static let a: JSString = "a"
    @usableFromInline static let aLink: JSString = "aLink"
    @usableFromInline static let abbr: JSString = "abbr"
    @usableFromInline static let abort: JSString = "abort"
    @usableFromInline static let aborted: JSString = "aborted"
    @usableFromInline static let accept: JSString = "accept"
    @usableFromInline static let acceptCharset: JSString = "acceptCharset"
    @usableFromInline static let accessKey: JSString = "accessKey"
    @usableFromInline static let accessKeyLabel: JSString = "accessKeyLabel"
    @usableFromInline static let action: JSString = "action"
    @usableFromInline static let active: JSString = "active"
    @usableFromInline static let activeCues: JSString = "activeCues"
    @usableFromInline static let activeElement: JSString = "activeElement"
    @usableFromInline static let activeSourceBuffers: JSString = "activeSourceBuffers"
    @usableFromInline static let actualBoundingBoxAscent: JSString = "actualBoundingBoxAscent"
    @usableFromInline static let actualBoundingBoxDescent: JSString = "actualBoundingBoxDescent"
    @usableFromInline static let actualBoundingBoxLeft: JSString = "actualBoundingBoxLeft"
    @usableFromInline static let actualBoundingBoxRight: JSString = "actualBoundingBoxRight"
    @usableFromInline static let add: JSString = "add"
    @usableFromInline static let addAll: JSString = "addAll"
    @usableFromInline static let addColorStop: JSString = "addColorStop"
    @usableFromInline static let addCue: JSString = "addCue"
    @usableFromInline static let addEventListener: JSString = "addEventListener"
    @usableFromInline static let addListener: JSString = "addListener"
    @usableFromInline static let addModule: JSString = "addModule"
    @usableFromInline static let addPath: JSString = "addPath"
    @usableFromInline static let addSourceBuffer: JSString = "addSourceBuffer"
    @usableFromInline static let addTextTrack: JSString = "addTextTrack"
    @usableFromInline static let addTrack: JSString = "addTrack"
    @usableFromInline static let addedNodes: JSString = "addedNodes"
    @usableFromInline static let adoptNode: JSString = "adoptNode"
    @usableFromInline static let advanced: JSString = "advanced"
    @usableFromInline static let after: JSString = "after"
    @usableFromInline static let alert: JSString = "alert"
    @usableFromInline static let align: JSString = "align"
    @usableFromInline static let alinkColor: JSString = "alinkColor"
    @usableFromInline static let all: JSString = "all"
    @usableFromInline static let allocationSize: JSString = "allocationSize"
    @usableFromInline static let allow: JSString = "allow"
    @usableFromInline static let allowFullscreen: JSString = "allowFullscreen"
    @usableFromInline static let alpha: JSString = "alpha"
    @usableFromInline static let alphaSideData: JSString = "alphaSideData"
    @usableFromInline static let alphabeticBaseline: JSString = "alphabeticBaseline"
    @usableFromInline static let alt: JSString = "alt"
    @usableFromInline static let altKey: JSString = "altKey"
    @usableFromInline static let altitudeAngle: JSString = "altitudeAngle"
    @usableFromInline static let ancestorOrigins: JSString = "ancestorOrigins"
    @usableFromInline static let anchors: JSString = "anchors"
    @usableFromInline static let animated: JSString = "animated"
    @usableFromInline static let any: JSString = "any"
    @usableFromInline static let appCodeName: JSString = "appCodeName"
    @usableFromInline static let appName: JSString = "appName"
    @usableFromInline static let appVersion: JSString = "appVersion"
    @usableFromInline static let append: JSString = "append"
    @usableFromInline static let appendBuffer: JSString = "appendBuffer"
    @usableFromInline static let appendChild: JSString = "appendChild"
    @usableFromInline static let appendData: JSString = "appendData"
    @usableFromInline static let appendWindowEnd: JSString = "appendWindowEnd"
    @usableFromInline static let appendWindowStart: JSString = "appendWindowStart"
    @usableFromInline static let applets: JSString = "applets"
    @usableFromInline static let applyConstraints: JSString = "applyConstraints"
    @usableFromInline static let arc: JSString = "arc"
    @usableFromInline static let arcTo: JSString = "arcTo"
    @usableFromInline static let archive: JSString = "archive"
    @usableFromInline static let areas: JSString = "areas"
    @usableFromInline static let ariaActiveDescendantElement: JSString = "ariaActiveDescendantElement"
    @usableFromInline static let ariaAtomic: JSString = "ariaAtomic"
    @usableFromInline static let ariaAutoComplete: JSString = "ariaAutoComplete"
    @usableFromInline static let ariaBusy: JSString = "ariaBusy"
    @usableFromInline static let ariaChecked: JSString = "ariaChecked"
    @usableFromInline static let ariaColCount: JSString = "ariaColCount"
    @usableFromInline static let ariaColIndex: JSString = "ariaColIndex"
    @usableFromInline static let ariaColIndexText: JSString = "ariaColIndexText"
    @usableFromInline static let ariaColSpan: JSString = "ariaColSpan"
    @usableFromInline static let ariaControlsElements: JSString = "ariaControlsElements"
    @usableFromInline static let ariaCurrent: JSString = "ariaCurrent"
    @usableFromInline static let ariaDescribedByElements: JSString = "ariaDescribedByElements"
    @usableFromInline static let ariaDescription: JSString = "ariaDescription"
    @usableFromInline static let ariaDetailsElements: JSString = "ariaDetailsElements"
    @usableFromInline static let ariaDisabled: JSString = "ariaDisabled"
    @usableFromInline static let ariaErrorMessageElements: JSString = "ariaErrorMessageElements"
    @usableFromInline static let ariaExpanded: JSString = "ariaExpanded"
    @usableFromInline static let ariaFlowToElements: JSString = "ariaFlowToElements"
    @usableFromInline static let ariaHasPopup: JSString = "ariaHasPopup"
    @usableFromInline static let ariaHidden: JSString = "ariaHidden"
    @usableFromInline static let ariaInvalid: JSString = "ariaInvalid"
    @usableFromInline static let ariaKeyShortcuts: JSString = "ariaKeyShortcuts"
    @usableFromInline static let ariaLabel: JSString = "ariaLabel"
    @usableFromInline static let ariaLabelledByElements: JSString = "ariaLabelledByElements"
    @usableFromInline static let ariaLevel: JSString = "ariaLevel"
    @usableFromInline static let ariaLive: JSString = "ariaLive"
    @usableFromInline static let ariaModal: JSString = "ariaModal"
    @usableFromInline static let ariaMultiLine: JSString = "ariaMultiLine"
    @usableFromInline static let ariaMultiSelectable: JSString = "ariaMultiSelectable"
    @usableFromInline static let ariaOrientation: JSString = "ariaOrientation"
    @usableFromInline static let ariaOwnsElements: JSString = "ariaOwnsElements"
    @usableFromInline static let ariaPlaceholder: JSString = "ariaPlaceholder"
    @usableFromInline static let ariaPosInSet: JSString = "ariaPosInSet"
    @usableFromInline static let ariaPressed: JSString = "ariaPressed"
    @usableFromInline static let ariaReadOnly: JSString = "ariaReadOnly"
    @usableFromInline static let ariaRequired: JSString = "ariaRequired"
    @usableFromInline static let ariaRoleDescription: JSString = "ariaRoleDescription"
    @usableFromInline static let ariaRowCount: JSString = "ariaRowCount"
    @usableFromInline static let ariaRowIndex: JSString = "ariaRowIndex"
    @usableFromInline static let ariaRowIndexText: JSString = "ariaRowIndexText"
    @usableFromInline static let ariaRowSpan: JSString = "ariaRowSpan"
    @usableFromInline static let ariaSelected: JSString = "ariaSelected"
    @usableFromInline static let ariaSetSize: JSString = "ariaSetSize"
    @usableFromInline static let ariaSort: JSString = "ariaSort"
    @usableFromInline static let ariaValueMax: JSString = "ariaValueMax"
    @usableFromInline static let ariaValueMin: JSString = "ariaValueMin"
    @usableFromInline static let ariaValueNow: JSString = "ariaValueNow"
    @usableFromInline static let ariaValueText: JSString = "ariaValueText"
    @usableFromInline static let arrayBuffer: JSString = "arrayBuffer"
    @usableFromInline static let `as`: JSString = "as"
    @usableFromInline static let aspectRatio: JSString = "aspectRatio"
    @usableFromInline static let assign: JSString = "assign"
    @usableFromInline static let assignedElements: JSString = "assignedElements"
    @usableFromInline static let assignedNodes: JSString = "assignedNodes"
    @usableFromInline static let assignedSlot: JSString = "assignedSlot"
    @usableFromInline static let async: JSString = "async"
    @usableFromInline static let atob: JSString = "atob"
    @usableFromInline static let attachInternals: JSString = "attachInternals"
    @usableFromInline static let attachShadow: JSString = "attachShadow"
    @usableFromInline static let attrChange: JSString = "attrChange"
    @usableFromInline static let attrName: JSString = "attrName"
    @usableFromInline static let attributeFilter: JSString = "attributeFilter"
    @usableFromInline static let attributeName: JSString = "attributeName"
    @usableFromInline static let attributeNamespace: JSString = "attributeNamespace"
    @usableFromInline static let attributeOldValue: JSString = "attributeOldValue"
    @usableFromInline static let attributes: JSString = "attributes"
    @usableFromInline static let audio: JSString = "audio"
    @usableFromInline static let audioBitrateMode: JSString = "audioBitrateMode"
    @usableFromInline static let audioBitsPerSecond: JSString = "audioBitsPerSecond"
    @usableFromInline static let audioTracks: JSString = "audioTracks"
    @usableFromInline static let autoAllocateChunkSize: JSString = "autoAllocateChunkSize"
    @usableFromInline static let autoGainControl: JSString = "autoGainControl"
    @usableFromInline static let autocapitalize: JSString = "autocapitalize"
    @usableFromInline static let autocomplete: JSString = "autocomplete"
    @usableFromInline static let autofocus: JSString = "autofocus"
    @usableFromInline static let autoplay: JSString = "autoplay"
    @usableFromInline static let availHeight: JSString = "availHeight"
    @usableFromInline static let availWidth: JSString = "availWidth"
    @usableFromInline static let axis: JSString = "axis"
    @usableFromInline static let azimuthAngle: JSString = "azimuthAngle"
    @usableFromInline static let b: JSString = "b"
    @usableFromInline static let back: JSString = "back"
    @usableFromInline static let background: JSString = "background"
    @usableFromInline static let badInput: JSString = "badInput"
    @usableFromInline static let baseURI: JSString = "baseURI"
    @usableFromInline static let before: JSString = "before"
    @usableFromInline static let beginPath: JSString = "beginPath"
    @usableFromInline static let behavior: JSString = "behavior"
    @usableFromInline static let bezierCurveTo: JSString = "bezierCurveTo"
    @usableFromInline static let bgColor: JSString = "bgColor"
    @usableFromInline static let bitrate: JSString = "bitrate"
    @usableFromInline static let bitrateMode: JSString = "bitrateMode"
    @usableFromInline static let bitsPerSecond: JSString = "bitsPerSecond"
    @usableFromInline static let blob: JSString = "blob"
    @usableFromInline static let block: JSString = "block"
    @usableFromInline static let blocking: JSString = "blocking"
    @usableFromInline static let blur: JSString = "blur"
    @usableFromInline static let body: JSString = "body"
    @usableFromInline static let bodyUsed: JSString = "bodyUsed"
    @usableFromInline static let booleanValue: JSString = "booleanValue"
    @usableFromInline static let border: JSString = "border"
    @usableFromInline static let bottom: JSString = "bottom"
    @usableFromInline static let box: JSString = "box"
    @usableFromInline static let btoa: JSString = "btoa"
    @usableFromInline static let bubbles: JSString = "bubbles"
    @usableFromInline static let buffered: JSString = "buffered"
    @usableFromInline static let button: JSString = "button"
    @usableFromInline static let buttons: JSString = "buttons"
    @usableFromInline static let byobRequest: JSString = "byobRequest"
    @usableFromInline static let byteLength: JSString = "byteLength"
    @usableFromInline static let c: JSString = "c"
    @usableFromInline static let cache: JSString = "cache"
    @usableFromInline static let cacheName: JSString = "cacheName"
    @usableFromInline static let caches: JSString = "caches"
    @usableFromInline static let canConstructInDedicatedWorker: JSString = "canConstructInDedicatedWorker"
    @usableFromInline static let canGoBack: JSString = "canGoBack"
    @usableFromInline static let canGoForward: JSString = "canGoForward"
    @usableFromInline static let canIntercept: JSString = "canIntercept"
    @usableFromInline static let canPlayType: JSString = "canPlayType"
    @usableFromInline static let cancel: JSString = "cancel"
    @usableFromInline static let cancelAnimationFrame: JSString = "cancelAnimationFrame"
    @usableFromInline static let cancelBubble: JSString = "cancelBubble"
    @usableFromInline static let cancelable: JSString = "cancelable"
    @usableFromInline static let canvas: JSString = "canvas"
    @usableFromInline static let caption: JSString = "caption"
    @usableFromInline static let capture: JSString = "capture"
    @usableFromInline static let captureEvents: JSString = "captureEvents"
    @usableFromInline static let caretPositionFromPoint: JSString = "caretPositionFromPoint"
    @usableFromInline static let cellIndex: JSString = "cellIndex"
    @usableFromInline static let cellPadding: JSString = "cellPadding"
    @usableFromInline static let cellSpacing: JSString = "cellSpacing"
    @usableFromInline static let cells: JSString = "cells"
    @usableFromInline static let ch: JSString = "ch"
    @usableFromInline static let chOff: JSString = "chOff"
    @usableFromInline static let changeType: JSString = "changeType"
    @usableFromInline static let changedTouches: JSString = "changedTouches"
    @usableFromInline static let channelCount: JSString = "channelCount"
    @usableFromInline static let charCode: JSString = "charCode"
    @usableFromInline static let characterData: JSString = "characterData"
    @usableFromInline static let characterDataOldValue: JSString = "characterDataOldValue"
    @usableFromInline static let characterSet: JSString = "characterSet"
    @usableFromInline static let charset: JSString = "charset"
    @usableFromInline static let checkOpacity: JSString = "checkOpacity"
    @usableFromInline static let checkValidity: JSString = "checkValidity"
    @usableFromInline static let checkVisibility: JSString = "checkVisibility"
    @usableFromInline static let checkVisibilityCSS: JSString = "checkVisibilityCSS"
    @usableFromInline static let checked: JSString = "checked"
    @usableFromInline static let childElementCount: JSString = "childElementCount"
    @usableFromInline static let childList: JSString = "childList"
    @usableFromInline static let childNodes: JSString = "childNodes"
    @usableFromInline static let children: JSString = "children"
    @usableFromInline static let cite: JSString = "cite"
    @usableFromInline static let classList: JSString = "classList"
    @usableFromInline static let className: JSString = "className"
    @usableFromInline static let clear: JSString = "clear"
    @usableFromInline static let clearData: JSString = "clearData"
    @usableFromInline static let clearInterval: JSString = "clearInterval"
    @usableFromInline static let clearLiveSeekableRange: JSString = "clearLiveSeekableRange"
    @usableFromInline static let clearParameters: JSString = "clearParameters"
    @usableFromInline static let clearRect: JSString = "clearRect"
    @usableFromInline static let clearTimeout: JSString = "clearTimeout"
    @usableFromInline static let click: JSString = "click"
    @usableFromInline static let clientHeight: JSString = "clientHeight"
    @usableFromInline static let clientId: JSString = "clientId"
    @usableFromInline static let clientInformation: JSString = "clientInformation"
    @usableFromInline static let clientLeft: JSString = "clientLeft"
    @usableFromInline static let clientTop: JSString = "clientTop"
    @usableFromInline static let clientWidth: JSString = "clientWidth"
    @usableFromInline static let clientX: JSString = "clientX"
    @usableFromInline static let clientY: JSString = "clientY"
    @usableFromInline static let clip: JSString = "clip"
    @usableFromInline static let clone: JSString = "clone"
    @usableFromInline static let cloneContents: JSString = "cloneContents"
    @usableFromInline static let cloneNode: JSString = "cloneNode"
    @usableFromInline static let cloneRange: JSString = "cloneRange"
    @usableFromInline static let close: JSString = "close"
    @usableFromInline static let closePath: JSString = "closePath"
    @usableFromInline static let closed: JSString = "closed"
    @usableFromInline static let closest: JSString = "closest"
    @usableFromInline static let code: JSString = "code"
    @usableFromInline static let codeBase: JSString = "codeBase"
    @usableFromInline static let codeType: JSString = "codeType"
    @usableFromInline static let codec: JSString = "codec"
    @usableFromInline static let codedHeight: JSString = "codedHeight"
    @usableFromInline static let codedRect: JSString = "codedRect"
    @usableFromInline static let codedWidth: JSString = "codedWidth"
    @usableFromInline static let colSpan: JSString = "colSpan"
    @usableFromInline static let collapse: JSString = "collapse"
    @usableFromInline static let collapsed: JSString = "collapsed"
    @usableFromInline static let colno: JSString = "colno"
    @usableFromInline static let color: JSString = "color"
    @usableFromInline static let colorDepth: JSString = "colorDepth"
    @usableFromInline static let colorSpace: JSString = "colorSpace"
    @usableFromInline static let colorSpaceConversion: JSString = "colorSpaceConversion"
    @usableFromInline static let cols: JSString = "cols"
    @usableFromInline static let commit: JSString = "commit"
    @usableFromInline static let committed: JSString = "committed"
    @usableFromInline static let commonAncestorContainer: JSString = "commonAncestorContainer"
    @usableFromInline static let compact: JSString = "compact"
    @usableFromInline static let compareBoundaryPoints: JSString = "compareBoundaryPoints"
    @usableFromInline static let compareDocumentPosition: JSString = "compareDocumentPosition"
    @usableFromInline static let comparePoint: JSString = "comparePoint"
    @usableFromInline static let compatMode: JSString = "compatMode"
    @usableFromInline static let complete: JSString = "complete"
    @usableFromInline static let completeFramesOnly: JSString = "completeFramesOnly"
    @usableFromInline static let completed: JSString = "completed"
    @usableFromInline static let composed: JSString = "composed"
    @usableFromInline static let composedPath: JSString = "composedPath"
    @usableFromInline static let config: JSString = "config"
    @usableFromInline static let configure: JSString = "configure"
    @usableFromInline static let confirm: JSString = "confirm"
    @usableFromInline static let constraint: JSString = "constraint"
    @usableFromInline static let contains: JSString = "contains"
    @usableFromInline static let content: JSString = "content"
    @usableFromInline static let contentDocument: JSString = "contentDocument"
    @usableFromInline static let contentEditable: JSString = "contentEditable"
    @usableFromInline static let contentType: JSString = "contentType"
    @usableFromInline static let contentWindow: JSString = "contentWindow"
    @usableFromInline static let control: JSString = "control"
    @usableFromInline static let controller: JSString = "controller"
    @usableFromInline static let controls: JSString = "controls"
    @usableFromInline static let convertPointFromNode: JSString = "convertPointFromNode"
    @usableFromInline static let convertQuadFromNode: JSString = "convertQuadFromNode"
    @usableFromInline static let convertRectFromNode: JSString = "convertRectFromNode"
    @usableFromInline static let convertToBlob: JSString = "convertToBlob"
    @usableFromInline static let cookie: JSString = "cookie"
    @usableFromInline static let cookieEnabled: JSString = "cookieEnabled"
    @usableFromInline static let coords: JSString = "coords"
    @usableFromInline static let copyTo: JSString = "copyTo"
    @usableFromInline static let createAttribute: JSString = "createAttribute"
    @usableFromInline static let createAttributeNS: JSString = "createAttributeNS"
    @usableFromInline static let createCDATASection: JSString = "createCDATASection"
    @usableFromInline static let createCaption: JSString = "createCaption"
    @usableFromInline static let createComment: JSString = "createComment"
    @usableFromInline static let createConicGradient: JSString = "createConicGradient"
    @usableFromInline static let createDocument: JSString = "createDocument"
    @usableFromInline static let createDocumentFragment: JSString = "createDocumentFragment"
    @usableFromInline static let createDocumentType: JSString = "createDocumentType"
    @usableFromInline static let createElement: JSString = "createElement"
    @usableFromInline static let createElementNS: JSString = "createElementNS"
    @usableFromInline static let createEvent: JSString = "createEvent"
    @usableFromInline static let createHTMLDocument: JSString = "createHTMLDocument"
    @usableFromInline static let createImageBitmap: JSString = "createImageBitmap"
    @usableFromInline static let createImageData: JSString = "createImageData"
    @usableFromInline static let createLinearGradient: JSString = "createLinearGradient"
    @usableFromInline static let createObjectURL: JSString = "createObjectURL"
    @usableFromInline static let createPattern: JSString = "createPattern"
    @usableFromInline static let createProcessingInstruction: JSString = "createProcessingInstruction"
    @usableFromInline static let createRadialGradient: JSString = "createRadialGradient"
    @usableFromInline static let createRange: JSString = "createRange"
    @usableFromInline static let createTBody: JSString = "createTBody"
    @usableFromInline static let createTFoot: JSString = "createTFoot"
    @usableFromInline static let createTHead: JSString = "createTHead"
    @usableFromInline static let createTextNode: JSString = "createTextNode"
    @usableFromInline static let credentials: JSString = "credentials"
    @usableFromInline static let crossOrigin: JSString = "crossOrigin"
    @usableFromInline static let crossOriginIsolated: JSString = "crossOriginIsolated"
    @usableFromInline static let ctrlKey: JSString = "ctrlKey"
    @usableFromInline static let cues: JSString = "cues"
    @usableFromInline static let currentEntry: JSString = "currentEntry"
    @usableFromInline static let currentNode: JSString = "currentNode"
    @usableFromInline static let currentScript: JSString = "currentScript"
    @usableFromInline static let currentSrc: JSString = "currentSrc"
    @usableFromInline static let currentTarget: JSString = "currentTarget"
    @usableFromInline static let currentTime: JSString = "currentTime"
    @usableFromInline static let customElements: JSString = "customElements"
    @usableFromInline static let customError: JSString = "customError"
    @usableFromInline static let d: JSString = "d"
    @usableFromInline static let data: JSString = "data"
    @usableFromInline static let dataTransfer: JSString = "dataTransfer"
    @usableFromInline static let dataset: JSString = "dataset"
    @usableFromInline static let dateTime: JSString = "dateTime"
    @usableFromInline static let declare: JSString = "declare"
    @usableFromInline static let decode: JSString = "decode"
    @usableFromInline static let decodeQueueSize: JSString = "decodeQueueSize"
    @usableFromInline static let decoderConfig: JSString = "decoderConfig"
    @usableFromInline static let decoding: JSString = "decoding"
    @usableFromInline static let `default`: JSString = "default"
    @usableFromInline static let defaultChecked: JSString = "defaultChecked"
    @usableFromInline static let defaultMuted: JSString = "defaultMuted"
    @usableFromInline static let defaultPlaybackRate: JSString = "defaultPlaybackRate"
    @usableFromInline static let defaultPrevented: JSString = "defaultPrevented"
    @usableFromInline static let defaultSelected: JSString = "defaultSelected"
    @usableFromInline static let defaultValue: JSString = "defaultValue"
    @usableFromInline static let defaultView: JSString = "defaultView"
    @usableFromInline static let `defer`: JSString = "defer"
    @usableFromInline static let define: JSString = "define"
    @usableFromInline static let delegatesFocus: JSString = "delegatesFocus"
    @usableFromInline static let delete: JSString = "delete"
    @usableFromInline static let deleteCaption: JSString = "deleteCaption"
    @usableFromInline static let deleteCell: JSString = "deleteCell"
    @usableFromInline static let deleteContents: JSString = "deleteContents"
    @usableFromInline static let deleteData: JSString = "deleteData"
    @usableFromInline static let deleteRow: JSString = "deleteRow"
    @usableFromInline static let deleteTFoot: JSString = "deleteTFoot"
    @usableFromInline static let deleteTHead: JSString = "deleteTHead"
    @usableFromInline static let deltaMode: JSString = "deltaMode"
    @usableFromInline static let deltaX: JSString = "deltaX"
    @usableFromInline static let deltaY: JSString = "deltaY"
    @usableFromInline static let deltaZ: JSString = "deltaZ"
    @usableFromInline static let description: JSString = "description"
    @usableFromInline static let descriptor: JSString = "descriptor"
    @usableFromInline static let designMode: JSString = "designMode"
    @usableFromInline static let desiredHeight: JSString = "desiredHeight"
    @usableFromInline static let desiredSize: JSString = "desiredSize"
    @usableFromInline static let desiredWidth: JSString = "desiredWidth"
    @usableFromInline static let destination: JSString = "destination"
    @usableFromInline static let desynchronized: JSString = "desynchronized"
    @usableFromInline static let detach: JSString = "detach"
    @usableFromInline static let detail: JSString = "detail"
    @usableFromInline static let deviceId: JSString = "deviceId"
    @usableFromInline static let devicePixelRatio: JSString = "devicePixelRatio"
    @usableFromInline static let dir: JSString = "dir"
    @usableFromInline static let dirName: JSString = "dirName"
    @usableFromInline static let direction: JSString = "direction"
    @usableFromInline static let disable: JSString = "disable"
    @usableFromInline static let disabled: JSString = "disabled"
    @usableFromInline static let disconnect: JSString = "disconnect"
    @usableFromInline static let dispatchEvent: JSString = "dispatchEvent"
    @usableFromInline static let displayAspectHeight: JSString = "displayAspectHeight"
    @usableFromInline static let displayAspectWidth: JSString = "displayAspectWidth"
    @usableFromInline static let displayHeight: JSString = "displayHeight"
    @usableFromInline static let displayWidth: JSString = "displayWidth"
    @usableFromInline static let doctype: JSString = "doctype"
    @usableFromInline static let document: JSString = "document"
    @usableFromInline static let documentElement: JSString = "documentElement"
    @usableFromInline static let documentURI: JSString = "documentURI"
    @usableFromInline static let domain: JSString = "domain"
    @usableFromInline static let done: JSString = "done"
    @usableFromInline static let download: JSString = "download"
    @usableFromInline static let downloadRequest: JSString = "downloadRequest"
    @usableFromInline static let draggable: JSString = "draggable"
    @usableFromInline static let drawFocusIfNeeded: JSString = "drawFocusIfNeeded"
    @usableFromInline static let drawImage: JSString = "drawImage"
    @usableFromInline static let dropEffect: JSString = "dropEffect"
    @usableFromInline static let droppedEntriesCount: JSString = "droppedEntriesCount"
    @usableFromInline static let duplex: JSString = "duplex"
    @usableFromInline static let duration: JSString = "duration"
    @usableFromInline static let e: JSString = "e"
    @usableFromInline static let echoCancellation: JSString = "echoCancellation"
    @usableFromInline static let effectAllowed: JSString = "effectAllowed"
    @usableFromInline static let element: JSString = "element"
    @usableFromInline static let elementFromPoint: JSString = "elementFromPoint"
    @usableFromInline static let elements: JSString = "elements"
    @usableFromInline static let elementsFromPoint: JSString = "elementsFromPoint"
    @usableFromInline static let ellipse: JSString = "ellipse"
    @usableFromInline static let emHeightAscent: JSString = "emHeightAscent"
    @usableFromInline static let emHeightDescent: JSString = "emHeightDescent"
    @usableFromInline static let embeds: JSString = "embeds"
    @usableFromInline static let enable: JSString = "enable"
    @usableFromInline static let enabled: JSString = "enabled"
    @usableFromInline static let enabledPlugin: JSString = "enabledPlugin"
    @usableFromInline static let encode: JSString = "encode"
    @usableFromInline static let encodeQueueSize: JSString = "encodeQueueSize"
    @usableFromInline static let encoding: JSString = "encoding"
    @usableFromInline static let enctype: JSString = "enctype"
    @usableFromInline static let end: JSString = "end"
    @usableFromInline static let endContainer: JSString = "endContainer"
    @usableFromInline static let endOfStream: JSString = "endOfStream"
    @usableFromInline static let endOffset: JSString = "endOffset"
    @usableFromInline static let endTime: JSString = "endTime"
    @usableFromInline static let ended: JSString = "ended"
    @usableFromInline static let endings: JSString = "endings"
    @usableFromInline static let enqueue: JSString = "enqueue"
    @usableFromInline static let enterKeyHint: JSString = "enterKeyHint"
    @usableFromInline static let entries: JSString = "entries"
    @usableFromInline static let entryType: JSString = "entryType"
    @usableFromInline static let entryTypes: JSString = "entryTypes"
    @usableFromInline static let enumerateDevices: JSString = "enumerateDevices"
    @usableFromInline static let error: JSString = "error"
    @usableFromInline static let evaluate: JSString = "evaluate"
    @usableFromInline static let event: JSString = "event"
    @usableFromInline static let eventPhase: JSString = "eventPhase"
    @usableFromInline static let exact: JSString = "exact"
    @usableFromInline static let execCommand: JSString = "execCommand"
    @usableFromInline static let extends: JSString = "extends"
    @usableFromInline static let external: JSString = "external"
    @usableFromInline static let extractContents: JSString = "extractContents"
    @usableFromInline static let f: JSString = "f"
    @usableFromInline static let face: JSString = "face"
    @usableFromInline static let facingMode: JSString = "facingMode"
    @usableFromInline static let fastSeek: JSString = "fastSeek"
    @usableFromInline static let fetch: JSString = "fetch"
    @usableFromInline static let fetchPriority: JSString = "fetchPriority"
    @usableFromInline static let fgColor: JSString = "fgColor"
    @usableFromInline static let filename: JSString = "filename"
    @usableFromInline static let files: JSString = "files"
    @usableFromInline static let fill: JSString = "fill"
    @usableFromInline static let fillRect: JSString = "fillRect"
    @usableFromInline static let fillStyle: JSString = "fillStyle"
    @usableFromInline static let fillText: JSString = "fillText"
    @usableFromInline static let filter: JSString = "filter"
    @usableFromInline static let finished: JSString = "finished"
    @usableFromInline static let firstChild: JSString = "firstChild"
    @usableFromInline static let firstElementChild: JSString = "firstElementChild"
    @usableFromInline static let flatten: JSString = "flatten"
    @usableFromInline static let flipX: JSString = "flipX"
    @usableFromInline static let flipY: JSString = "flipY"
    @usableFromInline static let flush: JSString = "flush"
    @usableFromInline static let focus: JSString = "focus"
    @usableFromInline static let focusReset: JSString = "focusReset"
    @usableFromInline static let focusVisible: JSString = "focusVisible"
    @usableFromInline static let font: JSString = "font"
    @usableFromInline static let fontBoundingBoxAscent: JSString = "fontBoundingBoxAscent"
    @usableFromInline static let fontBoundingBoxDescent: JSString = "fontBoundingBoxDescent"
    @usableFromInline static let fontKerning: JSString = "fontKerning"
    @usableFromInline static let fontStretch: JSString = "fontStretch"
    @usableFromInline static let fontVariantCaps: JSString = "fontVariantCaps"
    @usableFromInline static let force: JSString = "force"
    @usableFromInline static let form: JSString = "form"
    @usableFromInline static let formAction: JSString = "formAction"
    @usableFromInline static let formData: JSString = "formData"
    @usableFromInline static let formEnctype: JSString = "formEnctype"
    @usableFromInline static let formMethod: JSString = "formMethod"
    @usableFromInline static let formNoValidate: JSString = "formNoValidate"
    @usableFromInline static let formTarget: JSString = "formTarget"
    @usableFromInline static let format: JSString = "format"
    @usableFromInline static let forms: JSString = "forms"
    @usableFromInline static let forward: JSString = "forward"
    @usableFromInline static let frame: JSString = "frame"
    @usableFromInline static let frameBorder: JSString = "frameBorder"
    @usableFromInline static let frameCount: JSString = "frameCount"
    @usableFromInline static let frameElement: JSString = "frameElement"
    @usableFromInline static let frameIndex: JSString = "frameIndex"
    @usableFromInline static let frameOffset: JSString = "frameOffset"
    @usableFromInline static let frameRate: JSString = "frameRate"
    @usableFromInline static let framerate: JSString = "framerate"
    @usableFromInline static let frames: JSString = "frames"
    @usableFromInline static let from: JSString = "from"
    @usableFromInline static let fromBox: JSString = "fromBox"
    @usableFromInline static let fromFloat32Array: JSString = "fromFloat32Array"
    @usableFromInline static let fromFloat64Array: JSString = "fromFloat64Array"
    @usableFromInline static let fromMatrix: JSString = "fromMatrix"
    @usableFromInline static let fromPoint: JSString = "fromPoint"
    @usableFromInline static let fromQuad: JSString = "fromQuad"
    @usableFromInline static let fromRect: JSString = "fromRect"
    @usableFromInline static let fullRange: JSString = "fullRange"
    @usableFromInline static let get: JSString = "get"
    @usableFromInline static let getAll: JSString = "getAll"
    @usableFromInline static let getAllResponseHeaders: JSString = "getAllResponseHeaders"
    @usableFromInline static let getAsFile: JSString = "getAsFile"
    @usableFromInline static let getAsString: JSString = "getAsString"
    @usableFromInline static let getAttribute: JSString = "getAttribute"
    @usableFromInline static let getAttributeNS: JSString = "getAttributeNS"
    @usableFromInline static let getAttributeNames: JSString = "getAttributeNames"
    @usableFromInline static let getAttributeNode: JSString = "getAttributeNode"
    @usableFromInline static let getAttributeNodeNS: JSString = "getAttributeNodeNS"
    @usableFromInline static let getAudioTracks: JSString = "getAudioTracks"
    @usableFromInline static let getBoundingClientRect: JSString = "getBoundingClientRect"
    @usableFromInline static let getBounds: JSString = "getBounds"
    @usableFromInline static let getBoxQuads: JSString = "getBoxQuads"
    @usableFromInline static let getCapabilities: JSString = "getCapabilities"
    @usableFromInline static let getClientRect: JSString = "getClientRect"
    @usableFromInline static let getClientRects: JSString = "getClientRects"
    @usableFromInline static let getConstraints: JSString = "getConstraints"
    @usableFromInline static let getContextAttributes: JSString = "getContextAttributes"
    @usableFromInline static let getCueById: JSString = "getCueById"
    @usableFromInline static let getData: JSString = "getData"
    @usableFromInline static let getElementById: JSString = "getElementById"
    @usableFromInline static let getElementsByClassName: JSString = "getElementsByClassName"
    @usableFromInline static let getElementsByName: JSString = "getElementsByName"
    @usableFromInline static let getElementsByTagName: JSString = "getElementsByTagName"
    @usableFromInline static let getElementsByTagNameNS: JSString = "getElementsByTagNameNS"
    @usableFromInline static let getEntries: JSString = "getEntries"
    @usableFromInline static let getEntriesByName: JSString = "getEntriesByName"
    @usableFromInline static let getEntriesByType: JSString = "getEntriesByType"
    @usableFromInline static let getImageData: JSString = "getImageData"
    @usableFromInline static let getItem: JSString = "getItem"
    @usableFromInline static let getLineDash: JSString = "getLineDash"
    @usableFromInline static let getModifierState: JSString = "getModifierState"
    @usableFromInline static let getName: JSString = "getName"
    @usableFromInline static let getNamedItem: JSString = "getNamedItem"
    @usableFromInline static let getNamedItemNS: JSString = "getNamedItemNS"
    @usableFromInline static let getParameter: JSString = "getParameter"
    @usableFromInline static let getReader: JSString = "getReader"
    @usableFromInline static let getRegistration: JSString = "getRegistration"
    @usableFromInline static let getRegistrations: JSString = "getRegistrations"
    @usableFromInline static let getResponseHeader: JSString = "getResponseHeader"
    @usableFromInline static let getRootNode: JSString = "getRootNode"
    @usableFromInline static let getSVGDocument: JSString = "getSVGDocument"
    @usableFromInline static let getSetCookie: JSString = "getSetCookie"
    @usableFromInline static let getSettings: JSString = "getSettings"
    @usableFromInline static let getStartDate: JSString = "getStartDate"
    @usableFromInline static let getState: JSString = "getState"
    @usableFromInline static let getSupportedConstraints: JSString = "getSupportedConstraints"
    @usableFromInline static let getTrackById: JSString = "getTrackById"
    @usableFromInline static let getTracks: JSString = "getTracks"
    @usableFromInline static let getTransform: JSString = "getTransform"
    @usableFromInline static let getUserMedia: JSString = "getUserMedia"
    @usableFromInline static let getVideoTracks: JSString = "getVideoTracks"
    @usableFromInline static let getWriter: JSString = "getWriter"
    @usableFromInline static let globalAlpha: JSString = "globalAlpha"
    @usableFromInline static let globalCompositeOperation: JSString = "globalCompositeOperation"
    @usableFromInline static let go: JSString = "go"
    @usableFromInline static let groupId: JSString = "groupId"
    @usableFromInline static let handle: JSString = "handle"
    @usableFromInline static let handled: JSString = "handled"
    @usableFromInline static let handler: JSString = "handler"
    @usableFromInline static let hangingBaseline: JSString = "hangingBaseline"
    @usableFromInline static let hardwareAcceleration: JSString = "hardwareAcceleration"
    @usableFromInline static let hardwareConcurrency: JSString = "hardwareConcurrency"
    @usableFromInline static let has: JSString = "has"
    @usableFromInline static let hasAttribute: JSString = "hasAttribute"
    @usableFromInline static let hasAttributeNS: JSString = "hasAttributeNS"
    @usableFromInline static let hasAttributes: JSString = "hasAttributes"
    @usableFromInline static let hasBeenActive: JSString = "hasBeenActive"
    @usableFromInline static let hasChildNodes: JSString = "hasChildNodes"
    @usableFromInline static let hasFeature: JSString = "hasFeature"
    @usableFromInline static let hasFocus: JSString = "hasFocus"
    @usableFromInline static let hash: JSString = "hash"
    @usableFromInline static let hashChange: JSString = "hashChange"
    @usableFromInline static let head: JSString = "head"
    @usableFromInline static let headerValue: JSString = "headerValue"
    @usableFromInline static let headers: JSString = "headers"
    @usableFromInline static let height: JSString = "height"
    @usableFromInline static let hidden: JSString = "hidden"
    @usableFromInline static let hidePopover: JSString = "hidePopover"
    @usableFromInline static let high: JSString = "high"
    @usableFromInline static let highWaterMark: JSString = "highWaterMark"
    @usableFromInline static let history: JSString = "history"
    @usableFromInline static let host: JSString = "host"
    @usableFromInline static let hostname: JSString = "hostname"
    @usableFromInline static let href: JSString = "href"
    @usableFromInline static let hreflang: JSString = "hreflang"
    @usableFromInline static let hspace: JSString = "hspace"
    @usableFromInline static let htmlFor: JSString = "htmlFor"
    @usableFromInline static let httpEquiv: JSString = "httpEquiv"
    @usableFromInline static let id: JSString = "id"
    @usableFromInline static let ideal: JSString = "ideal"
    @usableFromInline static let identifier: JSString = "identifier"
    @usableFromInline static let ideographicBaseline: JSString = "ideographicBaseline"
    @usableFromInline static let ignoreMethod: JSString = "ignoreMethod"
    @usableFromInline static let ignoreSearch: JSString = "ignoreSearch"
    @usableFromInline static let ignoreVary: JSString = "ignoreVary"
    @usableFromInline static let image: JSString = "image"
    @usableFromInline static let imageOrientation: JSString = "imageOrientation"
    @usableFromInline static let imageSizes: JSString = "imageSizes"
    @usableFromInline static let imageSmoothingEnabled: JSString = "imageSmoothingEnabled"
    @usableFromInline static let imageSmoothingQuality: JSString = "imageSmoothingQuality"
    @usableFromInline static let imageSrcset: JSString = "imageSrcset"
    @usableFromInline static let images: JSString = "images"
    @usableFromInline static let implementation: JSString = "implementation"
    @usableFromInline static let importNode: JSString = "importNode"
    @usableFromInline static let importStylesheet: JSString = "importStylesheet"
    @usableFromInline static let inBandMetadataTrackDispatchType: JSString = "inBandMetadataTrackDispatchType"
    @usableFromInline static let includeUncontrolled: JSString = "includeUncontrolled"
    @usableFromInline static let indeterminate: JSString = "indeterminate"
    @usableFromInline static let index: JSString = "index"
    @usableFromInline static let inert: JSString = "inert"
    @usableFromInline static let info: JSString = "info"
    @usableFromInline static let initCompositionEvent: JSString = "initCompositionEvent"
    @usableFromInline static let initCustomEvent: JSString = "initCustomEvent"
    @usableFromInline static let initEvent: JSString = "initEvent"
    @usableFromInline static let initKeyboardEvent: JSString = "initKeyboardEvent"
    @usableFromInline static let initMessageEvent: JSString = "initMessageEvent"
    @usableFromInline static let initMouseEvent: JSString = "initMouseEvent"
    @usableFromInline static let initMutationEvent: JSString = "initMutationEvent"
    @usableFromInline static let initStorageEvent: JSString = "initStorageEvent"
    @usableFromInline static let initUIEvent: JSString = "initUIEvent"
    @usableFromInline static let inline: JSString = "inline"
    @usableFromInline static let innerHeight: JSString = "innerHeight"
    @usableFromInline static let innerText: JSString = "innerText"
    @usableFromInline static let innerWidth: JSString = "innerWidth"
    @usableFromInline static let inputEncoding: JSString = "inputEncoding"
    @usableFromInline static let inputMode: JSString = "inputMode"
    @usableFromInline static let inputType: JSString = "inputType"
    @usableFromInline static let insertAdjacentElement: JSString = "insertAdjacentElement"
    @usableFromInline static let insertAdjacentText: JSString = "insertAdjacentText"
    @usableFromInline static let insertBefore: JSString = "insertBefore"
    @usableFromInline static let insertCell: JSString = "insertCell"
    @usableFromInline static let insertData: JSString = "insertData"
    @usableFromInline static let insertNode: JSString = "insertNode"
    @usableFromInline static let insertRow: JSString = "insertRow"
    @usableFromInline static let installing: JSString = "installing"
    @usableFromInline static let integrity: JSString = "integrity"
    @usableFromInline static let intercept: JSString = "intercept"
    @usableFromInline static let intersectsNode: JSString = "intersectsNode"
    @usableFromInline static let invalidIteratorState: JSString = "invalidIteratorState"
    @usableFromInline static let inverse: JSString = "inverse"
    @usableFromInline static let invertSelf: JSString = "invertSelf"
    @usableFromInline static let `is`: JSString = "is"
    @usableFromInline static let is2D: JSString = "is2D"
    @usableFromInline static let isActive: JSString = "isActive"
    @usableFromInline static let isComposing: JSString = "isComposing"
    @usableFromInline static let isConfigSupported: JSString = "isConfigSupported"
    @usableFromInline static let isConnected: JSString = "isConnected"
    @usableFromInline static let isContentEditable: JSString = "isContentEditable"
    @usableFromInline static let isContextLost: JSString = "isContextLost"
    @usableFromInline static let isDefaultNamespace: JSString = "isDefaultNamespace"
    @usableFromInline static let isEqualNode: JSString = "isEqualNode"
    @usableFromInline static let isHistoryNavigation: JSString = "isHistoryNavigation"
    @usableFromInline static let isIdentity: JSString = "isIdentity"
    @usableFromInline static let isMap: JSString = "isMap"
    @usableFromInline static let isPointInPath: JSString = "isPointInPath"
    @usableFromInline static let isPointInRange: JSString = "isPointInRange"
    @usableFromInline static let isPointInStroke: JSString = "isPointInStroke"
    @usableFromInline static let isReloadNavigation: JSString = "isReloadNavigation"
    @usableFromInline static let isSameNode: JSString = "isSameNode"
    @usableFromInline static let isSecureContext: JSString = "isSecureContext"
    @usableFromInline static let isTrusted: JSString = "isTrusted"
    @usableFromInline static let isTypeSupported: JSString = "isTypeSupported"
    @usableFromInline static let item: JSString = "item"
    @usableFromInline static let items: JSString = "items"
    @usableFromInline static let iterateNext: JSString = "iterateNext"
    @usableFromInline static let javaEnabled: JSString = "javaEnabled"
    @usableFromInline static let json: JSString = "json"
    @usableFromInline static let keepalive: JSString = "keepalive"
    @usableFromInline static let key: JSString = "key"
    @usableFromInline static let keyCode: JSString = "keyCode"
    @usableFromInline static let keyFrame: JSString = "keyFrame"
    @usableFromInline static let keys: JSString = "keys"
    @usableFromInline static let kind: JSString = "kind"
    @usableFromInline static let label: JSString = "label"
    @usableFromInline static let labels: JSString = "labels"
    @usableFromInline static let lang: JSString = "lang"
    @usableFromInline static let language: JSString = "language"
    @usableFromInline static let languages: JSString = "languages"
    @usableFromInline static let lastChild: JSString = "lastChild"
    @usableFromInline static let lastElementChild: JSString = "lastElementChild"
    @usableFromInline static let lastEventId: JSString = "lastEventId"
    @usableFromInline static let lastModified: JSString = "lastModified"
    @usableFromInline static let latency: JSString = "latency"
    @usableFromInline static let latencyMode: JSString = "latencyMode"
    @usableFromInline static let layout: JSString = "layout"
    @usableFromInline static let left: JSString = "left"
    @usableFromInline static let length: JSString = "length"
    @usableFromInline static let lengthComputable: JSString = "lengthComputable"
    @usableFromInline static let letterSpacing: JSString = "letterSpacing"
    @usableFromInline static let lineCap: JSString = "lineCap"
    @usableFromInline static let lineDashOffset: JSString = "lineDashOffset"
    @usableFromInline static let lineJoin: JSString = "lineJoin"
    @usableFromInline static let lineTo: JSString = "lineTo"
    @usableFromInline static let lineWidth: JSString = "lineWidth"
    @usableFromInline static let lineno: JSString = "lineno"
    @usableFromInline static let link: JSString = "link"
    @usableFromInline static let linkColor: JSString = "linkColor"
    @usableFromInline static let links: JSString = "links"
    @usableFromInline static let list: JSString = "list"
    @usableFromInline static let load: JSString = "load"
    @usableFromInline static let loaded: JSString = "loaded"
    @usableFromInline static let loading: JSString = "loading"
    @usableFromInline static let localName: JSString = "localName"
    @usableFromInline static let localStorage: JSString = "localStorage"
    @usableFromInline static let location: JSString = "location"
    @usableFromInline static let locationbar: JSString = "locationbar"
    @usableFromInline static let locked: JSString = "locked"
    @usableFromInline static let longDesc: JSString = "longDesc"
    @usableFromInline static let lookupNamespaceURI: JSString = "lookupNamespaceURI"
    @usableFromInline static let lookupPrefix: JSString = "lookupPrefix"
    @usableFromInline static let loop: JSString = "loop"
    @usableFromInline static let low: JSString = "low"
    @usableFromInline static let lowsrc: JSString = "lowsrc"
    @usableFromInline static let m11: JSString = "m11"
    @usableFromInline static let m12: JSString = "m12"
    @usableFromInline static let m13: JSString = "m13"
    @usableFromInline static let m14: JSString = "m14"
    @usableFromInline static let m21: JSString = "m21"
    @usableFromInline static let m22: JSString = "m22"
    @usableFromInline static let m23: JSString = "m23"
    @usableFromInline static let m24: JSString = "m24"
    @usableFromInline static let m31: JSString = "m31"
    @usableFromInline static let m32: JSString = "m32"
    @usableFromInline static let m33: JSString = "m33"
    @usableFromInline static let m34: JSString = "m34"
    @usableFromInline static let m41: JSString = "m41"
    @usableFromInline static let m42: JSString = "m42"
    @usableFromInline static let m43: JSString = "m43"
    @usableFromInline static let m44: JSString = "m44"
    @usableFromInline static let marginHeight: JSString = "marginHeight"
    @usableFromInline static let marginWidth: JSString = "marginWidth"
    @usableFromInline static let match: JSString = "match"
    @usableFromInline static let matchAll: JSString = "matchAll"
    @usableFromInline static let matchMedia: JSString = "matchMedia"
    @usableFromInline static let matches: JSString = "matches"
    @usableFromInline static let matrix: JSString = "matrix"
    @usableFromInline static let matrixTransform: JSString = "matrixTransform"
    @usableFromInline static let max: JSString = "max"
    @usableFromInline static let maxLength: JSString = "maxLength"
    @usableFromInline static let measureText: JSString = "measureText"
    @usableFromInline static let media: JSString = "media"
    @usableFromInline static let mediaDevices: JSString = "mediaDevices"
    @usableFromInline static let menubar: JSString = "menubar"
    @usableFromInline static let message: JSString = "message"
    @usableFromInline static let metaKey: JSString = "metaKey"
    @usableFromInline static let metadata: JSString = "metadata"
    @usableFromInline static let method: JSString = "method"
    @usableFromInline static let mimeType: JSString = "mimeType"
    @usableFromInline static let mimeTypes: JSString = "mimeTypes"
    @usableFromInline static let min: JSString = "min"
    @usableFromInline static let minLength: JSString = "minLength"
    @usableFromInline static let miterLimit: JSString = "miterLimit"
    @usableFromInline static let mode: JSString = "mode"
    @usableFromInline static let modifierAltGraph: JSString = "modifierAltGraph"
    @usableFromInline static let modifierCapsLock: JSString = "modifierCapsLock"
    @usableFromInline static let modifierFn: JSString = "modifierFn"
    @usableFromInline static let modifierFnLock: JSString = "modifierFnLock"
    @usableFromInline static let modifierHyper: JSString = "modifierHyper"
    @usableFromInline static let modifierNumLock: JSString = "modifierNumLock"
    @usableFromInline static let modifierScrollLock: JSString = "modifierScrollLock"
    @usableFromInline static let modifierSuper: JSString = "modifierSuper"
    @usableFromInline static let modifierSymbol: JSString = "modifierSymbol"
    @usableFromInline static let modifierSymbolLock: JSString = "modifierSymbolLock"
    @usableFromInline static let moveBy: JSString = "moveBy"
    @usableFromInline static let moveTo: JSString = "moveTo"
    @usableFromInline static let multiple: JSString = "multiple"
    @usableFromInline static let multiply: JSString = "multiply"
    @usableFromInline static let multiplySelf: JSString = "multiplySelf"
    @usableFromInline static let muted: JSString = "muted"
    @usableFromInline static let name: JSString = "name"
    @usableFromInline static let namedItem: JSString = "namedItem"
    @usableFromInline static let namespaceURI: JSString = "namespaceURI"
    @usableFromInline static let naturalHeight: JSString = "naturalHeight"
    @usableFromInline static let naturalWidth: JSString = "naturalWidth"
    @usableFromInline static let navigate: JSString = "navigate"
    @usableFromInline static let navigation: JSString = "navigation"
    @usableFromInline static let navigationPreload: JSString = "navigationPreload"
    @usableFromInline static let navigationType: JSString = "navigationType"
    @usableFromInline static let navigator: JSString = "navigator"
    @usableFromInline static let networkState: JSString = "networkState"
    @usableFromInline static let newState: JSString = "newState"
    @usableFromInline static let newURL: JSString = "newURL"
    @usableFromInline static let newValue: JSString = "newValue"
    @usableFromInline static let nextElementSibling: JSString = "nextElementSibling"
    @usableFromInline static let nextNode: JSString = "nextNode"
    @usableFromInline static let nextSibling: JSString = "nextSibling"
    @usableFromInline static let noHref: JSString = "noHref"
    @usableFromInline static let noModule: JSString = "noModule"
    @usableFromInline static let noResize: JSString = "noResize"
    @usableFromInline static let noShade: JSString = "noShade"
    @usableFromInline static let noValidate: JSString = "noValidate"
    @usableFromInline static let noWrap: JSString = "noWrap"
    @usableFromInline static let nodeName: JSString = "nodeName"
    @usableFromInline static let nodeType: JSString = "nodeType"
    @usableFromInline static let nodeValue: JSString = "nodeValue"
    @usableFromInline static let noiseSuppression: JSString = "noiseSuppression"
    @usableFromInline static let nonce: JSString = "nonce"
    @usableFromInline static let normalize: JSString = "normalize"
    @usableFromInline static let now: JSString = "now"
    @usableFromInline static let numberOfChannels: JSString = "numberOfChannels"
    @usableFromInline static let numberOfFrames: JSString = "numberOfFrames"
    @usableFromInline static let numberValue: JSString = "numberValue"
    @usableFromInline static let observe: JSString = "observe"
    @usableFromInline static let offset: JSString = "offset"
    @usableFromInline static let offsetHeight: JSString = "offsetHeight"
    @usableFromInline static let offsetLeft: JSString = "offsetLeft"
    @usableFromInline static let offsetNode: JSString = "offsetNode"
    @usableFromInline static let offsetParent: JSString = "offsetParent"
    @usableFromInline static let offsetTop: JSString = "offsetTop"
    @usableFromInline static let offsetWidth: JSString = "offsetWidth"
    @usableFromInline static let offsetX: JSString = "offsetX"
    @usableFromInline static let offsetY: JSString = "offsetY"
    @usableFromInline static let ok: JSString = "ok"
    @usableFromInline static let oldState: JSString = "oldState"
    @usableFromInline static let oldURL: JSString = "oldURL"
    @usableFromInline static let oldValue: JSString = "oldValue"
    @usableFromInline static let onLine: JSString = "onLine"
    @usableFromInline static let onabort: JSString = "onabort"
    @usableFromInline static let onaddsourcebuffer: JSString = "onaddsourcebuffer"
    @usableFromInline static let onaddtrack: JSString = "onaddtrack"
    @usableFromInline static let onafterprint: JSString = "onafterprint"
    @usableFromInline static let onauxclick: JSString = "onauxclick"
    @usableFromInline static let onbeforeinput: JSString = "onbeforeinput"
    @usableFromInline static let onbeforematch: JSString = "onbeforematch"
    @usableFromInline static let onbeforeprint: JSString = "onbeforeprint"
    @usableFromInline static let onbeforetoggle: JSString = "onbeforetoggle"
    @usableFromInline static let onbeforeunload: JSString = "onbeforeunload"
    @usableFromInline static let onblur: JSString = "onblur"
    @usableFromInline static let oncancel: JSString = "oncancel"
    @usableFromInline static let oncanplay: JSString = "oncanplay"
    @usableFromInline static let oncanplaythrough: JSString = "oncanplaythrough"
    @usableFromInline static let once: JSString = "once"
    @usableFromInline static let onchange: JSString = "onchange"
    @usableFromInline static let onclick: JSString = "onclick"
    @usableFromInline static let onclose: JSString = "onclose"
    @usableFromInline static let oncontextlost: JSString = "oncontextlost"
    @usableFromInline static let oncontextmenu: JSString = "oncontextmenu"
    @usableFromInline static let oncontextrestored: JSString = "oncontextrestored"
    @usableFromInline static let oncontrollerchange: JSString = "oncontrollerchange"
    @usableFromInline static let oncopy: JSString = "oncopy"
    @usableFromInline static let oncuechange: JSString = "oncuechange"
    @usableFromInline static let oncurrententrychange: JSString = "oncurrententrychange"
    @usableFromInline static let oncut: JSString = "oncut"
    @usableFromInline static let ondataavailable: JSString = "ondataavailable"
    @usableFromInline static let ondblclick: JSString = "ondblclick"
    @usableFromInline static let ondequeue: JSString = "ondequeue"
    @usableFromInline static let ondevicechange: JSString = "ondevicechange"
    @usableFromInline static let ondispose: JSString = "ondispose"
    @usableFromInline static let ondrag: JSString = "ondrag"
    @usableFromInline static let ondragend: JSString = "ondragend"
    @usableFromInline static let ondragenter: JSString = "ondragenter"
    @usableFromInline static let ondragleave: JSString = "ondragleave"
    @usableFromInline static let ondragover: JSString = "ondragover"
    @usableFromInline static let ondragstart: JSString = "ondragstart"
    @usableFromInline static let ondrop: JSString = "ondrop"
    @usableFromInline static let ondurationchange: JSString = "ondurationchange"
    @usableFromInline static let onemptied: JSString = "onemptied"
    @usableFromInline static let onended: JSString = "onended"
    @usableFromInline static let onenter: JSString = "onenter"
    @usableFromInline static let onerror: JSString = "onerror"
    @usableFromInline static let onexit: JSString = "onexit"
    @usableFromInline static let onfocus: JSString = "onfocus"
    @usableFromInline static let onformdata: JSString = "onformdata"
    @usableFromInline static let onhashchange: JSString = "onhashchange"
    @usableFromInline static let oninput: JSString = "oninput"
    @usableFromInline static let oninvalid: JSString = "oninvalid"
    @usableFromInline static let onkeydown: JSString = "onkeydown"
    @usableFromInline static let onkeypress: JSString = "onkeypress"
    @usableFromInline static let onkeyup: JSString = "onkeyup"
    @usableFromInline static let onlanguagechange: JSString = "onlanguagechange"
    @usableFromInline static let onload: JSString = "onload"
    @usableFromInline static let onloadeddata: JSString = "onloadeddata"
    @usableFromInline static let onloadedmetadata: JSString = "onloadedmetadata"
    @usableFromInline static let onloadend: JSString = "onloadend"
    @usableFromInline static let onloadstart: JSString = "onloadstart"
    @usableFromInline static let onmessage: JSString = "onmessage"
    @usableFromInline static let onmessageerror: JSString = "onmessageerror"
    @usableFromInline static let onmousedown: JSString = "onmousedown"
    @usableFromInline static let onmouseenter: JSString = "onmouseenter"
    @usableFromInline static let onmouseleave: JSString = "onmouseleave"
    @usableFromInline static let onmousemove: JSString = "onmousemove"
    @usableFromInline static let onmouseout: JSString = "onmouseout"
    @usableFromInline static let onmouseover: JSString = "onmouseover"
    @usableFromInline static let onmouseup: JSString = "onmouseup"
    @usableFromInline static let onmute: JSString = "onmute"
    @usableFromInline static let onnavigate: JSString = "onnavigate"
    @usableFromInline static let onnavigateerror: JSString = "onnavigateerror"
    @usableFromInline static let onnavigatesuccess: JSString = "onnavigatesuccess"
    @usableFromInline static let onoffline: JSString = "onoffline"
    @usableFromInline static let ononline: JSString = "ononline"
    @usableFromInline static let onopen: JSString = "onopen"
    @usableFromInline static let onpagehide: JSString = "onpagehide"
    @usableFromInline static let onpageshow: JSString = "onpageshow"
    @usableFromInline static let onpaste: JSString = "onpaste"
    @usableFromInline static let onpause: JSString = "onpause"
    @usableFromInline static let onplay: JSString = "onplay"
    @usableFromInline static let onplaying: JSString = "onplaying"
    @usableFromInline static let onpopstate: JSString = "onpopstate"
    @usableFromInline static let onprogress: JSString = "onprogress"
    @usableFromInline static let onratechange: JSString = "onratechange"
    @usableFromInline static let onreadystatechange: JSString = "onreadystatechange"
    @usableFromInline static let onrejectionhandled: JSString = "onrejectionhandled"
    @usableFromInline static let onremovesourcebuffer: JSString = "onremovesourcebuffer"
    @usableFromInline static let onremovetrack: JSString = "onremovetrack"
    @usableFromInline static let onreset: JSString = "onreset"
    @usableFromInline static let onresize: JSString = "onresize"
    @usableFromInline static let onresume: JSString = "onresume"
    @usableFromInline static let onscroll: JSString = "onscroll"
    @usableFromInline static let onscrollend: JSString = "onscrollend"
    @usableFromInline static let onsecuritypolicyviolation: JSString = "onsecuritypolicyviolation"
    @usableFromInline static let onseeked: JSString = "onseeked"
    @usableFromInline static let onseeking: JSString = "onseeking"
    @usableFromInline static let onselect: JSString = "onselect"
    @usableFromInline static let onslotchange: JSString = "onslotchange"
    @usableFromInline static let onsourceclose: JSString = "onsourceclose"
    @usableFromInline static let onsourceended: JSString = "onsourceended"
    @usableFromInline static let onsourceopen: JSString = "onsourceopen"
    @usableFromInline static let onstalled: JSString = "onstalled"
    @usableFromInline static let onstart: JSString = "onstart"
    @usableFromInline static let onstatechange: JSString = "onstatechange"
    @usableFromInline static let onstop: JSString = "onstop"
    @usableFromInline static let onstorage: JSString = "onstorage"
    @usableFromInline static let onsubmit: JSString = "onsubmit"
    @usableFromInline static let onsuspend: JSString = "onsuspend"
    @usableFromInline static let ontimeout: JSString = "ontimeout"
    @usableFromInline static let ontimeupdate: JSString = "ontimeupdate"
    @usableFromInline static let ontoggle: JSString = "ontoggle"
    @usableFromInline static let ontouchcancel: JSString = "ontouchcancel"
    @usableFromInline static let ontouchend: JSString = "ontouchend"
    @usableFromInline static let ontouchmove: JSString = "ontouchmove"
    @usableFromInline static let ontouchstart: JSString = "ontouchstart"
    @usableFromInline static let onunhandledrejection: JSString = "onunhandledrejection"
    @usableFromInline static let onunload: JSString = "onunload"
    @usableFromInline static let onunmute: JSString = "onunmute"
    @usableFromInline static let onupdate: JSString = "onupdate"
    @usableFromInline static let onupdateend: JSString = "onupdateend"
    @usableFromInline static let onupdatefound: JSString = "onupdatefound"
    @usableFromInline static let onupdatestart: JSString = "onupdatestart"
    @usableFromInline static let onvisibilitychange: JSString = "onvisibilitychange"
    @usableFromInline static let onvolumechange: JSString = "onvolumechange"
    @usableFromInline static let onwaiting: JSString = "onwaiting"
    @usableFromInline static let onwebkitanimationend: JSString = "onwebkitanimationend"
    @usableFromInline static let onwebkitanimationiteration: JSString = "onwebkitanimationiteration"
    @usableFromInline static let onwebkitanimationstart: JSString = "onwebkitanimationstart"
    @usableFromInline static let onwebkittransitionend: JSString = "onwebkittransitionend"
    @usableFromInline static let onwheel: JSString = "onwheel"
    @usableFromInline static let open: JSString = "open"
    @usableFromInline static let opener: JSString = "opener"
    @usableFromInline static let optimizeForLatency: JSString = "optimizeForLatency"
    @usableFromInline static let optimum: JSString = "optimum"
    @usableFromInline static let options: JSString = "options"
    @usableFromInline static let origin: JSString = "origin"
    @usableFromInline static let originAgentCluster: JSString = "originAgentCluster"
    @usableFromInline static let oscpu: JSString = "oscpu"
    @usableFromInline static let outerHeight: JSString = "outerHeight"
    @usableFromInline static let outerText: JSString = "outerText"
    @usableFromInline static let outerWidth: JSString = "outerWidth"
    @usableFromInline static let output: JSString = "output"
    @usableFromInline static let overrideMimeType: JSString = "overrideMimeType"
    @usableFromInline static let ownerDocument: JSString = "ownerDocument"
    @usableFromInline static let ownerElement: JSString = "ownerElement"
    @usableFromInline static let p1: JSString = "p1"
    @usableFromInline static let p2: JSString = "p2"
    @usableFromInline static let p3: JSString = "p3"
    @usableFromInline static let p4: JSString = "p4"
    @usableFromInline static let pageLeft: JSString = "pageLeft"
    @usableFromInline static let pageTop: JSString = "pageTop"
    @usableFromInline static let pageX: JSString = "pageX"
    @usableFromInline static let pageXOffset: JSString = "pageXOffset"
    @usableFromInline static let pageY: JSString = "pageY"
    @usableFromInline static let pageYOffset: JSString = "pageYOffset"
    @usableFromInline static let panTiltZoom: JSString = "panTiltZoom"
    @usableFromInline static let parent: JSString = "parent"
    @usableFromInline static let parentElement: JSString = "parentElement"
    @usableFromInline static let parentNode: JSString = "parentNode"
    @usableFromInline static let parseFromString: JSString = "parseFromString"
    @usableFromInline static let passive: JSString = "passive"
    @usableFromInline static let password: JSString = "password"
    @usableFromInline static let pathname: JSString = "pathname"
    @usableFromInline static let pattern: JSString = "pattern"
    @usableFromInline static let patternMismatch: JSString = "patternMismatch"
    @usableFromInline static let pause: JSString = "pause"
    @usableFromInline static let pauseOnExit: JSString = "pauseOnExit"
    @usableFromInline static let paused: JSString = "paused"
    @usableFromInline static let pdfViewerEnabled: JSString = "pdfViewerEnabled"
    @usableFromInline static let performance: JSString = "performance"
    @usableFromInline static let permissions: JSString = "permissions"
    @usableFromInline static let persisted: JSString = "persisted"
    @usableFromInline static let personalbar: JSString = "personalbar"
    @usableFromInline static let ping: JSString = "ping"
    @usableFromInline static let pipeThrough: JSString = "pipeThrough"
    @usableFromInline static let pipeTo: JSString = "pipeTo"
    @usableFromInline static let pixelDepth: JSString = "pixelDepth"
    @usableFromInline static let placeholder: JSString = "placeholder"
    @usableFromInline static let planeIndex: JSString = "planeIndex"
    @usableFromInline static let platform: JSString = "platform"
    @usableFromInline static let play: JSString = "play"
    @usableFromInline static let playbackRate: JSString = "playbackRate"
    @usableFromInline static let played: JSString = "played"
    @usableFromInline static let playsInline: JSString = "playsInline"
    @usableFromInline static let plugins: JSString = "plugins"
    @usableFromInline static let pointerBeforeReferenceNode: JSString = "pointerBeforeReferenceNode"
    @usableFromInline static let popover: JSString = "popover"
    @usableFromInline static let popoverTargetAction: JSString = "popoverTargetAction"
    @usableFromInline static let popoverTargetElement: JSString = "popoverTargetElement"
    @usableFromInline static let port: JSString = "port"
    @usableFromInline static let port1: JSString = "port1"
    @usableFromInline static let port2: JSString = "port2"
    @usableFromInline static let ports: JSString = "ports"
    @usableFromInline static let position: JSString = "position"
    @usableFromInline static let postMessage: JSString = "postMessage"
    @usableFromInline static let poster: JSString = "poster"
    @usableFromInline static let preMultiplySelf: JSString = "preMultiplySelf"
    @usableFromInline static let preferAnimation: JSString = "preferAnimation"
    @usableFromInline static let prefix: JSString = "prefix"
    @usableFromInline static let preload: JSString = "preload"
    @usableFromInline static let preloadResponse: JSString = "preloadResponse"
    @usableFromInline static let premultiplyAlpha: JSString = "premultiplyAlpha"
    @usableFromInline static let prepend: JSString = "prepend"
    @usableFromInline static let preservesPitch: JSString = "preservesPitch"
    @usableFromInline static let prevValue: JSString = "prevValue"
    @usableFromInline static let preventAbort: JSString = "preventAbort"
    @usableFromInline static let preventCancel: JSString = "preventCancel"
    @usableFromInline static let preventClose: JSString = "preventClose"
    @usableFromInline static let preventDefault: JSString = "preventDefault"
    @usableFromInline static let preventScroll: JSString = "preventScroll"
    @usableFromInline static let previousElementSibling: JSString = "previousElementSibling"
    @usableFromInline static let previousNode: JSString = "previousNode"
    @usableFromInline static let previousSibling: JSString = "previousSibling"
    @usableFromInline static let primaries: JSString = "primaries"
    @usableFromInline static let print: JSString = "print"
    @usableFromInline static let priority: JSString = "priority"
    @usableFromInline static let product: JSString = "product"
    @usableFromInline static let productSub: JSString = "productSub"
    @usableFromInline static let promise: JSString = "promise"
    @usableFromInline static let prompt: JSString = "prompt"
    @usableFromInline static let `protocol`: JSString = "protocol"
    @usableFromInline static let pseudo: JSString = "pseudo"
    @usableFromInline static let publicId: JSString = "publicId"
    @usableFromInline static let pull: JSString = "pull"
    @usableFromInline static let pushState: JSString = "pushState"
    @usableFromInline static let put: JSString = "put"
    @usableFromInline static let putImageData: JSString = "putImageData"
    @usableFromInline static let quadraticCurveTo: JSString = "quadraticCurveTo"
    @usableFromInline static let quality: JSString = "quality"
    @usableFromInline static let query: JSString = "query"
    @usableFromInline static let queryCommandEnabled: JSString = "queryCommandEnabled"
    @usableFromInline static let queryCommandIndeterm: JSString = "queryCommandIndeterm"
    @usableFromInline static let queryCommandState: JSString = "queryCommandState"
    @usableFromInline static let queryCommandSupported: JSString = "queryCommandSupported"
    @usableFromInline static let queryCommandValue: JSString = "queryCommandValue"
    @usableFromInline static let querySelector: JSString = "querySelector"
    @usableFromInline static let querySelectorAll: JSString = "querySelectorAll"
    @usableFromInline static let queueMicrotask: JSString = "queueMicrotask"
    @usableFromInline static let radiusX: JSString = "radiusX"
    @usableFromInline static let radiusY: JSString = "radiusY"
    @usableFromInline static let rangeOverflow: JSString = "rangeOverflow"
    @usableFromInline static let rangeUnderflow: JSString = "rangeUnderflow"
    @usableFromInline static let read: JSString = "read"
    @usableFromInline static let readAsArrayBuffer: JSString = "readAsArrayBuffer"
    @usableFromInline static let readAsBinaryString: JSString = "readAsBinaryString"
    @usableFromInline static let readAsDataURL: JSString = "readAsDataURL"
    @usableFromInline static let readAsText: JSString = "readAsText"
    @usableFromInline static let readOnly: JSString = "readOnly"
    @usableFromInline static let readable: JSString = "readable"
    @usableFromInline static let readableType: JSString = "readableType"
    @usableFromInline static let ready: JSString = "ready"
    @usableFromInline static let readyState: JSString = "readyState"
    @usableFromInline static let reason: JSString = "reason"
    @usableFromInline static let rect: JSString = "rect"
    @usableFromInline static let redirect: JSString = "redirect"
    @usableFromInline static let redirected: JSString = "redirected"
    @usableFromInline static let referenceNode: JSString = "referenceNode"
    @usableFromInline static let referrer: JSString = "referrer"
    @usableFromInline static let referrerPolicy: JSString = "referrerPolicy"
    @usableFromInline static let refresh: JSString = "refresh"
    @usableFromInline static let register: JSString = "register"
    @usableFromInline static let registerProtocolHandler: JSString = "registerProtocolHandler"
    @usableFromInline static let rel: JSString = "rel"
    @usableFromInline static let relList: JSString = "relList"
    @usableFromInline static let relatedNode: JSString = "relatedNode"
    @usableFromInline static let relatedTarget: JSString = "relatedTarget"
    @usableFromInline static let relativeTo: JSString = "relativeTo"
    @usableFromInline static let releaseEvents: JSString = "releaseEvents"
    @usableFromInline static let releaseLock: JSString = "releaseLock"
    @usableFromInline static let reload: JSString = "reload"
    @usableFromInline static let remove: JSString = "remove"
    @usableFromInline static let removeAttribute: JSString = "removeAttribute"
    @usableFromInline static let removeAttributeNS: JSString = "removeAttributeNS"
    @usableFromInline static let removeAttributeNode: JSString = "removeAttributeNode"
    @usableFromInline static let removeChild: JSString = "removeChild"
    @usableFromInline static let removeCue: JSString = "removeCue"
    @usableFromInline static let removeEventListener: JSString = "removeEventListener"
    @usableFromInline static let removeListener: JSString = "removeListener"
    @usableFromInline static let removeNamedItem: JSString = "removeNamedItem"
    @usableFromInline static let removeNamedItemNS: JSString = "removeNamedItemNS"
    @usableFromInline static let removeParameter: JSString = "removeParameter"
    @usableFromInline static let removeSourceBuffer: JSString = "removeSourceBuffer"
    @usableFromInline static let removeTrack: JSString = "removeTrack"
    @usableFromInline static let removedNodes: JSString = "removedNodes"
    @usableFromInline static let `repeat`: JSString = "repeat"
    @usableFromInline static let repetitionCount: JSString = "repetitionCount"
    @usableFromInline static let replace: JSString = "replace"
    @usableFromInline static let replaceChild: JSString = "replaceChild"
    @usableFromInline static let replaceChildren: JSString = "replaceChildren"
    @usableFromInline static let replaceData: JSString = "replaceData"
    @usableFromInline static let replaceState: JSString = "replaceState"
    @usableFromInline static let replaceWith: JSString = "replaceWith"
    @usableFromInline static let replacesClientId: JSString = "replacesClientId"
    @usableFromInline static let reportError: JSString = "reportError"
    @usableFromInline static let reportValidity: JSString = "reportValidity"
    @usableFromInline static let request: JSString = "request"
    @usableFromInline static let requestAnimationFrame: JSString = "requestAnimationFrame"
    @usableFromInline static let requestData: JSString = "requestData"
    @usableFromInline static let requestSubmit: JSString = "requestSubmit"
    @usableFromInline static let required: JSString = "required"
    @usableFromInline static let reset: JSString = "reset"
    @usableFromInline static let resetTransform: JSString = "resetTransform"
    @usableFromInline static let resizeBy: JSString = "resizeBy"
    @usableFromInline static let resizeHeight: JSString = "resizeHeight"
    @usableFromInline static let resizeMode: JSString = "resizeMode"
    @usableFromInline static let resizeQuality: JSString = "resizeQuality"
    @usableFromInline static let resizeTo: JSString = "resizeTo"
    @usableFromInline static let resizeWidth: JSString = "resizeWidth"
    @usableFromInline static let respond: JSString = "respond"
    @usableFromInline static let respondWithNewView: JSString = "respondWithNewView"
    @usableFromInline static let response: JSString = "response"
    @usableFromInline static let responseText: JSString = "responseText"
    @usableFromInline static let responseType: JSString = "responseType"
    @usableFromInline static let responseURL: JSString = "responseURL"
    @usableFromInline static let responseXML: JSString = "responseXML"
    @usableFromInline static let restore: JSString = "restore"
    @usableFromInline static let result: JSString = "result"
    @usableFromInline static let resultType: JSString = "resultType"
    @usableFromInline static let resultingClientId: JSString = "resultingClientId"
    @usableFromInline static let resume: JSString = "resume"
    @usableFromInline static let returnValue: JSString = "returnValue"
    @usableFromInline static let rev: JSString = "rev"
    @usableFromInline static let reversed: JSString = "reversed"
    @usableFromInline static let revokeObjectURL: JSString = "revokeObjectURL"
    @usableFromInline static let right: JSString = "right"
    @usableFromInline static let role: JSString = "role"
    @usableFromInline static let root: JSString = "root"
    @usableFromInline static let rotate: JSString = "rotate"
    @usableFromInline static let rotateAxisAngle: JSString = "rotateAxisAngle"
    @usableFromInline static let rotateAxisAngleSelf: JSString = "rotateAxisAngleSelf"
    @usableFromInline static let rotateFromVector: JSString = "rotateFromVector"
    @usableFromInline static let rotateFromVectorSelf: JSString = "rotateFromVectorSelf"
    @usableFromInline static let rotateSelf: JSString = "rotateSelf"
    @usableFromInline static let rotationAngle: JSString = "rotationAngle"
    @usableFromInline static let roundRect: JSString = "roundRect"
    @usableFromInline static let rowIndex: JSString = "rowIndex"
    @usableFromInline static let rowSpan: JSString = "rowSpan"
    @usableFromInline static let rows: JSString = "rows"
    @usableFromInline static let rules: JSString = "rules"
    @usableFromInline static let sameDocument: JSString = "sameDocument"
    @usableFromInline static let sampleRate: JSString = "sampleRate"
    @usableFromInline static let sampleSize: JSString = "sampleSize"
    @usableFromInline static let sandbox: JSString = "sandbox"
    @usableFromInline static let save: JSString = "save"
    @usableFromInline static let scalabilityMode: JSString = "scalabilityMode"
    @usableFromInline static let scale: JSString = "scale"
    @usableFromInline static let scale3d: JSString = "scale3d"
    @usableFromInline static let scale3dSelf: JSString = "scale3dSelf"
    @usableFromInline static let scaleNonUniform: JSString = "scaleNonUniform"
    @usableFromInline static let scaleSelf: JSString = "scaleSelf"
    @usableFromInline static let scheme: JSString = "scheme"
    @usableFromInline static let scope: JSString = "scope"
    @usableFromInline static let screen: JSString = "screen"
    @usableFromInline static let screenLeft: JSString = "screenLeft"
    @usableFromInline static let screenTop: JSString = "screenTop"
    @usableFromInline static let screenX: JSString = "screenX"
    @usableFromInline static let screenY: JSString = "screenY"
    @usableFromInline static let scriptURL: JSString = "scriptURL"
    @usableFromInline static let scripts: JSString = "scripts"
    @usableFromInline static let scroll: JSString = "scroll"
    @usableFromInline static let scrollAmount: JSString = "scrollAmount"
    @usableFromInline static let scrollBy: JSString = "scrollBy"
    @usableFromInline static let scrollDelay: JSString = "scrollDelay"
    @usableFromInline static let scrollHeight: JSString = "scrollHeight"
    @usableFromInline static let scrollIntoView: JSString = "scrollIntoView"
    @usableFromInline static let scrollLeft: JSString = "scrollLeft"
    @usableFromInline static let scrollPathIntoView: JSString = "scrollPathIntoView"
    @usableFromInline static let scrollRestoration: JSString = "scrollRestoration"
    @usableFromInline static let scrollTo: JSString = "scrollTo"
    @usableFromInline static let scrollTop: JSString = "scrollTop"
    @usableFromInline static let scrollWidth: JSString = "scrollWidth"
    @usableFromInline static let scrollX: JSString = "scrollX"
    @usableFromInline static let scrollY: JSString = "scrollY"
    @usableFromInline static let scrollbars: JSString = "scrollbars"
    @usableFromInline static let scrolling: JSString = "scrolling"
    @usableFromInline static let scrollingElement: JSString = "scrollingElement"
    @usableFromInline static let search: JSString = "search"
    @usableFromInline static let sectionRowIndex: JSString = "sectionRowIndex"
    @usableFromInline static let seekable: JSString = "seekable"
    @usableFromInline static let seeking: JSString = "seeking"
    @usableFromInline static let select: JSString = "select"
    @usableFromInline static let selectNode: JSString = "selectNode"
    @usableFromInline static let selectNodeContents: JSString = "selectNodeContents"
    @usableFromInline static let selected: JSString = "selected"
    @usableFromInline static let selectedIndex: JSString = "selectedIndex"
    @usableFromInline static let selectedOptions: JSString = "selectedOptions"
    @usableFromInline static let selectedTrack: JSString = "selectedTrack"
    @usableFromInline static let selectionDirection: JSString = "selectionDirection"
    @usableFromInline static let selectionEnd: JSString = "selectionEnd"
    @usableFromInline static let selectionStart: JSString = "selectionStart"
    @usableFromInline static let send: JSString = "send"
    @usableFromInline static let serviceWorker: JSString = "serviceWorker"
    @usableFromInline static let sessionStorage: JSString = "sessionStorage"
    @usableFromInline static let set: JSString = "set"
    @usableFromInline static let setAttribute: JSString = "setAttribute"
    @usableFromInline static let setAttributeNS: JSString = "setAttributeNS"
    @usableFromInline static let setAttributeNode: JSString = "setAttributeNode"
    @usableFromInline static let setAttributeNodeNS: JSString = "setAttributeNodeNS"
    @usableFromInline static let setCustomValidity: JSString = "setCustomValidity"
    @usableFromInline static let setData: JSString = "setData"
    @usableFromInline static let setDragImage: JSString = "setDragImage"
    @usableFromInline static let setEnd: JSString = "setEnd"
    @usableFromInline static let setEndAfter: JSString = "setEndAfter"
    @usableFromInline static let setEndBefore: JSString = "setEndBefore"
    @usableFromInline static let setFormValue: JSString = "setFormValue"
    @usableFromInline static let setHeaderValue: JSString = "setHeaderValue"
    @usableFromInline static let setInterval: JSString = "setInterval"
    @usableFromInline static let setLineDash: JSString = "setLineDash"
    @usableFromInline static let setLiveSeekableRange: JSString = "setLiveSeekableRange"
    @usableFromInline static let setMatrixValue: JSString = "setMatrixValue"
    @usableFromInline static let setNamedItem: JSString = "setNamedItem"
    @usableFromInline static let setNamedItemNS: JSString = "setNamedItemNS"
    @usableFromInline static let setParameter: JSString = "setParameter"
    @usableFromInline static let setRangeText: JSString = "setRangeText"
    @usableFromInline static let setRequestHeader: JSString = "setRequestHeader"
    @usableFromInline static let setSelectionRange: JSString = "setSelectionRange"
    @usableFromInline static let setStart: JSString = "setStart"
    @usableFromInline static let setStartAfter: JSString = "setStartAfter"
    @usableFromInline static let setStartBefore: JSString = "setStartBefore"
    @usableFromInline static let setTimeout: JSString = "setTimeout"
    @usableFromInline static let setTransform: JSString = "setTransform"
    @usableFromInline static let setValidity: JSString = "setValidity"
    @usableFromInline static let shadowBlur: JSString = "shadowBlur"
    @usableFromInline static let shadowColor: JSString = "shadowColor"
    @usableFromInline static let shadowOffsetX: JSString = "shadowOffsetX"
    @usableFromInline static let shadowOffsetY: JSString = "shadowOffsetY"
    @usableFromInline static let shadowRoot: JSString = "shadowRoot"
    @usableFromInline static let shape: JSString = "shape"
    @usableFromInline static let shiftKey: JSString = "shiftKey"
    @usableFromInline static let show: JSString = "show"
    @usableFromInline static let showModal: JSString = "showModal"
    @usableFromInline static let showPicker: JSString = "showPicker"
    @usableFromInline static let showPopover: JSString = "showPopover"
    @usableFromInline static let signal: JSString = "signal"
    @usableFromInline static let singleNodeValue: JSString = "singleNodeValue"
    @usableFromInline static let size: JSString = "size"
    @usableFromInline static let sizes: JSString = "sizes"
    @usableFromInline static let skewX: JSString = "skewX"
    @usableFromInline static let skewXSelf: JSString = "skewXSelf"
    @usableFromInline static let skewY: JSString = "skewY"
    @usableFromInline static let skewYSelf: JSString = "skewYSelf"
    @usableFromInline static let slice: JSString = "slice"
    @usableFromInline static let slot: JSString = "slot"
    @usableFromInline static let slotAssignment: JSString = "slotAssignment"
    @usableFromInline static let snapshotItem: JSString = "snapshotItem"
    @usableFromInline static let snapshotLength: JSString = "snapshotLength"
    @usableFromInline static let source: JSString = "source"
    @usableFromInline static let sourceBuffer: JSString = "sourceBuffer"
    @usableFromInline static let sourceBuffers: JSString = "sourceBuffers"
    @usableFromInline static let span: JSString = "span"
    @usableFromInline static let specified: JSString = "specified"
    @usableFromInline static let spellcheck: JSString = "spellcheck"
    @usableFromInline static let splitText: JSString = "splitText"
    @usableFromInline static let src: JSString = "src"
    @usableFromInline static let srcElement: JSString = "srcElement"
    @usableFromInline static let srcObject: JSString = "srcObject"
    @usableFromInline static let srcdoc: JSString = "srcdoc"
    @usableFromInline static let srclang: JSString = "srclang"
    @usableFromInline static let srcset: JSString = "srcset"
    @usableFromInline static let standby: JSString = "standby"
    @usableFromInline static let start: JSString = "start"
    @usableFromInline static let startContainer: JSString = "startContainer"
    @usableFromInline static let startMessages: JSString = "startMessages"
    @usableFromInline static let startOffset: JSString = "startOffset"
    @usableFromInline static let startTime: JSString = "startTime"
    @usableFromInline static let state: JSString = "state"
    @usableFromInline static let status: JSString = "status"
    @usableFromInline static let statusText: JSString = "statusText"
    @usableFromInline static let statusbar: JSString = "statusbar"
    @usableFromInline static let step: JSString = "step"
    @usableFromInline static let stepDown: JSString = "stepDown"
    @usableFromInline static let stepMismatch: JSString = "stepMismatch"
    @usableFromInline static let stepUp: JSString = "stepUp"
    @usableFromInline static let stop: JSString = "stop"
    @usableFromInline static let stopImmediatePropagation: JSString = "stopImmediatePropagation"
    @usableFromInline static let stopPropagation: JSString = "stopPropagation"
    @usableFromInline static let storageArea: JSString = "storageArea"
    @usableFromInline static let stream: JSString = "stream"
    @usableFromInline static let stride: JSString = "stride"
    @usableFromInline static let stringValue: JSString = "stringValue"
    @usableFromInline static let stroke: JSString = "stroke"
    @usableFromInline static let strokeRect: JSString = "strokeRect"
    @usableFromInline static let strokeStyle: JSString = "strokeStyle"
    @usableFromInline static let strokeText: JSString = "strokeText"
    @usableFromInline static let structuredClone: JSString = "structuredClone"
    @usableFromInline static let submit: JSString = "submit"
    @usableFromInline static let submitter: JSString = "submitter"
    @usableFromInline static let substringData: JSString = "substringData"
    @usableFromInline static let subtree: JSString = "subtree"
    @usableFromInline static let suffixes: JSString = "suffixes"
    @usableFromInline static let summary: JSString = "summary"
    @usableFromInline static let supported: JSString = "supported"
    @usableFromInline static let supportedEntryTypes: JSString = "supportedEntryTypes"
    @usableFromInline static let supports: JSString = "supports"
    @usableFromInline static let surroundContents: JSString = "surroundContents"
    @usableFromInline static let svc: JSString = "svc"
    @usableFromInline static let systemId: JSString = "systemId"
    @usableFromInline static let tBodies: JSString = "tBodies"
    @usableFromInline static let tFoot: JSString = "tFoot"
    @usableFromInline static let tHead: JSString = "tHead"
    @usableFromInline static let tabIndex: JSString = "tabIndex"
    @usableFromInline static let tagName: JSString = "tagName"
    @usableFromInline static let taintEnabled: JSString = "taintEnabled"
    @usableFromInline static let takeRecords: JSString = "takeRecords"
    @usableFromInline static let target: JSString = "target"
    @usableFromInline static let targetOrigin: JSString = "targetOrigin"
    @usableFromInline static let targetTouches: JSString = "targetTouches"
    @usableFromInline static let tee: JSString = "tee"
    @usableFromInline static let temporalLayerId: JSString = "temporalLayerId"
    @usableFromInline static let terminate: JSString = "terminate"
    @usableFromInline static let text: JSString = "text"
    @usableFromInline static let textAlign: JSString = "textAlign"
    @usableFromInline static let textBaseline: JSString = "textBaseline"
    @usableFromInline static let textContent: JSString = "textContent"
    @usableFromInline static let textLength: JSString = "textLength"
    @usableFromInline static let textRendering: JSString = "textRendering"
    @usableFromInline static let textTracks: JSString = "textTracks"
    @usableFromInline static let throwIfAborted: JSString = "throwIfAborted"
    @usableFromInline static let timeOrigin: JSString = "timeOrigin"
    @usableFromInline static let timeStamp: JSString = "timeStamp"
    @usableFromInline static let timecode: JSString = "timecode"
    @usableFromInline static let timeout: JSString = "timeout"
    @usableFromInline static let timestamp: JSString = "timestamp"
    @usableFromInline static let timestampOffset: JSString = "timestampOffset"
    @usableFromInline static let title: JSString = "title"
    @usableFromInline static let toBlob: JSString = "toBlob"
    @usableFromInline static let toBox: JSString = "toBox"
    @usableFromInline static let toDataURL: JSString = "toDataURL"
    @usableFromInline static let toFloat32Array: JSString = "toFloat32Array"
    @usableFromInline static let toFloat64Array: JSString = "toFloat64Array"
    @usableFromInline static let toJSON: JSString = "toJSON"
    @usableFromInline static let toString: JSString = "toString"
    @usableFromInline static let toggle: JSString = "toggle"
    @usableFromInline static let toggleAttribute: JSString = "toggleAttribute"
    @usableFromInline static let togglePopover: JSString = "togglePopover"
    @usableFromInline static let tooLong: JSString = "tooLong"
    @usableFromInline static let tooShort: JSString = "tooShort"
    @usableFromInline static let toolbar: JSString = "toolbar"
    @usableFromInline static let top: JSString = "top"
    @usableFromInline static let total: JSString = "total"
    @usableFromInline static let touchType: JSString = "touchType"
    @usableFromInline static let touches: JSString = "touches"
    @usableFromInline static let track: JSString = "track"
    @usableFromInline static let tracks: JSString = "tracks"
    @usableFromInline static let transfer: JSString = "transfer"
    @usableFromInline static let transferControlToOffscreen: JSString = "transferControlToOffscreen"
    @usableFromInline static let transferFromImageBitmap: JSString = "transferFromImageBitmap"
    @usableFromInline static let transferToImageBitmap: JSString = "transferToImageBitmap"
    @usableFromInline static let transform: JSString = "transform"
    @usableFromInline static let transformPoint: JSString = "transformPoint"
    @usableFromInline static let transformToDocument: JSString = "transformToDocument"
    @usableFromInline static let transformToFragment: JSString = "transformToFragment"
    @usableFromInline static let transition: JSString = "transition"
    @usableFromInline static let translate: JSString = "translate"
    @usableFromInline static let translateSelf: JSString = "translateSelf"
    @usableFromInline static let traverseTo: JSString = "traverseTo"
    @usableFromInline static let trueSpeed: JSString = "trueSpeed"
    @usableFromInline static let type: JSString = "type"
    @usableFromInline static let typeMismatch: JSString = "typeMismatch"
    @usableFromInline static let types: JSString = "types"
    @usableFromInline static let unregister: JSString = "unregister"
    @usableFromInline static let unregisterProtocolHandler: JSString = "unregisterProtocolHandler"
    @usableFromInline static let update: JSString = "update"
    @usableFromInline static let updateCurrentEntry: JSString = "updateCurrentEntry"
    @usableFromInline static let updateViaCache: JSString = "updateViaCache"
    @usableFromInline static let updating: JSString = "updating"
    @usableFromInline static let upgrade: JSString = "upgrade"
    @usableFromInline static let upload: JSString = "upload"
    @usableFromInline static let url: JSString = "url"
    @usableFromInline static let useMap: JSString = "useMap"
    @usableFromInline static let userActivation: JSString = "userActivation"
    @usableFromInline static let userAgent: JSString = "userAgent"
    @usableFromInline static let userInitiated: JSString = "userInitiated"
    @usableFromInline static let username: JSString = "username"
    @usableFromInline static let vAlign: JSString = "vAlign"
    @usableFromInline static let vLink: JSString = "vLink"
    @usableFromInline static let valid: JSString = "valid"
    @usableFromInline static let validationMessage: JSString = "validationMessage"
    @usableFromInline static let validity: JSString = "validity"
    @usableFromInline static let value: JSString = "value"
    @usableFromInline static let valueAsDate: JSString = "valueAsDate"
    @usableFromInline static let valueAsNumber: JSString = "valueAsNumber"
    @usableFromInline static let valueMissing: JSString = "valueMissing"
    @usableFromInline static let valueType: JSString = "valueType"
    @usableFromInline static let vendor: JSString = "vendor"
    @usableFromInline static let vendorSub: JSString = "vendorSub"
    @usableFromInline static let version: JSString = "version"
    @usableFromInline static let video: JSString = "video"
    @usableFromInline static let videoBitsPerSecond: JSString = "videoBitsPerSecond"
    @usableFromInline static let videoHeight: JSString = "videoHeight"
    @usableFromInline static let videoKeyFrameIntervalCount: JSString = "videoKeyFrameIntervalCount"
    @usableFromInline static let videoKeyFrameIntervalDuration: JSString = "videoKeyFrameIntervalDuration"
    @usableFromInline static let videoTracks: JSString = "videoTracks"
    @usableFromInline static let videoWidth: JSString = "videoWidth"
    @usableFromInline static let view: JSString = "view"
    @usableFromInline static let visibilityState: JSString = "visibilityState"
    @usableFromInline static let visible: JSString = "visible"
    @usableFromInline static let visibleRect: JSString = "visibleRect"
    @usableFromInline static let visualViewport: JSString = "visualViewport"
    @usableFromInline static let vlinkColor: JSString = "vlinkColor"
    @usableFromInline static let volume: JSString = "volume"
    @usableFromInline static let vspace: JSString = "vspace"
    @usableFromInline static let w: JSString = "w"
    @usableFromInline static let waiting: JSString = "waiting"
    @usableFromInline static let webkitMatchesSelector: JSString = "webkitMatchesSelector"
    @usableFromInline static let whatToShow: JSString = "whatToShow"
    @usableFromInline static let whenDefined: JSString = "whenDefined"
    @usableFromInline static let which: JSString = "which"
    @usableFromInline static let wholeText: JSString = "wholeText"
    @usableFromInline static let width: JSString = "width"
    @usableFromInline static let willReadFrequently: JSString = "willReadFrequently"
    @usableFromInline static let willValidate: JSString = "willValidate"
    @usableFromInline static let window: JSString = "window"
    @usableFromInline static let withCredentials: JSString = "withCredentials"
    @usableFromInline static let wordSpacing: JSString = "wordSpacing"
    @usableFromInline static let wrap: JSString = "wrap"
    @usableFromInline static let writable: JSString = "writable"
    @usableFromInline static let writableType: JSString = "writableType"
    @usableFromInline static let write: JSString = "write"
    @usableFromInline static let writeln: JSString = "writeln"
    @usableFromInline static let x: JSString = "x"
    @usableFromInline static let y: JSString = "y"
    @usableFromInline static let z: JSString = "z"
}

public protocol Any_AddEventListenerOptions_or_Bool: ConvertibleToJSValue {}
extension AddEventListenerOptions: Any_AddEventListenerOptions_or_Bool {}
extension Bool: Any_AddEventListenerOptions_or_Bool {}

public enum AddEventListenerOptions_or_Bool: JSValueCompatible, Any_AddEventListenerOptions_or_Bool {
    case addEventListenerOptions(AddEventListenerOptions)
    case bool(Bool)

    init(_ addEventListenerOptions: AddEventListenerOptions) {
        let val: AddEventListenerOptions_or_Bool = .addEventListenerOptions(addEventListenerOptions)
        self = val
    }

    init(_ bool: Bool) {
        let val: AddEventListenerOptions_or_Bool = .bool(bool)
        self = val
    }

    public var addEventListenerOptions: AddEventListenerOptions? {
        switch self {
        case let .addEventListenerOptions(addEventListenerOptions): return addEventListenerOptions
        default: return nil
        }
    }

    public var bool: Bool? {
        switch self {
        case let .bool(bool): return bool
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let addEventListenerOptions: AddEventListenerOptions = value.fromJSValue() {
            return .addEventListenerOptions(addEventListenerOptions)
        }
        if let bool: Bool = value.fromJSValue() {
            return .bool(bool)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .addEventListenerOptions(addEventListenerOptions):
            return addEventListenerOptions.jsValue
        case let .bool(bool):
            return bool.jsValue
        }
    }
}

public protocol Any_ArrayBuffer_or_String: ConvertibleToJSValue {}
extension ArrayBuffer: Any_ArrayBuffer_or_String {}
extension String: Any_ArrayBuffer_or_String {}

public enum ArrayBuffer_or_String: JSValueCompatible, Any_ArrayBuffer_or_String {
    case arrayBuffer(ArrayBuffer)
    case string(String)

    init(_ arrayBuffer: ArrayBuffer) {
        let val: ArrayBuffer_or_String = .arrayBuffer(arrayBuffer)
        self = val
    }

    init(_ string: String) {
        let val: ArrayBuffer_or_String = .string(string)
        self = val
    }

    public var arrayBuffer: ArrayBuffer? {
        switch self {
        case let .arrayBuffer(arrayBuffer): return arrayBuffer
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let arrayBuffer: ArrayBuffer = value.fromJSValue() {
            return .arrayBuffer(arrayBuffer)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .arrayBuffer(arrayBuffer):
            return arrayBuffer.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_AudioTrack_or_TextTrack_or_VideoTrack: ConvertibleToJSValue {}
extension AudioTrack: Any_AudioTrack_or_TextTrack_or_VideoTrack {}
extension TextTrack: Any_AudioTrack_or_TextTrack_or_VideoTrack {}
extension VideoTrack: Any_AudioTrack_or_TextTrack_or_VideoTrack {}

public enum AudioTrack_or_TextTrack_or_VideoTrack: JSValueCompatible, Any_AudioTrack_or_TextTrack_or_VideoTrack {
    case audioTrack(AudioTrack)
    case textTrack(TextTrack)
    case videoTrack(VideoTrack)

    init(_ audioTrack: AudioTrack) {
        let val: AudioTrack_or_TextTrack_or_VideoTrack = .audioTrack(audioTrack)
        self = val
    }

    init(_ textTrack: TextTrack) {
        let val: AudioTrack_or_TextTrack_or_VideoTrack = .textTrack(textTrack)
        self = val
    }

    init(_ videoTrack: VideoTrack) {
        let val: AudioTrack_or_TextTrack_or_VideoTrack = .videoTrack(videoTrack)
        self = val
    }

    public var audioTrack: AudioTrack? {
        switch self {
        case let .audioTrack(audioTrack): return audioTrack
        default: return nil
        }
    }

    public var textTrack: TextTrack? {
        switch self {
        case let .textTrack(textTrack): return textTrack
        default: return nil
        }
    }

    public var videoTrack: VideoTrack? {
        switch self {
        case let .videoTrack(videoTrack): return videoTrack
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let audioTrack: AudioTrack = value.fromJSValue() {
            return .audioTrack(audioTrack)
        }
        if let textTrack: TextTrack = value.fromJSValue() {
            return .textTrack(textTrack)
        }
        if let videoTrack: VideoTrack = value.fromJSValue() {
            return .videoTrack(videoTrack)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .audioTrack(audioTrack):
            return audioTrack.jsValue
        case let .textTrack(textTrack):
            return textTrack.jsValue
        case let .videoTrack(videoTrack):
            return videoTrack.jsValue
        }
    }
}

public protocol Any_BlobPart: ConvertibleToJSValue {}
extension Blob: Any_BlobPart {}
extension BufferSource: Any_BlobPart {}
extension String: Any_BlobPart {}

public enum BlobPart: JSValueCompatible, Any_BlobPart {
    case blob(Blob)
    case bufferSource(BufferSource)
    case string(String)

    init(_ blob: Blob) {
        let val: BlobPart = .blob(blob)
        self = val
    }

    init(_ bufferSource: BufferSource) {
        let val: BlobPart = .bufferSource(bufferSource)
        self = val
    }

    init(_ arrayBuffer: ArrayBuffer) {
        let val: BufferSource = .arrayBuffer(arrayBuffer)
        self = .init(val)
    }

    init(_ arrayBufferView: ArrayBufferView) {
        let val: BufferSource = .arrayBufferView(arrayBufferView)
        self = .init(val)
    }

    init(_ string: String) {
        let val: BlobPart = .string(string)
        self = val
    }

    public var blob: Blob? {
        switch self {
        case let .blob(blob): return blob
        default: return nil
        }
    }

    public var bufferSource: BufferSource? {
        switch self {
        case let .bufferSource(bufferSource): return bufferSource
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let blob: Blob = value.fromJSValue() {
            return .blob(blob)
        }
        if let bufferSource: BufferSource = value.fromJSValue() {
            return .bufferSource(bufferSource)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .blob(blob):
            return blob.jsValue
        case let .bufferSource(bufferSource):
            return bufferSource.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_Bool_or_Double_or_String: ConvertibleToJSValue {}
extension Bool: Any_Bool_or_Double_or_String {}
extension Double: Any_Bool_or_Double_or_String {}
extension String: Any_Bool_or_Double_or_String {}

public enum Bool_or_Double_or_String: JSValueCompatible, Any_Bool_or_Double_or_String {
    case bool(Bool)
    case double(Double)
    case string(String)

    init(_ bool: Bool) {
        let val: Bool_or_Double_or_String = .bool(bool)
        self = val
    }

    init(_ double: Double) {
        let val: Bool_or_Double_or_String = .double(double)
        self = val
    }

    init(_ string: String) {
        let val: Bool_or_Double_or_String = .string(string)
        self = val
    }

    public var bool: Bool? {
        switch self {
        case let .bool(bool): return bool
        default: return nil
        }
    }

    public var double: Double? {
        switch self {
        case let .double(double): return double
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let bool: Bool = value.fromJSValue() {
            return .bool(bool)
        }
        if let double: Double = value.fromJSValue() {
            return .double(double)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .bool(bool):
            return bool.jsValue
        case let .double(double):
            return double.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_Bool_or_EventListenerOptions: ConvertibleToJSValue {}
extension Bool: Any_Bool_or_EventListenerOptions {}
extension EventListenerOptions: Any_Bool_or_EventListenerOptions {}

public enum Bool_or_EventListenerOptions: JSValueCompatible, Any_Bool_or_EventListenerOptions {
    case bool(Bool)
    case eventListenerOptions(EventListenerOptions)

    init(_ bool: Bool) {
        let val: Bool_or_EventListenerOptions = .bool(bool)
        self = val
    }

    init(_ eventListenerOptions: EventListenerOptions) {
        let val: Bool_or_EventListenerOptions = .eventListenerOptions(eventListenerOptions)
        self = val
    }

    public var bool: Bool? {
        switch self {
        case let .bool(bool): return bool
        default: return nil
        }
    }

    public var eventListenerOptions: EventListenerOptions? {
        switch self {
        case let .eventListenerOptions(eventListenerOptions): return eventListenerOptions
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let bool: Bool = value.fromJSValue() {
            return .bool(bool)
        }
        if let eventListenerOptions: EventListenerOptions = value.fromJSValue() {
            return .eventListenerOptions(eventListenerOptions)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .bool(bool):
            return bool.jsValue
        case let .eventListenerOptions(eventListenerOptions):
            return eventListenerOptions.jsValue
        }
    }
}

public protocol Any_Bool_or_MediaTrackConstraints: ConvertibleToJSValue {}
extension Bool: Any_Bool_or_MediaTrackConstraints {}
extension MediaTrackConstraints: Any_Bool_or_MediaTrackConstraints {}

public enum Bool_or_MediaTrackConstraints: JSValueCompatible, Any_Bool_or_MediaTrackConstraints {
    case bool(Bool)
    case mediaTrackConstraints(MediaTrackConstraints)

    init(_ bool: Bool) {
        let val: Bool_or_MediaTrackConstraints = .bool(bool)
        self = val
    }

    init(_ mediaTrackConstraints: MediaTrackConstraints) {
        let val: Bool_or_MediaTrackConstraints = .mediaTrackConstraints(mediaTrackConstraints)
        self = val
    }

    public var bool: Bool? {
        switch self {
        case let .bool(bool): return bool
        default: return nil
        }
    }

    public var mediaTrackConstraints: MediaTrackConstraints? {
        switch self {
        case let .mediaTrackConstraints(mediaTrackConstraints): return mediaTrackConstraints
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let bool: Bool = value.fromJSValue() {
            return .bool(bool)
        }
        if let mediaTrackConstraints: MediaTrackConstraints = value.fromJSValue() {
            return .mediaTrackConstraints(mediaTrackConstraints)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .bool(bool):
            return bool.jsValue
        case let .mediaTrackConstraints(mediaTrackConstraints):
            return mediaTrackConstraints.jsValue
        }
    }
}

public protocol Any_Bool_or_ScrollIntoViewOptions: ConvertibleToJSValue {}
extension Bool: Any_Bool_or_ScrollIntoViewOptions {}
extension ScrollIntoViewOptions: Any_Bool_or_ScrollIntoViewOptions {}

public enum Bool_or_ScrollIntoViewOptions: JSValueCompatible, Any_Bool_or_ScrollIntoViewOptions {
    case bool(Bool)
    case scrollIntoViewOptions(ScrollIntoViewOptions)

    init(_ bool: Bool) {
        let val: Bool_or_ScrollIntoViewOptions = .bool(bool)
        self = val
    }

    init(_ scrollIntoViewOptions: ScrollIntoViewOptions) {
        let val: Bool_or_ScrollIntoViewOptions = .scrollIntoViewOptions(scrollIntoViewOptions)
        self = val
    }

    public var bool: Bool? {
        switch self {
        case let .bool(bool): return bool
        default: return nil
        }
    }

    public var scrollIntoViewOptions: ScrollIntoViewOptions? {
        switch self {
        case let .scrollIntoViewOptions(scrollIntoViewOptions): return scrollIntoViewOptions
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let bool: Bool = value.fromJSValue() {
            return .bool(bool)
        }
        if let scrollIntoViewOptions: ScrollIntoViewOptions = value.fromJSValue() {
            return .scrollIntoViewOptions(scrollIntoViewOptions)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .bool(bool):
            return bool.jsValue
        case let .scrollIntoViewOptions(scrollIntoViewOptions):
            return scrollIntoViewOptions.jsValue
        }
    }
}

public protocol Any_CSSPseudoElement_or_Element: ConvertibleToJSValue {}
extension CSSPseudoElement: Any_CSSPseudoElement_or_Element {}
extension Element: Any_CSSPseudoElement_or_Element {}

public enum CSSPseudoElement_or_Element: JSValueCompatible, Any_CSSPseudoElement_or_Element {
    case cssPseudoElement(CSSPseudoElement)
    case element(Element)

    init(_ cssPseudoElement: CSSPseudoElement) {
        let val: CSSPseudoElement_or_Element = .cssPseudoElement(cssPseudoElement)
        self = val
    }

    init(_ element: Element) {
        let val: CSSPseudoElement_or_Element = .element(element)
        self = val
    }

    public var cssPseudoElement: CSSPseudoElement? {
        switch self {
        case let .cssPseudoElement(cssPseudoElement): return cssPseudoElement
        default: return nil
        }
    }

    public var element: Element? {
        switch self {
        case let .element(element): return element
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let cssPseudoElement: CSSPseudoElement = value.fromJSValue() {
            return .cssPseudoElement(cssPseudoElement)
        }
        if let element: Element = value.fromJSValue() {
            return .element(element)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .cssPseudoElement(cssPseudoElement):
            return cssPseudoElement.jsValue
        case let .element(element):
            return element.jsValue
        }
    }
}

public protocol Any_CanvasGradient_or_CanvasPattern_or_String: ConvertibleToJSValue {}
extension CanvasGradient: Any_CanvasGradient_or_CanvasPattern_or_String {}
extension CanvasPattern: Any_CanvasGradient_or_CanvasPattern_or_String {}
extension String: Any_CanvasGradient_or_CanvasPattern_or_String {}

public enum CanvasGradient_or_CanvasPattern_or_String: JSValueCompatible, Any_CanvasGradient_or_CanvasPattern_or_String {
    case canvasGradient(CanvasGradient)
    case canvasPattern(CanvasPattern)
    case string(String)

    init(_ canvasGradient: CanvasGradient) {
        let val: CanvasGradient_or_CanvasPattern_or_String = .canvasGradient(canvasGradient)
        self = val
    }

    init(_ canvasPattern: CanvasPattern) {
        let val: CanvasGradient_or_CanvasPattern_or_String = .canvasPattern(canvasPattern)
        self = val
    }

    init(_ string: String) {
        let val: CanvasGradient_or_CanvasPattern_or_String = .string(string)
        self = val
    }

    public var canvasGradient: CanvasGradient? {
        switch self {
        case let .canvasGradient(canvasGradient): return canvasGradient
        default: return nil
        }
    }

    public var canvasPattern: CanvasPattern? {
        switch self {
        case let .canvasPattern(canvasPattern): return canvasPattern
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let canvasGradient: CanvasGradient = value.fromJSValue() {
            return .canvasGradient(canvasGradient)
        }
        if let canvasPattern: CanvasPattern = value.fromJSValue() {
            return .canvasPattern(canvasPattern)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .canvasGradient(canvasGradient):
            return canvasGradient.jsValue
        case let .canvasPattern(canvasPattern):
            return canvasPattern.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_CanvasImageSource: ConvertibleToJSValue {}
extension HTMLCanvasElement: Any_CanvasImageSource {}
extension HTMLOrSVGImageElement: Any_CanvasImageSource {}
extension HTMLVideoElement: Any_CanvasImageSource {}
extension ImageBitmap: Any_CanvasImageSource {}
extension OffscreenCanvas: Any_CanvasImageSource {}
extension VideoFrame: Any_CanvasImageSource {}

public enum CanvasImageSource: JSValueCompatible, Any_CanvasImageSource {
    case htmlCanvasElement(HTMLCanvasElement)
    case htmlOrSVGImageElement(HTMLOrSVGImageElement)
    case htmlVideoElement(HTMLVideoElement)
    case imageBitmap(ImageBitmap)
    case offscreenCanvas(OffscreenCanvas)
    case videoFrame(VideoFrame)

    init(_ htmlCanvasElement: HTMLCanvasElement) {
        let val: CanvasImageSource = .htmlCanvasElement(htmlCanvasElement)
        self = val
    }

    init(_ htmlImageElement: HTMLImageElement) {
        let val: CanvasImageSource = .htmlOrSVGImageElement(htmlImageElement)
        self = val
    }

    init(_ htmlVideoElement: HTMLVideoElement) {
        let val: CanvasImageSource = .htmlVideoElement(htmlVideoElement)
        self = val
    }

    init(_ imageBitmap: ImageBitmap) {
        let val: CanvasImageSource = .imageBitmap(imageBitmap)
        self = val
    }

    init(_ offscreenCanvas: OffscreenCanvas) {
        let val: CanvasImageSource = .offscreenCanvas(offscreenCanvas)
        self = val
    }

    init(_ videoFrame: VideoFrame) {
        let val: CanvasImageSource = .videoFrame(videoFrame)
        self = val
    }

    public var htmlCanvasElement: HTMLCanvasElement? {
        switch self {
        case let .htmlCanvasElement(htmlCanvasElement): return htmlCanvasElement
        default: return nil
        }
    }

    public var htmlOrSVGImageElement: HTMLOrSVGImageElement? {
        switch self {
        case let .htmlOrSVGImageElement(htmlOrSVGImageElement): return htmlOrSVGImageElement
        default: return nil
        }
    }

    public var htmlVideoElement: HTMLVideoElement? {
        switch self {
        case let .htmlVideoElement(htmlVideoElement): return htmlVideoElement
        default: return nil
        }
    }

    public var imageBitmap: ImageBitmap? {
        switch self {
        case let .imageBitmap(imageBitmap): return imageBitmap
        default: return nil
        }
    }

    public var offscreenCanvas: OffscreenCanvas? {
        switch self {
        case let .offscreenCanvas(offscreenCanvas): return offscreenCanvas
        default: return nil
        }
    }

    public var videoFrame: VideoFrame? {
        switch self {
        case let .videoFrame(videoFrame): return videoFrame
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let htmlCanvasElement: HTMLCanvasElement = value.fromJSValue() {
            return .htmlCanvasElement(htmlCanvasElement)
        }
        if let htmlOrSVGImageElement: HTMLOrSVGImageElement = value.fromJSValue() {
            return .htmlOrSVGImageElement(htmlOrSVGImageElement)
        }
        if let htmlVideoElement: HTMLVideoElement = value.fromJSValue() {
            return .htmlVideoElement(htmlVideoElement)
        }
        if let imageBitmap: ImageBitmap = value.fromJSValue() {
            return .imageBitmap(imageBitmap)
        }
        if let offscreenCanvas: OffscreenCanvas = value.fromJSValue() {
            return .offscreenCanvas(offscreenCanvas)
        }
        if let videoFrame: VideoFrame = value.fromJSValue() {
            return .videoFrame(videoFrame)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .htmlCanvasElement(htmlCanvasElement):
            return htmlCanvasElement.jsValue
        case let .htmlOrSVGImageElement(htmlOrSVGImageElement):
            return htmlOrSVGImageElement.jsValue
        case let .htmlVideoElement(htmlVideoElement):
            return htmlVideoElement.jsValue
        case let .imageBitmap(imageBitmap):
            return imageBitmap.jsValue
        case let .offscreenCanvas(offscreenCanvas):
            return offscreenCanvas.jsValue
        case let .videoFrame(videoFrame):
            return videoFrame.jsValue
        }
    }
}

public protocol Any_ConstrainBoolean: ConvertibleToJSValue {}
extension Bool: Any_ConstrainBoolean {}
extension ConstrainBooleanParameters: Any_ConstrainBoolean {}

public enum ConstrainBoolean: JSValueCompatible, Any_ConstrainBoolean {
    case bool(Bool)
    case constrainBooleanParameters(ConstrainBooleanParameters)

    init(_ bool: Bool) {
        let val: ConstrainBoolean = .bool(bool)
        self = val
    }

    init(_ constrainBooleanParameters: ConstrainBooleanParameters) {
        let val: ConstrainBoolean = .constrainBooleanParameters(constrainBooleanParameters)
        self = val
    }

    public var bool: Bool? {
        switch self {
        case let .bool(bool): return bool
        default: return nil
        }
    }

    public var constrainBooleanParameters: ConstrainBooleanParameters? {
        switch self {
        case let .constrainBooleanParameters(constrainBooleanParameters): return constrainBooleanParameters
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let bool: Bool = value.fromJSValue() {
            return .bool(bool)
        }
        if let constrainBooleanParameters: ConstrainBooleanParameters = value.fromJSValue() {
            return .constrainBooleanParameters(constrainBooleanParameters)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .bool(bool):
            return bool.jsValue
        case let .constrainBooleanParameters(constrainBooleanParameters):
            return constrainBooleanParameters.jsValue
        }
    }
}

public protocol Any_ConstrainDOMString: ConvertibleToJSValue {}
extension ConstrainDOMStringParameters: Any_ConstrainDOMString {}
extension String: Any_ConstrainDOMString {}
extension Array: Any_ConstrainDOMString where Element == String {}

public enum ConstrainDOMString: JSValueCompatible, Any_ConstrainDOMString {
    case constrainDOMStringParameters(ConstrainDOMStringParameters)
    case string(String)
    case seq_of_String([String])

    init(_ constrainDOMStringParameters: ConstrainDOMStringParameters) {
        let val: ConstrainDOMString = .constrainDOMStringParameters(constrainDOMStringParameters)
        self = val
    }

    init(_ string: String) {
        let val: ConstrainDOMString = .string(string)
        self = val
    }

    init(_ seq_of_String: [String]) {
        let val: ConstrainDOMString = .seq_of_String(seq_of_String)
        self = val
    }

    public var constrainDOMStringParameters: ConstrainDOMStringParameters? {
        switch self {
        case let .constrainDOMStringParameters(constrainDOMStringParameters): return constrainDOMStringParameters
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public var seq_of_String: [String]? {
        switch self {
        case let .seq_of_String(seq_of_String): return seq_of_String
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let constrainDOMStringParameters: ConstrainDOMStringParameters = value.fromJSValue() {
            return .constrainDOMStringParameters(constrainDOMStringParameters)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        if let seq_of_String: [String] = value.fromJSValue() {
            return .seq_of_String(seq_of_String)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .constrainDOMStringParameters(constrainDOMStringParameters):
            return constrainDOMStringParameters.jsValue
        case let .string(string):
            return string.jsValue
        case let .seq_of_String(seq_of_String):
            return seq_of_String.jsValue
        }
    }
}

public protocol Any_ConstrainDouble: ConvertibleToJSValue {}
extension ConstrainDoubleRange: Any_ConstrainDouble {}
extension Double: Any_ConstrainDouble {}

public enum ConstrainDouble: JSValueCompatible, Any_ConstrainDouble {
    case constrainDoubleRange(ConstrainDoubleRange)
    case double(Double)

    init(_ constrainDoubleRange: ConstrainDoubleRange) {
        let val: ConstrainDouble = .constrainDoubleRange(constrainDoubleRange)
        self = val
    }

    init(_ double: Double) {
        let val: ConstrainDouble = .double(double)
        self = val
    }

    public var constrainDoubleRange: ConstrainDoubleRange? {
        switch self {
        case let .constrainDoubleRange(constrainDoubleRange): return constrainDoubleRange
        default: return nil
        }
    }

    public var double: Double? {
        switch self {
        case let .double(double): return double
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let constrainDoubleRange: ConstrainDoubleRange = value.fromJSValue() {
            return .constrainDoubleRange(constrainDoubleRange)
        }
        if let double: Double = value.fromJSValue() {
            return .double(double)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .constrainDoubleRange(constrainDoubleRange):
            return constrainDoubleRange.jsValue
        case let .double(double):
            return double.jsValue
        }
    }
}

public protocol Any_ConstrainULong: ConvertibleToJSValue {}
extension ConstrainULongRange: Any_ConstrainULong {}
extension UInt32: Any_ConstrainULong {}

public enum ConstrainULong: JSValueCompatible, Any_ConstrainULong {
    case constrainULongRange(ConstrainULongRange)
    case uInt32(UInt32)

    init(_ constrainULongRange: ConstrainULongRange) {
        let val: ConstrainULong = .constrainULongRange(constrainULongRange)
        self = val
    }

    init(_ uInt32: UInt32) {
        let val: ConstrainULong = .uInt32(uInt32)
        self = val
    }

    public var constrainULongRange: ConstrainULongRange? {
        switch self {
        case let .constrainULongRange(constrainULongRange): return constrainULongRange
        default: return nil
        }
    }

    public var uInt32: UInt32? {
        switch self {
        case let .uInt32(uInt32): return uInt32
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let constrainULongRange: ConstrainULongRange = value.fromJSValue() {
            return .constrainULongRange(constrainULongRange)
        }
        if let uInt32: UInt32 = value.fromJSValue() {
            return .uInt32(uInt32)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .constrainULongRange(constrainULongRange):
            return constrainULongRange.jsValue
        case let .uInt32(uInt32):
            return uInt32.jsValue
        }
    }
}

public protocol Any_DOMPointInit_or_Double: ConvertibleToJSValue {}
extension DOMPointInit: Any_DOMPointInit_or_Double {}
extension Double: Any_DOMPointInit_or_Double {}

public enum DOMPointInit_or_Double: JSValueCompatible, Any_DOMPointInit_or_Double {
    case domPointInit(DOMPointInit)
    case double(Double)

    init(_ domPointInit: DOMPointInit) {
        let val: DOMPointInit_or_Double = .domPointInit(domPointInit)
        self = val
    }

    init(_ double: Double) {
        let val: DOMPointInit_or_Double = .double(double)
        self = val
    }

    public var domPointInit: DOMPointInit? {
        switch self {
        case let .domPointInit(domPointInit): return domPointInit
        default: return nil
        }
    }

    public var double: Double? {
        switch self {
        case let .double(double): return double
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let domPointInit: DOMPointInit = value.fromJSValue() {
            return .domPointInit(domPointInit)
        }
        if let double: Double = value.fromJSValue() {
            return .double(double)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .domPointInit(domPointInit):
            return domPointInit.jsValue
        case let .double(double):
            return double.jsValue
        }
    }
}

public protocol Any_DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double: ConvertibleToJSValue {}
extension DOMPointInit: Any_DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double {}
extension Double: Any_DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double {}
extension Array: Any_DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double where Element == DOMPointInit_or_Double {}

public enum DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double: JSValueCompatible, Any_DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double {
    case domPointInit(DOMPointInit)
    case double(Double)
    case seq_of_DOMPointInit_or_Double([DOMPointInit_or_Double])

    init(_ domPointInit: DOMPointInit) {
        let val: DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double = .domPointInit(domPointInit)
        self = val
    }

    init(_ double: Double) {
        let val: DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double = .double(double)
        self = val
    }

    init(_ seq_of_DOMPointInit_or_Double: [DOMPointInit_or_Double]) {
        let val: DOMPointInit_or_Double_or_seq_of_DOMPointInit_or_Double = .seq_of_DOMPointInit_or_Double(seq_of_DOMPointInit_or_Double)
        self = val
    }

    public var domPointInit: DOMPointInit? {
        switch self {
        case let .domPointInit(domPointInit): return domPointInit
        default: return nil
        }
    }

    public var double: Double? {
        switch self {
        case let .double(double): return double
        default: return nil
        }
    }

    public var seq_of_DOMPointInit_or_Double: [DOMPointInit_or_Double]? {
        switch self {
        case let .seq_of_DOMPointInit_or_Double(seq_of_DOMPointInit_or_Double): return seq_of_DOMPointInit_or_Double
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let domPointInit: DOMPointInit = value.fromJSValue() {
            return .domPointInit(domPointInit)
        }
        if let double: Double = value.fromJSValue() {
            return .double(double)
        }
        if let seq_of_DOMPointInit_or_Double: [DOMPointInit_or_Double] = value.fromJSValue() {
            return .seq_of_DOMPointInit_or_Double(seq_of_DOMPointInit_or_Double)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .domPointInit(domPointInit):
            return domPointInit.jsValue
        case let .double(double):
            return double.jsValue
        case let .seq_of_DOMPointInit_or_Double(seq_of_DOMPointInit_or_Double):
            return seq_of_DOMPointInit_or_Double.jsValue
        }
    }
}

public protocol Any_Document_or_XMLHttpRequestBodyInit: ConvertibleToJSValue {}
extension Document: Any_Document_or_XMLHttpRequestBodyInit {}
extension XMLHttpRequestBodyInit: Any_Document_or_XMLHttpRequestBodyInit {}

public enum Document_or_XMLHttpRequestBodyInit: JSValueCompatible, Any_Document_or_XMLHttpRequestBodyInit {
    case document(Document)
    case xmlHttpRequestBodyInit(XMLHttpRequestBodyInit)

    init(_ document: Document) {
        let val: Document_or_XMLHttpRequestBodyInit = .document(document)
        self = val
    }

    init(_ xmlHttpRequestBodyInit: XMLHttpRequestBodyInit) {
        let val: Document_or_XMLHttpRequestBodyInit = .xmlHttpRequestBodyInit(xmlHttpRequestBodyInit)
        self = val
    }

    init(_ blob: Blob) {
        let val: XMLHttpRequestBodyInit = .blob(blob)
        self = .init(val)
    }

    init(_ bufferSource: BufferSource) {
        let val: XMLHttpRequestBodyInit = .bufferSource(bufferSource)
        self = .init(val)
    }

    init(_ arrayBuffer: ArrayBuffer) {
        let val: BufferSource = .arrayBuffer(arrayBuffer)
        self = .init(val)
    }

    init(_ arrayBufferView: ArrayBufferView) {
        let val: BufferSource = .arrayBufferView(arrayBufferView)
        self = .init(val)
    }

    init(_ formData: FormData) {
        let val: XMLHttpRequestBodyInit = .formData(formData)
        self = .init(val)
    }

    init(_ string: String) {
        let val: XMLHttpRequestBodyInit = .string(string)
        self = .init(val)
    }

    init(_ urlSearchParams: URLSearchParams) {
        let val: XMLHttpRequestBodyInit = .urlSearchParams(urlSearchParams)
        self = .init(val)
    }

    public var document: Document? {
        switch self {
        case let .document(document): return document
        default: return nil
        }
    }

    public var xmlHttpRequestBodyInit: XMLHttpRequestBodyInit? {
        switch self {
        case let .xmlHttpRequestBodyInit(xmlHttpRequestBodyInit): return xmlHttpRequestBodyInit
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let document: Document = value.fromJSValue() {
            return .document(document)
        }
        if let xmlHttpRequestBodyInit: XMLHttpRequestBodyInit = value.fromJSValue() {
            return .xmlHttpRequestBodyInit(xmlHttpRequestBodyInit)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .document(document):
            return document.jsValue
        case let .xmlHttpRequestBodyInit(xmlHttpRequestBodyInit):
            return xmlHttpRequestBodyInit.jsValue
        }
    }
}

public protocol Any_ElementCreationOptions_or_String: ConvertibleToJSValue {}
extension ElementCreationOptions: Any_ElementCreationOptions_or_String {}
extension String: Any_ElementCreationOptions_or_String {}

public enum ElementCreationOptions_or_String: JSValueCompatible, Any_ElementCreationOptions_or_String {
    case elementCreationOptions(ElementCreationOptions)
    case string(String)

    init(_ elementCreationOptions: ElementCreationOptions) {
        let val: ElementCreationOptions_or_String = .elementCreationOptions(elementCreationOptions)
        self = val
    }

    init(_ string: String) {
        let val: ElementCreationOptions_or_String = .string(string)
        self = val
    }

    public var elementCreationOptions: ElementCreationOptions? {
        switch self {
        case let .elementCreationOptions(elementCreationOptions): return elementCreationOptions
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let elementCreationOptions: ElementCreationOptions = value.fromJSValue() {
            return .elementCreationOptions(elementCreationOptions)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .elementCreationOptions(elementCreationOptions):
            return elementCreationOptions.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_Element_or_HTMLCollection: ConvertibleToJSValue {}
extension Element: Any_Element_or_HTMLCollection {}
extension HTMLCollection: Any_Element_or_HTMLCollection {}

public enum Element_or_HTMLCollection: JSValueCompatible, Any_Element_or_HTMLCollection {
    case element(Element)
    case htmlCollection(HTMLCollection)

    init(_ element: Element) {
        let val: Element_or_HTMLCollection = .element(element)
        self = val
    }

    init(_ htmlCollection: HTMLCollection) {
        let val: Element_or_HTMLCollection = .htmlCollection(htmlCollection)
        self = val
    }

    public var element: Element? {
        switch self {
        case let .element(element): return element
        default: return nil
        }
    }

    public var htmlCollection: HTMLCollection? {
        switch self {
        case let .htmlCollection(htmlCollection): return htmlCollection
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let element: Element = value.fromJSValue() {
            return .element(element)
        }
        if let htmlCollection: HTMLCollection = value.fromJSValue() {
            return .htmlCollection(htmlCollection)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .element(element):
            return element.jsValue
        case let .htmlCollection(htmlCollection):
            return htmlCollection.jsValue
        }
    }
}

public protocol Any_Element_or_RadioNodeList: ConvertibleToJSValue {}
extension Element: Any_Element_or_RadioNodeList {}
extension RadioNodeList: Any_Element_or_RadioNodeList {}

public enum Element_or_RadioNodeList: JSValueCompatible, Any_Element_or_RadioNodeList {
    case element(Element)
    case radioNodeList(RadioNodeList)

    init(_ element: Element) {
        let val: Element_or_RadioNodeList = .element(element)
        self = val
    }

    init(_ radioNodeList: RadioNodeList) {
        let val: Element_or_RadioNodeList = .radioNodeList(radioNodeList)
        self = val
    }

    public var element: Element? {
        switch self {
        case let .element(element): return element
        default: return nil
        }
    }

    public var radioNodeList: RadioNodeList? {
        switch self {
        case let .radioNodeList(radioNodeList): return radioNodeList
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let element: Element = value.fromJSValue() {
            return .element(element)
        }
        if let radioNodeList: RadioNodeList = value.fromJSValue() {
            return .radioNodeList(radioNodeList)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .element(element):
            return element.jsValue
        case let .radioNodeList(radioNodeList):
            return radioNodeList.jsValue
        }
    }
}

public protocol Any_Element_or_Text: ConvertibleToJSValue {}
extension Element: Any_Element_or_Text {}
extension Text: Any_Element_or_Text {}

public enum Element_or_Text: JSValueCompatible, Any_Element_or_Text {
    case element(Element)
    case text(Text)

    init(_ element: Element) {
        let val: Element_or_Text = .element(element)
        self = val
    }

    init(_ text: Text) {
        let val: Element_or_Text = .text(text)
        self = val
    }

    public var element: Element? {
        switch self {
        case let .element(element): return element
        default: return nil
        }
    }

    public var text: Text? {
        switch self {
        case let .text(text): return text
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let element: Element = value.fromJSValue() {
            return .element(element)
        }
        if let text: Text = value.fromJSValue() {
            return .text(text)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .element(element):
            return element.jsValue
        case let .text(text):
            return text.jsValue
        }
    }
}

public protocol Any_Event_or_String: ConvertibleToJSValue {}
extension Event: Any_Event_or_String {}
extension String: Any_Event_or_String {}

public enum Event_or_String: JSValueCompatible, Any_Event_or_String {
    case event(Event)
    case string(String)

    init(_ event: Event) {
        let val: Event_or_String = .event(event)
        self = val
    }

    init(_ string: String) {
        let val: Event_or_String = .string(string)
        self = val
    }

    public var event: Event? {
        switch self {
        case let .event(event): return event
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let event: Event = value.fromJSValue() {
            return .event(event)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .event(event):
            return event.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_File_or_FormData_or_String: ConvertibleToJSValue {}
extension File: Any_File_or_FormData_or_String {}
extension FormData: Any_File_or_FormData_or_String {}
extension String: Any_File_or_FormData_or_String {}

public enum File_or_FormData_or_String: JSValueCompatible, Any_File_or_FormData_or_String {
    case file(File)
    case formData(FormData)
    case string(String)

    init(_ file: File) {
        let val: File_or_FormData_or_String = .file(file)
        self = val
    }

    init(_ formData: FormData) {
        let val: File_or_FormData_or_String = .formData(formData)
        self = val
    }

    init(_ string: String) {
        let val: File_or_FormData_or_String = .string(string)
        self = val
    }

    public var file: File? {
        switch self {
        case let .file(file): return file
        default: return nil
        }
    }

    public var formData: FormData? {
        switch self {
        case let .formData(formData): return formData
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let file: File = value.fromJSValue() {
            return .file(file)
        }
        if let formData: FormData = value.fromJSValue() {
            return .formData(formData)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .file(file):
            return file.jsValue
        case let .formData(formData):
            return formData.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_FormDataEntryValue: ConvertibleToJSValue {}
extension File: Any_FormDataEntryValue {}
extension String: Any_FormDataEntryValue {}

public enum FormDataEntryValue: JSValueCompatible, Any_FormDataEntryValue {
    case file(File)
    case string(String)

    init(_ file: File) {
        let val: FormDataEntryValue = .file(file)
        self = val
    }

    init(_ string: String) {
        let val: FormDataEntryValue = .string(string)
        self = val
    }

    public var file: File? {
        switch self {
        case let .file(file): return file
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let file: File = value.fromJSValue() {
            return .file(file)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .file(file):
            return file.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_GeometryNode: ConvertibleToJSValue {}
extension CSSPseudoElement: Any_GeometryNode {}
extension Document: Any_GeometryNode {}
extension Element: Any_GeometryNode {}
extension Text: Any_GeometryNode {}

public enum GeometryNode: JSValueCompatible, Any_GeometryNode {
    case cssPseudoElement(CSSPseudoElement)
    case document(Document)
    case element(Element)
    case text(Text)

    init(_ cssPseudoElement: CSSPseudoElement) {
        let val: GeometryNode = .cssPseudoElement(cssPseudoElement)
        self = val
    }

    init(_ document: Document) {
        let val: GeometryNode = .document(document)
        self = val
    }

    init(_ element: Element) {
        let val: GeometryNode = .element(element)
        self = val
    }

    init(_ text: Text) {
        let val: GeometryNode = .text(text)
        self = val
    }

    public var cssPseudoElement: CSSPseudoElement? {
        switch self {
        case let .cssPseudoElement(cssPseudoElement): return cssPseudoElement
        default: return nil
        }
    }

    public var document: Document? {
        switch self {
        case let .document(document): return document
        default: return nil
        }
    }

    public var element: Element? {
        switch self {
        case let .element(element): return element
        default: return nil
        }
    }

    public var text: Text? {
        switch self {
        case let .text(text): return text
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let cssPseudoElement: CSSPseudoElement = value.fromJSValue() {
            return .cssPseudoElement(cssPseudoElement)
        }
        if let document: Document = value.fromJSValue() {
            return .document(document)
        }
        if let element: Element = value.fromJSValue() {
            return .element(element)
        }
        if let text: Text = value.fromJSValue() {
            return .text(text)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .cssPseudoElement(cssPseudoElement):
            return cssPseudoElement.jsValue
        case let .document(document):
            return document.jsValue
        case let .element(element):
            return element.jsValue
        case let .text(text):
            return text.jsValue
        }
    }
}

public protocol Any_HTMLCanvasElement_or_OffscreenCanvas: ConvertibleToJSValue {}
extension HTMLCanvasElement: Any_HTMLCanvasElement_or_OffscreenCanvas {}
extension OffscreenCanvas: Any_HTMLCanvasElement_or_OffscreenCanvas {}

public enum HTMLCanvasElement_or_OffscreenCanvas: JSValueCompatible, Any_HTMLCanvasElement_or_OffscreenCanvas {
    case htmlCanvasElement(HTMLCanvasElement)
    case offscreenCanvas(OffscreenCanvas)

    init(_ htmlCanvasElement: HTMLCanvasElement) {
        let val: HTMLCanvasElement_or_OffscreenCanvas = .htmlCanvasElement(htmlCanvasElement)
        self = val
    }

    init(_ offscreenCanvas: OffscreenCanvas) {
        let val: HTMLCanvasElement_or_OffscreenCanvas = .offscreenCanvas(offscreenCanvas)
        self = val
    }

    public var htmlCanvasElement: HTMLCanvasElement? {
        switch self {
        case let .htmlCanvasElement(htmlCanvasElement): return htmlCanvasElement
        default: return nil
        }
    }

    public var offscreenCanvas: OffscreenCanvas? {
        switch self {
        case let .offscreenCanvas(offscreenCanvas): return offscreenCanvas
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let htmlCanvasElement: HTMLCanvasElement = value.fromJSValue() {
            return .htmlCanvasElement(htmlCanvasElement)
        }
        if let offscreenCanvas: OffscreenCanvas = value.fromJSValue() {
            return .offscreenCanvas(offscreenCanvas)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .htmlCanvasElement(htmlCanvasElement):
            return htmlCanvasElement.jsValue
        case let .offscreenCanvas(offscreenCanvas):
            return offscreenCanvas.jsValue
        }
    }
}

public protocol Any_HTMLElement_or_Int32: ConvertibleToJSValue {}
extension HTMLElement: Any_HTMLElement_or_Int32 {}
extension Int32: Any_HTMLElement_or_Int32 {}

public enum HTMLElement_or_Int32: JSValueCompatible, Any_HTMLElement_or_Int32 {
    case htmlElement(HTMLElement)
    case int32(Int32)

    init(_ htmlElement: HTMLElement) {
        let val: HTMLElement_or_Int32 = .htmlElement(htmlElement)
        self = val
    }

    init(_ int32: Int32) {
        let val: HTMLElement_or_Int32 = .int32(int32)
        self = val
    }

    public var htmlElement: HTMLElement? {
        switch self {
        case let .htmlElement(htmlElement): return htmlElement
        default: return nil
        }
    }

    public var int32: Int32? {
        switch self {
        case let .int32(int32): return int32
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let htmlElement: HTMLElement = value.fromJSValue() {
            return .htmlElement(htmlElement)
        }
        if let int32: Int32 = value.fromJSValue() {
            return .int32(int32)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .htmlElement(htmlElement):
            return htmlElement.jsValue
        case let .int32(int32):
            return int32.jsValue
        }
    }
}

public protocol Any_HTMLOptGroupElement_or_HTMLOptionElement: ConvertibleToJSValue {}
extension HTMLOptGroupElement: Any_HTMLOptGroupElement_or_HTMLOptionElement {}
extension HTMLOptionElement: Any_HTMLOptGroupElement_or_HTMLOptionElement {}

public enum HTMLOptGroupElement_or_HTMLOptionElement: JSValueCompatible, Any_HTMLOptGroupElement_or_HTMLOptionElement {
    case htmlOptGroupElement(HTMLOptGroupElement)
    case htmlOptionElement(HTMLOptionElement)

    init(_ htmlOptGroupElement: HTMLOptGroupElement) {
        let val: HTMLOptGroupElement_or_HTMLOptionElement = .htmlOptGroupElement(htmlOptGroupElement)
        self = val
    }

    init(_ htmlOptionElement: HTMLOptionElement) {
        let val: HTMLOptGroupElement_or_HTMLOptionElement = .htmlOptionElement(htmlOptionElement)
        self = val
    }

    public var htmlOptGroupElement: HTMLOptGroupElement? {
        switch self {
        case let .htmlOptGroupElement(htmlOptGroupElement): return htmlOptGroupElement
        default: return nil
        }
    }

    public var htmlOptionElement: HTMLOptionElement? {
        switch self {
        case let .htmlOptionElement(htmlOptionElement): return htmlOptionElement
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let htmlOptGroupElement: HTMLOptGroupElement = value.fromJSValue() {
            return .htmlOptGroupElement(htmlOptGroupElement)
        }
        if let htmlOptionElement: HTMLOptionElement = value.fromJSValue() {
            return .htmlOptionElement(htmlOptionElement)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .htmlOptGroupElement(htmlOptGroupElement):
            return htmlOptGroupElement.jsValue
        case let .htmlOptionElement(htmlOptionElement):
            return htmlOptionElement.jsValue
        }
    }
}

public protocol Any_HeadersInit: ConvertibleToJSValue {}
extension Dictionary: Any_HeadersInit where Key == String, Value == String {}
extension Array: Any_HeadersInit where Element == [String] {}

public enum HeadersInit: JSValueCompatible, Any_HeadersInit {
    case record_String_to_String([String: String])
    case seq_of_seq_of_String([[String]])

    init(_ record_String_to_String: [String: String]) {
        let val: HeadersInit = .record_String_to_String(record_String_to_String)
        self = val
    }

    init(_ seq_of_seq_of_String: [[String]]) {
        let val: HeadersInit = .seq_of_seq_of_String(seq_of_seq_of_String)
        self = val
    }

    public var record_String_to_String: [String: String]? {
        switch self {
        case let .record_String_to_String(record_String_to_String): return record_String_to_String
        default: return nil
        }
    }

    public var seq_of_seq_of_String: [[String]]? {
        switch self {
        case let .seq_of_seq_of_String(seq_of_seq_of_String): return seq_of_seq_of_String
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let record_String_to_String: [String: String] = value.fromJSValue() {
            return .record_String_to_String(record_String_to_String)
        }
        if let seq_of_seq_of_String: [[String]] = value.fromJSValue() {
            return .seq_of_seq_of_String(seq_of_seq_of_String)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .record_String_to_String(record_String_to_String):
            return record_String_to_String.jsValue
        case let .seq_of_seq_of_String(seq_of_seq_of_String):
            return seq_of_seq_of_String.jsValue
        }
    }
}

public protocol Any_ImageBitmapSource: ConvertibleToJSValue {}
extension Blob: Any_ImageBitmapSource {}
extension CanvasImageSource: Any_ImageBitmapSource {}
extension ImageData: Any_ImageBitmapSource {}

public enum ImageBitmapSource: JSValueCompatible, Any_ImageBitmapSource {
    case blob(Blob)
    case canvasImageSource(CanvasImageSource)
    case imageData(ImageData)

    init(_ blob: Blob) {
        let val: ImageBitmapSource = .blob(blob)
        self = val
    }

    init(_ canvasImageSource: CanvasImageSource) {
        let val: ImageBitmapSource = .canvasImageSource(canvasImageSource)
        self = val
    }

    init(_ htmlCanvasElement: HTMLCanvasElement) {
        let val: CanvasImageSource = .htmlCanvasElement(htmlCanvasElement)
        self = .init(val)
    }

    init(_ htmlImageElement: HTMLImageElement) {
        let val: CanvasImageSource = .htmlOrSVGImageElement(htmlImageElement)
        self = .init(val)
    }

    init(_ htmlVideoElement: HTMLVideoElement) {
        let val: CanvasImageSource = .htmlVideoElement(htmlVideoElement)
        self = .init(val)
    }

    init(_ imageBitmap: ImageBitmap) {
        let val: CanvasImageSource = .imageBitmap(imageBitmap)
        self = .init(val)
    }

    init(_ offscreenCanvas: OffscreenCanvas) {
        let val: CanvasImageSource = .offscreenCanvas(offscreenCanvas)
        self = .init(val)
    }

    init(_ videoFrame: VideoFrame) {
        let val: CanvasImageSource = .videoFrame(videoFrame)
        self = .init(val)
    }

    init(_ imageData: ImageData) {
        let val: ImageBitmapSource = .imageData(imageData)
        self = val
    }

    public var blob: Blob? {
        switch self {
        case let .blob(blob): return blob
        default: return nil
        }
    }

    public var canvasImageSource: CanvasImageSource? {
        switch self {
        case let .canvasImageSource(canvasImageSource): return canvasImageSource
        default: return nil
        }
    }

    public var imageData: ImageData? {
        switch self {
        case let .imageData(imageData): return imageData
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let blob: Blob = value.fromJSValue() {
            return .blob(blob)
        }
        if let canvasImageSource: CanvasImageSource = value.fromJSValue() {
            return .canvasImageSource(canvasImageSource)
        }
        if let imageData: ImageData = value.fromJSValue() {
            return .imageData(imageData)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .blob(blob):
            return blob.jsValue
        case let .canvasImageSource(canvasImageSource):
            return canvasImageSource.jsValue
        case let .imageData(imageData):
            return imageData.jsValue
        }
    }
}

public protocol Any_ImageBufferSource: ConvertibleToJSValue {}
extension BufferSource: Any_ImageBufferSource {}
extension ReadableStream: Any_ImageBufferSource {}

public enum ImageBufferSource: JSValueCompatible, Any_ImageBufferSource {
    case bufferSource(BufferSource)
    case readableStream(ReadableStream)

    init(_ bufferSource: BufferSource) {
        let val: ImageBufferSource = .bufferSource(bufferSource)
        self = val
    }

    init(_ arrayBuffer: ArrayBuffer) {
        let val: BufferSource = .arrayBuffer(arrayBuffer)
        self = .init(val)
    }

    init(_ arrayBufferView: ArrayBufferView) {
        let val: BufferSource = .arrayBufferView(arrayBufferView)
        self = .init(val)
    }

    init(_ readableStream: ReadableStream) {
        let val: ImageBufferSource = .readableStream(readableStream)
        self = val
    }

    public var bufferSource: BufferSource? {
        switch self {
        case let .bufferSource(bufferSource): return bufferSource
        default: return nil
        }
    }

    public var readableStream: ReadableStream? {
        switch self {
        case let .readableStream(readableStream): return readableStream
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let bufferSource: BufferSource = value.fromJSValue() {
            return .bufferSource(bufferSource)
        }
        if let readableStream: ReadableStream = value.fromJSValue() {
            return .readableStream(readableStream)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .bufferSource(bufferSource):
            return bufferSource.jsValue
        case let .readableStream(readableStream):
            return readableStream.jsValue
        }
    }
}

public protocol Any_MediaProvider: ConvertibleToJSValue {}
extension Blob: Any_MediaProvider {}
extension MediaSource: Any_MediaProvider {}
extension MediaStream: Any_MediaProvider {}

public enum MediaProvider: JSValueCompatible, Any_MediaProvider {
    case blob(Blob)
    case mediaSource(MediaSource)
    case mediaStream(MediaStream)

    init(_ blob: Blob) {
        let val: MediaProvider = .blob(blob)
        self = val
    }

    init(_ mediaSource: MediaSource) {
        let val: MediaProvider = .mediaSource(mediaSource)
        self = val
    }

    init(_ mediaStream: MediaStream) {
        let val: MediaProvider = .mediaStream(mediaStream)
        self = val
    }

    public var blob: Blob? {
        switch self {
        case let .blob(blob): return blob
        default: return nil
        }
    }

    public var mediaSource: MediaSource? {
        switch self {
        case let .mediaSource(mediaSource): return mediaSource
        default: return nil
        }
    }

    public var mediaStream: MediaStream? {
        switch self {
        case let .mediaStream(mediaStream): return mediaStream
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let blob: Blob = value.fromJSValue() {
            return .blob(blob)
        }
        if let mediaSource: MediaSource = value.fromJSValue() {
            return .mediaSource(mediaSource)
        }
        if let mediaStream: MediaStream = value.fromJSValue() {
            return .mediaStream(mediaStream)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .blob(blob):
            return blob.jsValue
        case let .mediaSource(mediaSource):
            return mediaSource.jsValue
        case let .mediaStream(mediaStream):
            return mediaStream.jsValue
        }
    }
}

public protocol Any_MessageEventSource: ConvertibleToJSValue {}
extension MessagePort: Any_MessageEventSource {}
extension ServiceWorker: Any_MessageEventSource {}
extension WindowProxy: Any_MessageEventSource {}

public enum MessageEventSource: JSValueCompatible, Any_MessageEventSource {
    case messagePort(MessagePort)
    case serviceWorker(ServiceWorker)
    case windowProxy(WindowProxy)

    init(_ messagePort: MessagePort) {
        let val: MessageEventSource = .messagePort(messagePort)
        self = val
    }

    init(_ serviceWorker: ServiceWorker) {
        let val: MessageEventSource = .serviceWorker(serviceWorker)
        self = val
    }

    init(_ windowProxy: WindowProxy) {
        let val: MessageEventSource = .windowProxy(windowProxy)
        self = val
    }

    public var messagePort: MessagePort? {
        switch self {
        case let .messagePort(messagePort): return messagePort
        default: return nil
        }
    }

    public var serviceWorker: ServiceWorker? {
        switch self {
        case let .serviceWorker(serviceWorker): return serviceWorker
        default: return nil
        }
    }

    public var windowProxy: WindowProxy? {
        switch self {
        case let .windowProxy(windowProxy): return windowProxy
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let messagePort: MessagePort = value.fromJSValue() {
            return .messagePort(messagePort)
        }
        if let serviceWorker: ServiceWorker = value.fromJSValue() {
            return .serviceWorker(serviceWorker)
        }
        if let windowProxy: WindowProxy = value.fromJSValue() {
            return .windowProxy(windowProxy)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .messagePort(messagePort):
            return messagePort.jsValue
        case let .serviceWorker(serviceWorker):
            return serviceWorker.jsValue
        case let .windowProxy(windowProxy):
            return windowProxy.jsValue
        }
    }
}

public protocol Any_Node_or_String: ConvertibleToJSValue {}
extension Node: Any_Node_or_String {}
extension String: Any_Node_or_String {}

public enum Node_or_String: JSValueCompatible, Any_Node_or_String {
    case node(Node)
    case string(String)

    init(_ node: Node) {
        let val: Node_or_String = .node(node)
        self = val
    }

    init(_ string: String) {
        let val: Node_or_String = .string(string)
        self = val
    }

    public var node: Node? {
        switch self {
        case let .node(node): return node
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let node: Node = value.fromJSValue() {
            return .node(node)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .node(node):
            return node.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_Path2D_or_String: ConvertibleToJSValue {}
extension Path2D: Any_Path2D_or_String {}
extension String: Any_Path2D_or_String {}

public enum Path2D_or_String: JSValueCompatible, Any_Path2D_or_String {
    case path2D(Path2D)
    case string(String)

    init(_ path2D: Path2D) {
        let val: Path2D_or_String = .path2D(path2D)
        self = val
    }

    init(_ string: String) {
        let val: Path2D_or_String = .string(string)
        self = val
    }

    public var path2D: Path2D? {
        switch self {
        case let .path2D(path2D): return path2D
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let path2D: Path2D = value.fromJSValue() {
            return .path2D(path2D)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .path2D(path2D):
            return path2D.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_ReadableStreamController: ConvertibleToJSValue {}
extension ReadableByteStreamController: Any_ReadableStreamController {}
extension ReadableStreamDefaultController: Any_ReadableStreamController {}

public enum ReadableStreamController: JSValueCompatible, Any_ReadableStreamController {
    case readableByteStreamController(ReadableByteStreamController)
    case readableStreamDefaultController(ReadableStreamDefaultController)

    init(_ readableByteStreamController: ReadableByteStreamController) {
        let val: ReadableStreamController = .readableByteStreamController(readableByteStreamController)
        self = val
    }

    init(_ readableStreamDefaultController: ReadableStreamDefaultController) {
        let val: ReadableStreamController = .readableStreamDefaultController(readableStreamDefaultController)
        self = val
    }

    public var readableByteStreamController: ReadableByteStreamController? {
        switch self {
        case let .readableByteStreamController(readableByteStreamController): return readableByteStreamController
        default: return nil
        }
    }

    public var readableStreamDefaultController: ReadableStreamDefaultController? {
        switch self {
        case let .readableStreamDefaultController(readableStreamDefaultController): return readableStreamDefaultController
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let readableByteStreamController: ReadableByteStreamController = value.fromJSValue() {
            return .readableByteStreamController(readableByteStreamController)
        }
        if let readableStreamDefaultController: ReadableStreamDefaultController = value.fromJSValue() {
            return .readableStreamDefaultController(readableStreamDefaultController)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .readableByteStreamController(readableByteStreamController):
            return readableByteStreamController.jsValue
        case let .readableStreamDefaultController(readableStreamDefaultController):
            return readableStreamDefaultController.jsValue
        }
    }
}

public protocol Any_ReadableStreamReader: ConvertibleToJSValue {}
extension ReadableStreamBYOBReader: Any_ReadableStreamReader {}
extension ReadableStreamDefaultReader: Any_ReadableStreamReader {}

public enum ReadableStreamReader: JSValueCompatible, Any_ReadableStreamReader {
    case readableStreamBYOBReader(ReadableStreamBYOBReader)
    case readableStreamDefaultReader(ReadableStreamDefaultReader)

    init(_ readableStreamBYOBReader: ReadableStreamBYOBReader) {
        let val: ReadableStreamReader = .readableStreamBYOBReader(readableStreamBYOBReader)
        self = val
    }

    init(_ readableStreamDefaultReader: ReadableStreamDefaultReader) {
        let val: ReadableStreamReader = .readableStreamDefaultReader(readableStreamDefaultReader)
        self = val
    }

    public var readableStreamBYOBReader: ReadableStreamBYOBReader? {
        switch self {
        case let .readableStreamBYOBReader(readableStreamBYOBReader): return readableStreamBYOBReader
        default: return nil
        }
    }

    public var readableStreamDefaultReader: ReadableStreamDefaultReader? {
        switch self {
        case let .readableStreamDefaultReader(readableStreamDefaultReader): return readableStreamDefaultReader
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let readableStreamBYOBReader: ReadableStreamBYOBReader = value.fromJSValue() {
            return .readableStreamBYOBReader(readableStreamBYOBReader)
        }
        if let readableStreamDefaultReader: ReadableStreamDefaultReader = value.fromJSValue() {
            return .readableStreamDefaultReader(readableStreamDefaultReader)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .readableStreamBYOBReader(readableStreamBYOBReader):
            return readableStreamBYOBReader.jsValue
        case let .readableStreamDefaultReader(readableStreamDefaultReader):
            return readableStreamDefaultReader.jsValue
        }
    }
}

public protocol Any_RequestInfo: ConvertibleToJSValue {}
extension Request: Any_RequestInfo {}
extension String: Any_RequestInfo {}

public enum RequestInfo: JSValueCompatible, Any_RequestInfo {
    case request(Request)
    case string(String)

    init(_ request: Request) {
        let val: RequestInfo = .request(request)
        self = val
    }

    init(_ string: String) {
        let val: RequestInfo = .string(string)
        self = val
    }

    public var request: Request? {
        switch self {
        case let .request(request): return request
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let request: Request = value.fromJSValue() {
            return .request(request)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .request(request):
            return request.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_String_or_WorkerOptions: ConvertibleToJSValue {}
extension String: Any_String_or_WorkerOptions {}
extension WorkerOptions: Any_String_or_WorkerOptions {}

public enum String_or_WorkerOptions: JSValueCompatible, Any_String_or_WorkerOptions {
    case string(String)
    case workerOptions(WorkerOptions)

    init(_ string: String) {
        let val: String_or_WorkerOptions = .string(string)
        self = val
    }

    init(_ workerOptions: WorkerOptions) {
        let val: String_or_WorkerOptions = .workerOptions(workerOptions)
        self = val
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public var workerOptions: WorkerOptions? {
        switch self {
        case let .workerOptions(workerOptions): return workerOptions
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        if let workerOptions: WorkerOptions = value.fromJSValue() {
            return .workerOptions(workerOptions)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .string(string):
            return string.jsValue
        case let .workerOptions(workerOptions):
            return workerOptions.jsValue
        }
    }
}

public protocol Any_String_or_seq_of_Double: ConvertibleToJSValue {}
extension String: Any_String_or_seq_of_Double {}
extension Array: Any_String_or_seq_of_Double where Element == Double {}

public enum String_or_seq_of_Double: JSValueCompatible, Any_String_or_seq_of_Double {
    case string(String)
    case seq_of_Double([Double])

    init(_ string: String) {
        let val: String_or_seq_of_Double = .string(string)
        self = val
    }

    init(_ seq_of_Double: [Double]) {
        let val: String_or_seq_of_Double = .seq_of_Double(seq_of_Double)
        self = val
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public var seq_of_Double: [Double]? {
        switch self {
        case let .seq_of_Double(seq_of_Double): return seq_of_Double
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        if let seq_of_Double: [Double] = value.fromJSValue() {
            return .seq_of_Double(seq_of_Double)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .string(string):
            return string.jsValue
        case let .seq_of_Double(seq_of_Double):
            return seq_of_Double.jsValue
        }
    }
}

public protocol Any_String_or_seq_of_String: ConvertibleToJSValue {}
extension String: Any_String_or_seq_of_String {}
extension Array: Any_String_or_seq_of_String where Element == String {}

public enum String_or_seq_of_String: JSValueCompatible, Any_String_or_seq_of_String {
    case string(String)
    case seq_of_String([String])

    init(_ string: String) {
        let val: String_or_seq_of_String = .string(string)
        self = val
    }

    init(_ seq_of_String: [String]) {
        let val: String_or_seq_of_String = .seq_of_String(seq_of_String)
        self = val
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public var seq_of_String: [String]? {
        switch self {
        case let .seq_of_String(seq_of_String): return seq_of_String
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        if let seq_of_String: [String] = value.fromJSValue() {
            return .seq_of_String(seq_of_String)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .string(string):
            return string.jsValue
        case let .seq_of_String(seq_of_String):
            return seq_of_String.jsValue
        }
    }
}

public protocol Any_TimerHandler: ConvertibleToJSValue {}
extension JSFunction: Any_TimerHandler {}
extension String: Any_TimerHandler {}

public enum TimerHandler: JSValueCompatible, Any_TimerHandler {
    case jsFunction(JSFunction)
    case string(String)

    init(_ jsFunction: JSFunction) {
        let val: TimerHandler = .jsFunction(jsFunction)
        self = val
    }

    init(_ string: String) {
        let val: TimerHandler = .string(string)
        self = val
    }

    public var jsFunction: JSFunction? {
        switch self {
        case let .jsFunction(jsFunction): return jsFunction
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let jsFunction: JSFunction = value.fromJSValue() {
            return .jsFunction(jsFunction)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .jsFunction(jsFunction):
            return jsFunction.jsValue
        case let .string(string):
            return string.jsValue
        }
    }
}

public protocol Any_XMLHttpRequestBodyInit: ConvertibleToJSValue {}
extension Blob: Any_XMLHttpRequestBodyInit {}
extension BufferSource: Any_XMLHttpRequestBodyInit {}
extension FormData: Any_XMLHttpRequestBodyInit {}
extension String: Any_XMLHttpRequestBodyInit {}
extension URLSearchParams: Any_XMLHttpRequestBodyInit {}

public enum XMLHttpRequestBodyInit: JSValueCompatible, Any_XMLHttpRequestBodyInit {
    case blob(Blob)
    case bufferSource(BufferSource)
    case formData(FormData)
    case string(String)
    case urlSearchParams(URLSearchParams)

    init(_ blob: Blob) {
        let val: XMLHttpRequestBodyInit = .blob(blob)
        self = val
    }

    init(_ bufferSource: BufferSource) {
        let val: XMLHttpRequestBodyInit = .bufferSource(bufferSource)
        self = val
    }

    init(_ arrayBuffer: ArrayBuffer) {
        let val: BufferSource = .arrayBuffer(arrayBuffer)
        self = .init(val)
    }

    init(_ arrayBufferView: ArrayBufferView) {
        let val: BufferSource = .arrayBufferView(arrayBufferView)
        self = .init(val)
    }

    init(_ formData: FormData) {
        let val: XMLHttpRequestBodyInit = .formData(formData)
        self = val
    }

    init(_ string: String) {
        let val: XMLHttpRequestBodyInit = .string(string)
        self = val
    }

    init(_ urlSearchParams: URLSearchParams) {
        let val: XMLHttpRequestBodyInit = .urlSearchParams(urlSearchParams)
        self = val
    }

    public var blob: Blob? {
        switch self {
        case let .blob(blob): return blob
        default: return nil
        }
    }

    public var bufferSource: BufferSource? {
        switch self {
        case let .bufferSource(bufferSource): return bufferSource
        default: return nil
        }
    }

    public var formData: FormData? {
        switch self {
        case let .formData(formData): return formData
        default: return nil
        }
    }

    public var string: String? {
        switch self {
        case let .string(string): return string
        default: return nil
        }
    }

    public var urlSearchParams: URLSearchParams? {
        switch self {
        case let .urlSearchParams(urlSearchParams): return urlSearchParams
        default: return nil
        }
    }

    public static func construct(from value: JSValue) -> Self? {
        if let blob: Blob = value.fromJSValue() {
            return .blob(blob)
        }
        if let bufferSource: BufferSource = value.fromJSValue() {
            return .bufferSource(bufferSource)
        }
        if let formData: FormData = value.fromJSValue() {
            return .formData(formData)
        }
        if let string: String = value.fromJSValue() {
            return .string(string)
        }
        if let urlSearchParams: URLSearchParams = value.fromJSValue() {
            return .urlSearchParams(urlSearchParams)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .blob(blob):
            return blob.jsValue
        case let .bufferSource(bufferSource):
            return bufferSource.jsValue
        case let .formData(formData):
            return formData.jsValue
        case let .string(string):
            return string.jsValue
        case let .urlSearchParams(urlSearchParams):
            return urlSearchParams.jsValue
        }
    }
}
