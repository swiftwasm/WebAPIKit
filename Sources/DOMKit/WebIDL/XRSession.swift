// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class XRSession: EventTarget {
    override public class var constructor: JSFunction { JSObject.global[Strings.XRSession].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _visibilityState = ReadonlyAttribute(jsObject: jsObject, name: Strings.visibilityState)
        _frameRate = ReadonlyAttribute(jsObject: jsObject, name: Strings.frameRate)
        _supportedFrameRates = ReadonlyAttribute(jsObject: jsObject, name: Strings.supportedFrameRates)
        _renderState = ReadonlyAttribute(jsObject: jsObject, name: Strings.renderState)
        _inputSources = ReadonlyAttribute(jsObject: jsObject, name: Strings.inputSources)
        _onend = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onend)
        _oninputsourceschange = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.oninputsourceschange)
        _onselect = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onselect)
        _onselectstart = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onselectstart)
        _onselectend = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onselectend)
        _onsqueeze = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onsqueeze)
        _onsqueezestart = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onsqueezestart)
        _onsqueezeend = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onsqueezeend)
        _onvisibilitychange = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onvisibilitychange)
        _onframeratechange = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onframeratechange)
        _depthUsage = ReadonlyAttribute(jsObject: jsObject, name: Strings.depthUsage)
        _depthDataFormat = ReadonlyAttribute(jsObject: jsObject, name: Strings.depthDataFormat)
        _domOverlayState = ReadonlyAttribute(jsObject: jsObject, name: Strings.domOverlayState)
        _environmentBlendMode = ReadonlyAttribute(jsObject: jsObject, name: Strings.environmentBlendMode)
        _interactionMode = ReadonlyAttribute(jsObject: jsObject, name: Strings.interactionMode)
        _preferredReflectionFormat = ReadonlyAttribute(jsObject: jsObject, name: Strings.preferredReflectionFormat)
        super.init(unsafelyWrapping: jsObject)
    }

    public func requestHitTestSource(options: XRHitTestOptionsInit) -> JSPromise {
        jsObject[Strings.requestHitTestSource]!(options.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func requestHitTestSource(options: XRHitTestOptionsInit) async throws -> XRHitTestSource {
        let _promise: JSPromise = jsObject[Strings.requestHitTestSource]!(options.jsValue()).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func requestHitTestSourceForTransientInput(options: XRTransientInputHitTestOptionsInit) -> JSPromise {
        jsObject[Strings.requestHitTestSourceForTransientInput]!(options.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func requestHitTestSourceForTransientInput(options: XRTransientInputHitTestOptionsInit) async throws -> XRTransientInputHitTestSource {
        let _promise: JSPromise = jsObject[Strings.requestHitTestSourceForTransientInput]!(options.jsValue()).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    @ReadonlyAttribute
    public var visibilityState: XRVisibilityState

    @ReadonlyAttribute
    public var frameRate: Float?

    @ReadonlyAttribute
    public var supportedFrameRates: Float32Array?

    @ReadonlyAttribute
    public var renderState: XRRenderState

    @ReadonlyAttribute
    public var inputSources: XRInputSourceArray

    public func updateRenderState(state: XRRenderStateInit? = nil) {
        _ = jsObject[Strings.updateRenderState]!(state?.jsValue() ?? .undefined)
    }

    public func updateTargetFrameRate(rate: Float) -> JSPromise {
        jsObject[Strings.updateTargetFrameRate]!(rate.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func updateTargetFrameRate(rate: Float) async throws {
        let _promise: JSPromise = jsObject[Strings.updateTargetFrameRate]!(rate.jsValue()).fromJSValue()!
        _ = try await _promise.get()
    }

    public func requestReferenceSpace(type: XRReferenceSpaceType) -> JSPromise {
        jsObject[Strings.requestReferenceSpace]!(type.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func requestReferenceSpace(type: XRReferenceSpaceType) async throws -> XRReferenceSpace {
        let _promise: JSPromise = jsObject[Strings.requestReferenceSpace]!(type.jsValue()).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    // XXX: member 'requestAnimationFrame' is ignored

    public func cancelAnimationFrame(handle: UInt32) {
        _ = jsObject[Strings.cancelAnimationFrame]!(handle.jsValue())
    }

    public func end() -> JSPromise {
        jsObject[Strings.end]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func end() async throws {
        let _promise: JSPromise = jsObject[Strings.end]!().fromJSValue()!
        _ = try await _promise.get()
    }

    @ClosureAttribute.Optional1
    public var onend: EventHandler

    @ClosureAttribute.Optional1
    public var oninputsourceschange: EventHandler

    @ClosureAttribute.Optional1
    public var onselect: EventHandler

    @ClosureAttribute.Optional1
    public var onselectstart: EventHandler

    @ClosureAttribute.Optional1
    public var onselectend: EventHandler

    @ClosureAttribute.Optional1
    public var onsqueeze: EventHandler

    @ClosureAttribute.Optional1
    public var onsqueezestart: EventHandler

    @ClosureAttribute.Optional1
    public var onsqueezeend: EventHandler

    @ClosureAttribute.Optional1
    public var onvisibilitychange: EventHandler

    @ClosureAttribute.Optional1
    public var onframeratechange: EventHandler

    @ReadonlyAttribute
    public var depthUsage: XRDepthUsage

    @ReadonlyAttribute
    public var depthDataFormat: XRDepthDataFormat

    @ReadonlyAttribute
    public var domOverlayState: XRDOMOverlayState?

    @ReadonlyAttribute
    public var environmentBlendMode: XREnvironmentBlendMode

    @ReadonlyAttribute
    public var interactionMode: XRInteractionMode

    public func requestLightProbe(options: XRLightProbeInit? = nil) -> JSPromise {
        jsObject[Strings.requestLightProbe]!(options?.jsValue() ?? .undefined).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func requestLightProbe(options: XRLightProbeInit? = nil) async throws -> XRLightProbe {
        let _promise: JSPromise = jsObject[Strings.requestLightProbe]!(options?.jsValue() ?? .undefined).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    @ReadonlyAttribute
    public var preferredReflectionFormat: XRReflectionFormat
}
