// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class XRSession: EventTarget {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.XRSession].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _environmentBlendMode = ReadonlyAttribute(jsObject: jsObject, name: Strings.environmentBlendMode)
        _interactionMode = ReadonlyAttribute(jsObject: jsObject, name: Strings.interactionMode)
        _depthUsage = ReadonlyAttribute(jsObject: jsObject, name: Strings.depthUsage)
        _depthDataFormat = ReadonlyAttribute(jsObject: jsObject, name: Strings.depthDataFormat)
        _domOverlayState = ReadonlyAttribute(jsObject: jsObject, name: Strings.domOverlayState)
        _preferredReflectionFormat = ReadonlyAttribute(jsObject: jsObject, name: Strings.preferredReflectionFormat)
        _visibilityState = ReadonlyAttribute(jsObject: jsObject, name: Strings.visibilityState)
        _frameRate = ReadonlyAttribute(jsObject: jsObject, name: Strings.frameRate)
        _supportedFrameRates = ReadonlyAttribute(jsObject: jsObject, name: Strings.supportedFrameRates)
        _renderState = ReadonlyAttribute(jsObject: jsObject, name: Strings.renderState)
        _inputSources = ReadonlyAttribute(jsObject: jsObject, name: Strings.inputSources)
        _onend = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onend)
        _oninputsourceschange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.oninputsourceschange)
        _onselect = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onselect)
        _onselectstart = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onselectstart)
        _onselectend = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onselectend)
        _onsqueeze = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsqueeze)
        _onsqueezestart = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsqueezestart)
        _onsqueezeend = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsqueezeend)
        _onvisibilitychange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onvisibilitychange)
        _onframeratechange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onframeratechange)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var environmentBlendMode: XREnvironmentBlendMode

    @ReadonlyAttribute
    public var interactionMode: XRInteractionMode

    @ReadonlyAttribute
    public var depthUsage: XRDepthUsage

    @ReadonlyAttribute
    public var depthDataFormat: XRDepthDataFormat

    @ReadonlyAttribute
    public var domOverlayState: XRDOMOverlayState?

    @inlinable public func requestHitTestSource(options: XRHitTestOptionsInit) -> JSPromise {
        let this = jsObject
        return this[Strings.requestHitTestSource].function!(this: this, arguments: [options.jsValue]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func requestHitTestSource(options: XRHitTestOptionsInit) async throws -> XRHitTestSource {
        let this = jsObject
        let _promise: JSPromise = this[Strings.requestHitTestSource].function!(this: this, arguments: [options.jsValue]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func requestHitTestSourceForTransientInput(options: XRTransientInputHitTestOptionsInit) -> JSPromise {
        let this = jsObject
        return this[Strings.requestHitTestSourceForTransientInput].function!(this: this, arguments: [options.jsValue]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func requestHitTestSourceForTransientInput(options: XRTransientInputHitTestOptionsInit) async throws -> XRTransientInputHitTestSource {
        let this = jsObject
        let _promise: JSPromise = this[Strings.requestHitTestSourceForTransientInput].function!(this: this, arguments: [options.jsValue]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @inlinable public func requestLightProbe(options: XRLightProbeInit? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.requestLightProbe].function!(this: this, arguments: [options?.jsValue ?? .undefined]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func requestLightProbe(options: XRLightProbeInit? = nil) async throws -> XRLightProbe {
        let this = jsObject
        let _promise: JSPromise = this[Strings.requestLightProbe].function!(this: this, arguments: [options?.jsValue ?? .undefined]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @ReadonlyAttribute
    public var preferredReflectionFormat: XRReflectionFormat

    @ReadonlyAttribute
    public var visibilityState: XRVisibilityState

    @ReadonlyAttribute
    public var frameRate: Float?

    @ReadonlyAttribute
    public var supportedFrameRates: Float32Array?

    @ReadonlyAttribute
    public var renderState: XRRenderState

    @ReadonlyAttribute
    public var inputSources: XRInputSourceArray

    @inlinable public func updateRenderState(state: XRRenderStateInit? = nil) {
        let this = jsObject
        _ = this[Strings.updateRenderState].function!(this: this, arguments: [state?.jsValue ?? .undefined])
    }

    @inlinable public func updateTargetFrameRate(rate: Float) -> JSPromise {
        let this = jsObject
        return this[Strings.updateTargetFrameRate].function!(this: this, arguments: [rate.jsValue]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func updateTargetFrameRate(rate: Float) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.updateTargetFrameRate].function!(this: this, arguments: [rate.jsValue]).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func requestReferenceSpace(type: XRReferenceSpaceType) -> JSPromise {
        let this = jsObject
        return this[Strings.requestReferenceSpace].function!(this: this, arguments: [type.jsValue]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func requestReferenceSpace(type: XRReferenceSpaceType) async throws -> XRReferenceSpace {
        let this = jsObject
        let _promise: JSPromise = this[Strings.requestReferenceSpace].function!(this: this, arguments: [type.jsValue]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    // XXX: member 'requestAnimationFrame' is ignored

    @inlinable public func cancelAnimationFrame(handle: UInt32) {
        let this = jsObject
        _ = this[Strings.cancelAnimationFrame].function!(this: this, arguments: [handle.jsValue])
    }

    @inlinable public func end() -> JSPromise {
        let this = jsObject
        return this[Strings.end].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func end() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.end].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @ClosureAttribute1Optional
    public var onend: EventHandler

    @ClosureAttribute1Optional
    public var oninputsourceschange: EventHandler

    @ClosureAttribute1Optional
    public var onselect: EventHandler

    @ClosureAttribute1Optional
    public var onselectstart: EventHandler

    @ClosureAttribute1Optional
    public var onselectend: EventHandler

    @ClosureAttribute1Optional
    public var onsqueeze: EventHandler

    @ClosureAttribute1Optional
    public var onsqueezestart: EventHandler

    @ClosureAttribute1Optional
    public var onsqueezeend: EventHandler

    @ClosureAttribute1Optional
    public var onvisibilitychange: EventHandler

    @ClosureAttribute1Optional
    public var onframeratechange: EventHandler
}
