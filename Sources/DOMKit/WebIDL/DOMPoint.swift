// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class DOMPoint: DOMPointReadOnly {
    override public class var constructor: JSFunction { JSObject.global.DOMPoint.function! }

    private enum Keys {
        static let fromPoint: JSString = "fromPoint"
        static let w: JSString = "w"
        static let x: JSString = "x"
        static let y: JSString = "y"
        static let z: JSString = "z"
    }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _x = ReadWriteAttribute(jsObject: jsObject, name: Keys.x)
        _y = ReadWriteAttribute(jsObject: jsObject, name: Keys.y)
        _z = ReadWriteAttribute(jsObject: jsObject, name: Keys.z)
        _w = ReadWriteAttribute(jsObject: jsObject, name: Keys.w)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init(x: Double? = nil, y: Double? = nil, z: Double? = nil, w: Double? = nil) {
        self.init(unsafelyWrapping: Self.constructor.new(x?.jsValue() ?? .undefined, y?.jsValue() ?? .undefined, z?.jsValue() ?? .undefined, w?.jsValue() ?? .undefined))
    }

    // XXX: illegal static override
    // override public static func fromPoint(other: DOMPointInit? = nil) -> Self

    private var _x: ReadWriteAttribute<Double>
    override public var x: Double {
        get { _x.wrappedValue }
        set { _x.wrappedValue = newValue }
    }

    private var _y: ReadWriteAttribute<Double>
    override public var y: Double {
        get { _y.wrappedValue }
        set { _y.wrappedValue = newValue }
    }

    private var _z: ReadWriteAttribute<Double>
    override public var z: Double {
        get { _z.wrappedValue }
        set { _z.wrappedValue = newValue }
    }

    private var _w: ReadWriteAttribute<Double>
    override public var w: Double {
        get { _w.wrappedValue }
        set { _w.wrappedValue = newValue }
    }
}
