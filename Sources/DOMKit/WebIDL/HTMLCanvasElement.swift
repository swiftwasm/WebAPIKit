// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class HTMLCanvasElement: HTMLElement {
    override public class var constructor: JSFunction { JSObject.global.HTMLCanvasElement.function! }

    private enum Keys {
        static let getContext: JSString = "getContext"
        static let height: JSString = "height"
        static let toBlob: JSString = "toBlob"
        static let toDataURL: JSString = "toDataURL"
        static let transferControlToOffscreen: JSString = "transferControlToOffscreen"
        static let width: JSString = "width"
    }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _width = ReadWriteAttribute(jsObject: jsObject, name: Keys.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Keys.height)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    @ReadWriteAttribute
    public var width: UInt32

    @ReadWriteAttribute
    public var height: UInt32

    public func getContext(contextId: String, options: JSValue? = nil) -> RenderingContext? {
        jsObject[Keys.getContext]!(contextId.jsValue(), options?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func toDataURL(type: String? = nil, quality: JSValue? = nil) -> String {
        jsObject[Keys.toDataURL]!(type?.jsValue() ?? .undefined, quality?.jsValue() ?? .undefined).fromJSValue()!
    }

    // XXX: member 'toBlob' is ignored

    public func transferControlToOffscreen() -> OffscreenCanvas {
        jsObject[Keys.transferControlToOffscreen]!().fromJSValue()!
    }
}
