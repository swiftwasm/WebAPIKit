// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public protocol WebGLRenderingContextOverloads: JSBridgedClass {}
public extension WebGLRenderingContextOverloads {
    func bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum) {
        _ = jsObject[Strings.bufferData]!(target.jsValue(), size.jsValue(), usage.jsValue())
    }

    func bufferData(target: GLenum, data: BufferSource?, usage: GLenum) {
        _ = jsObject[Strings.bufferData]!(target.jsValue(), data.jsValue(), usage.jsValue())
    }

    func bufferSubData(target: GLenum, offset: GLintptr, data: BufferSource) {
        _ = jsObject[Strings.bufferSubData]!(target.jsValue(), offset.jsValue(), data.jsValue())
    }

    func compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, data: ArrayBufferView) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = internalformat.jsValue()
        let _arg3 = width.jsValue()
        let _arg4 = height.jsValue()
        let _arg5 = border.jsValue()
        let _arg6 = data.jsValue()
        _ = jsObject[Strings.compressedTexImage2D]!(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
    }

    func compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, data: ArrayBufferView) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = xoffset.jsValue()
        let _arg3 = yoffset.jsValue()
        let _arg4 = width.jsValue()
        let _arg5 = height.jsValue()
        let _arg6 = format.jsValue()
        let _arg7 = data.jsValue()
        _ = jsObject[Strings.compressedTexSubImage2D]!(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
    }

    func readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView?) {
        let _arg0 = x.jsValue()
        let _arg1 = y.jsValue()
        let _arg2 = width.jsValue()
        let _arg3 = height.jsValue()
        let _arg4 = format.jsValue()
        let _arg5 = type.jsValue()
        let _arg6 = pixels.jsValue()
        _ = jsObject[Strings.readPixels]!(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
    }

    func texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView?) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = internalformat.jsValue()
        let _arg3 = width.jsValue()
        let _arg4 = height.jsValue()
        let _arg5 = border.jsValue()
        let _arg6 = format.jsValue()
        let _arg7 = type.jsValue()
        let _arg8 = pixels.jsValue()
        _ = jsObject[Strings.texImage2D]!(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
    }

    func texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = internalformat.jsValue()
        let _arg3 = format.jsValue()
        let _arg4 = type.jsValue()
        let _arg5 = source.jsValue()
        _ = jsObject[Strings.texImage2D]!(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
    }

    func texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView?) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = xoffset.jsValue()
        let _arg3 = yoffset.jsValue()
        let _arg4 = width.jsValue()
        let _arg5 = height.jsValue()
        let _arg6 = format.jsValue()
        let _arg7 = type.jsValue()
        let _arg8 = pixels.jsValue()
        _ = jsObject[Strings.texSubImage2D]!(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
    }

    func texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = xoffset.jsValue()
        let _arg3 = yoffset.jsValue()
        let _arg4 = format.jsValue()
        let _arg5 = type.jsValue()
        let _arg6 = source.jsValue()
        _ = jsObject[Strings.texSubImage2D]!(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
    }

    func uniform1fv(location: WebGLUniformLocation?, v: Float32List) {
        _ = jsObject[Strings.uniform1fv]!(location.jsValue(), v.jsValue())
    }

    func uniform2fv(location: WebGLUniformLocation?, v: Float32List) {
        _ = jsObject[Strings.uniform2fv]!(location.jsValue(), v.jsValue())
    }

    func uniform3fv(location: WebGLUniformLocation?, v: Float32List) {
        _ = jsObject[Strings.uniform3fv]!(location.jsValue(), v.jsValue())
    }

    func uniform4fv(location: WebGLUniformLocation?, v: Float32List) {
        _ = jsObject[Strings.uniform4fv]!(location.jsValue(), v.jsValue())
    }

    func uniform1iv(location: WebGLUniformLocation?, v: Int32List) {
        _ = jsObject[Strings.uniform1iv]!(location.jsValue(), v.jsValue())
    }

    func uniform2iv(location: WebGLUniformLocation?, v: Int32List) {
        _ = jsObject[Strings.uniform2iv]!(location.jsValue(), v.jsValue())
    }

    func uniform3iv(location: WebGLUniformLocation?, v: Int32List) {
        _ = jsObject[Strings.uniform3iv]!(location.jsValue(), v.jsValue())
    }

    func uniform4iv(location: WebGLUniformLocation?, v: Int32List) {
        _ = jsObject[Strings.uniform4iv]!(location.jsValue(), v.jsValue())
    }

    func uniformMatrix2fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Float32List) {
        _ = jsObject[Strings.uniformMatrix2fv]!(location.jsValue(), transpose.jsValue(), value.jsValue())
    }

    func uniformMatrix3fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Float32List) {
        _ = jsObject[Strings.uniformMatrix3fv]!(location.jsValue(), transpose.jsValue(), value.jsValue())
    }

    func uniformMatrix4fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Float32List) {
        _ = jsObject[Strings.uniformMatrix4fv]!(location.jsValue(), transpose.jsValue(), value.jsValue())
    }
}
