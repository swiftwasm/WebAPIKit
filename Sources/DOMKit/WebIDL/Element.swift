// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class Element: Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slottable, ARIAMixin {
    override public class var constructor: JSFunction { JSObject.global.Element.function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _namespaceURI = ReadonlyAttribute(jsObject: jsObject, name: Strings.namespaceURI)
        _prefix = ReadonlyAttribute(jsObject: jsObject, name: Strings.prefix)
        _localName = ReadonlyAttribute(jsObject: jsObject, name: Strings.localName)
        _tagName = ReadonlyAttribute(jsObject: jsObject, name: Strings.tagName)
        _id = ReadWriteAttribute(jsObject: jsObject, name: Strings.id)
        _className = ReadWriteAttribute(jsObject: jsObject, name: Strings.className)
        _classList = ReadonlyAttribute(jsObject: jsObject, name: Strings.classList)
        _slot = ReadWriteAttribute(jsObject: jsObject, name: Strings.slot)
        _attributes = ReadonlyAttribute(jsObject: jsObject, name: Strings.attributes)
        _shadowRoot = ReadonlyAttribute(jsObject: jsObject, name: Strings.shadowRoot)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var namespaceURI: String?

    @ReadonlyAttribute
    public var prefix: String?

    @ReadonlyAttribute
    public var localName: String

    @ReadonlyAttribute
    public var tagName: String

    @ReadWriteAttribute
    public var id: String

    @ReadWriteAttribute
    public var className: String

    @ReadonlyAttribute
    public var classList: DOMTokenList

    @ReadWriteAttribute
    public var slot: String

    public func hasAttributes() -> Bool {
        jsObject[Strings.hasAttributes]!().fromJSValue()!
    }

    @ReadonlyAttribute
    public var attributes: NamedNodeMap

    public func getAttributeNames() -> [String] {
        jsObject[Strings.getAttributeNames]!().fromJSValue()!
    }

    public func getAttribute(qualifiedName: String) -> String? {
        jsObject[Strings.getAttribute]!(qualifiedName.jsValue()).fromJSValue()!
    }

    public func getAttributeNS(namespace: String?, localName: String) -> String? {
        jsObject[Strings.getAttributeNS]!(namespace.jsValue(), localName.jsValue()).fromJSValue()!
    }

    public func setAttribute(qualifiedName: String, value: String) {
        _ = jsObject[Strings.setAttribute]!(qualifiedName.jsValue(), value.jsValue())
    }

    public func setAttributeNS(namespace: String?, qualifiedName: String, value: String) {
        _ = jsObject[Strings.setAttributeNS]!(namespace.jsValue(), qualifiedName.jsValue(), value.jsValue())
    }

    public func removeAttribute(qualifiedName: String) {
        _ = jsObject[Strings.removeAttribute]!(qualifiedName.jsValue())
    }

    public func removeAttributeNS(namespace: String?, localName: String) {
        _ = jsObject[Strings.removeAttributeNS]!(namespace.jsValue(), localName.jsValue())
    }

    public func toggleAttribute(qualifiedName: String, force: Bool? = nil) -> Bool {
        jsObject[Strings.toggleAttribute]!(qualifiedName.jsValue(), force?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func hasAttribute(qualifiedName: String) -> Bool {
        jsObject[Strings.hasAttribute]!(qualifiedName.jsValue()).fromJSValue()!
    }

    public func hasAttributeNS(namespace: String?, localName: String) -> Bool {
        jsObject[Strings.hasAttributeNS]!(namespace.jsValue(), localName.jsValue()).fromJSValue()!
    }

    public func getAttributeNode(qualifiedName: String) -> Attr? {
        jsObject[Strings.getAttributeNode]!(qualifiedName.jsValue()).fromJSValue()!
    }

    public func getAttributeNodeNS(namespace: String?, localName: String) -> Attr? {
        jsObject[Strings.getAttributeNodeNS]!(namespace.jsValue(), localName.jsValue()).fromJSValue()!
    }

    public func setAttributeNode(attr: Attr) -> Attr? {
        jsObject[Strings.setAttributeNode]!(attr.jsValue()).fromJSValue()!
    }

    public func setAttributeNodeNS(attr: Attr) -> Attr? {
        jsObject[Strings.setAttributeNodeNS]!(attr.jsValue()).fromJSValue()!
    }

    public func removeAttributeNode(attr: Attr) -> Attr {
        jsObject[Strings.removeAttributeNode]!(attr.jsValue()).fromJSValue()!
    }

    public func attachShadow(init: ShadowRootInit) -> ShadowRoot {
        jsObject[Strings.attachShadow]!(`init`.jsValue()).fromJSValue()!
    }

    @ReadonlyAttribute
    public var shadowRoot: ShadowRoot?

    public func closest(selectors: String) -> Element? {
        jsObject[Strings.closest]!(selectors.jsValue()).fromJSValue()!
    }

    public func matches(selectors: String) -> Bool {
        jsObject[Strings.matches]!(selectors.jsValue()).fromJSValue()!
    }

    public func webkitMatchesSelector(selectors: String) -> Bool {
        jsObject[Strings.webkitMatchesSelector]!(selectors.jsValue()).fromJSValue()!
    }

    public func getElementsByTagName(qualifiedName: String) -> HTMLCollection {
        jsObject[Strings.getElementsByTagName]!(qualifiedName.jsValue()).fromJSValue()!
    }

    public func getElementsByTagNameNS(namespace: String?, localName: String) -> HTMLCollection {
        jsObject[Strings.getElementsByTagNameNS]!(namespace.jsValue(), localName.jsValue()).fromJSValue()!
    }

    public func getElementsByClassName(classNames: String) -> HTMLCollection {
        jsObject[Strings.getElementsByClassName]!(classNames.jsValue()).fromJSValue()!
    }

    public func insertAdjacentElement(where: String, element: Element) -> Element? {
        jsObject[Strings.insertAdjacentElement]!(`where`.jsValue(), element.jsValue()).fromJSValue()!
    }

    public func insertAdjacentText(where: String, data: String) {
        _ = jsObject[Strings.insertAdjacentText]!(`where`.jsValue(), data.jsValue())
    }
}
