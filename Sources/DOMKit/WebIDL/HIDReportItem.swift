// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class HIDReportItem: BridgedDictionary {
    public convenience init(isAbsolute: Bool, isArray: Bool, isBufferedBytes: Bool, isConstant: Bool, isLinear: Bool, isRange: Bool, isVolatile: Bool, hasNull: Bool, hasPreferredState: Bool, wrap: Bool, usages: [UInt32], usageMinimum: UInt32, usageMaximum: UInt32, reportSize: UInt16, reportCount: UInt16, unitExponent: Int8, unitSystem: HIDUnitSystem, unitFactorLengthExponent: Int8, unitFactorMassExponent: Int8, unitFactorTimeExponent: Int8, unitFactorTemperatureExponent: Int8, unitFactorCurrentExponent: Int8, unitFactorLuminousIntensityExponent: Int8, logicalMinimum: Int32, logicalMaximum: Int32, physicalMinimum: Int32, physicalMaximum: Int32, strings: [String]) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.isAbsolute] = isAbsolute.jsValue()
        object[Strings.isArray] = isArray.jsValue()
        object[Strings.isBufferedBytes] = isBufferedBytes.jsValue()
        object[Strings.isConstant] = isConstant.jsValue()
        object[Strings.isLinear] = isLinear.jsValue()
        object[Strings.isRange] = isRange.jsValue()
        object[Strings.isVolatile] = isVolatile.jsValue()
        object[Strings.hasNull] = hasNull.jsValue()
        object[Strings.hasPreferredState] = hasPreferredState.jsValue()
        object[Strings.wrap] = wrap.jsValue()
        object[Strings.usages] = usages.jsValue()
        object[Strings.usageMinimum] = usageMinimum.jsValue()
        object[Strings.usageMaximum] = usageMaximum.jsValue()
        object[Strings.reportSize] = reportSize.jsValue()
        object[Strings.reportCount] = reportCount.jsValue()
        object[Strings.unitExponent] = unitExponent.jsValue()
        object[Strings.unitSystem] = unitSystem.jsValue()
        object[Strings.unitFactorLengthExponent] = unitFactorLengthExponent.jsValue()
        object[Strings.unitFactorMassExponent] = unitFactorMassExponent.jsValue()
        object[Strings.unitFactorTimeExponent] = unitFactorTimeExponent.jsValue()
        object[Strings.unitFactorTemperatureExponent] = unitFactorTemperatureExponent.jsValue()
        object[Strings.unitFactorCurrentExponent] = unitFactorCurrentExponent.jsValue()
        object[Strings.unitFactorLuminousIntensityExponent] = unitFactorLuminousIntensityExponent.jsValue()
        object[Strings.logicalMinimum] = logicalMinimum.jsValue()
        object[Strings.logicalMaximum] = logicalMaximum.jsValue()
        object[Strings.physicalMinimum] = physicalMinimum.jsValue()
        object[Strings.physicalMaximum] = physicalMaximum.jsValue()
        object[Strings.strings] = strings.jsValue()
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _isAbsolute = ReadWriteAttribute(jsObject: object, name: Strings.isAbsolute)
        _isArray = ReadWriteAttribute(jsObject: object, name: Strings.isArray)
        _isBufferedBytes = ReadWriteAttribute(jsObject: object, name: Strings.isBufferedBytes)
        _isConstant = ReadWriteAttribute(jsObject: object, name: Strings.isConstant)
        _isLinear = ReadWriteAttribute(jsObject: object, name: Strings.isLinear)
        _isRange = ReadWriteAttribute(jsObject: object, name: Strings.isRange)
        _isVolatile = ReadWriteAttribute(jsObject: object, name: Strings.isVolatile)
        _hasNull = ReadWriteAttribute(jsObject: object, name: Strings.hasNull)
        _hasPreferredState = ReadWriteAttribute(jsObject: object, name: Strings.hasPreferredState)
        _wrap = ReadWriteAttribute(jsObject: object, name: Strings.wrap)
        _usages = ReadWriteAttribute(jsObject: object, name: Strings.usages)
        _usageMinimum = ReadWriteAttribute(jsObject: object, name: Strings.usageMinimum)
        _usageMaximum = ReadWriteAttribute(jsObject: object, name: Strings.usageMaximum)
        _reportSize = ReadWriteAttribute(jsObject: object, name: Strings.reportSize)
        _reportCount = ReadWriteAttribute(jsObject: object, name: Strings.reportCount)
        _unitExponent = ReadWriteAttribute(jsObject: object, name: Strings.unitExponent)
        _unitSystem = ReadWriteAttribute(jsObject: object, name: Strings.unitSystem)
        _unitFactorLengthExponent = ReadWriteAttribute(jsObject: object, name: Strings.unitFactorLengthExponent)
        _unitFactorMassExponent = ReadWriteAttribute(jsObject: object, name: Strings.unitFactorMassExponent)
        _unitFactorTimeExponent = ReadWriteAttribute(jsObject: object, name: Strings.unitFactorTimeExponent)
        _unitFactorTemperatureExponent = ReadWriteAttribute(jsObject: object, name: Strings.unitFactorTemperatureExponent)
        _unitFactorCurrentExponent = ReadWriteAttribute(jsObject: object, name: Strings.unitFactorCurrentExponent)
        _unitFactorLuminousIntensityExponent = ReadWriteAttribute(jsObject: object, name: Strings.unitFactorLuminousIntensityExponent)
        _logicalMinimum = ReadWriteAttribute(jsObject: object, name: Strings.logicalMinimum)
        _logicalMaximum = ReadWriteAttribute(jsObject: object, name: Strings.logicalMaximum)
        _physicalMinimum = ReadWriteAttribute(jsObject: object, name: Strings.physicalMinimum)
        _physicalMaximum = ReadWriteAttribute(jsObject: object, name: Strings.physicalMaximum)
        _strings = ReadWriteAttribute(jsObject: object, name: Strings.strings)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var isAbsolute: Bool

    @ReadWriteAttribute
    public var isArray: Bool

    @ReadWriteAttribute
    public var isBufferedBytes: Bool

    @ReadWriteAttribute
    public var isConstant: Bool

    @ReadWriteAttribute
    public var isLinear: Bool

    @ReadWriteAttribute
    public var isRange: Bool

    @ReadWriteAttribute
    public var isVolatile: Bool

    @ReadWriteAttribute
    public var hasNull: Bool

    @ReadWriteAttribute
    public var hasPreferredState: Bool

    @ReadWriteAttribute
    public var wrap: Bool

    @ReadWriteAttribute
    public var usages: [UInt32]

    @ReadWriteAttribute
    public var usageMinimum: UInt32

    @ReadWriteAttribute
    public var usageMaximum: UInt32

    @ReadWriteAttribute
    public var reportSize: UInt16

    @ReadWriteAttribute
    public var reportCount: UInt16

    @ReadWriteAttribute
    public var unitExponent: Int8

    @ReadWriteAttribute
    public var unitSystem: HIDUnitSystem

    @ReadWriteAttribute
    public var unitFactorLengthExponent: Int8

    @ReadWriteAttribute
    public var unitFactorMassExponent: Int8

    @ReadWriteAttribute
    public var unitFactorTimeExponent: Int8

    @ReadWriteAttribute
    public var unitFactorTemperatureExponent: Int8

    @ReadWriteAttribute
    public var unitFactorCurrentExponent: Int8

    @ReadWriteAttribute
    public var unitFactorLuminousIntensityExponent: Int8

    @ReadWriteAttribute
    public var logicalMinimum: Int32

    @ReadWriteAttribute
    public var logicalMaximum: Int32

    @ReadWriteAttribute
    public var physicalMinimum: Int32

    @ReadWriteAttribute
    public var physicalMaximum: Int32

    @ReadWriteAttribute
    public var strings: [String]
}
