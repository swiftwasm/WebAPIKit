// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class Selection: JSBridgedClass {
    @inlinable public class var constructor: JSFunction { JSObject.global[Strings.Selection].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _anchorNode = ReadonlyAttribute(jsObject: jsObject, name: Strings.anchorNode)
        _anchorOffset = ReadonlyAttribute(jsObject: jsObject, name: Strings.anchorOffset)
        _focusNode = ReadonlyAttribute(jsObject: jsObject, name: Strings.focusNode)
        _focusOffset = ReadonlyAttribute(jsObject: jsObject, name: Strings.focusOffset)
        _isCollapsed = ReadonlyAttribute(jsObject: jsObject, name: Strings.isCollapsed)
        _rangeCount = ReadonlyAttribute(jsObject: jsObject, name: Strings.rangeCount)
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var anchorNode: Node?

    @ReadonlyAttribute
    public var anchorOffset: UInt32

    @ReadonlyAttribute
    public var focusNode: Node?

    @ReadonlyAttribute
    public var focusOffset: UInt32

    @ReadonlyAttribute
    public var isCollapsed: Bool

    @ReadonlyAttribute
    public var rangeCount: UInt32

    @ReadonlyAttribute
    public var type: String

    @inlinable public func getRangeAt(index: UInt32) -> Range {
        let this = jsObject
        return this[Strings.getRangeAt].function!(this: this, arguments: [index.jsValue()]).fromJSValue()!
    }

    @inlinable public func addRange(range: Range) {
        let this = jsObject
        _ = this[Strings.addRange].function!(this: this, arguments: [range.jsValue()])
    }

    @inlinable public func removeRange(range: Range) {
        let this = jsObject
        _ = this[Strings.removeRange].function!(this: this, arguments: [range.jsValue()])
    }

    @inlinable public func removeAllRanges() {
        let this = jsObject
        _ = this[Strings.removeAllRanges].function!(this: this, arguments: [])
    }

    @inlinable public func empty() {
        let this = jsObject
        _ = this[Strings.empty].function!(this: this, arguments: [])
    }

    @inlinable public func collapse(node: Node?, offset: UInt32? = nil) {
        let this = jsObject
        _ = this[Strings.collapse].function!(this: this, arguments: [node.jsValue(), offset?.jsValue() ?? .undefined])
    }

    @inlinable public func setPosition(node: Node?, offset: UInt32? = nil) {
        let this = jsObject
        _ = this[Strings.setPosition].function!(this: this, arguments: [node.jsValue(), offset?.jsValue() ?? .undefined])
    }

    @inlinable public func collapseToStart() {
        let this = jsObject
        _ = this[Strings.collapseToStart].function!(this: this, arguments: [])
    }

    @inlinable public func collapseToEnd() {
        let this = jsObject
        _ = this[Strings.collapseToEnd].function!(this: this, arguments: [])
    }

    @inlinable public func extend(node: Node, offset: UInt32? = nil) {
        let this = jsObject
        _ = this[Strings.extend].function!(this: this, arguments: [node.jsValue(), offset?.jsValue() ?? .undefined])
    }

    @inlinable public func setBaseAndExtent(anchorNode: Node, anchorOffset: UInt32, focusNode: Node, focusOffset: UInt32) {
        let this = jsObject
        _ = this[Strings.setBaseAndExtent].function!(this: this, arguments: [anchorNode.jsValue(), anchorOffset.jsValue(), focusNode.jsValue(), focusOffset.jsValue()])
    }

    @inlinable public func selectAllChildren(node: Node) {
        let this = jsObject
        _ = this[Strings.selectAllChildren].function!(this: this, arguments: [node.jsValue()])
    }

    @inlinable public func deleteFromDocument() {
        let this = jsObject
        _ = this[Strings.deleteFromDocument].function!(this: this, arguments: [])
    }

    @inlinable public func containsNode(node: Node, allowPartialContainment: Bool? = nil) -> Bool {
        let this = jsObject
        return this[Strings.containsNode].function!(this: this, arguments: [node.jsValue(), allowPartialContainment?.jsValue() ?? .undefined]).fromJSValue()!
    }

    @inlinable public var description: String {
        jsObject[Strings.toString]!().fromJSValue()!
    }
}
