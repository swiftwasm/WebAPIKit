// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class KeyboardEventInit: BridgedDictionary {
    private enum Keys {
        static let charCode: JSString = "charCode"
        static let code: JSString = "code"
        static let isComposing: JSString = "isComposing"
        static let key: JSString = "key"
        static let keyCode: JSString = "keyCode"
        static let location: JSString = "location"
        static let `repeat`: JSString = "repeat"
    }

    public convenience init(key: String, code: String, location: UInt32, repeat: Bool, isComposing: Bool, charCode: UInt32, keyCode: UInt32) {
        let object = JSObject.global.Object.function!.new()
        object[Keys.key] = key.jsValue()
        object[Keys.code] = code.jsValue()
        object[Keys.location] = location.jsValue()
        object[Keys.repeat] = `repeat`.jsValue()
        object[Keys.isComposing] = isComposing.jsValue()
        object[Keys.charCode] = charCode.jsValue()
        object[Keys.keyCode] = keyCode.jsValue()
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _key = ReadWriteAttribute(jsObject: object, name: Keys.key)
        _code = ReadWriteAttribute(jsObject: object, name: Keys.code)
        _location = ReadWriteAttribute(jsObject: object, name: Keys.location)
        _repeat = ReadWriteAttribute(jsObject: object, name: Keys.repeat)
        _isComposing = ReadWriteAttribute(jsObject: object, name: Keys.isComposing)
        _charCode = ReadWriteAttribute(jsObject: object, name: Keys.charCode)
        _keyCode = ReadWriteAttribute(jsObject: object, name: Keys.keyCode)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var key: String

    @ReadWriteAttribute
    public var code: String

    @ReadWriteAttribute
    public var location: UInt32

    @ReadWriteAttribute
    public var `repeat`: Bool

    @ReadWriteAttribute
    public var isComposing: Bool

    @ReadWriteAttribute
    public var charCode: UInt32

    @ReadWriteAttribute
    public var keyCode: UInt32
}
