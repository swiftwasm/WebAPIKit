// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class ImageDecoder: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global[Strings.ImageDecoder].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _complete = ReadonlyAttribute(jsObject: jsObject, name: Strings.complete)
        _completed = ReadonlyAttribute(jsObject: jsObject, name: Strings.completed)
        _tracks = ReadonlyAttribute(jsObject: jsObject, name: Strings.tracks)
        self.jsObject = jsObject
    }

    public convenience init(init: ImageDecoderInit) {
        self.init(unsafelyWrapping: Self.constructor.new(`init`.jsValue()))
    }

    @ReadonlyAttribute
    public var type: String

    @ReadonlyAttribute
    public var complete: Bool

    @ReadonlyAttribute
    public var completed: JSPromise

    @ReadonlyAttribute
    public var tracks: ImageTrackList

    public func decode(options: ImageDecodeOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.decode].function!(this: this, arguments: [options?.jsValue() ?? .undefined]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func decode(options: ImageDecodeOptions? = nil) async throws -> ImageDecodeResult {
        let this = jsObject
        let _promise: JSPromise = this[Strings.decode].function!(this: this, arguments: [options?.jsValue() ?? .undefined]).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func reset() {
        let this = jsObject
        _ = this[Strings.reset].function!(this: this, arguments: [])
    }

    public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    public static func isTypeSupported(type: String) -> JSPromise {
        let this = constructor
        return this[Strings.isTypeSupported].function!(this: this, arguments: [type.jsValue()]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public static func isTypeSupported(type: String) async throws -> Bool {
        let this = constructor
        let _promise: JSPromise = this[Strings.isTypeSupported].function!(this: this, arguments: [type.jsValue()]).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }
}
