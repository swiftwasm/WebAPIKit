// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class CSSStyleDeclaration: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global.CSSStyleDeclaration.function! }

    private enum Keys {
        static let cssFloat: JSString = "cssFloat"
        static let cssText: JSString = "cssText"
        static let getPropertyPriority: JSString = "getPropertyPriority"
        static let getPropertyValue: JSString = "getPropertyValue"
        static let item: JSString = "item"
        static let length: JSString = "length"
        static let parentRule: JSString = "parentRule"
        static let removeProperty: JSString = "removeProperty"
        static let setProperty: JSString = "setProperty"
    }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _cssText = ReadWriteAttribute(jsObject: jsObject, name: Keys.cssText)
        _length = ReadonlyAttribute(jsObject: jsObject, name: Keys.length)
        _parentRule = ReadonlyAttribute(jsObject: jsObject, name: Keys.parentRule)
        _cssFloat = ReadWriteAttribute(jsObject: jsObject, name: Keys.cssFloat)
        self.jsObject = jsObject
    }

    @ReadWriteAttribute
    public var cssText: String

    @ReadonlyAttribute
    public var length: UInt32

    public subscript(key: Int) -> String {
        jsObject[key].fromJSValue()!
    }

    public func getPropertyValue(property: String) -> String {
        jsObject[Keys.getPropertyValue]!(property.jsValue()).fromJSValue()!
    }

    public func getPropertyPriority(property: String) -> String {
        jsObject[Keys.getPropertyPriority]!(property.jsValue()).fromJSValue()!
    }

    public func setProperty(property: String, value: String, priority: String? = nil) {
        _ = jsObject[Keys.setProperty]!(property.jsValue(), value.jsValue(), priority?.jsValue() ?? .undefined)
    }

    public func removeProperty(property: String) -> String {
        jsObject[Keys.removeProperty]!(property.jsValue()).fromJSValue()!
    }

    @ReadonlyAttribute
    public var parentRule: CSSRule?

    @ReadWriteAttribute
    public var cssFloat: String
}
