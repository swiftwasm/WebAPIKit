// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class SVGSVGElement: SVGGraphicsElement, SVGFitToViewBox, WindowEventHandlers {
    override public class var constructor: JSFunction { JSObject.global[Strings.SVGSVGElement].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _x = ReadonlyAttribute(jsObject: jsObject, name: Strings.x)
        _y = ReadonlyAttribute(jsObject: jsObject, name: Strings.y)
        _width = ReadonlyAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadonlyAttribute(jsObject: jsObject, name: Strings.height)
        _currentScale = ReadWriteAttribute(jsObject: jsObject, name: Strings.currentScale)
        _currentTranslate = ReadonlyAttribute(jsObject: jsObject, name: Strings.currentTranslate)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var x: SVGAnimatedLength

    @ReadonlyAttribute
    public var y: SVGAnimatedLength

    @ReadonlyAttribute
    public var width: SVGAnimatedLength

    @ReadonlyAttribute
    public var height: SVGAnimatedLength

    @ReadWriteAttribute
    public var currentScale: Float

    @ReadonlyAttribute
    public var currentTranslate: DOMPointReadOnly

    public func getIntersectionList(rect: DOMRectReadOnly, referenceElement: SVGElement?) -> NodeList {
        jsObject[Strings.getIntersectionList]!(rect.jsValue(), referenceElement.jsValue()).fromJSValue()!
    }

    public func getEnclosureList(rect: DOMRectReadOnly, referenceElement: SVGElement?) -> NodeList {
        jsObject[Strings.getEnclosureList]!(rect.jsValue(), referenceElement.jsValue()).fromJSValue()!
    }

    public func checkIntersection(element: SVGElement, rect: DOMRectReadOnly) -> Bool {
        jsObject[Strings.checkIntersection]!(element.jsValue(), rect.jsValue()).fromJSValue()!
    }

    public func checkEnclosure(element: SVGElement, rect: DOMRectReadOnly) -> Bool {
        jsObject[Strings.checkEnclosure]!(element.jsValue(), rect.jsValue()).fromJSValue()!
    }

    public func deselectAll() {
        _ = jsObject[Strings.deselectAll]!()
    }

    public func createSVGNumber() -> SVGNumber {
        jsObject[Strings.createSVGNumber]!().fromJSValue()!
    }

    public func createSVGLength() -> SVGLength {
        jsObject[Strings.createSVGLength]!().fromJSValue()!
    }

    public func createSVGAngle() -> SVGAngle {
        jsObject[Strings.createSVGAngle]!().fromJSValue()!
    }

    public func createSVGPoint() -> DOMPoint {
        jsObject[Strings.createSVGPoint]!().fromJSValue()!
    }

    public func createSVGMatrix() -> DOMMatrix {
        jsObject[Strings.createSVGMatrix]!().fromJSValue()!
    }

    public func createSVGRect() -> DOMRect {
        jsObject[Strings.createSVGRect]!().fromJSValue()!
    }

    public func createSVGTransform() -> SVGTransform {
        jsObject[Strings.createSVGTransform]!().fromJSValue()!
    }

    public func createSVGTransformFromMatrix(matrix: DOMMatrix2DInit? = nil) -> SVGTransform {
        jsObject[Strings.createSVGTransformFromMatrix]!(matrix?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func getElementById(elementId: String) -> Element {
        jsObject[Strings.getElementById]!(elementId.jsValue()).fromJSValue()!
    }

    public func suspendRedraw(maxWaitMilliseconds: UInt32) -> UInt32 {
        jsObject[Strings.suspendRedraw]!(maxWaitMilliseconds.jsValue()).fromJSValue()!
    }

    public func unsuspendRedraw(suspendHandleID: UInt32) {
        _ = jsObject[Strings.unsuspendRedraw]!(suspendHandleID.jsValue())
    }

    public func unsuspendRedrawAll() {
        _ = jsObject[Strings.unsuspendRedrawAll]!()
    }

    public func forceRedraw() {
        _ = jsObject[Strings.forceRedraw]!()
    }

    public func pauseAnimations() {
        _ = jsObject[Strings.pauseAnimations]!()
    }

    public func unpauseAnimations() {
        _ = jsObject[Strings.unpauseAnimations]!()
    }

    public func animationsPaused() -> Bool {
        jsObject[Strings.animationsPaused]!().fromJSValue()!
    }

    public func getCurrentTime() -> Float {
        jsObject[Strings.getCurrentTime]!().fromJSValue()!
    }

    public func setCurrentTime(seconds: Float) {
        _ = jsObject[Strings.setCurrentTime]!(seconds.jsValue())
    }
}
