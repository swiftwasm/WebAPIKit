// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class XPathResult: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global.XPathResult.function! }

    private enum Keys {
        static let ANY_TYPE: JSString = "ANY_TYPE"
        static let ANY_UNORDERED_NODE_TYPE: JSString = "ANY_UNORDERED_NODE_TYPE"
        static let BOOLEAN_TYPE: JSString = "BOOLEAN_TYPE"
        static let FIRST_ORDERED_NODE_TYPE: JSString = "FIRST_ORDERED_NODE_TYPE"
        static let NUMBER_TYPE: JSString = "NUMBER_TYPE"
        static let ORDERED_NODE_ITERATOR_TYPE: JSString = "ORDERED_NODE_ITERATOR_TYPE"
        static let ORDERED_NODE_SNAPSHOT_TYPE: JSString = "ORDERED_NODE_SNAPSHOT_TYPE"
        static let STRING_TYPE: JSString = "STRING_TYPE"
        static let UNORDERED_NODE_ITERATOR_TYPE: JSString = "UNORDERED_NODE_ITERATOR_TYPE"
        static let UNORDERED_NODE_SNAPSHOT_TYPE: JSString = "UNORDERED_NODE_SNAPSHOT_TYPE"
        static let booleanValue: JSString = "booleanValue"
        static let invalidIteratorState: JSString = "invalidIteratorState"
        static let iterateNext: JSString = "iterateNext"
        static let numberValue: JSString = "numberValue"
        static let resultType: JSString = "resultType"
        static let singleNodeValue: JSString = "singleNodeValue"
        static let snapshotItem: JSString = "snapshotItem"
        static let snapshotLength: JSString = "snapshotLength"
        static let stringValue: JSString = "stringValue"
    }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _resultType = ReadonlyAttribute(jsObject: jsObject, name: Keys.resultType)
        _numberValue = ReadonlyAttribute(jsObject: jsObject, name: Keys.numberValue)
        _stringValue = ReadonlyAttribute(jsObject: jsObject, name: Keys.stringValue)
        _booleanValue = ReadonlyAttribute(jsObject: jsObject, name: Keys.booleanValue)
        _singleNodeValue = ReadonlyAttribute(jsObject: jsObject, name: Keys.singleNodeValue)
        _invalidIteratorState = ReadonlyAttribute(jsObject: jsObject, name: Keys.invalidIteratorState)
        _snapshotLength = ReadonlyAttribute(jsObject: jsObject, name: Keys.snapshotLength)
        self.jsObject = jsObject
    }

    public static let ANY_TYPE: UInt16 = 0

    public static let NUMBER_TYPE: UInt16 = 1

    public static let STRING_TYPE: UInt16 = 2

    public static let BOOLEAN_TYPE: UInt16 = 3

    public static let UNORDERED_NODE_ITERATOR_TYPE: UInt16 = 4

    public static let ORDERED_NODE_ITERATOR_TYPE: UInt16 = 5

    public static let UNORDERED_NODE_SNAPSHOT_TYPE: UInt16 = 6

    public static let ORDERED_NODE_SNAPSHOT_TYPE: UInt16 = 7

    public static let ANY_UNORDERED_NODE_TYPE: UInt16 = 8

    public static let FIRST_ORDERED_NODE_TYPE: UInt16 = 9

    @ReadonlyAttribute
    public var resultType: UInt16

    @ReadonlyAttribute
    public var numberValue: Double

    @ReadonlyAttribute
    public var stringValue: String

    @ReadonlyAttribute
    public var booleanValue: Bool

    @ReadonlyAttribute
    public var singleNodeValue: Node?

    @ReadonlyAttribute
    public var invalidIteratorState: Bool

    @ReadonlyAttribute
    public var snapshotLength: UInt32

    public func iterateNext() -> Node? {
        jsObject[Keys.iterateNext]!().fromJSValue()!
    }

    public func snapshotItem(index: UInt32) -> Node? {
        jsObject[Keys.snapshotItem]!(index.jsValue()).fromJSValue()!
    }
}
