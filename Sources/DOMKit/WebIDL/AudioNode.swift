// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class AudioNode: EventTarget {
    override public class var constructor: JSFunction { JSObject.global[Strings.AudioNode].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _context = ReadonlyAttribute(jsObject: jsObject, name: Strings.context)
        _numberOfInputs = ReadonlyAttribute(jsObject: jsObject, name: Strings.numberOfInputs)
        _numberOfOutputs = ReadonlyAttribute(jsObject: jsObject, name: Strings.numberOfOutputs)
        _channelCount = ReadWriteAttribute(jsObject: jsObject, name: Strings.channelCount)
        _channelCountMode = ReadWriteAttribute(jsObject: jsObject, name: Strings.channelCountMode)
        _channelInterpretation = ReadWriteAttribute(jsObject: jsObject, name: Strings.channelInterpretation)
        super.init(unsafelyWrapping: jsObject)
    }

    public func connect(destinationNode: AudioNode, output: UInt32? = nil, input: UInt32? = nil) -> Self {
        jsObject[Strings.connect]!(destinationNode.jsValue(), output?.jsValue() ?? .undefined, input?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func connect(destinationParam: AudioParam, output: UInt32? = nil) {
        _ = jsObject[Strings.connect]!(destinationParam.jsValue(), output?.jsValue() ?? .undefined)
    }

    public func disconnect() {
        _ = jsObject[Strings.disconnect]!()
    }

    public func disconnect(output: UInt32) {
        _ = jsObject[Strings.disconnect]!(output.jsValue())
    }

    public func disconnect(destinationNode: AudioNode) {
        _ = jsObject[Strings.disconnect]!(destinationNode.jsValue())
    }

    public func disconnect(destinationNode: AudioNode, output: UInt32) {
        _ = jsObject[Strings.disconnect]!(destinationNode.jsValue(), output.jsValue())
    }

    public func disconnect(destinationNode: AudioNode, output: UInt32, input: UInt32) {
        _ = jsObject[Strings.disconnect]!(destinationNode.jsValue(), output.jsValue(), input.jsValue())
    }

    public func disconnect(destinationParam: AudioParam) {
        _ = jsObject[Strings.disconnect]!(destinationParam.jsValue())
    }

    public func disconnect(destinationParam: AudioParam, output: UInt32) {
        _ = jsObject[Strings.disconnect]!(destinationParam.jsValue(), output.jsValue())
    }

    @ReadonlyAttribute
    public var context: BaseAudioContext

    @ReadonlyAttribute
    public var numberOfInputs: UInt32

    @ReadonlyAttribute
    public var numberOfOutputs: UInt32

    @ReadWriteAttribute
    public var channelCount: UInt32

    @ReadWriteAttribute
    public var channelCountMode: ChannelCountMode

    @ReadWriteAttribute
    public var channelInterpretation: ChannelInterpretation
}
