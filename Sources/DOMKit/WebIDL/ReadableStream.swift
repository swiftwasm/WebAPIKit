// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class ReadableStream: JSBridgedClass, AsyncSequence {
    public class var constructor: JSFunction { JSObject.global.ReadableStream.function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _locked = ReadonlyAttribute(jsObject: jsObject, name: Strings.locked)
        self.jsObject = jsObject
    }

    public convenience init(underlyingSource: JSObject? = nil, strategy: QueuingStrategy? = nil) {
        self.init(unsafelyWrapping: Self.constructor.new(underlyingSource?.jsValue() ?? .undefined, strategy?.jsValue() ?? .undefined))
    }

    @ReadonlyAttribute
    public var locked: Bool

    public func cancel(reason: JSValue? = nil) -> JSPromise {
        jsObject[Strings.cancel]!(reason?.jsValue() ?? .undefined).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func cancel(reason: JSValue? = nil) async throws {
        let _promise: JSPromise = jsObject[Strings.cancel]!(reason?.jsValue() ?? .undefined).fromJSValue()!
        _ = try await _promise.get()
    }

    public func getReader(options: ReadableStreamGetReaderOptions? = nil) -> ReadableStreamReader {
        jsObject[Strings.getReader]!(options?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func pipeThrough(transform: ReadableWritablePair, options: StreamPipeOptions? = nil) -> Self {
        jsObject[Strings.pipeThrough]!(transform.jsValue(), options?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func pipeTo(destination: WritableStream, options: StreamPipeOptions? = nil) -> JSPromise {
        jsObject[Strings.pipeTo]!(destination.jsValue(), options?.jsValue() ?? .undefined).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func pipeTo(destination: WritableStream, options: StreamPipeOptions? = nil) async throws {
        let _promise: JSPromise = jsObject[Strings.pipeTo]!(destination.jsValue(), options?.jsValue() ?? .undefined).fromJSValue()!
        _ = try await _promise.get()
    }

    public func tee() -> [ReadableStream] {
        jsObject[Strings.tee]!().fromJSValue()!
    }

    public typealias Element = JSValue
    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func makeAsyncIterator() -> ValueIterableAsyncIterator<ReadableStream> {
        ValueIterableAsyncIterator(sequence: self)
    }
}
