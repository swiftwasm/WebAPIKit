// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class XRWebGLBinding: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global[Strings.XRWebGLBinding].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _nativeProjectionScaleFactor = ReadonlyAttribute(jsObject: jsObject, name: Strings.nativeProjectionScaleFactor)
        _usesDepthValues = ReadonlyAttribute(jsObject: jsObject, name: Strings.usesDepthValues)
        self.jsObject = jsObject
    }

    public convenience init(session: XRSession, context: XRWebGLRenderingContext) {
        self.init(unsafelyWrapping: Self.constructor.new(session.jsValue(), context.jsValue()))
    }

    @ReadonlyAttribute
    public var nativeProjectionScaleFactor: Double

    @ReadonlyAttribute
    public var usesDepthValues: Bool

    public func createProjectionLayer(init: XRProjectionLayerInit? = nil) -> XRProjectionLayer {
        jsObject[Strings.createProjectionLayer]!(`init`?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createQuadLayer(init: XRQuadLayerInit? = nil) -> XRQuadLayer {
        jsObject[Strings.createQuadLayer]!(`init`?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createCylinderLayer(init: XRCylinderLayerInit? = nil) -> XRCylinderLayer {
        jsObject[Strings.createCylinderLayer]!(`init`?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createEquirectLayer(init: XREquirectLayerInit? = nil) -> XREquirectLayer {
        jsObject[Strings.createEquirectLayer]!(`init`?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createCubeLayer(init: XRCubeLayerInit? = nil) -> XRCubeLayer {
        jsObject[Strings.createCubeLayer]!(`init`?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func getSubImage(layer: XRCompositionLayer, frame: XRFrame, eye: XREye? = nil) -> XRWebGLSubImage {
        jsObject[Strings.getSubImage]!(layer.jsValue(), frame.jsValue(), eye?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func getViewSubImage(layer: XRProjectionLayer, view: XRView) -> XRWebGLSubImage {
        jsObject[Strings.getViewSubImage]!(layer.jsValue(), view.jsValue()).fromJSValue()!
    }

    public func getDepthInformation(view: XRView) -> XRWebGLDepthInformation? {
        jsObject[Strings.getDepthInformation]!(view.jsValue()).fromJSValue()!
    }

    public func getReflectionCubeMap(lightProbe: XRLightProbe) -> WebGLTexture? {
        jsObject[Strings.getReflectionCubeMap]!(lightProbe.jsValue()).fromJSValue()!
    }
}
