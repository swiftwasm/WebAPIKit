// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class Document: Node, NonElementParentNode, DocumentOrShadowRoot, ParentNode, XPathEvaluatorBase, GlobalEventHandlers, DocumentAndElementEventHandlers {
    override public class var constructor: JSFunction { JSObject.global.Document.function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _implementation = ReadonlyAttribute(jsObject: jsObject, name: "implementation")
        _URL = ReadonlyAttribute(jsObject: jsObject, name: "URL")
        _documentURI = ReadonlyAttribute(jsObject: jsObject, name: "documentURI")
        _compatMode = ReadonlyAttribute(jsObject: jsObject, name: "compatMode")
        _characterSet = ReadonlyAttribute(jsObject: jsObject, name: "characterSet")
        _charset = ReadonlyAttribute(jsObject: jsObject, name: "charset")
        _inputEncoding = ReadonlyAttribute(jsObject: jsObject, name: "inputEncoding")
        _contentType = ReadonlyAttribute(jsObject: jsObject, name: "contentType")
        _doctype = ReadonlyAttribute(jsObject: jsObject, name: "doctype")
        _documentElement = ReadonlyAttribute(jsObject: jsObject, name: "documentElement")
        _location = ReadonlyAttribute(jsObject: jsObject, name: "location")
        _domain = ReadWriteAttribute(jsObject: jsObject, name: "domain")
        _referrer = ReadonlyAttribute(jsObject: jsObject, name: "referrer")
        _cookie = ReadWriteAttribute(jsObject: jsObject, name: "cookie")
        _lastModified = ReadonlyAttribute(jsObject: jsObject, name: "lastModified")
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: "readyState")
        _title = ReadWriteAttribute(jsObject: jsObject, name: "title")
        _dir = ReadWriteAttribute(jsObject: jsObject, name: "dir")
        _body = ReadWriteAttribute(jsObject: jsObject, name: "body")
        _head = ReadonlyAttribute(jsObject: jsObject, name: "head")
        _images = ReadonlyAttribute(jsObject: jsObject, name: "images")
        _embeds = ReadonlyAttribute(jsObject: jsObject, name: "embeds")
        _plugins = ReadonlyAttribute(jsObject: jsObject, name: "plugins")
        _links = ReadonlyAttribute(jsObject: jsObject, name: "links")
        _forms = ReadonlyAttribute(jsObject: jsObject, name: "forms")
        _scripts = ReadonlyAttribute(jsObject: jsObject, name: "scripts")
        _currentScript = ReadonlyAttribute(jsObject: jsObject, name: "currentScript")
        _defaultView = ReadonlyAttribute(jsObject: jsObject, name: "defaultView")
        _designMode = ReadWriteAttribute(jsObject: jsObject, name: "designMode")
        _hidden = ReadonlyAttribute(jsObject: jsObject, name: "hidden")
        _visibilityState = ReadonlyAttribute(jsObject: jsObject, name: "visibilityState")
        _onreadystatechange = ClosureAttribute.Optional1(jsObject: jsObject, name: "onreadystatechange")
        _onvisibilitychange = ClosureAttribute.Optional1(jsObject: jsObject, name: "onvisibilitychange")
        _fgColor = ReadWriteAttribute(jsObject: jsObject, name: "fgColor")
        _linkColor = ReadWriteAttribute(jsObject: jsObject, name: "linkColor")
        _vlinkColor = ReadWriteAttribute(jsObject: jsObject, name: "vlinkColor")
        _alinkColor = ReadWriteAttribute(jsObject: jsObject, name: "alinkColor")
        _bgColor = ReadWriteAttribute(jsObject: jsObject, name: "bgColor")
        _anchors = ReadonlyAttribute(jsObject: jsObject, name: "anchors")
        _applets = ReadonlyAttribute(jsObject: jsObject, name: "applets")
        _all = ReadonlyAttribute(jsObject: jsObject, name: "all")
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    @ReadonlyAttribute
    public var implementation: DOMImplementation

    @ReadonlyAttribute
    public var URL: String

    @ReadonlyAttribute
    public var documentURI: String

    @ReadonlyAttribute
    public var compatMode: String

    @ReadonlyAttribute
    public var characterSet: String

    @ReadonlyAttribute
    public var charset: String

    @ReadonlyAttribute
    public var inputEncoding: String

    @ReadonlyAttribute
    public var contentType: String

    @ReadonlyAttribute
    public var doctype: DocumentType?

    @ReadonlyAttribute
    public var documentElement: Element?

    public func getElementsByTagName(qualifiedName: String) -> HTMLCollection {
        jsObject["getElementsByTagName"]!(qualifiedName.jsValue()).fromJSValue()!
    }

    public func getElementsByTagNameNS(namespace: String?, localName: String) -> HTMLCollection {
        jsObject["getElementsByTagNameNS"]!(namespace.jsValue(), localName.jsValue()).fromJSValue()!
    }

    public func getElementsByClassName(classNames: String) -> HTMLCollection {
        jsObject["getElementsByClassName"]!(classNames.jsValue()).fromJSValue()!
    }

    public func createElement(localName: String, options: __UNSUPPORTED_UNION__? = nil) -> Element {
        jsObject["createElement"]!(localName.jsValue(), options?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createElementNS(namespace: String?, qualifiedName: String, options: __UNSUPPORTED_UNION__? = nil) -> Element {
        jsObject["createElementNS"]!(namespace.jsValue(), qualifiedName.jsValue(), options?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createDocumentFragment() -> DocumentFragment {
        jsObject["createDocumentFragment"]!().fromJSValue()!
    }

    public func createTextNode(data: String) -> Text {
        jsObject["createTextNode"]!(data.jsValue()).fromJSValue()!
    }

    public func createCDATASection(data: String) -> CDATASection {
        jsObject["createCDATASection"]!(data.jsValue()).fromJSValue()!
    }

    public func createComment(data: String) -> Comment {
        jsObject["createComment"]!(data.jsValue()).fromJSValue()!
    }

    public func createProcessingInstruction(target: String, data: String) -> ProcessingInstruction {
        jsObject["createProcessingInstruction"]!(target.jsValue(), data.jsValue()).fromJSValue()!
    }

    public func importNode(node: Node, deep: Bool? = nil) -> Node {
        jsObject["importNode"]!(node.jsValue(), deep?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func adoptNode(node: Node) -> Node {
        jsObject["adoptNode"]!(node.jsValue()).fromJSValue()!
    }

    public func createAttribute(localName: String) -> Attr {
        jsObject["createAttribute"]!(localName.jsValue()).fromJSValue()!
    }

    public func createAttributeNS(namespace: String?, qualifiedName: String) -> Attr {
        jsObject["createAttributeNS"]!(namespace.jsValue(), qualifiedName.jsValue()).fromJSValue()!
    }

    public func createEvent(interface: String) -> Event {
        jsObject["createEvent"]!(interface.jsValue()).fromJSValue()!
    }

    public func createRange() -> Range {
        jsObject["createRange"]!().fromJSValue()!
    }

    // XXX: member 'createNodeIterator' is ignored

    // XXX: member 'createTreeWalker' is ignored

    @ReadonlyAttribute
    public var location: Location?

    @ReadWriteAttribute
    public var domain: String

    @ReadonlyAttribute
    public var referrer: String

    @ReadWriteAttribute
    public var cookie: String

    @ReadonlyAttribute
    public var lastModified: String

    @ReadonlyAttribute
    public var readyState: DocumentReadyState

    public subscript(key: String) -> JSObject {
        jsObject[key].fromJSValue()!
    }

    @ReadWriteAttribute
    public var title: String

    @ReadWriteAttribute
    public var dir: String

    @ReadWriteAttribute
    public var body: HTMLElement?

    @ReadonlyAttribute
    public var head: HTMLHeadElement?

    @ReadonlyAttribute
    public var images: HTMLCollection

    @ReadonlyAttribute
    public var embeds: HTMLCollection

    @ReadonlyAttribute
    public var plugins: HTMLCollection

    @ReadonlyAttribute
    public var links: HTMLCollection

    @ReadonlyAttribute
    public var forms: HTMLCollection

    @ReadonlyAttribute
    public var scripts: HTMLCollection

    public func getElementsByName(elementName: String) -> NodeList {
        jsObject["getElementsByName"]!(elementName.jsValue()).fromJSValue()!
    }

    @ReadonlyAttribute
    public var currentScript: HTMLOrSVGScriptElement?

    public func open(unused1: String? = nil, unused2: String? = nil) -> Self {
        jsObject["open"]!(unused1?.jsValue() ?? .undefined, unused2?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func open(url: String, name: String, features: String) -> WindowProxy? {
        jsObject["open"]!(url.jsValue(), name.jsValue(), features.jsValue()).fromJSValue()!
    }

    public func close() {
        _ = jsObject["close"]!()
    }

    public func write(text: String...) {
        _ = jsObject["write"]!(text.jsValue())
    }

    public func writeln(text: String...) {
        _ = jsObject["writeln"]!(text.jsValue())
    }

    @ReadonlyAttribute
    public var defaultView: WindowProxy?

    public func hasFocus() -> Bool {
        jsObject["hasFocus"]!().fromJSValue()!
    }

    @ReadWriteAttribute
    public var designMode: String

    public func execCommand(commandId: String, showUI: Bool? = nil, value: String? = nil) -> Bool {
        jsObject["execCommand"]!(commandId.jsValue(), showUI?.jsValue() ?? .undefined, value?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func queryCommandEnabled(commandId: String) -> Bool {
        jsObject["queryCommandEnabled"]!(commandId.jsValue()).fromJSValue()!
    }

    public func queryCommandIndeterm(commandId: String) -> Bool {
        jsObject["queryCommandIndeterm"]!(commandId.jsValue()).fromJSValue()!
    }

    public func queryCommandState(commandId: String) -> Bool {
        jsObject["queryCommandState"]!(commandId.jsValue()).fromJSValue()!
    }

    public func queryCommandSupported(commandId: String) -> Bool {
        jsObject["queryCommandSupported"]!(commandId.jsValue()).fromJSValue()!
    }

    public func queryCommandValue(commandId: String) -> String {
        jsObject["queryCommandValue"]!(commandId.jsValue()).fromJSValue()!
    }

    @ReadonlyAttribute
    public var hidden: Bool

    @ReadonlyAttribute
    public var visibilityState: DocumentVisibilityState

    @ClosureAttribute.Optional1
    public var onreadystatechange: EventHandler

    @ClosureAttribute.Optional1
    public var onvisibilitychange: EventHandler

    @ReadWriteAttribute
    public var fgColor: String

    @ReadWriteAttribute
    public var linkColor: String

    @ReadWriteAttribute
    public var vlinkColor: String

    @ReadWriteAttribute
    public var alinkColor: String

    @ReadWriteAttribute
    public var bgColor: String

    @ReadonlyAttribute
    public var anchors: HTMLCollection

    @ReadonlyAttribute
    public var applets: HTMLCollection

    public func clear() {
        _ = jsObject["clear"]!()
    }

    public func captureEvents() {
        _ = jsObject["captureEvents"]!()
    }

    public func releaseEvents() {
        _ = jsObject["releaseEvents"]!()
    }

    @ReadonlyAttribute
    public var all: HTMLAllCollection
}
