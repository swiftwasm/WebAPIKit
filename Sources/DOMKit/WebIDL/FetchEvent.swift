// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class FetchEvent: ExtendableEvent {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.FetchEvent].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _request = ReadonlyAttribute(jsObject: jsObject, name: Strings.request)
        _preloadResponse = ReadonlyAttribute(jsObject: jsObject, name: Strings.preloadResponse)
        _clientId = ReadonlyAttribute(jsObject: jsObject, name: Strings.clientId)
        _resultingClientId = ReadonlyAttribute(jsObject: jsObject, name: Strings.resultingClientId)
        _replacesClientId = ReadonlyAttribute(jsObject: jsObject, name: Strings.replacesClientId)
        _handled = ReadonlyAttribute(jsObject: jsObject, name: Strings.handled)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: FetchEventInit) {
        self.init(unsafelyWrapping: Self.constructor.new(arguments: [type.jsValue(), eventInitDict.jsValue()]))
    }

    @ReadonlyAttribute
    public var request: Request

    @ReadonlyAttribute
    public var preloadResponse: JSPromise

    @ReadonlyAttribute
    public var clientId: String

    @ReadonlyAttribute
    public var resultingClientId: String

    @ReadonlyAttribute
    public var replacesClientId: String

    @ReadonlyAttribute
    public var handled: JSPromise

    @inlinable public func respondWith(r: JSPromise) {
        let this = jsObject
        _ = this[Strings.respondWith].function!(this: this, arguments: [r.jsValue()])
    }
}
