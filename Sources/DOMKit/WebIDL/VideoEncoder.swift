// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class VideoEncoder: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global[Strings.VideoEncoder].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _encodeQueueSize = ReadonlyAttribute(jsObject: jsObject, name: Strings.encodeQueueSize)
        self.jsObject = jsObject
    }

    public convenience init(init: VideoEncoderInit) {
        self.init(unsafelyWrapping: Self.constructor.new(`init`.jsValue()))
    }

    @ReadonlyAttribute
    public var state: CodecState

    @ReadonlyAttribute
    public var encodeQueueSize: UInt32

    public func configure(config: VideoEncoderConfig) {
        _ = jsObject[Strings.configure]!(config.jsValue())
    }

    public func encode(frame: VideoFrame, options: VideoEncoderEncodeOptions? = nil) {
        _ = jsObject[Strings.encode]!(frame.jsValue(), options?.jsValue() ?? .undefined)
    }

    public func flush() -> JSPromise {
        jsObject[Strings.flush]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func flush() async throws {
        let _promise: JSPromise = jsObject[Strings.flush]!().fromJSValue()!
        _ = try await _promise.get()
    }

    public func reset() {
        _ = jsObject[Strings.reset]!()
    }

    public func close() {
        _ = jsObject[Strings.close]!()
    }

    public static func isConfigSupported(config: VideoEncoderConfig) -> JSPromise {
        constructor[Strings.isConfigSupported]!(config.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public static func isConfigSupported(config: VideoEncoderConfig) async throws -> VideoEncoderSupport {
        let _promise: JSPromise = constructor[Strings.isConfigSupported]!(config.jsValue()).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }
}
