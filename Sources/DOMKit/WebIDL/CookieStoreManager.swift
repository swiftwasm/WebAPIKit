// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class CookieStoreManager: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global[Strings.CookieStoreManager].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    public func subscribe(subscriptions: [CookieStoreGetOptions]) -> JSPromise {
        jsObject[Strings.subscribe]!(subscriptions.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func subscribe(subscriptions: [CookieStoreGetOptions]) async throws {
        let _promise: JSPromise = jsObject[Strings.subscribe]!(subscriptions.jsValue()).fromJSValue()!
        _ = try await _promise.get()
    }

    public func getSubscriptions() -> JSPromise {
        jsObject[Strings.getSubscriptions]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func getSubscriptions() async throws -> [CookieStoreGetOptions] {
        let _promise: JSPromise = jsObject[Strings.getSubscriptions]!().fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func unsubscribe(subscriptions: [CookieStoreGetOptions]) -> JSPromise {
        jsObject[Strings.unsubscribe]!(subscriptions.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func unsubscribe(subscriptions: [CookieStoreGetOptions]) async throws {
        let _promise: JSPromise = jsObject[Strings.unsubscribe]!(subscriptions.jsValue()).fromJSValue()!
        _ = try await _promise.get()
    }
}
