// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class HTMLTableElement: HTMLElement {
    override public class var constructor: JSFunction { JSObject.global.HTMLTableElement.function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _caption = ReadWriteAttribute(jsObject: jsObject, name: Strings.caption)
        _tHead = ReadWriteAttribute(jsObject: jsObject, name: Strings.tHead)
        _tFoot = ReadWriteAttribute(jsObject: jsObject, name: Strings.tFoot)
        _tBodies = ReadonlyAttribute(jsObject: jsObject, name: Strings.tBodies)
        _rows = ReadonlyAttribute(jsObject: jsObject, name: Strings.rows)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Strings.align)
        _border = ReadWriteAttribute(jsObject: jsObject, name: Strings.border)
        _frame = ReadWriteAttribute(jsObject: jsObject, name: Strings.frame)
        _rules = ReadWriteAttribute(jsObject: jsObject, name: Strings.rules)
        _summary = ReadWriteAttribute(jsObject: jsObject, name: Strings.summary)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _bgColor = ReadWriteAttribute(jsObject: jsObject, name: Strings.bgColor)
        _cellPadding = ReadWriteAttribute(jsObject: jsObject, name: Strings.cellPadding)
        _cellSpacing = ReadWriteAttribute(jsObject: jsObject, name: Strings.cellSpacing)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    @ReadWriteAttribute
    public var caption: HTMLTableCaptionElement?

    public func createCaption() -> HTMLTableCaptionElement {
        jsObject[Strings.createCaption]!().fromJSValue()!
    }

    public func deleteCaption() {
        _ = jsObject[Strings.deleteCaption]!()
    }

    @ReadWriteAttribute
    public var tHead: HTMLTableSectionElement?

    public func createTHead() -> HTMLTableSectionElement {
        jsObject[Strings.createTHead]!().fromJSValue()!
    }

    public func deleteTHead() {
        _ = jsObject[Strings.deleteTHead]!()
    }

    @ReadWriteAttribute
    public var tFoot: HTMLTableSectionElement?

    public func createTFoot() -> HTMLTableSectionElement {
        jsObject[Strings.createTFoot]!().fromJSValue()!
    }

    public func deleteTFoot() {
        _ = jsObject[Strings.deleteTFoot]!()
    }

    @ReadonlyAttribute
    public var tBodies: HTMLCollection

    public func createTBody() -> HTMLTableSectionElement {
        jsObject[Strings.createTBody]!().fromJSValue()!
    }

    @ReadonlyAttribute
    public var rows: HTMLCollection

    public func insertRow(index: Int32? = nil) -> HTMLTableRowElement {
        jsObject[Strings.insertRow]!(index?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func deleteRow(index: Int32) {
        _ = jsObject[Strings.deleteRow]!(index.jsValue())
    }

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var border: String

    @ReadWriteAttribute
    public var frame: String

    @ReadWriteAttribute
    public var rules: String

    @ReadWriteAttribute
    public var summary: String

    @ReadWriteAttribute
    public var width: String

    @ReadWriteAttribute
    public var bgColor: String

    @ReadWriteAttribute
    public var cellPadding: String

    @ReadWriteAttribute
    public var cellSpacing: String
}
