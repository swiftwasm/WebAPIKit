// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class HIDDevice: EventTarget {
    override public class var constructor: JSFunction { JSObject.global[Strings.HIDDevice].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _oninputreport = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.oninputreport)
        _opened = ReadonlyAttribute(jsObject: jsObject, name: Strings.opened)
        _vendorId = ReadonlyAttribute(jsObject: jsObject, name: Strings.vendorId)
        _productId = ReadonlyAttribute(jsObject: jsObject, name: Strings.productId)
        _productName = ReadonlyAttribute(jsObject: jsObject, name: Strings.productName)
        _collections = ReadonlyAttribute(jsObject: jsObject, name: Strings.collections)
        super.init(unsafelyWrapping: jsObject)
    }

    @ClosureAttribute.Optional1
    public var oninputreport: EventHandler

    @ReadonlyAttribute
    public var opened: Bool

    @ReadonlyAttribute
    public var vendorId: UInt16

    @ReadonlyAttribute
    public var productId: UInt16

    @ReadonlyAttribute
    public var productName: String

    @ReadonlyAttribute
    public var collections: [HIDCollectionInfo]

    public func open() -> JSPromise {
        jsObject[Strings.open]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func open() async throws {
        let _promise: JSPromise = jsObject[Strings.open]!().fromJSValue()!
        _ = try await _promise.get()
    }

    public func close() -> JSPromise {
        jsObject[Strings.close]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func close() async throws {
        let _promise: JSPromise = jsObject[Strings.close]!().fromJSValue()!
        _ = try await _promise.get()
    }

    public func forget() -> JSPromise {
        jsObject[Strings.forget]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func forget() async throws {
        let _promise: JSPromise = jsObject[Strings.forget]!().fromJSValue()!
        _ = try await _promise.get()
    }

    public func sendReport(reportId: UInt8, data: BufferSource) -> JSPromise {
        jsObject[Strings.sendReport]!(reportId.jsValue(), data.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func sendReport(reportId: UInt8, data: BufferSource) async throws {
        let _promise: JSPromise = jsObject[Strings.sendReport]!(reportId.jsValue(), data.jsValue()).fromJSValue()!
        _ = try await _promise.get()
    }

    public func sendFeatureReport(reportId: UInt8, data: BufferSource) -> JSPromise {
        jsObject[Strings.sendFeatureReport]!(reportId.jsValue(), data.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func sendFeatureReport(reportId: UInt8, data: BufferSource) async throws {
        let _promise: JSPromise = jsObject[Strings.sendFeatureReport]!(reportId.jsValue(), data.jsValue()).fromJSValue()!
        _ = try await _promise.get()
    }

    public func receiveFeatureReport(reportId: UInt8) -> JSPromise {
        jsObject[Strings.receiveFeatureReport]!(reportId.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func receiveFeatureReport(reportId: UInt8) async throws -> DataView {
        let _promise: JSPromise = jsObject[Strings.receiveFeatureReport]!(reportId.jsValue()).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }
}
