// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class DOMMatrixReadOnly: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global.DOMMatrixReadOnly.function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _a = ReadonlyAttribute(jsObject: jsObject, name: "a")
        _b = ReadonlyAttribute(jsObject: jsObject, name: "b")
        _c = ReadonlyAttribute(jsObject: jsObject, name: "c")
        _d = ReadonlyAttribute(jsObject: jsObject, name: "d")
        _e = ReadonlyAttribute(jsObject: jsObject, name: "e")
        _f = ReadonlyAttribute(jsObject: jsObject, name: "f")
        _m11 = ReadonlyAttribute(jsObject: jsObject, name: "m11")
        _m12 = ReadonlyAttribute(jsObject: jsObject, name: "m12")
        _m13 = ReadonlyAttribute(jsObject: jsObject, name: "m13")
        _m14 = ReadonlyAttribute(jsObject: jsObject, name: "m14")
        _m21 = ReadonlyAttribute(jsObject: jsObject, name: "m21")
        _m22 = ReadonlyAttribute(jsObject: jsObject, name: "m22")
        _m23 = ReadonlyAttribute(jsObject: jsObject, name: "m23")
        _m24 = ReadonlyAttribute(jsObject: jsObject, name: "m24")
        _m31 = ReadonlyAttribute(jsObject: jsObject, name: "m31")
        _m32 = ReadonlyAttribute(jsObject: jsObject, name: "m32")
        _m33 = ReadonlyAttribute(jsObject: jsObject, name: "m33")
        _m34 = ReadonlyAttribute(jsObject: jsObject, name: "m34")
        _m41 = ReadonlyAttribute(jsObject: jsObject, name: "m41")
        _m42 = ReadonlyAttribute(jsObject: jsObject, name: "m42")
        _m43 = ReadonlyAttribute(jsObject: jsObject, name: "m43")
        _m44 = ReadonlyAttribute(jsObject: jsObject, name: "m44")
        _is2D = ReadonlyAttribute(jsObject: jsObject, name: "is2D")
        _isIdentity = ReadonlyAttribute(jsObject: jsObject, name: "isIdentity")
        self.jsObject = jsObject
    }

    public convenience init(init: __UNSUPPORTED_UNION__? = nil) {
        self.init(unsafelyWrapping: Self.constructor.new(`init`?.jsValue() ?? .undefined))
    }

    public static func fromMatrix(other: DOMMatrixInit? = nil) -> Self {
        constructor["fromMatrix"]!(other?.jsValue() ?? .undefined).fromJSValue()!
    }

    public static func fromFloat32Array(array32: Float32Array) -> Self {
        constructor["fromFloat32Array"]!(array32.jsValue()).fromJSValue()!
    }

    public static func fromFloat64Array(array64: Float64Array) -> Self {
        constructor["fromFloat64Array"]!(array64.jsValue()).fromJSValue()!
    }

    @ReadonlyAttribute
    public var a: Double

    @ReadonlyAttribute
    public var b: Double

    @ReadonlyAttribute
    public var c: Double

    @ReadonlyAttribute
    public var d: Double

    @ReadonlyAttribute
    public var e: Double

    @ReadonlyAttribute
    public var f: Double

    @ReadonlyAttribute
    public var m11: Double

    @ReadonlyAttribute
    public var m12: Double

    @ReadonlyAttribute
    public var m13: Double

    @ReadonlyAttribute
    public var m14: Double

    @ReadonlyAttribute
    public var m21: Double

    @ReadonlyAttribute
    public var m22: Double

    @ReadonlyAttribute
    public var m23: Double

    @ReadonlyAttribute
    public var m24: Double

    @ReadonlyAttribute
    public var m31: Double

    @ReadonlyAttribute
    public var m32: Double

    @ReadonlyAttribute
    public var m33: Double

    @ReadonlyAttribute
    public var m34: Double

    @ReadonlyAttribute
    public var m41: Double

    @ReadonlyAttribute
    public var m42: Double

    @ReadonlyAttribute
    public var m43: Double

    @ReadonlyAttribute
    public var m44: Double

    @ReadonlyAttribute
    public var is2D: Bool

    @ReadonlyAttribute
    public var isIdentity: Bool

    public func translate(tx: Double? = nil, ty: Double? = nil, tz: Double? = nil) -> DOMMatrix {
        jsObject["translate"]!(tx?.jsValue() ?? .undefined, ty?.jsValue() ?? .undefined, tz?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func scale(scaleX: Double? = nil, scaleY: Double? = nil, scaleZ: Double? = nil, originX: Double? = nil, originY: Double? = nil, originZ: Double? = nil) -> DOMMatrix {
        let _arg0 = scaleX?.jsValue() ?? .undefined
        let _arg1 = scaleY?.jsValue() ?? .undefined
        let _arg2 = scaleZ?.jsValue() ?? .undefined
        let _arg3 = originX?.jsValue() ?? .undefined
        let _arg4 = originY?.jsValue() ?? .undefined
        let _arg5 = originZ?.jsValue() ?? .undefined
        return jsObject["scale"]!(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5).fromJSValue()!
    }

    public func scaleNonUniform(scaleX: Double? = nil, scaleY: Double? = nil) -> DOMMatrix {
        jsObject["scaleNonUniform"]!(scaleX?.jsValue() ?? .undefined, scaleY?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func scale3d(scale: Double? = nil, originX: Double? = nil, originY: Double? = nil, originZ: Double? = nil) -> DOMMatrix {
        jsObject["scale3d"]!(scale?.jsValue() ?? .undefined, originX?.jsValue() ?? .undefined, originY?.jsValue() ?? .undefined, originZ?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func rotate(rotX: Double? = nil, rotY: Double? = nil, rotZ: Double? = nil) -> DOMMatrix {
        jsObject["rotate"]!(rotX?.jsValue() ?? .undefined, rotY?.jsValue() ?? .undefined, rotZ?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func rotateFromVector(x: Double? = nil, y: Double? = nil) -> DOMMatrix {
        jsObject["rotateFromVector"]!(x?.jsValue() ?? .undefined, y?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func rotateAxisAngle(x: Double? = nil, y: Double? = nil, z: Double? = nil, angle: Double? = nil) -> DOMMatrix {
        jsObject["rotateAxisAngle"]!(x?.jsValue() ?? .undefined, y?.jsValue() ?? .undefined, z?.jsValue() ?? .undefined, angle?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func skewX(sx: Double? = nil) -> DOMMatrix {
        jsObject["skewX"]!(sx?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func skewY(sy: Double? = nil) -> DOMMatrix {
        jsObject["skewY"]!(sy?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func multiply(other: DOMMatrixInit? = nil) -> DOMMatrix {
        jsObject["multiply"]!(other?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func flipX() -> DOMMatrix {
        jsObject["flipX"]!().fromJSValue()!
    }

    public func flipY() -> DOMMatrix {
        jsObject["flipY"]!().fromJSValue()!
    }

    public func inverse() -> DOMMatrix {
        jsObject["inverse"]!().fromJSValue()!
    }

    public func transformPoint(point: DOMPointInit? = nil) -> DOMPoint {
        jsObject["transformPoint"]!(point?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func toFloat32Array() -> Float32Array {
        jsObject["toFloat32Array"]!().fromJSValue()!
    }

    public func toFloat64Array() -> Float64Array {
        jsObject["toFloat64Array"]!().fromJSValue()!
    }

    public var description: String {
        jsObject["toString"]!().fromJSValue()!
    }

    public func toJSON() -> JSObject {
        jsObject["toJSON"]!().fromJSValue()!
    }
}
