// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class MediaStreamTrack: EventTarget {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.MediaStreamTrack].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _kind = ReadonlyAttribute(jsObject: jsObject, name: Strings.kind)
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _label = ReadonlyAttribute(jsObject: jsObject, name: Strings.label)
        _enabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.enabled)
        _muted = ReadonlyAttribute(jsObject: jsObject, name: Strings.muted)
        _onmute = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onmute)
        _onunmute = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onunmute)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _onended = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onended)
        _contentHint = ReadWriteAttribute(jsObject: jsObject, name: Strings.contentHint)
        _isolated = ReadonlyAttribute(jsObject: jsObject, name: Strings.isolated)
        _onisolationchange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onisolationchange)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var kind: String

    @ReadonlyAttribute
    public var id: String

    @ReadonlyAttribute
    public var label: String

    @ReadWriteAttribute
    public var enabled: Bool

    @ReadonlyAttribute
    public var muted: Bool

    @ClosureAttribute1Optional
    public var onmute: EventHandler

    @ClosureAttribute1Optional
    public var onunmute: EventHandler

    @ReadonlyAttribute
    public var readyState: MediaStreamTrackState

    @ClosureAttribute1Optional
    public var onended: EventHandler

    @inlinable public func clone() -> Self {
        let this = jsObject
        return this[Strings.clone].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func stop() {
        let this = jsObject
        _ = this[Strings.stop].function!(this: this, arguments: [])
    }

    @inlinable public func getCapabilities() -> MediaTrackCapabilities {
        let this = jsObject
        return this[Strings.getCapabilities].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getConstraints() -> MediaTrackConstraints {
        let this = jsObject
        return this[Strings.getConstraints].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func getSettings() -> MediaTrackSettings {
        let this = jsObject
        return this[Strings.getSettings].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func applyConstraints(constraints: MediaTrackConstraints? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.applyConstraints].function!(this: this, arguments: [constraints?.jsValue ?? .undefined]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func applyConstraints(constraints: MediaTrackConstraints? = nil) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.applyConstraints].function!(this: this, arguments: [constraints?.jsValue ?? .undefined]).fromJSValue()!
        _ = try await _promise.value
    }

    @ReadWriteAttribute
    public var contentHint: String

    @ReadonlyAttribute
    public var isolated: Bool

    @ClosureAttribute1Optional
    public var onisolationchange: EventHandler
}
