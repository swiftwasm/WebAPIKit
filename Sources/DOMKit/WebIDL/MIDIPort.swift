// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class MIDIPort: EventTarget {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.MIDIPort].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _manufacturer = ReadonlyAttribute(jsObject: jsObject, name: Strings.manufacturer)
        _name = ReadonlyAttribute(jsObject: jsObject, name: Strings.name)
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _version = ReadonlyAttribute(jsObject: jsObject, name: Strings.version)
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _connection = ReadonlyAttribute(jsObject: jsObject, name: Strings.connection)
        _onstatechange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onstatechange)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var id: String

    @ReadonlyAttribute
    public var manufacturer: String?

    @ReadonlyAttribute
    public var name: String?

    @ReadonlyAttribute
    public var type: MIDIPortType

    @ReadonlyAttribute
    public var version: String?

    @ReadonlyAttribute
    public var state: MIDIPortDeviceState

    @ReadonlyAttribute
    public var connection: MIDIPortConnectionState

    @ClosureAttribute1Optional
    public var onstatechange: EventHandler

    @inlinable public func open() -> JSPromise {
        let this = jsObject
        return this[Strings.open].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func open() async throws -> MIDIPort {
        let this = jsObject
        let _promise: JSPromise = this[Strings.open].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    @inlinable public func close() -> JSPromise {
        let this = jsObject
        return this[Strings.close].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func close() async throws -> MIDIPort {
        let this = jsObject
        let _promise: JSPromise = this[Strings.close].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }
}
