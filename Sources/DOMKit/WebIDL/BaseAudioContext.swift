// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class BaseAudioContext: EventTarget {
    override public class var constructor: JSFunction { JSObject.global[Strings.BaseAudioContext].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _destination = ReadonlyAttribute(jsObject: jsObject, name: Strings.destination)
        _sampleRate = ReadonlyAttribute(jsObject: jsObject, name: Strings.sampleRate)
        _currentTime = ReadonlyAttribute(jsObject: jsObject, name: Strings.currentTime)
        _listener = ReadonlyAttribute(jsObject: jsObject, name: Strings.listener)
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _audioWorklet = ReadonlyAttribute(jsObject: jsObject, name: Strings.audioWorklet)
        _onstatechange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onstatechange)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var destination: AudioDestinationNode

    @ReadonlyAttribute
    public var sampleRate: Float

    @ReadonlyAttribute
    public var currentTime: Double

    @ReadonlyAttribute
    public var listener: AudioListener

    @ReadonlyAttribute
    public var state: AudioContextState

    @ReadonlyAttribute
    public var audioWorklet: AudioWorklet

    @ClosureAttribute1Optional
    public var onstatechange: EventHandler

    public func createAnalyser() -> AnalyserNode {
        jsObject[Strings.createAnalyser]!().fromJSValue()!
    }

    public func createBiquadFilter() -> BiquadFilterNode {
        jsObject[Strings.createBiquadFilter]!().fromJSValue()!
    }

    public func createBuffer(numberOfChannels: UInt32, length: UInt32, sampleRate: Float) -> AudioBuffer {
        jsObject[Strings.createBuffer]!(numberOfChannels.jsValue(), length.jsValue(), sampleRate.jsValue()).fromJSValue()!
    }

    public func createBufferSource() -> AudioBufferSourceNode {
        jsObject[Strings.createBufferSource]!().fromJSValue()!
    }

    public func createChannelMerger(numberOfInputs: UInt32? = nil) -> ChannelMergerNode {
        jsObject[Strings.createChannelMerger]!(numberOfInputs?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createChannelSplitter(numberOfOutputs: UInt32? = nil) -> ChannelSplitterNode {
        jsObject[Strings.createChannelSplitter]!(numberOfOutputs?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createConstantSource() -> ConstantSourceNode {
        jsObject[Strings.createConstantSource]!().fromJSValue()!
    }

    public func createConvolver() -> ConvolverNode {
        jsObject[Strings.createConvolver]!().fromJSValue()!
    }

    public func createDelay(maxDelayTime: Double? = nil) -> DelayNode {
        jsObject[Strings.createDelay]!(maxDelayTime?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createDynamicsCompressor() -> DynamicsCompressorNode {
        jsObject[Strings.createDynamicsCompressor]!().fromJSValue()!
    }

    public func createGain() -> GainNode {
        jsObject[Strings.createGain]!().fromJSValue()!
    }

    public func createIIRFilter(feedforward: [Double], feedback: [Double]) -> IIRFilterNode {
        jsObject[Strings.createIIRFilter]!(feedforward.jsValue(), feedback.jsValue()).fromJSValue()!
    }

    public func createOscillator() -> OscillatorNode {
        jsObject[Strings.createOscillator]!().fromJSValue()!
    }

    public func createPanner() -> PannerNode {
        jsObject[Strings.createPanner]!().fromJSValue()!
    }

    public func createPeriodicWave(real: [Float], imag: [Float], constraints: PeriodicWaveConstraints? = nil) -> PeriodicWave {
        jsObject[Strings.createPeriodicWave]!(real.jsValue(), imag.jsValue(), constraints?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createScriptProcessor(bufferSize: UInt32? = nil, numberOfInputChannels: UInt32? = nil, numberOfOutputChannels: UInt32? = nil) -> ScriptProcessorNode {
        jsObject[Strings.createScriptProcessor]!(bufferSize?.jsValue() ?? .undefined, numberOfInputChannels?.jsValue() ?? .undefined, numberOfOutputChannels?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createStereoPanner() -> StereoPannerNode {
        jsObject[Strings.createStereoPanner]!().fromJSValue()!
    }

    public func createWaveShaper() -> WaveShaperNode {
        jsObject[Strings.createWaveShaper]!().fromJSValue()!
    }

    // XXX: member 'decodeAudioData' is ignored

    // XXX: member 'decodeAudioData' is ignored
}
