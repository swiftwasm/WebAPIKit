// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class ValidityStateFlags: BridgedDictionary {
    private enum Keys {
        static let badInput: JSString = "badInput"
        static let customError: JSString = "customError"
        static let patternMismatch: JSString = "patternMismatch"
        static let rangeOverflow: JSString = "rangeOverflow"
        static let rangeUnderflow: JSString = "rangeUnderflow"
        static let stepMismatch: JSString = "stepMismatch"
        static let tooLong: JSString = "tooLong"
        static let tooShort: JSString = "tooShort"
        static let typeMismatch: JSString = "typeMismatch"
        static let valueMissing: JSString = "valueMissing"
    }

    public convenience init(valueMissing: Bool, typeMismatch: Bool, patternMismatch: Bool, tooLong: Bool, tooShort: Bool, rangeUnderflow: Bool, rangeOverflow: Bool, stepMismatch: Bool, badInput: Bool, customError: Bool) {
        let object = JSObject.global.Object.function!.new()
        object[Keys.valueMissing] = valueMissing.jsValue()
        object[Keys.typeMismatch] = typeMismatch.jsValue()
        object[Keys.patternMismatch] = patternMismatch.jsValue()
        object[Keys.tooLong] = tooLong.jsValue()
        object[Keys.tooShort] = tooShort.jsValue()
        object[Keys.rangeUnderflow] = rangeUnderflow.jsValue()
        object[Keys.rangeOverflow] = rangeOverflow.jsValue()
        object[Keys.stepMismatch] = stepMismatch.jsValue()
        object[Keys.badInput] = badInput.jsValue()
        object[Keys.customError] = customError.jsValue()
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _valueMissing = ReadWriteAttribute(jsObject: object, name: Keys.valueMissing)
        _typeMismatch = ReadWriteAttribute(jsObject: object, name: Keys.typeMismatch)
        _patternMismatch = ReadWriteAttribute(jsObject: object, name: Keys.patternMismatch)
        _tooLong = ReadWriteAttribute(jsObject: object, name: Keys.tooLong)
        _tooShort = ReadWriteAttribute(jsObject: object, name: Keys.tooShort)
        _rangeUnderflow = ReadWriteAttribute(jsObject: object, name: Keys.rangeUnderflow)
        _rangeOverflow = ReadWriteAttribute(jsObject: object, name: Keys.rangeOverflow)
        _stepMismatch = ReadWriteAttribute(jsObject: object, name: Keys.stepMismatch)
        _badInput = ReadWriteAttribute(jsObject: object, name: Keys.badInput)
        _customError = ReadWriteAttribute(jsObject: object, name: Keys.customError)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var valueMissing: Bool

    @ReadWriteAttribute
    public var typeMismatch: Bool

    @ReadWriteAttribute
    public var patternMismatch: Bool

    @ReadWriteAttribute
    public var tooLong: Bool

    @ReadWriteAttribute
    public var tooShort: Bool

    @ReadWriteAttribute
    public var rangeUnderflow: Bool

    @ReadWriteAttribute
    public var rangeOverflow: Bool

    @ReadWriteAttribute
    public var stepMismatch: Bool

    @ReadWriteAttribute
    public var badInput: Bool

    @ReadWriteAttribute
    public var customError: Bool
}
