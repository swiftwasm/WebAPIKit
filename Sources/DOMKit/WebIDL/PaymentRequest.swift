// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class PaymentRequest: EventTarget {
    override public class var constructor: JSFunction { JSObject.global[Strings.PaymentRequest].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _onpaymentmethodchange = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onpaymentmethodchange)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init(methodData: [PaymentMethodData], details: PaymentDetailsInit) {
        self.init(unsafelyWrapping: Self.constructor.new(methodData.jsValue(), details.jsValue()))
    }

    public func show(detailsPromise: JSPromise? = nil) -> JSPromise {
        jsObject[Strings.show]!(detailsPromise?.jsValue() ?? .undefined).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func show(detailsPromise: JSPromise? = nil) async throws -> PaymentResponse {
        let _promise: JSPromise = jsObject[Strings.show]!(detailsPromise?.jsValue() ?? .undefined).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func abort() -> JSPromise {
        jsObject[Strings.abort]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func abort() async throws {
        let _promise: JSPromise = jsObject[Strings.abort]!().fromJSValue()!
        _ = try await _promise.get()
    }

    public func canMakePayment() -> JSPromise {
        jsObject[Strings.canMakePayment]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func canMakePayment() async throws -> Bool {
        let _promise: JSPromise = jsObject[Strings.canMakePayment]!().fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    @ReadonlyAttribute
    public var id: String

    @ClosureAttribute.Optional1
    public var onpaymentmethodchange: EventHandler
}
