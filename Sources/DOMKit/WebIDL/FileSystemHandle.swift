// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class FileSystemHandle: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global[Strings.FileSystemHandle].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _kind = ReadonlyAttribute(jsObject: jsObject, name: Strings.kind)
        _name = ReadonlyAttribute(jsObject: jsObject, name: Strings.name)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var kind: FileSystemHandleKind

    @ReadonlyAttribute
    public var name: String

    public func isSameEntry(other: FileSystemHandle) -> JSPromise {
        jsObject[Strings.isSameEntry]!(other.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func isSameEntry(other: FileSystemHandle) async throws -> Bool {
        let _promise: JSPromise = jsObject[Strings.isSameEntry]!(other.jsValue()).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func queryPermission(descriptor: FileSystemHandlePermissionDescriptor? = nil) -> JSPromise {
        jsObject[Strings.queryPermission]!(descriptor?.jsValue() ?? .undefined).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func queryPermission(descriptor: FileSystemHandlePermissionDescriptor? = nil) async throws -> PermissionState {
        let _promise: JSPromise = jsObject[Strings.queryPermission]!(descriptor?.jsValue() ?? .undefined).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func requestPermission(descriptor: FileSystemHandlePermissionDescriptor? = nil) -> JSPromise {
        jsObject[Strings.requestPermission]!(descriptor?.jsValue() ?? .undefined).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func requestPermission(descriptor: FileSystemHandlePermissionDescriptor? = nil) async throws -> PermissionState {
        let _promise: JSPromise = jsObject[Strings.requestPermission]!(descriptor?.jsValue() ?? .undefined).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }
}
