// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class AudioDecoder: JSBridgedClass {
    @inlinable public class var constructor: JSFunction { JSObject.global[Strings.AudioDecoder].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _decodeQueueSize = ReadonlyAttribute(jsObject: jsObject, name: Strings.decodeQueueSize)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(init: AudioDecoderInit) {
        self.init(unsafelyWrapping: Self.constructor.new(arguments: [`init`.jsValue]))
    }

    @ReadonlyAttribute
    public var state: CodecState

    @ReadonlyAttribute
    public var decodeQueueSize: UInt32

    @inlinable public func configure(config: AudioDecoderConfig) {
        let this = jsObject
        _ = this[Strings.configure].function!(this: this, arguments: [config.jsValue])
    }

    @inlinable public func decode(chunk: EncodedAudioChunk) {
        let this = jsObject
        _ = this[Strings.decode].function!(this: this, arguments: [chunk.jsValue])
    }

    @inlinable public func flush() -> JSPromise {
        let this = jsObject
        return this[Strings.flush].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func flush() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.flush].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func reset() {
        let this = jsObject
        _ = this[Strings.reset].function!(this: this, arguments: [])
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }

    @inlinable public static func isConfigSupported(config: AudioDecoderConfig) -> JSPromise {
        let this = constructor
        return this[Strings.isConfigSupported].function!(this: this, arguments: [config.jsValue]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public static func isConfigSupported(config: AudioDecoderConfig) async throws -> AudioDecoderSupport {
        let this = constructor
        let _promise: JSPromise = this[Strings.isConfigSupported].function!(this: this, arguments: [config.jsValue]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}
