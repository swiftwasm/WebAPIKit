// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class EventModifierInit: BridgedDictionary {
    private enum Keys {
        static let altKey: JSString = "altKey"
        static let ctrlKey: JSString = "ctrlKey"
        static let metaKey: JSString = "metaKey"
        static let modifierAltGraph: JSString = "modifierAltGraph"
        static let modifierCapsLock: JSString = "modifierCapsLock"
        static let modifierFn: JSString = "modifierFn"
        static let modifierFnLock: JSString = "modifierFnLock"
        static let modifierHyper: JSString = "modifierHyper"
        static let modifierNumLock: JSString = "modifierNumLock"
        static let modifierScrollLock: JSString = "modifierScrollLock"
        static let modifierSuper: JSString = "modifierSuper"
        static let modifierSymbol: JSString = "modifierSymbol"
        static let modifierSymbolLock: JSString = "modifierSymbolLock"
        static let shiftKey: JSString = "shiftKey"
    }

    public convenience init(ctrlKey: Bool, shiftKey: Bool, altKey: Bool, metaKey: Bool, modifierAltGraph: Bool, modifierCapsLock: Bool, modifierFn: Bool, modifierFnLock: Bool, modifierHyper: Bool, modifierNumLock: Bool, modifierScrollLock: Bool, modifierSuper: Bool, modifierSymbol: Bool, modifierSymbolLock: Bool) {
        let object = JSObject.global.Object.function!.new()
        object[Keys.ctrlKey] = ctrlKey.jsValue()
        object[Keys.shiftKey] = shiftKey.jsValue()
        object[Keys.altKey] = altKey.jsValue()
        object[Keys.metaKey] = metaKey.jsValue()
        object[Keys.modifierAltGraph] = modifierAltGraph.jsValue()
        object[Keys.modifierCapsLock] = modifierCapsLock.jsValue()
        object[Keys.modifierFn] = modifierFn.jsValue()
        object[Keys.modifierFnLock] = modifierFnLock.jsValue()
        object[Keys.modifierHyper] = modifierHyper.jsValue()
        object[Keys.modifierNumLock] = modifierNumLock.jsValue()
        object[Keys.modifierScrollLock] = modifierScrollLock.jsValue()
        object[Keys.modifierSuper] = modifierSuper.jsValue()
        object[Keys.modifierSymbol] = modifierSymbol.jsValue()
        object[Keys.modifierSymbolLock] = modifierSymbolLock.jsValue()
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _ctrlKey = ReadWriteAttribute(jsObject: object, name: Keys.ctrlKey)
        _shiftKey = ReadWriteAttribute(jsObject: object, name: Keys.shiftKey)
        _altKey = ReadWriteAttribute(jsObject: object, name: Keys.altKey)
        _metaKey = ReadWriteAttribute(jsObject: object, name: Keys.metaKey)
        _modifierAltGraph = ReadWriteAttribute(jsObject: object, name: Keys.modifierAltGraph)
        _modifierCapsLock = ReadWriteAttribute(jsObject: object, name: Keys.modifierCapsLock)
        _modifierFn = ReadWriteAttribute(jsObject: object, name: Keys.modifierFn)
        _modifierFnLock = ReadWriteAttribute(jsObject: object, name: Keys.modifierFnLock)
        _modifierHyper = ReadWriteAttribute(jsObject: object, name: Keys.modifierHyper)
        _modifierNumLock = ReadWriteAttribute(jsObject: object, name: Keys.modifierNumLock)
        _modifierScrollLock = ReadWriteAttribute(jsObject: object, name: Keys.modifierScrollLock)
        _modifierSuper = ReadWriteAttribute(jsObject: object, name: Keys.modifierSuper)
        _modifierSymbol = ReadWriteAttribute(jsObject: object, name: Keys.modifierSymbol)
        _modifierSymbolLock = ReadWriteAttribute(jsObject: object, name: Keys.modifierSymbolLock)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var ctrlKey: Bool

    @ReadWriteAttribute
    public var shiftKey: Bool

    @ReadWriteAttribute
    public var altKey: Bool

    @ReadWriteAttribute
    public var metaKey: Bool

    @ReadWriteAttribute
    public var modifierAltGraph: Bool

    @ReadWriteAttribute
    public var modifierCapsLock: Bool

    @ReadWriteAttribute
    public var modifierFn: Bool

    @ReadWriteAttribute
    public var modifierFnLock: Bool

    @ReadWriteAttribute
    public var modifierHyper: Bool

    @ReadWriteAttribute
    public var modifierNumLock: Bool

    @ReadWriteAttribute
    public var modifierScrollLock: Bool

    @ReadWriteAttribute
    public var modifierSuper: Bool

    @ReadWriteAttribute
    public var modifierSymbol: Bool

    @ReadWriteAttribute
    public var modifierSymbolLock: Bool
}
