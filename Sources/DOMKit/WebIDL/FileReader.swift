// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class FileReader: EventTarget {
    override public class var constructor: JSFunction { JSObject.global.FileReader.function! }

    private enum Keys {
        static let onerror: JSString = "onerror"
        static let onloadend: JSString = "onloadend"
        static let DONE: JSString = "DONE"
        static let onload: JSString = "onload"
        static let EMPTY: JSString = "EMPTY"
        static let readAsDataURL: JSString = "readAsDataURL"
        static let onloadstart: JSString = "onloadstart"
        static let readyState: JSString = "readyState"
        static let onprogress: JSString = "onprogress"
        static let readAsArrayBuffer: JSString = "readAsArrayBuffer"
        static let onabort: JSString = "onabort"
        static let result: JSString = "result"
        static let error: JSString = "error"
        static let readAsBinaryString: JSString = "readAsBinaryString"
        static let abort: JSString = "abort"
        static let readAsText: JSString = "readAsText"
        static let LOADING: JSString = "LOADING"
    }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Keys.readyState)
        _result = ReadonlyAttribute(jsObject: jsObject, name: Keys.result)
        _error = ReadonlyAttribute(jsObject: jsObject, name: Keys.error)
        _onloadstart = ClosureAttribute.Optional1(jsObject: jsObject, name: Keys.onloadstart)
        _onprogress = ClosureAttribute.Optional1(jsObject: jsObject, name: Keys.onprogress)
        _onload = ClosureAttribute.Optional1(jsObject: jsObject, name: Keys.onload)
        _onabort = ClosureAttribute.Optional1(jsObject: jsObject, name: Keys.onabort)
        _onerror = ClosureAttribute.Optional1(jsObject: jsObject, name: Keys.onerror)
        _onloadend = ClosureAttribute.Optional1(jsObject: jsObject, name: Keys.onloadend)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    public func readAsArrayBuffer(blob: Blob) {
        _ = jsObject[Keys.readAsArrayBuffer]!(blob.jsValue())
    }

    public func readAsBinaryString(blob: Blob) {
        _ = jsObject[Keys.readAsBinaryString]!(blob.jsValue())
    }

    public func readAsText(blob: Blob, encoding: String? = nil) {
        _ = jsObject[Keys.readAsText]!(blob.jsValue(), encoding?.jsValue() ?? .undefined)
    }

    public func readAsDataURL(blob: Blob) {
        _ = jsObject[Keys.readAsDataURL]!(blob.jsValue())
    }

    public func abort() {
        _ = jsObject[Keys.abort]!()
    }

    public static let EMPTY: UInt16 = 0

    public static let LOADING: UInt16 = 1

    public static let DONE: UInt16 = 2

    @ReadonlyAttribute
    public var readyState: UInt16

    @ReadonlyAttribute
    public var result: __UNSUPPORTED_UNION__?

    @ReadonlyAttribute
    public var error: DOMException?

    @ClosureAttribute.Optional1
    public var onloadstart: EventHandler

    @ClosureAttribute.Optional1
    public var onprogress: EventHandler

    @ClosureAttribute.Optional1
    public var onload: EventHandler

    @ClosureAttribute.Optional1
    public var onabort: EventHandler

    @ClosureAttribute.Optional1
    public var onerror: EventHandler

    @ClosureAttribute.Optional1
    public var onloadend: EventHandler
}
