// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class OfflineAudioContext: BaseAudioContext {
    override public class var constructor: JSFunction { JSObject.global[Strings.OfflineAudioContext].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _length = ReadonlyAttribute(jsObject: jsObject, name: Strings.length)
        _oncomplete = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.oncomplete)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init(contextOptions: OfflineAudioContextOptions) {
        self.init(unsafelyWrapping: Self.constructor.new(contextOptions.jsValue()))
    }

    public convenience init(numberOfChannels: UInt32, length: UInt32, sampleRate: Float) {
        self.init(unsafelyWrapping: Self.constructor.new(numberOfChannels.jsValue(), length.jsValue(), sampleRate.jsValue()))
    }

    public func startRendering() -> JSPromise {
        jsObject[Strings.startRendering]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func startRendering() async throws -> AudioBuffer {
        let _promise: JSPromise = jsObject[Strings.startRendering]!().fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func resume() -> JSPromise {
        jsObject[Strings.resume]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func resume() async throws {
        let _promise: JSPromise = jsObject[Strings.resume]!().fromJSValue()!
        _ = try await _promise.get()
    }

    public func suspend(suspendTime: Double) -> JSPromise {
        jsObject[Strings.suspend]!(suspendTime.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func suspend(suspendTime: Double) async throws {
        let _promise: JSPromise = jsObject[Strings.suspend]!(suspendTime.jsValue()).fromJSValue()!
        _ = try await _promise.get()
    }

    @ReadonlyAttribute
    public var length: UInt32

    @ClosureAttribute1Optional
    public var oncomplete: EventHandler
}
