// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class SpeechSynthesisUtterance: EventTarget {
    override public class var constructor: JSFunction { JSObject.global[Strings.SpeechSynthesisUtterance].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _text = ReadWriteAttribute(jsObject: jsObject, name: Strings.text)
        _lang = ReadWriteAttribute(jsObject: jsObject, name: Strings.lang)
        _voice = ReadWriteAttribute(jsObject: jsObject, name: Strings.voice)
        _volume = ReadWriteAttribute(jsObject: jsObject, name: Strings.volume)
        _rate = ReadWriteAttribute(jsObject: jsObject, name: Strings.rate)
        _pitch = ReadWriteAttribute(jsObject: jsObject, name: Strings.pitch)
        _onstart = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onstart)
        _onend = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onend)
        _onerror = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onerror)
        _onpause = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onpause)
        _onresume = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onresume)
        _onmark = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onmark)
        _onboundary = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onboundary)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init(text: String? = nil) {
        self.init(unsafelyWrapping: Self.constructor.new(text?.jsValue() ?? .undefined))
    }

    @ReadWriteAttribute
    public var text: String

    @ReadWriteAttribute
    public var lang: String

    @ReadWriteAttribute
    public var voice: SpeechSynthesisVoice?

    @ReadWriteAttribute
    public var volume: Float

    @ReadWriteAttribute
    public var rate: Float

    @ReadWriteAttribute
    public var pitch: Float

    @ClosureAttribute.Optional1
    public var onstart: EventHandler

    @ClosureAttribute.Optional1
    public var onend: EventHandler

    @ClosureAttribute.Optional1
    public var onerror: EventHandler

    @ClosureAttribute.Optional1
    public var onpause: EventHandler

    @ClosureAttribute.Optional1
    public var onresume: EventHandler

    @ClosureAttribute.Optional1
    public var onmark: EventHandler

    @ClosureAttribute.Optional1
    public var onboundary: EventHandler
}
