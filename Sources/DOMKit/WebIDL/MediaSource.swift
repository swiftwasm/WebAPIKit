// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class MediaSource: EventTarget {
    override public class var constructor: JSFunction { JSObject.global[Strings.MediaSource].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _sourceBuffers = ReadonlyAttribute(jsObject: jsObject, name: Strings.sourceBuffers)
        _activeSourceBuffers = ReadonlyAttribute(jsObject: jsObject, name: Strings.activeSourceBuffers)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _duration = ReadWriteAttribute(jsObject: jsObject, name: Strings.duration)
        _onsourceopen = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsourceopen)
        _onsourceended = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsourceended)
        _onsourceclose = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsourceclose)
        _canConstructInDedicatedWorker = ReadonlyAttribute(jsObject: jsObject, name: Strings.canConstructInDedicatedWorker)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    @ReadonlyAttribute
    public var sourceBuffers: SourceBufferList

    @ReadonlyAttribute
    public var activeSourceBuffers: SourceBufferList

    @ReadonlyAttribute
    public var readyState: ReadyState

    @ReadWriteAttribute
    public var duration: Double

    @ClosureAttribute1Optional
    public var onsourceopen: EventHandler

    @ClosureAttribute1Optional
    public var onsourceended: EventHandler

    @ClosureAttribute1Optional
    public var onsourceclose: EventHandler

    @ReadonlyAttribute
    public var canConstructInDedicatedWorker: Bool

    public func addSourceBuffer(type: String) -> SourceBuffer {
        jsObject[Strings.addSourceBuffer]!(type.jsValue()).fromJSValue()!
    }

    public func removeSourceBuffer(sourceBuffer: SourceBuffer) {
        _ = jsObject[Strings.removeSourceBuffer]!(sourceBuffer.jsValue())
    }

    public func endOfStream(error: EndOfStreamError? = nil) {
        _ = jsObject[Strings.endOfStream]!(error?.jsValue() ?? .undefined)
    }

    public func setLiveSeekableRange(start: Double, end: Double) {
        _ = jsObject[Strings.setLiveSeekableRange]!(start.jsValue(), end.jsValue())
    }

    public func clearLiveSeekableRange() {
        _ = jsObject[Strings.clearLiveSeekableRange]!()
    }

    public static func isTypeSupported(type: String) -> Bool {
        constructor[Strings.isTypeSupported]!(type.jsValue()).fromJSValue()!
    }
}
