// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class MediaSource: EventTarget {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.MediaSource].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _sourceBuffers = ReadonlyAttribute(jsObject: jsObject, name: Strings.sourceBuffers)
        _activeSourceBuffers = ReadonlyAttribute(jsObject: jsObject, name: Strings.activeSourceBuffers)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _duration = ReadWriteAttribute(jsObject: jsObject, name: Strings.duration)
        _onsourceopen = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsourceopen)
        _onsourceended = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsourceended)
        _onsourceclose = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onsourceclose)
        _canConstructInDedicatedWorker = ReadonlyAttribute(jsObject: jsObject, name: Strings.canConstructInDedicatedWorker)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new(arguments: []))
    }

    @ReadonlyAttribute
    public var sourceBuffers: SourceBufferList

    @ReadonlyAttribute
    public var activeSourceBuffers: SourceBufferList

    @ReadonlyAttribute
    public var readyState: ReadyState

    @ReadWriteAttribute
    public var duration: Double

    @ClosureAttribute1Optional
    public var onsourceopen: EventHandler

    @ClosureAttribute1Optional
    public var onsourceended: EventHandler

    @ClosureAttribute1Optional
    public var onsourceclose: EventHandler

    @ReadonlyAttribute
    public var canConstructInDedicatedWorker: Bool

    @inlinable public func addSourceBuffer(type: String) -> SourceBuffer {
        let this = jsObject
        return this[Strings.addSourceBuffer].function!(this: this, arguments: [type.jsValue]).fromJSValue()!
    }

    @inlinable public func removeSourceBuffer(sourceBuffer: SourceBuffer) {
        let this = jsObject
        _ = this[Strings.removeSourceBuffer].function!(this: this, arguments: [sourceBuffer.jsValue])
    }

    @inlinable public func endOfStream(error: EndOfStreamError? = nil) {
        let this = jsObject
        _ = this[Strings.endOfStream].function!(this: this, arguments: [error?.jsValue ?? .undefined])
    }

    @inlinable public func setLiveSeekableRange(start: Double, end: Double) {
        let this = jsObject
        _ = this[Strings.setLiveSeekableRange].function!(this: this, arguments: [start.jsValue, end.jsValue])
    }

    @inlinable public func clearLiveSeekableRange() {
        let this = jsObject
        _ = this[Strings.clearLiveSeekableRange].function!(this: this, arguments: [])
    }

    @inlinable public static func isTypeSupported(type: String) -> Bool {
        let this = constructor
        return this[Strings.isTypeSupported].function!(this: this, arguments: [type.jsValue]).fromJSValue()!
    }
}
