// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class Range: AbstractRange {
    override public class var constructor: JSFunction { JSObject.global.Range.function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _commonAncestorContainer = ReadonlyAttribute(jsObject: jsObject, name: "commonAncestorContainer")
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    @ReadonlyAttribute
    public var commonAncestorContainer: Node

    public func setStart(node: Node, offset: UInt32) {
        _ = jsObject["setStart"]!(node.jsValue(), offset.jsValue())
    }

    public func setEnd(node: Node, offset: UInt32) {
        _ = jsObject["setEnd"]!(node.jsValue(), offset.jsValue())
    }

    public func setStartBefore(node: Node) {
        _ = jsObject["setStartBefore"]!(node.jsValue())
    }

    public func setStartAfter(node: Node) {
        _ = jsObject["setStartAfter"]!(node.jsValue())
    }

    public func setEndBefore(node: Node) {
        _ = jsObject["setEndBefore"]!(node.jsValue())
    }

    public func setEndAfter(node: Node) {
        _ = jsObject["setEndAfter"]!(node.jsValue())
    }

    public func collapse(toStart: Bool? = nil) {
        _ = jsObject["collapse"]!(toStart?.jsValue() ?? .undefined)
    }

    public func selectNode(node: Node) {
        _ = jsObject["selectNode"]!(node.jsValue())
    }

    public func selectNodeContents(node: Node) {
        _ = jsObject["selectNodeContents"]!(node.jsValue())
    }

    public static let START_TO_START: UInt16 = 0

    public static let START_TO_END: UInt16 = 1

    public static let END_TO_END: UInt16 = 2

    public static let END_TO_START: UInt16 = 3

    public func compareBoundaryPoints(how: UInt16, sourceRange: Range) -> Int16 {
        jsObject["compareBoundaryPoints"]!(how.jsValue(), sourceRange.jsValue()).fromJSValue()!
    }

    public func deleteContents() {
        _ = jsObject["deleteContents"]!()
    }

    public func extractContents() -> DocumentFragment {
        jsObject["extractContents"]!().fromJSValue()!
    }

    public func cloneContents() -> DocumentFragment {
        jsObject["cloneContents"]!().fromJSValue()!
    }

    public func insertNode(node: Node) {
        _ = jsObject["insertNode"]!(node.jsValue())
    }

    public func surroundContents(newParent: Node) {
        _ = jsObject["surroundContents"]!(newParent.jsValue())
    }

    public func cloneRange() -> Self {
        jsObject["cloneRange"]!().fromJSValue()!
    }

    public func detach() {
        _ = jsObject["detach"]!()
    }

    public func isPointInRange(node: Node, offset: UInt32) -> Bool {
        jsObject["isPointInRange"]!(node.jsValue(), offset.jsValue()).fromJSValue()!
    }

    public func comparePoint(node: Node, offset: UInt32) -> Int16 {
        jsObject["comparePoint"]!(node.jsValue(), offset.jsValue()).fromJSValue()!
    }

    public func intersectsNode(node: Node) -> Bool {
        jsObject["intersectsNode"]!(node.jsValue()).fromJSValue()!
    }

    public var description: String {
        jsObject["toString"]!().fromJSValue()!
    }
}
