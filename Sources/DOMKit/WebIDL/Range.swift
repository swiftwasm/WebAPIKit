// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class Range: AbstractRange {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.Range].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _commonAncestorContainer = ReadonlyAttribute(jsObject: jsObject, name: Strings.commonAncestorContainer)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new(arguments: []))
    }

    @ReadonlyAttribute
    public var commonAncestorContainer: Node

    @inlinable public func setStart(node: Node, offset: UInt32) {
        let this = jsObject
        _ = this[Strings.setStart].function!(this: this, arguments: [node.jsValue, offset.jsValue])
    }

    @inlinable public func setEnd(node: Node, offset: UInt32) {
        let this = jsObject
        _ = this[Strings.setEnd].function!(this: this, arguments: [node.jsValue, offset.jsValue])
    }

    @inlinable public func setStartBefore(node: Node) {
        let this = jsObject
        _ = this[Strings.setStartBefore].function!(this: this, arguments: [node.jsValue])
    }

    @inlinable public func setStartAfter(node: Node) {
        let this = jsObject
        _ = this[Strings.setStartAfter].function!(this: this, arguments: [node.jsValue])
    }

    @inlinable public func setEndBefore(node: Node) {
        let this = jsObject
        _ = this[Strings.setEndBefore].function!(this: this, arguments: [node.jsValue])
    }

    @inlinable public func setEndAfter(node: Node) {
        let this = jsObject
        _ = this[Strings.setEndAfter].function!(this: this, arguments: [node.jsValue])
    }

    @inlinable public func collapse(toStart: Bool? = nil) {
        let this = jsObject
        _ = this[Strings.collapse].function!(this: this, arguments: [toStart?.jsValue ?? .undefined])
    }

    @inlinable public func selectNode(node: Node) {
        let this = jsObject
        _ = this[Strings.selectNode].function!(this: this, arguments: [node.jsValue])
    }

    @inlinable public func selectNodeContents(node: Node) {
        let this = jsObject
        _ = this[Strings.selectNodeContents].function!(this: this, arguments: [node.jsValue])
    }

    public static let START_TO_START: UInt16 = 0

    public static let START_TO_END: UInt16 = 1

    public static let END_TO_END: UInt16 = 2

    public static let END_TO_START: UInt16 = 3

    @inlinable public func compareBoundaryPoints(how: UInt16, sourceRange: Range) -> Int16 {
        let this = jsObject
        return this[Strings.compareBoundaryPoints].function!(this: this, arguments: [how.jsValue, sourceRange.jsValue]).fromJSValue()!
    }

    @inlinable public func deleteContents() {
        let this = jsObject
        _ = this[Strings.deleteContents].function!(this: this, arguments: [])
    }

    @inlinable public func extractContents() -> DocumentFragment {
        let this = jsObject
        return this[Strings.extractContents].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func cloneContents() -> DocumentFragment {
        let this = jsObject
        return this[Strings.cloneContents].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func insertNode(node: Node) {
        let this = jsObject
        _ = this[Strings.insertNode].function!(this: this, arguments: [node.jsValue])
    }

    @inlinable public func surroundContents(newParent: Node) {
        let this = jsObject
        _ = this[Strings.surroundContents].function!(this: this, arguments: [newParent.jsValue])
    }

    @inlinable public func cloneRange() -> Self {
        let this = jsObject
        return this[Strings.cloneRange].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func detach() {
        let this = jsObject
        _ = this[Strings.detach].function!(this: this, arguments: [])
    }

    @inlinable public func isPointInRange(node: Node, offset: UInt32) -> Bool {
        let this = jsObject
        return this[Strings.isPointInRange].function!(this: this, arguments: [node.jsValue, offset.jsValue]).fromJSValue()!
    }

    @inlinable public func comparePoint(node: Node, offset: UInt32) -> Int16 {
        let this = jsObject
        return this[Strings.comparePoint].function!(this: this, arguments: [node.jsValue, offset.jsValue]).fromJSValue()!
    }

    @inlinable public func intersectsNode(node: Node) -> Bool {
        let this = jsObject
        return this[Strings.intersectsNode].function!(this: this, arguments: [node.jsValue]).fromJSValue()!
    }

    @inlinable public var description: String {
        jsObject[Strings.toString]!().fromJSValue()!
    }
}
