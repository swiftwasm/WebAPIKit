// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class Range: AbstractRange {
    override public class var constructor: JSFunction { JSObject.global.Range.function! }

    private enum Keys {
        static let END_TO_END: JSString = "END_TO_END"
        static let END_TO_START: JSString = "END_TO_START"
        static let START_TO_END: JSString = "START_TO_END"
        static let START_TO_START: JSString = "START_TO_START"
        static let cloneContents: JSString = "cloneContents"
        static let cloneRange: JSString = "cloneRange"
        static let collapse: JSString = "collapse"
        static let commonAncestorContainer: JSString = "commonAncestorContainer"
        static let compareBoundaryPoints: JSString = "compareBoundaryPoints"
        static let comparePoint: JSString = "comparePoint"
        static let deleteContents: JSString = "deleteContents"
        static let detach: JSString = "detach"
        static let extractContents: JSString = "extractContents"
        static let insertNode: JSString = "insertNode"
        static let intersectsNode: JSString = "intersectsNode"
        static let isPointInRange: JSString = "isPointInRange"
        static let selectNode: JSString = "selectNode"
        static let selectNodeContents: JSString = "selectNodeContents"
        static let setEnd: JSString = "setEnd"
        static let setEndAfter: JSString = "setEndAfter"
        static let setEndBefore: JSString = "setEndBefore"
        static let setStart: JSString = "setStart"
        static let setStartAfter: JSString = "setStartAfter"
        static let setStartBefore: JSString = "setStartBefore"
        static let surroundContents: JSString = "surroundContents"
    }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _commonAncestorContainer = ReadonlyAttribute(jsObject: jsObject, name: Keys.commonAncestorContainer)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    @ReadonlyAttribute
    public var commonAncestorContainer: Node

    public func setStart(node: Node, offset: UInt32) {
        jsObject[Keys.setStart]!(node.jsValue(), offset.jsValue()).fromJSValue()!
    }

    public func setEnd(node: Node, offset: UInt32) {
        jsObject[Keys.setEnd]!(node.jsValue(), offset.jsValue()).fromJSValue()!
    }

    public func setStartBefore(node: Node) {
        jsObject[Keys.setStartBefore]!(node.jsValue()).fromJSValue()!
    }

    public func setStartAfter(node: Node) {
        jsObject[Keys.setStartAfter]!(node.jsValue()).fromJSValue()!
    }

    public func setEndBefore(node: Node) {
        jsObject[Keys.setEndBefore]!(node.jsValue()).fromJSValue()!
    }

    public func setEndAfter(node: Node) {
        jsObject[Keys.setEndAfter]!(node.jsValue()).fromJSValue()!
    }

    public func collapse(toStart: Bool? = nil) {
        jsObject[Keys.collapse]!(toStart?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func selectNode(node: Node) {
        jsObject[Keys.selectNode]!(node.jsValue()).fromJSValue()!
    }

    public func selectNodeContents(node: Node) {
        jsObject[Keys.selectNodeContents]!(node.jsValue()).fromJSValue()!
    }

    public static let START_TO_START: UInt16 = 0

    public static let START_TO_END: UInt16 = 1

    public static let END_TO_END: UInt16 = 2

    public static let END_TO_START: UInt16 = 3

    public func compareBoundaryPoints(how: UInt16, sourceRange: Range) -> Int16 {
        jsObject[Keys.compareBoundaryPoints]!(how.jsValue(), sourceRange.jsValue()).fromJSValue()!
    }

    public func deleteContents() {
        jsObject[Keys.deleteContents]!().fromJSValue()!
    }

    public func extractContents() -> DocumentFragment {
        jsObject[Keys.extractContents]!().fromJSValue()!
    }

    public func cloneContents() -> DocumentFragment {
        jsObject[Keys.cloneContents]!().fromJSValue()!
    }

    public func insertNode(node: Node) {
        jsObject[Keys.insertNode]!(node.jsValue()).fromJSValue()!
    }

    public func surroundContents(newParent: Node) {
        jsObject[Keys.surroundContents]!(newParent.jsValue()).fromJSValue()!
    }

    public func cloneRange() -> Self {
        jsObject[Keys.cloneRange]!().fromJSValue()!
    }

    public func detach() {
        jsObject[Keys.detach]!().fromJSValue()!
    }

    public func isPointInRange(node: Node, offset: UInt32) -> Bool {
        jsObject[Keys.isPointInRange]!(node.jsValue(), offset.jsValue()).fromJSValue()!
    }

    public func comparePoint(node: Node, offset: UInt32) -> Int16 {
        jsObject[Keys.comparePoint]!(node.jsValue(), offset.jsValue()).fromJSValue()!
    }

    public func intersectsNode(node: Node) -> Bool {
        jsObject[Keys.intersectsNode]!(node.jsValue()).fromJSValue()!
    }

    public var description: String {
        jsObject[Strings.toString]!().fromJSValue()!
    }
}
