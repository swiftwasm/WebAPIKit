// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class SerialPort: EventTarget {
    override public class var constructor: JSFunction { JSObject.global[Strings.SerialPort].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _onconnect = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onconnect)
        _ondisconnect = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.ondisconnect)
        _readable = ReadonlyAttribute(jsObject: jsObject, name: Strings.readable)
        _writable = ReadonlyAttribute(jsObject: jsObject, name: Strings.writable)
        super.init(unsafelyWrapping: jsObject)
    }

    @ClosureAttribute1Optional
    public var onconnect: EventHandler

    @ClosureAttribute1Optional
    public var ondisconnect: EventHandler

    @ReadonlyAttribute
    public var readable: ReadableStream

    @ReadonlyAttribute
    public var writable: WritableStream

    public func getInfo() -> SerialPortInfo {
        jsObject[Strings.getInfo]!().fromJSValue()!
    }

    public func open(options: SerialOptions) -> JSPromise {
        jsObject[Strings.open]!(options.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func open(options: SerialOptions) async throws {
        let _promise: JSPromise = jsObject[Strings.open]!(options.jsValue()).fromJSValue()!
        _ = try await _promise.get()
    }

    public func setSignals(signals: SerialOutputSignals? = nil) -> JSPromise {
        jsObject[Strings.setSignals]!(signals?.jsValue() ?? .undefined).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func setSignals(signals: SerialOutputSignals? = nil) async throws {
        let _promise: JSPromise = jsObject[Strings.setSignals]!(signals?.jsValue() ?? .undefined).fromJSValue()!
        _ = try await _promise.get()
    }

    public func getSignals() -> JSPromise {
        jsObject[Strings.getSignals]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func getSignals() async throws -> SerialInputSignals {
        let _promise: JSPromise = jsObject[Strings.getSignals]!().fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func close() -> JSPromise {
        jsObject[Strings.close]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func close() async throws {
        let _promise: JSPromise = jsObject[Strings.close]!().fromJSValue()!
        _ = try await _promise.get()
    }
}
