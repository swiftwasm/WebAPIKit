// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class TreeWalker: JSBridgedClass {
    @inlinable public class var constructor: JSFunction { JSObject.global[Strings.TreeWalker].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _root = ReadonlyAttribute(jsObject: jsObject, name: Strings.root)
        _whatToShow = ReadonlyAttribute(jsObject: jsObject, name: Strings.whatToShow)
        _currentNode = ReadWriteAttribute(jsObject: jsObject, name: Strings.currentNode)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var root: Node

    @ReadonlyAttribute
    public var whatToShow: UInt32

    // XXX: member 'filter' is ignored

    @ReadWriteAttribute
    public var currentNode: Node

    @inlinable public func parentNode() -> Node? {
        let this = jsObject
        return this[Strings.parentNode].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func firstChild() -> Node? {
        let this = jsObject
        return this[Strings.firstChild].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func lastChild() -> Node? {
        let this = jsObject
        return this[Strings.lastChild].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func previousSibling() -> Node? {
        let this = jsObject
        return this[Strings.previousSibling].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func nextSibling() -> Node? {
        let this = jsObject
        return this[Strings.nextSibling].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func previousNode() -> Node? {
        let this = jsObject
        return this[Strings.previousNode].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func nextNode() -> Node? {
        let this = jsObject
        return this[Strings.nextNode].function!(this: this, arguments: []).fromJSValue()!
    }
}
