// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class TreeWalker: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global.TreeWalker.function! }

    private enum Keys {
        static let currentNode: JSString = "currentNode"
        static let filter: JSString = "filter"
        static let firstChild: JSString = "firstChild"
        static let lastChild: JSString = "lastChild"
        static let nextNode: JSString = "nextNode"
        static let nextSibling: JSString = "nextSibling"
        static let parentNode: JSString = "parentNode"
        static let previousNode: JSString = "previousNode"
        static let previousSibling: JSString = "previousSibling"
        static let root: JSString = "root"
        static let whatToShow: JSString = "whatToShow"
    }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _root = ReadonlyAttribute(jsObject: jsObject, name: Keys.root)
        _whatToShow = ReadonlyAttribute(jsObject: jsObject, name: Keys.whatToShow)
        _currentNode = ReadWriteAttribute(jsObject: jsObject, name: Keys.currentNode)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var root: Node

    @ReadonlyAttribute
    public var whatToShow: UInt32

    // XXX: member 'filter' is ignored

    @ReadWriteAttribute
    public var currentNode: Node

    public func parentNode() -> Node? {
        jsObject[Keys.parentNode]!().fromJSValue()!
    }

    public func firstChild() -> Node? {
        jsObject[Keys.firstChild]!().fromJSValue()!
    }

    public func lastChild() -> Node? {
        jsObject[Keys.lastChild]!().fromJSValue()!
    }

    public func previousSibling() -> Node? {
        jsObject[Keys.previousSibling]!().fromJSValue()!
    }

    public func nextSibling() -> Node? {
        jsObject[Keys.nextSibling]!().fromJSValue()!
    }

    public func previousNode() -> Node? {
        jsObject[Keys.previousNode]!().fromJSValue()!
    }

    public func nextNode() -> Node? {
        jsObject[Keys.nextNode]!().fromJSValue()!
    }
}
