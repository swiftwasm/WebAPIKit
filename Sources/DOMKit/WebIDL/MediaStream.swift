// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class MediaStream: EventTarget {
    override public class var constructor: JSFunction { JSObject.global[Strings.MediaStream].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _active = ReadonlyAttribute(jsObject: jsObject, name: Strings.active)
        _onaddtrack = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onaddtrack)
        _onremovetrack = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onremovetrack)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    public convenience init(stream: MediaStream) {
        self.init(unsafelyWrapping: Self.constructor.new(stream.jsValue()))
    }

    public convenience init(tracks: [MediaStreamTrack]) {
        self.init(unsafelyWrapping: Self.constructor.new(tracks.jsValue()))
    }

    @ReadonlyAttribute
    public var id: String

    public func getAudioTracks() -> [MediaStreamTrack] {
        jsObject[Strings.getAudioTracks]!().fromJSValue()!
    }

    public func getVideoTracks() -> [MediaStreamTrack] {
        jsObject[Strings.getVideoTracks]!().fromJSValue()!
    }

    public func getTracks() -> [MediaStreamTrack] {
        jsObject[Strings.getTracks]!().fromJSValue()!
    }

    public func getTrackById(trackId: String) -> MediaStreamTrack? {
        jsObject[Strings.getTrackById]!(trackId.jsValue()).fromJSValue()!
    }

    public func addTrack(track: MediaStreamTrack) {
        _ = jsObject[Strings.addTrack]!(track.jsValue())
    }

    public func removeTrack(track: MediaStreamTrack) {
        _ = jsObject[Strings.removeTrack]!(track.jsValue())
    }

    public func clone() -> Self {
        jsObject[Strings.clone]!().fromJSValue()!
    }

    @ReadonlyAttribute
    public var active: Bool

    @ClosureAttribute.Optional1
    public var onaddtrack: EventHandler

    @ClosureAttribute.Optional1
    public var onremovetrack: EventHandler
}
