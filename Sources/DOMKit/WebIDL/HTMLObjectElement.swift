// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class HTMLObjectElement: HTMLElement {
    override public class var constructor: JSFunction { JSObject.global.HTMLObjectElement.function! }

    private enum Keys {
        static let hspace: JSString = "hspace"
        static let archive: JSString = "archive"
        static let type: JSString = "type"
        static let contentWindow: JSString = "contentWindow"
        static let reportValidity: JSString = "reportValidity"
        static let getSVGDocument: JSString = "getSVGDocument"
        static let validity: JSString = "validity"
        static let height: JSString = "height"
        static let validationMessage: JSString = "validationMessage"
        static let standby: JSString = "standby"
        static let contentDocument: JSString = "contentDocument"
        static let codeType: JSString = "codeType"
        static let border: JSString = "border"
        static let code: JSString = "code"
        static let declare: JSString = "declare"
        static let setCustomValidity: JSString = "setCustomValidity"
        static let checkValidity: JSString = "checkValidity"
        static let width: JSString = "width"
        static let form: JSString = "form"
        static let useMap: JSString = "useMap"
        static let align: JSString = "align"
        static let vspace: JSString = "vspace"
        static let willValidate: JSString = "willValidate"
        static let name: JSString = "name"
        static let codeBase: JSString = "codeBase"
        static let data: JSString = "data"
    }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _data = ReadWriteAttribute(jsObject: jsObject, name: Keys.data)
        _type = ReadWriteAttribute(jsObject: jsObject, name: Keys.type)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Keys.name)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Keys.form)
        _width = ReadWriteAttribute(jsObject: jsObject, name: Keys.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Keys.height)
        _contentDocument = ReadonlyAttribute(jsObject: jsObject, name: Keys.contentDocument)
        _contentWindow = ReadonlyAttribute(jsObject: jsObject, name: Keys.contentWindow)
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: Keys.willValidate)
        _validity = ReadonlyAttribute(jsObject: jsObject, name: Keys.validity)
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: Keys.validationMessage)
        _align = ReadWriteAttribute(jsObject: jsObject, name: Keys.align)
        _archive = ReadWriteAttribute(jsObject: jsObject, name: Keys.archive)
        _code = ReadWriteAttribute(jsObject: jsObject, name: Keys.code)
        _declare = ReadWriteAttribute(jsObject: jsObject, name: Keys.declare)
        _hspace = ReadWriteAttribute(jsObject: jsObject, name: Keys.hspace)
        _standby = ReadWriteAttribute(jsObject: jsObject, name: Keys.standby)
        _vspace = ReadWriteAttribute(jsObject: jsObject, name: Keys.vspace)
        _codeBase = ReadWriteAttribute(jsObject: jsObject, name: Keys.codeBase)
        _codeType = ReadWriteAttribute(jsObject: jsObject, name: Keys.codeType)
        _useMap = ReadWriteAttribute(jsObject: jsObject, name: Keys.useMap)
        _border = ReadWriteAttribute(jsObject: jsObject, name: Keys.border)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    @ReadWriteAttribute
    public var data: String

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var name: String

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var width: String

    @ReadWriteAttribute
    public var height: String

    @ReadonlyAttribute
    public var contentDocument: Document?

    @ReadonlyAttribute
    public var contentWindow: WindowProxy?

    public func getSVGDocument() -> Document? {
        jsObject[Keys.getSVGDocument]!().fromJSValue()!
    }

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    public func checkValidity() -> Bool {
        jsObject[Keys.checkValidity]!().fromJSValue()!
    }

    public func reportValidity() -> Bool {
        jsObject[Keys.reportValidity]!().fromJSValue()!
    }

    public func setCustomValidity(error: String) {
        _ = jsObject[Keys.setCustomValidity]!(error.jsValue())
    }

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var archive: String

    @ReadWriteAttribute
    public var code: String

    @ReadWriteAttribute
    public var declare: Bool

    @ReadWriteAttribute
    public var hspace: UInt32

    @ReadWriteAttribute
    public var standby: String

    @ReadWriteAttribute
    public var vspace: UInt32

    @ReadWriteAttribute
    public var codeBase: String

    @ReadWriteAttribute
    public var codeType: String

    @ReadWriteAttribute
    public var useMap: String

    @ReadWriteAttribute
    public var border: String
}
