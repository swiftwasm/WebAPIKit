// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class HTMLObjectElement: HTMLElement {
    override public class var constructor: JSFunction { JSObject.global.HTMLObjectElement.function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _data = ReadWriteAttribute(jsObject: jsObject, name: "data")
        _type = ReadWriteAttribute(jsObject: jsObject, name: "type")
        _name = ReadWriteAttribute(jsObject: jsObject, name: "name")
        _form = ReadonlyAttribute(jsObject: jsObject, name: "form")
        _width = ReadWriteAttribute(jsObject: jsObject, name: "width")
        _height = ReadWriteAttribute(jsObject: jsObject, name: "height")
        _contentDocument = ReadonlyAttribute(jsObject: jsObject, name: "contentDocument")
        _contentWindow = ReadonlyAttribute(jsObject: jsObject, name: "contentWindow")
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: "willValidate")
        _validity = ReadonlyAttribute(jsObject: jsObject, name: "validity")
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: "validationMessage")
        _align = ReadWriteAttribute(jsObject: jsObject, name: "align")
        _archive = ReadWriteAttribute(jsObject: jsObject, name: "archive")
        _code = ReadWriteAttribute(jsObject: jsObject, name: "code")
        _declare = ReadWriteAttribute(jsObject: jsObject, name: "declare")
        _hspace = ReadWriteAttribute(jsObject: jsObject, name: "hspace")
        _standby = ReadWriteAttribute(jsObject: jsObject, name: "standby")
        _vspace = ReadWriteAttribute(jsObject: jsObject, name: "vspace")
        _codeBase = ReadWriteAttribute(jsObject: jsObject, name: "codeBase")
        _codeType = ReadWriteAttribute(jsObject: jsObject, name: "codeType")
        _useMap = ReadWriteAttribute(jsObject: jsObject, name: "useMap")
        _border = ReadWriteAttribute(jsObject: jsObject, name: "border")
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    @ReadWriteAttribute
    public var data: String

    @ReadWriteAttribute
    public var type: String

    @ReadWriteAttribute
    public var name: String

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var width: String

    @ReadWriteAttribute
    public var height: String

    @ReadonlyAttribute
    public var contentDocument: Document?

    @ReadonlyAttribute
    public var contentWindow: WindowProxy?

    public func getSVGDocument() -> Document? {
        jsObject["getSVGDocument"]!().fromJSValue()!
    }

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    public func checkValidity() -> Bool {
        jsObject["checkValidity"]!().fromJSValue()!
    }

    public func reportValidity() -> Bool {
        jsObject["reportValidity"]!().fromJSValue()!
    }

    public func setCustomValidity(error: String) {
        _ = jsObject["setCustomValidity"]!(error.jsValue())
    }

    @ReadWriteAttribute
    public var align: String

    @ReadWriteAttribute
    public var archive: String

    @ReadWriteAttribute
    public var code: String

    @ReadWriteAttribute
    public var declare: Bool

    @ReadWriteAttribute
    public var hspace: UInt32

    @ReadWriteAttribute
    public var standby: String

    @ReadWriteAttribute
    public var vspace: UInt32

    @ReadWriteAttribute
    public var codeBase: String

    @ReadWriteAttribute
    public var codeType: String

    @ReadWriteAttribute
    public var useMap: String

    @ReadWriteAttribute
    public var border: String
}
