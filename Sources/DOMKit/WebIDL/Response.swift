// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class Response: JSBridgedClass, Body {
    public class var constructor: JSFunction { JSObject.global[Strings.Response].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _url = ReadonlyAttribute(jsObject: jsObject, name: Strings.url)
        _redirected = ReadonlyAttribute(jsObject: jsObject, name: Strings.redirected)
        _status = ReadonlyAttribute(jsObject: jsObject, name: Strings.status)
        _ok = ReadonlyAttribute(jsObject: jsObject, name: Strings.ok)
        _statusText = ReadonlyAttribute(jsObject: jsObject, name: Strings.statusText)
        _headers = ReadonlyAttribute(jsObject: jsObject, name: Strings.headers)
        self.jsObject = jsObject
    }

    public convenience init(body: BodyInit? = nil, init: ResponseInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor.new(body?.jsValue() ?? .undefined, `init`?.jsValue() ?? .undefined))
    }

    public static func error() -> Self {
        let this = constructor
        return this[Strings.error].function!(this: this, arguments: []).fromJSValue()!
    }

    public static func redirect(url: String, status: UInt16? = nil) -> Self {
        let this = constructor
        return this[Strings.redirect].function!(this: this, arguments: [url.jsValue(), status?.jsValue() ?? .undefined]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var type: ResponseType

    @ReadonlyAttribute
    public var url: String

    @ReadonlyAttribute
    public var redirected: Bool

    @ReadonlyAttribute
    public var status: UInt16

    @ReadonlyAttribute
    public var ok: Bool

    @ReadonlyAttribute
    public var statusText: String

    @ReadonlyAttribute
    public var headers: Headers

    public func clone() -> Self {
        let this = jsObject
        return this[Strings.clone].function!(this: this, arguments: []).fromJSValue()!
    }
}
