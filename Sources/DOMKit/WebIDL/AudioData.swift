// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class AudioData: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global[Strings.AudioData].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _format = ReadonlyAttribute(jsObject: jsObject, name: Strings.format)
        _sampleRate = ReadonlyAttribute(jsObject: jsObject, name: Strings.sampleRate)
        _numberOfFrames = ReadonlyAttribute(jsObject: jsObject, name: Strings.numberOfFrames)
        _numberOfChannels = ReadonlyAttribute(jsObject: jsObject, name: Strings.numberOfChannels)
        _duration = ReadonlyAttribute(jsObject: jsObject, name: Strings.duration)
        _timestamp = ReadonlyAttribute(jsObject: jsObject, name: Strings.timestamp)
        self.jsObject = jsObject
    }

    public convenience init(init: AudioDataInit) {
        self.init(unsafelyWrapping: Self.constructor.new(`init`.jsValue()))
    }

    @ReadonlyAttribute
    public var format: AudioSampleFormat?

    @ReadonlyAttribute
    public var sampleRate: Float

    @ReadonlyAttribute
    public var numberOfFrames: UInt32

    @ReadonlyAttribute
    public var numberOfChannels: UInt32

    @ReadonlyAttribute
    public var duration: UInt64

    @ReadonlyAttribute
    public var timestamp: Int64

    public func allocationSize(options: AudioDataCopyToOptions) -> UInt32 {
        jsObject[Strings.allocationSize]!(options.jsValue()).fromJSValue()!
    }

    public func copyTo(destination: BufferSource, options: AudioDataCopyToOptions) {
        _ = jsObject[Strings.copyTo]!(destination.jsValue(), options.jsValue())
    }

    public func clone() -> Self {
        jsObject[Strings.clone]!().fromJSValue()!
    }

    public func close() {
        _ = jsObject[Strings.close]!()
    }
}
