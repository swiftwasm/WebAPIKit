// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class TrustedTypePolicyFactory: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global[Strings.TrustedTypePolicyFactory].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _emptyHTML = ReadonlyAttribute(jsObject: jsObject, name: Strings.emptyHTML)
        _emptyScript = ReadonlyAttribute(jsObject: jsObject, name: Strings.emptyScript)
        _defaultPolicy = ReadonlyAttribute(jsObject: jsObject, name: Strings.defaultPolicy)
        self.jsObject = jsObject
    }

    public func createPolicy(policyName: String, policyOptions: TrustedTypePolicyOptions? = nil) -> TrustedTypePolicy {
        jsObject[Strings.createPolicy]!(policyName.jsValue(), policyOptions?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func isHTML(value: JSValue) -> Bool {
        jsObject[Strings.isHTML]!(value.jsValue()).fromJSValue()!
    }

    public func isScript(value: JSValue) -> Bool {
        jsObject[Strings.isScript]!(value.jsValue()).fromJSValue()!
    }

    public func isScriptURL(value: JSValue) -> Bool {
        jsObject[Strings.isScriptURL]!(value.jsValue()).fromJSValue()!
    }

    @ReadonlyAttribute
    public var emptyHTML: TrustedHTML

    @ReadonlyAttribute
    public var emptyScript: TrustedScript

    public func getAttributeType(tagName: String, attribute: String, elementNs: String? = nil, attrNs: String? = nil) -> String? {
        jsObject[Strings.getAttributeType]!(tagName.jsValue(), attribute.jsValue(), elementNs?.jsValue() ?? .undefined, attrNs?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func getPropertyType(tagName: String, property: String, elementNs: String? = nil) -> String? {
        jsObject[Strings.getPropertyType]!(tagName.jsValue(), property.jsValue(), elementNs?.jsValue() ?? .undefined).fromJSValue()!
    }

    @ReadonlyAttribute
    public var defaultPolicy: TrustedTypePolicy?
}
