// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class RTCRtpSender: JSBridgedClass {
    @inlinable public class var constructor: JSFunction { JSObject.global[Strings.RTCRtpSender].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _transform = ReadWriteAttribute(jsObject: jsObject, name: Strings.transform)
        _track = ReadonlyAttribute(jsObject: jsObject, name: Strings.track)
        _transport = ReadonlyAttribute(jsObject: jsObject, name: Strings.transport)
        _dtmf = ReadonlyAttribute(jsObject: jsObject, name: Strings.dtmf)
        self.jsObject = jsObject
    }

    @ReadWriteAttribute
    public var transform: RTCRtpTransform?

    @inlinable public func generateKeyFrame(rids: [String]? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.generateKeyFrame].function!(this: this, arguments: [rids?.jsValue ?? .undefined]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func generateKeyFrame(rids: [String]? = nil) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.generateKeyFrame].function!(this: this, arguments: [rids?.jsValue ?? .undefined]).fromJSValue()!
        _ = try await _promise.value
    }

    @ReadonlyAttribute
    public var track: MediaStreamTrack?

    @ReadonlyAttribute
    public var transport: RTCDtlsTransport?

    @inlinable public static func getCapabilities(kind: String) -> RTCRtpCapabilities? {
        let this = constructor
        return this[Strings.getCapabilities].function!(this: this, arguments: [kind.jsValue]).fromJSValue()!
    }

    @inlinable public func setParameters(parameters: RTCRtpSendParameters) -> JSPromise {
        let this = jsObject
        return this[Strings.setParameters].function!(this: this, arguments: [parameters.jsValue]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func setParameters(parameters: RTCRtpSendParameters) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.setParameters].function!(this: this, arguments: [parameters.jsValue]).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func getParameters() -> RTCRtpSendParameters {
        let this = jsObject
        return this[Strings.getParameters].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func replaceTrack(withTrack: MediaStreamTrack?) -> JSPromise {
        let this = jsObject
        return this[Strings.replaceTrack].function!(this: this, arguments: [withTrack.jsValue]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func replaceTrack(withTrack: MediaStreamTrack?) async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.replaceTrack].function!(this: this, arguments: [withTrack.jsValue]).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func setStreams(streams: MediaStream...) {
        let this = jsObject
        _ = this[Strings.setStreams].function!(this: this, arguments: streams.map(\.jsValue))
    }

    @inlinable public func getStats() -> JSPromise {
        let this = jsObject
        return this[Strings.getStats].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func getStats() async throws -> RTCStatsReport {
        let this = jsObject
        let _promise: JSPromise = this[Strings.getStats].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @ReadonlyAttribute
    public var dtmf: RTCDTMFSender?
}
