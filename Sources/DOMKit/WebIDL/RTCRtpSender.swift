// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class RTCRtpSender: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global[Strings.RTCRtpSender].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _track = ReadonlyAttribute(jsObject: jsObject, name: Strings.track)
        _transport = ReadonlyAttribute(jsObject: jsObject, name: Strings.transport)
        _dtmf = ReadonlyAttribute(jsObject: jsObject, name: Strings.dtmf)
        _transform = ReadWriteAttribute(jsObject: jsObject, name: Strings.transform)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var track: MediaStreamTrack?

    @ReadonlyAttribute
    public var transport: RTCDtlsTransport?

    public static func getCapabilities(kind: String) -> RTCRtpCapabilities? {
        constructor[Strings.getCapabilities]!(kind.jsValue()).fromJSValue()!
    }

    public func setParameters(parameters: RTCRtpSendParameters) -> JSPromise {
        jsObject[Strings.setParameters]!(parameters.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func setParameters(parameters: RTCRtpSendParameters) async throws {
        let _promise: JSPromise = jsObject[Strings.setParameters]!(parameters.jsValue()).fromJSValue()!
        _ = try await _promise.get()
    }

    public func getParameters() -> RTCRtpSendParameters {
        jsObject[Strings.getParameters]!().fromJSValue()!
    }

    public func replaceTrack(withTrack: MediaStreamTrack?) -> JSPromise {
        jsObject[Strings.replaceTrack]!(withTrack.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func replaceTrack(withTrack: MediaStreamTrack?) async throws {
        let _promise: JSPromise = jsObject[Strings.replaceTrack]!(withTrack.jsValue()).fromJSValue()!
        _ = try await _promise.get()
    }

    public func setStreams(streams: MediaStream...) {
        _ = jsObject[Strings.setStreams]!(streams.jsValue())
    }

    public func getStats() -> JSPromise {
        jsObject[Strings.getStats]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func getStats() async throws -> RTCStatsReport {
        let _promise: JSPromise = jsObject[Strings.getStats]!().fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    @ReadonlyAttribute
    public var dtmf: RTCDTMFSender?

    @ReadWriteAttribute
    public var transform: RTCRtpTransform?

    public func generateKeyFrame(rids: [String]? = nil) -> JSPromise {
        jsObject[Strings.generateKeyFrame]!(rids?.jsValue() ?? .undefined).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func generateKeyFrame(rids: [String]? = nil) async throws {
        let _promise: JSPromise = jsObject[Strings.generateKeyFrame]!(rids?.jsValue() ?? .undefined).fromJSValue()!
        _ = try await _promise.get()
    }
}
