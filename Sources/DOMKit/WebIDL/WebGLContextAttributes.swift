// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class WebGLContextAttributes: BridgedDictionary {
    public convenience init(alpha: Bool, depth: Bool, stencil: Bool, antialias: Bool, premultipliedAlpha: Bool, preserveDrawingBuffer: Bool, powerPreference: WebGLPowerPreference, failIfMajorPerformanceCaveat: Bool, desynchronized: Bool, xrCompatible: Bool) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.alpha] = alpha.jsValue
        object[Strings.depth] = depth.jsValue
        object[Strings.stencil] = stencil.jsValue
        object[Strings.antialias] = antialias.jsValue
        object[Strings.premultipliedAlpha] = premultipliedAlpha.jsValue
        object[Strings.preserveDrawingBuffer] = preserveDrawingBuffer.jsValue
        object[Strings.powerPreference] = powerPreference.jsValue
        object[Strings.failIfMajorPerformanceCaveat] = failIfMajorPerformanceCaveat.jsValue
        object[Strings.desynchronized] = desynchronized.jsValue
        object[Strings.xrCompatible] = xrCompatible.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _alpha = ReadWriteAttribute(jsObject: object, name: Strings.alpha)
        _depth = ReadWriteAttribute(jsObject: object, name: Strings.depth)
        _stencil = ReadWriteAttribute(jsObject: object, name: Strings.stencil)
        _antialias = ReadWriteAttribute(jsObject: object, name: Strings.antialias)
        _premultipliedAlpha = ReadWriteAttribute(jsObject: object, name: Strings.premultipliedAlpha)
        _preserveDrawingBuffer = ReadWriteAttribute(jsObject: object, name: Strings.preserveDrawingBuffer)
        _powerPreference = ReadWriteAttribute(jsObject: object, name: Strings.powerPreference)
        _failIfMajorPerformanceCaveat = ReadWriteAttribute(jsObject: object, name: Strings.failIfMajorPerformanceCaveat)
        _desynchronized = ReadWriteAttribute(jsObject: object, name: Strings.desynchronized)
        _xrCompatible = ReadWriteAttribute(jsObject: object, name: Strings.xrCompatible)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var alpha: Bool

    @ReadWriteAttribute
    public var depth: Bool

    @ReadWriteAttribute
    public var stencil: Bool

    @ReadWriteAttribute
    public var antialias: Bool

    @ReadWriteAttribute
    public var premultipliedAlpha: Bool

    @ReadWriteAttribute
    public var preserveDrawingBuffer: Bool

    @ReadWriteAttribute
    public var powerPreference: WebGLPowerPreference

    @ReadWriteAttribute
    public var failIfMajorPerformanceCaveat: Bool

    @ReadWriteAttribute
    public var desynchronized: Bool

    @ReadWriteAttribute
    public var xrCompatible: Bool
}
