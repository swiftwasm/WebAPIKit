// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class HTMLElement: Element, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable, HTMLOrSVGElement {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.HTMLElement].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _title = ReadWriteAttribute(jsObject: jsObject, name: Strings.title)
        _lang = ReadWriteAttribute(jsObject: jsObject, name: Strings.lang)
        _translate = ReadWriteAttribute(jsObject: jsObject, name: Strings.translate)
        _dir = ReadWriteAttribute(jsObject: jsObject, name: Strings.dir)
        _hidden = ReadWriteAttribute(jsObject: jsObject, name: Strings.hidden)
        _inert = ReadWriteAttribute(jsObject: jsObject, name: Strings.inert)
        _accessKey = ReadWriteAttribute(jsObject: jsObject, name: Strings.accessKey)
        _accessKeyLabel = ReadonlyAttribute(jsObject: jsObject, name: Strings.accessKeyLabel)
        _draggable = ReadWriteAttribute(jsObject: jsObject, name: Strings.draggable)
        _spellcheck = ReadWriteAttribute(jsObject: jsObject, name: Strings.spellcheck)
        _autocapitalize = ReadWriteAttribute(jsObject: jsObject, name: Strings.autocapitalize)
        _innerText = ReadWriteAttribute(jsObject: jsObject, name: Strings.innerText)
        _outerText = ReadWriteAttribute(jsObject: jsObject, name: Strings.outerText)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new(arguments: []))
    }

    @ReadWriteAttribute
    public var title: String

    @ReadWriteAttribute
    public var lang: String

    @ReadWriteAttribute
    public var translate: Bool

    @ReadWriteAttribute
    public var dir: String

    @ReadWriteAttribute
    public var hidden: Bool

    @ReadWriteAttribute
    public var inert: Bool

    @inlinable public func click() {
        let this = jsObject
        _ = this[Strings.click].function!(this: this, arguments: [])
    }

    @ReadWriteAttribute
    public var accessKey: String

    @ReadonlyAttribute
    public var accessKeyLabel: String

    @ReadWriteAttribute
    public var draggable: Bool

    @ReadWriteAttribute
    public var spellcheck: Bool

    @ReadWriteAttribute
    public var autocapitalize: String

    @ReadWriteAttribute
    public var innerText: String

    @ReadWriteAttribute
    public var outerText: String

    @inlinable public func attachInternals() -> ElementInternals {
        let this = jsObject
        return this[Strings.attachInternals].function!(this: this, arguments: []).fromJSValue()!
    }
}
