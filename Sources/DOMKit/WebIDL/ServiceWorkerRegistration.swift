// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class ServiceWorkerRegistration: EventTarget {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.ServiceWorkerRegistration].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _installing = ReadonlyAttribute(jsObject: jsObject, name: Strings.installing)
        _waiting = ReadonlyAttribute(jsObject: jsObject, name: Strings.waiting)
        _active = ReadonlyAttribute(jsObject: jsObject, name: Strings.active)
        _navigationPreload = ReadonlyAttribute(jsObject: jsObject, name: Strings.navigationPreload)
        _scope = ReadonlyAttribute(jsObject: jsObject, name: Strings.scope)
        _updateViaCache = ReadonlyAttribute(jsObject: jsObject, name: Strings.updateViaCache)
        _onupdatefound = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onupdatefound)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var installing: ServiceWorker?

    @ReadonlyAttribute
    public var waiting: ServiceWorker?

    @ReadonlyAttribute
    public var active: ServiceWorker?

    @ReadonlyAttribute
    public var navigationPreload: NavigationPreloadManager

    @ReadonlyAttribute
    public var scope: String

    @ReadonlyAttribute
    public var updateViaCache: ServiceWorkerUpdateViaCache

    @inlinable public func update() -> JSPromise {
        let this = jsObject
        return this[Strings.update].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func update() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.update].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.value
    }

    @inlinable public func unregister() -> JSPromise {
        let this = jsObject
        return this[Strings.unregister].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func unregister() async throws -> Bool {
        let this = jsObject
        let _promise: JSPromise = this[Strings.unregister].function!(this: this, arguments: []).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @ClosureAttribute1Optional
    public var onupdatefound: EventHandler
}
