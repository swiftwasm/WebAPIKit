// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class HTMLSelectElement: HTMLElement {
    override public class var constructor: JSFunction { JSObject.global.HTMLSelectElement.function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _autocomplete = ReadWriteAttribute(jsObject: jsObject, name: Strings.autocomplete)
        _disabled = ReadWriteAttribute(jsObject: jsObject, name: Strings.disabled)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Strings.form)
        _multiple = ReadWriteAttribute(jsObject: jsObject, name: Strings.multiple)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _required = ReadWriteAttribute(jsObject: jsObject, name: Strings.required)
        _size = ReadWriteAttribute(jsObject: jsObject, name: Strings.size)
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        _options = ReadonlyAttribute(jsObject: jsObject, name: Strings.options)
        _length = ReadWriteAttribute(jsObject: jsObject, name: Strings.length)
        _selectedOptions = ReadonlyAttribute(jsObject: jsObject, name: Strings.selectedOptions)
        _selectedIndex = ReadWriteAttribute(jsObject: jsObject, name: Strings.selectedIndex)
        _value = ReadWriteAttribute(jsObject: jsObject, name: Strings.value)
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: Strings.willValidate)
        _validity = ReadonlyAttribute(jsObject: jsObject, name: Strings.validity)
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: Strings.validationMessage)
        _labels = ReadonlyAttribute(jsObject: jsObject, name: Strings.labels)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    @ReadWriteAttribute
    public var autocomplete: String

    @ReadWriteAttribute
    public var disabled: Bool

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var multiple: Bool

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var required: Bool

    @ReadWriteAttribute
    public var size: UInt32

    @ReadonlyAttribute
    public var type: String

    @ReadonlyAttribute
    public var options: HTMLOptionsCollection

    @ReadWriteAttribute
    public var length: UInt32

    public subscript(key: Int) -> HTMLOptionElement? {
        jsObject[key].fromJSValue()
    }

    public func namedItem(name: String) -> HTMLOptionElement? {
        jsObject[Strings.namedItem]!(name.jsValue()).fromJSValue()!
    }

    public func add(element: __UNSUPPORTED_UNION__, before: __UNSUPPORTED_UNION__? = nil) {
        _ = jsObject[Strings.add]!(element.jsValue(), before?.jsValue() ?? .undefined)
    }

    public func remove() {
        _ = jsObject[Strings.remove]!()
    }

    public func remove(index: Int32) {
        _ = jsObject[Strings.remove]!(index.jsValue())
    }

    // XXX: unsupported setter for keys of type UInt32

    @ReadonlyAttribute
    public var selectedOptions: HTMLCollection

    @ReadWriteAttribute
    public var selectedIndex: Int32

    @ReadWriteAttribute
    public var value: String

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    public func checkValidity() -> Bool {
        jsObject[Strings.checkValidity]!().fromJSValue()!
    }

    public func reportValidity() -> Bool {
        jsObject[Strings.reportValidity]!().fromJSValue()!
    }

    public func setCustomValidity(error: String) {
        _ = jsObject[Strings.setCustomValidity]!(error.jsValue())
    }

    @ReadonlyAttribute
    public var labels: NodeList
}
