// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class HTMLSelectElement: HTMLElement {
    override public class var constructor: JSFunction { JSObject.global.HTMLSelectElement.function! }

    private enum Keys {
        static let selectedOptions: JSString = "selectedOptions"
        static let reportValidity: JSString = "reportValidity"
        static let setCustomValidity: JSString = "setCustomValidity"
        static let autocomplete: JSString = "autocomplete"
        static let type: JSString = "type"
        static let validationMessage: JSString = "validationMessage"
        static let add: JSString = "add"
        static let selectedIndex: JSString = "selectedIndex"
        static let item: JSString = "item"
        static let value: JSString = "value"
        static let validity: JSString = "validity"
        static let remove: JSString = "remove"
        static let checkValidity: JSString = "checkValidity"
        static let options: JSString = "options"
        static let disabled: JSString = "disabled"
        static let namedItem: JSString = "namedItem"
        static let multiple: JSString = "multiple"
        static let labels: JSString = "labels"
        static let required: JSString = "required"
        static let form: JSString = "form"
        static let name: JSString = "name"
        static let size: JSString = "size"
        static let length: JSString = "length"
        static let willValidate: JSString = "willValidate"
    }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _autocomplete = ReadWriteAttribute(jsObject: jsObject, name: Keys.autocomplete)
        _disabled = ReadWriteAttribute(jsObject: jsObject, name: Keys.disabled)
        _form = ReadonlyAttribute(jsObject: jsObject, name: Keys.form)
        _multiple = ReadWriteAttribute(jsObject: jsObject, name: Keys.multiple)
        _name = ReadWriteAttribute(jsObject: jsObject, name: Keys.name)
        _required = ReadWriteAttribute(jsObject: jsObject, name: Keys.required)
        _size = ReadWriteAttribute(jsObject: jsObject, name: Keys.size)
        _type = ReadonlyAttribute(jsObject: jsObject, name: Keys.type)
        _options = ReadonlyAttribute(jsObject: jsObject, name: Keys.options)
        _length = ReadWriteAttribute(jsObject: jsObject, name: Keys.length)
        _selectedOptions = ReadonlyAttribute(jsObject: jsObject, name: Keys.selectedOptions)
        _selectedIndex = ReadWriteAttribute(jsObject: jsObject, name: Keys.selectedIndex)
        _value = ReadWriteAttribute(jsObject: jsObject, name: Keys.value)
        _willValidate = ReadonlyAttribute(jsObject: jsObject, name: Keys.willValidate)
        _validity = ReadonlyAttribute(jsObject: jsObject, name: Keys.validity)
        _validationMessage = ReadonlyAttribute(jsObject: jsObject, name: Keys.validationMessage)
        _labels = ReadonlyAttribute(jsObject: jsObject, name: Keys.labels)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    @ReadWriteAttribute
    public var autocomplete: String

    @ReadWriteAttribute
    public var disabled: Bool

    @ReadonlyAttribute
    public var form: HTMLFormElement?

    @ReadWriteAttribute
    public var multiple: Bool

    @ReadWriteAttribute
    public var name: String

    @ReadWriteAttribute
    public var required: Bool

    @ReadWriteAttribute
    public var size: UInt32

    @ReadonlyAttribute
    public var type: String

    @ReadonlyAttribute
    public var options: HTMLOptionsCollection

    @ReadWriteAttribute
    public var length: UInt32

    public subscript(key: Int) -> HTMLOptionElement? {
        jsObject[key].fromJSValue()
    }

    public func namedItem(name: String) -> HTMLOptionElement? {
        jsObject[Keys.namedItem]!(name.jsValue()).fromJSValue()!
    }

    public func add(element: __UNSUPPORTED_UNION__, before: __UNSUPPORTED_UNION__? = nil) {
        _ = jsObject[Keys.add]!(element.jsValue(), before?.jsValue() ?? .undefined)
    }

    public func remove() {
        _ = jsObject[Keys.remove]!()
    }

    public func remove(index: Int32) {
        _ = jsObject[Keys.remove]!(index.jsValue())
    }

    // XXX: unsupported setter for keys of type UInt32

    @ReadonlyAttribute
    public var selectedOptions: HTMLCollection

    @ReadWriteAttribute
    public var selectedIndex: Int32

    @ReadWriteAttribute
    public var value: String

    @ReadonlyAttribute
    public var willValidate: Bool

    @ReadonlyAttribute
    public var validity: ValidityState

    @ReadonlyAttribute
    public var validationMessage: String

    public func checkValidity() -> Bool {
        jsObject[Keys.checkValidity]!().fromJSValue()!
    }

    public func reportValidity() -> Bool {
        jsObject[Keys.reportValidity]!().fromJSValue()!
    }

    public func setCustomValidity(error: String) {
        _ = jsObject[Keys.setCustomValidity]!(error.jsValue())
    }

    @ReadonlyAttribute
    public var labels: NodeList
}
