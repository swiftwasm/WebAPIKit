// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class TextTrack: EventTarget {
    override public class var constructor: JSFunction { JSObject.global.TextTrack.function! }

    private enum Keys {
        static let activeCues: JSString = "activeCues"
        static let addCue: JSString = "addCue"
        static let cues: JSString = "cues"
        static let id: JSString = "id"
        static let inBandMetadataTrackDispatchType: JSString = "inBandMetadataTrackDispatchType"
        static let kind: JSString = "kind"
        static let label: JSString = "label"
        static let language: JSString = "language"
        static let mode: JSString = "mode"
        static let oncuechange: JSString = "oncuechange"
        static let removeCue: JSString = "removeCue"
    }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _kind = ReadonlyAttribute(jsObject: jsObject, name: Keys.kind)
        _label = ReadonlyAttribute(jsObject: jsObject, name: Keys.label)
        _language = ReadonlyAttribute(jsObject: jsObject, name: Keys.language)
        _id = ReadonlyAttribute(jsObject: jsObject, name: Keys.id)
        _inBandMetadataTrackDispatchType = ReadonlyAttribute(jsObject: jsObject, name: Keys.inBandMetadataTrackDispatchType)
        _mode = ReadWriteAttribute(jsObject: jsObject, name: Keys.mode)
        _cues = ReadonlyAttribute(jsObject: jsObject, name: Keys.cues)
        _activeCues = ReadonlyAttribute(jsObject: jsObject, name: Keys.activeCues)
        _oncuechange = ClosureAttribute.Optional1(jsObject: jsObject, name: Keys.oncuechange)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var kind: TextTrackKind

    @ReadonlyAttribute
    public var label: String

    @ReadonlyAttribute
    public var language: String

    @ReadonlyAttribute
    public var id: String

    @ReadonlyAttribute
    public var inBandMetadataTrackDispatchType: String

    @ReadWriteAttribute
    public var mode: TextTrackMode

    @ReadonlyAttribute
    public var cues: TextTrackCueList?

    @ReadonlyAttribute
    public var activeCues: TextTrackCueList?

    public func addCue(cue: TextTrackCue) {
        jsObject[Keys.addCue]!(cue.jsValue()).fromJSValue()!
    }

    public func removeCue(cue: TextTrackCue) {
        jsObject[Keys.removeCue]!(cue.jsValue()).fromJSValue()!
    }

    @ClosureAttribute.Optional1
    public var oncuechange: EventHandler
}
