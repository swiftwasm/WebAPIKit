// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class VideoFrame: JSBridgedClass {
    @inlinable public class var constructor: JSFunction { JSObject.global[Strings.VideoFrame].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _format = ReadonlyAttribute(jsObject: jsObject, name: Strings.format)
        _codedWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.codedWidth)
        _codedHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.codedHeight)
        _codedRect = ReadonlyAttribute(jsObject: jsObject, name: Strings.codedRect)
        _visibleRect = ReadonlyAttribute(jsObject: jsObject, name: Strings.visibleRect)
        _displayWidth = ReadonlyAttribute(jsObject: jsObject, name: Strings.displayWidth)
        _displayHeight = ReadonlyAttribute(jsObject: jsObject, name: Strings.displayHeight)
        _duration = ReadonlyAttribute(jsObject: jsObject, name: Strings.duration)
        _timestamp = ReadonlyAttribute(jsObject: jsObject, name: Strings.timestamp)
        _colorSpace = ReadonlyAttribute(jsObject: jsObject, name: Strings.colorSpace)
        self.jsObject = jsObject
    }

    @inlinable public convenience init(image: CanvasImageSource, init: VideoFrameInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor.new(arguments: [image.jsValue(), `init`?.jsValue() ?? .undefined]))
    }

    @inlinable public convenience init(data: BufferSource, init: VideoFrameBufferInit) {
        self.init(unsafelyWrapping: Self.constructor.new(arguments: [data.jsValue(), `init`.jsValue()]))
    }

    @ReadonlyAttribute
    public var format: VideoPixelFormat?

    @ReadonlyAttribute
    public var codedWidth: UInt32

    @ReadonlyAttribute
    public var codedHeight: UInt32

    @ReadonlyAttribute
    public var codedRect: DOMRectReadOnly?

    @ReadonlyAttribute
    public var visibleRect: DOMRectReadOnly?

    @ReadonlyAttribute
    public var displayWidth: UInt32

    @ReadonlyAttribute
    public var displayHeight: UInt32

    @ReadonlyAttribute
    public var duration: UInt64?

    @ReadonlyAttribute
    public var timestamp: Int64?

    @ReadonlyAttribute
    public var colorSpace: VideoColorSpace

    @inlinable public func allocationSize(options: VideoFrameCopyToOptions? = nil) -> UInt32 {
        let this = jsObject
        return this[Strings.allocationSize].function!(this: this, arguments: [options?.jsValue() ?? .undefined]).fromJSValue()!
    }

    @inlinable public func copyTo(destination: BufferSource, options: VideoFrameCopyToOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.copyTo].function!(this: this, arguments: [destination.jsValue(), options?.jsValue() ?? .undefined]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func copyTo(destination: BufferSource, options: VideoFrameCopyToOptions? = nil) async throws -> [PlaneLayout] {
        let this = jsObject
        let _promise: JSPromise = this[Strings.copyTo].function!(this: this, arguments: [destination.jsValue(), options?.jsValue() ?? .undefined]).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    @inlinable public func clone() -> Self {
        let this = jsObject
        return this[Strings.clone].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func close() {
        let this = jsObject
        _ = this[Strings.close].function!(this: this, arguments: [])
    }
}
