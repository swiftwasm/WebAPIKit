// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class Navigation: EventTarget {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.Navigation].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _currentEntry = ReadonlyAttribute(jsObject: jsObject, name: Strings.currentEntry)
        _transition = ReadonlyAttribute(jsObject: jsObject, name: Strings.transition)
        _canGoBack = ReadonlyAttribute(jsObject: jsObject, name: Strings.canGoBack)
        _canGoForward = ReadonlyAttribute(jsObject: jsObject, name: Strings.canGoForward)
        _onnavigate = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onnavigate)
        _onnavigatesuccess = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onnavigatesuccess)
        _onnavigateerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onnavigateerror)
        _oncurrententrychange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.oncurrententrychange)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public func entries() -> [NavigationHistoryEntry] {
        let this = jsObject
        return this[Strings.entries].function!(this: this, arguments: []).fromJSValue()!
    }

    @ReadonlyAttribute
    public var currentEntry: NavigationHistoryEntry?

    @inlinable public func updateCurrentEntry(options: NavigationUpdateCurrentEntryOptions) {
        let this = jsObject
        _ = this[Strings.updateCurrentEntry].function!(this: this, arguments: [options.jsValue])
    }

    @ReadonlyAttribute
    public var transition: NavigationTransition?

    @ReadonlyAttribute
    public var canGoBack: Bool

    @ReadonlyAttribute
    public var canGoForward: Bool

    @inlinable public func navigate(url: String, options: NavigationNavigateOptions? = nil) -> NavigationResult {
        let this = jsObject
        return this[Strings.navigate].function!(this: this, arguments: [url.jsValue, options?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func reload(options: NavigationReloadOptions? = nil) -> NavigationResult {
        let this = jsObject
        return this[Strings.reload].function!(this: this, arguments: [options?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func traverseTo(key: String, options: NavigationOptions? = nil) -> NavigationResult {
        let this = jsObject
        return this[Strings.traverseTo].function!(this: this, arguments: [key.jsValue, options?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func back(options: NavigationOptions? = nil) -> NavigationResult {
        let this = jsObject
        return this[Strings.back].function!(this: this, arguments: [options?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func forward(options: NavigationOptions? = nil) -> NavigationResult {
        let this = jsObject
        return this[Strings.forward].function!(this: this, arguments: [options?.jsValue ?? .undefined]).fromJSValue()!
    }

    @ClosureAttribute1Optional
    public var onnavigate: EventHandler

    @ClosureAttribute1Optional
    public var onnavigatesuccess: EventHandler

    @ClosureAttribute1Optional
    public var onnavigateerror: EventHandler

    @ClosureAttribute1Optional
    public var oncurrententrychange: EventHandler
}
