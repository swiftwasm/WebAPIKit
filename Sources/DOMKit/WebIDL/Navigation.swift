// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class Navigation: EventTarget {
    override public class var constructor: JSFunction { JSObject.global[Strings.Navigation].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _currentEntry = ReadonlyAttribute(jsObject: jsObject, name: Strings.currentEntry)
        _transition = ReadonlyAttribute(jsObject: jsObject, name: Strings.transition)
        _canGoBack = ReadonlyAttribute(jsObject: jsObject, name: Strings.canGoBack)
        _canGoForward = ReadonlyAttribute(jsObject: jsObject, name: Strings.canGoForward)
        _onnavigate = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onnavigate)
        _onnavigatesuccess = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onnavigatesuccess)
        _onnavigateerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onnavigateerror)
        _oncurrententrychange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.oncurrententrychange)
        super.init(unsafelyWrapping: jsObject)
    }

    public func entries() -> [NavigationHistoryEntry] {
        jsObject[Strings.entries]!().fromJSValue()!
    }

    @ReadonlyAttribute
    public var currentEntry: NavigationHistoryEntry?

    public func updateCurrentEntry(options: NavigationUpdateCurrentEntryOptions) {
        _ = jsObject[Strings.updateCurrentEntry]!(options.jsValue())
    }

    @ReadonlyAttribute
    public var transition: NavigationTransition?

    @ReadonlyAttribute
    public var canGoBack: Bool

    @ReadonlyAttribute
    public var canGoForward: Bool

    public func navigate(url: String, options: NavigationNavigateOptions? = nil) -> NavigationResult {
        jsObject[Strings.navigate]!(url.jsValue(), options?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func reload(options: NavigationReloadOptions? = nil) -> NavigationResult {
        jsObject[Strings.reload]!(options?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func traverseTo(key: String, options: NavigationOptions? = nil) -> NavigationResult {
        jsObject[Strings.traverseTo]!(key.jsValue(), options?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func back(options: NavigationOptions? = nil) -> NavigationResult {
        jsObject[Strings.back]!(options?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func forward(options: NavigationOptions? = nil) -> NavigationResult {
        jsObject[Strings.forward]!(options?.jsValue() ?? .undefined).fromJSValue()!
    }

    @ClosureAttribute1Optional
    public var onnavigate: EventHandler

    @ClosureAttribute1Optional
    public var onnavigatesuccess: EventHandler

    @ClosureAttribute1Optional
    public var onnavigateerror: EventHandler

    @ClosureAttribute1Optional
    public var oncurrententrychange: EventHandler
}
