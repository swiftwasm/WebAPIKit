// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class Request: JSBridgedClass, Body {
    public class var constructor: JSFunction { JSObject.global.Request.function! }

    private enum Keys {
        static let clone: JSString = "clone"
        static let referrer: JSString = "referrer"
        static let redirect: JSString = "redirect"
        static let signal: JSString = "signal"
        static let mode: JSString = "mode"
        static let isHistoryNavigation: JSString = "isHistoryNavigation"
        static let keepalive: JSString = "keepalive"
        static let cache: JSString = "cache"
        static let credentials: JSString = "credentials"
        static let headers: JSString = "headers"
        static let url: JSString = "url"
        static let integrity: JSString = "integrity"
        static let destination: JSString = "destination"
        static let method: JSString = "method"
        static let referrerPolicy: JSString = "referrerPolicy"
        static let isReloadNavigation: JSString = "isReloadNavigation"
    }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _method = ReadonlyAttribute(jsObject: jsObject, name: Keys.method)
        _url = ReadonlyAttribute(jsObject: jsObject, name: Keys.url)
        _headers = ReadonlyAttribute(jsObject: jsObject, name: Keys.headers)
        _destination = ReadonlyAttribute(jsObject: jsObject, name: Keys.destination)
        _referrer = ReadonlyAttribute(jsObject: jsObject, name: Keys.referrer)
        _referrerPolicy = ReadonlyAttribute(jsObject: jsObject, name: Keys.referrerPolicy)
        _mode = ReadonlyAttribute(jsObject: jsObject, name: Keys.mode)
        _credentials = ReadonlyAttribute(jsObject: jsObject, name: Keys.credentials)
        _cache = ReadonlyAttribute(jsObject: jsObject, name: Keys.cache)
        _redirect = ReadonlyAttribute(jsObject: jsObject, name: Keys.redirect)
        _integrity = ReadonlyAttribute(jsObject: jsObject, name: Keys.integrity)
        _keepalive = ReadonlyAttribute(jsObject: jsObject, name: Keys.keepalive)
        _isReloadNavigation = ReadonlyAttribute(jsObject: jsObject, name: Keys.isReloadNavigation)
        _isHistoryNavigation = ReadonlyAttribute(jsObject: jsObject, name: Keys.isHistoryNavigation)
        _signal = ReadonlyAttribute(jsObject: jsObject, name: Keys.signal)
        self.jsObject = jsObject
    }

    public convenience init(input: RequestInfo, init: RequestInit? = nil) {
        self.init(unsafelyWrapping: Self.constructor.new(input.jsValue(), `init`?.jsValue() ?? .undefined))
    }

    @ReadonlyAttribute
    public var method: String

    @ReadonlyAttribute
    public var url: String

    @ReadonlyAttribute
    public var headers: Headers

    @ReadonlyAttribute
    public var destination: RequestDestination

    @ReadonlyAttribute
    public var referrer: String

    @ReadonlyAttribute
    public var referrerPolicy: ReferrerPolicy

    @ReadonlyAttribute
    public var mode: RequestMode

    @ReadonlyAttribute
    public var credentials: RequestCredentials

    @ReadonlyAttribute
    public var cache: RequestCache

    @ReadonlyAttribute
    public var redirect: RequestRedirect

    @ReadonlyAttribute
    public var integrity: String

    @ReadonlyAttribute
    public var keepalive: Bool

    @ReadonlyAttribute
    public var isReloadNavigation: Bool

    @ReadonlyAttribute
    public var isHistoryNavigation: Bool

    @ReadonlyAttribute
    public var signal: AbortSignal

    public func clone() -> Self {
        jsObject[Keys.clone]!().fromJSValue()!
    }
}
