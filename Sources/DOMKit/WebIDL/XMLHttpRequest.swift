// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class XMLHttpRequest: XMLHttpRequestEventTarget {
    override public class var constructor: JSFunction { JSObject.global.XMLHttpRequest.function! }

    private enum Keys {
        static let DONE: JSString = "DONE"
        static let HEADERS_RECEIVED: JSString = "HEADERS_RECEIVED"
        static let LOADING: JSString = "LOADING"
        static let OPENED: JSString = "OPENED"
        static let UNSENT: JSString = "UNSENT"
        static let abort: JSString = "abort"
        static let getAllResponseHeaders: JSString = "getAllResponseHeaders"
        static let getResponseHeader: JSString = "getResponseHeader"
        static let onreadystatechange: JSString = "onreadystatechange"
        static let open: JSString = "open"
        static let overrideMimeType: JSString = "overrideMimeType"
        static let readyState: JSString = "readyState"
        static let response: JSString = "response"
        static let responseText: JSString = "responseText"
        static let responseType: JSString = "responseType"
        static let responseURL: JSString = "responseURL"
        static let responseXML: JSString = "responseXML"
        static let send: JSString = "send"
        static let setRequestHeader: JSString = "setRequestHeader"
        static let status: JSString = "status"
        static let statusText: JSString = "statusText"
        static let timeout: JSString = "timeout"
        static let upload: JSString = "upload"
        static let withCredentials: JSString = "withCredentials"
    }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _onreadystatechange = ClosureAttribute.Optional1(jsObject: jsObject, name: Keys.onreadystatechange)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Keys.readyState)
        _timeout = ReadWriteAttribute(jsObject: jsObject, name: Keys.timeout)
        _withCredentials = ReadWriteAttribute(jsObject: jsObject, name: Keys.withCredentials)
        _upload = ReadonlyAttribute(jsObject: jsObject, name: Keys.upload)
        _responseURL = ReadonlyAttribute(jsObject: jsObject, name: Keys.responseURL)
        _status = ReadonlyAttribute(jsObject: jsObject, name: Keys.status)
        _statusText = ReadonlyAttribute(jsObject: jsObject, name: Keys.statusText)
        _responseType = ReadWriteAttribute(jsObject: jsObject, name: Keys.responseType)
        _response = ReadonlyAttribute(jsObject: jsObject, name: Keys.response)
        _responseText = ReadonlyAttribute(jsObject: jsObject, name: Keys.responseText)
        _responseXML = ReadonlyAttribute(jsObject: jsObject, name: Keys.responseXML)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new())
    }

    @ClosureAttribute.Optional1
    public var onreadystatechange: EventHandler

    public static let UNSENT: UInt16 = 0

    public static let OPENED: UInt16 = 1

    public static let HEADERS_RECEIVED: UInt16 = 2

    public static let LOADING: UInt16 = 3

    public static let DONE: UInt16 = 4

    @ReadonlyAttribute
    public var readyState: UInt16

    public func open(method: String, url: String) {
        jsObject[Keys.open]!(method.jsValue(), url.jsValue()).fromJSValue()!
    }

    public func open(method: String, url: String, async: Bool, username: String? = nil, password: String? = nil) {
        jsObject[Keys.open]!(method.jsValue(), url.jsValue(), async.jsValue(), username?.jsValue() ?? .undefined, password?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func setRequestHeader(name: String, value: String) {
        jsObject[Keys.setRequestHeader]!(name.jsValue(), value.jsValue()).fromJSValue()!
    }

    @ReadWriteAttribute
    public var timeout: UInt32

    @ReadWriteAttribute
    public var withCredentials: Bool

    @ReadonlyAttribute
    public var upload: XMLHttpRequestUpload

    public func send(body: __UNSUPPORTED_UNION__? = nil) {
        jsObject[Keys.send]!(body?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func abort() {
        jsObject[Keys.abort]!().fromJSValue()!
    }

    @ReadonlyAttribute
    public var responseURL: String

    @ReadonlyAttribute
    public var status: UInt16

    @ReadonlyAttribute
    public var statusText: String

    public func getResponseHeader(name: String) -> String? {
        jsObject[Keys.getResponseHeader]!(name.jsValue()).fromJSValue()!
    }

    public func getAllResponseHeaders() -> String {
        jsObject[Keys.getAllResponseHeaders]!().fromJSValue()!
    }

    public func overrideMimeType(mime: String) {
        jsObject[Keys.overrideMimeType]!(mime.jsValue()).fromJSValue()!
    }

    @ReadWriteAttribute
    public var responseType: XMLHttpRequestResponseType

    @ReadonlyAttribute
    public var response: JSValue

    @ReadonlyAttribute
    public var responseText: String

    @ReadonlyAttribute
    public var responseXML: Document?
}
