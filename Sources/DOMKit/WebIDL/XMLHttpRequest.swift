// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class XMLHttpRequest: XMLHttpRequestEventTarget {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.XMLHttpRequest].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _onreadystatechange = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onreadystatechange)
        _readyState = ReadonlyAttribute(jsObject: jsObject, name: Strings.readyState)
        _timeout = ReadWriteAttribute(jsObject: jsObject, name: Strings.timeout)
        _withCredentials = ReadWriteAttribute(jsObject: jsObject, name: Strings.withCredentials)
        _upload = ReadonlyAttribute(jsObject: jsObject, name: Strings.upload)
        _responseURL = ReadonlyAttribute(jsObject: jsObject, name: Strings.responseURL)
        _status = ReadonlyAttribute(jsObject: jsObject, name: Strings.status)
        _statusText = ReadonlyAttribute(jsObject: jsObject, name: Strings.statusText)
        _responseType = ReadWriteAttribute(jsObject: jsObject, name: Strings.responseType)
        _response = ReadonlyAttribute(jsObject: jsObject, name: Strings.response)
        _responseText = ReadonlyAttribute(jsObject: jsObject, name: Strings.responseText)
        _responseXML = ReadonlyAttribute(jsObject: jsObject, name: Strings.responseXML)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init() {
        self.init(unsafelyWrapping: Self.constructor.new(arguments: []))
    }

    @ClosureAttribute1Optional
    public var onreadystatechange: EventHandler

    public static let UNSENT: UInt16 = 0

    public static let OPENED: UInt16 = 1

    public static let HEADERS_RECEIVED: UInt16 = 2

    public static let LOADING: UInt16 = 3

    public static let DONE: UInt16 = 4

    @ReadonlyAttribute
    public var readyState: UInt16

    @inlinable public func open(method: String, url: String) {
        let this = jsObject
        _ = this[Strings.open].function!(this: this, arguments: [method.jsValue, url.jsValue])
    }

    @inlinable public func open(method: String, url: String, async: Bool, username: String? = nil, password: String? = nil) {
        let this = jsObject
        _ = this[Strings.open].function!(this: this, arguments: [method.jsValue, url.jsValue, async.jsValue, username?.jsValue ?? .undefined, password?.jsValue ?? .undefined])
    }

    @inlinable public func setRequestHeader(name: String, value: String) {
        let this = jsObject
        _ = this[Strings.setRequestHeader].function!(this: this, arguments: [name.jsValue, value.jsValue])
    }

    @ReadWriteAttribute
    public var timeout: UInt32

    @ReadWriteAttribute
    public var withCredentials: Bool

    @ReadonlyAttribute
    public var upload: XMLHttpRequestUpload

    @inlinable public func send(body: Document_or_XMLHttpRequestBodyInit? = nil) {
        let this = jsObject
        _ = this[Strings.send].function!(this: this, arguments: [body?.jsValue ?? .undefined])
    }

    @inlinable public func abort() {
        let this = jsObject
        _ = this[Strings.abort].function!(this: this, arguments: [])
    }

    @ReadonlyAttribute
    public var responseURL: String

    @ReadonlyAttribute
    public var status: UInt16

    @ReadonlyAttribute
    public var statusText: String

    @inlinable public func getResponseHeader(name: String) -> String? {
        let this = jsObject
        return this[Strings.getResponseHeader].function!(this: this, arguments: [name.jsValue]).fromJSValue()!
    }

    @inlinable public func getAllResponseHeaders() -> String {
        let this = jsObject
        return this[Strings.getAllResponseHeaders].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func overrideMimeType(mime: String) {
        let this = jsObject
        _ = this[Strings.overrideMimeType].function!(this: this, arguments: [mime.jsValue])
    }

    @ReadWriteAttribute
    public var responseType: XMLHttpRequestResponseType

    @ReadonlyAttribute
    public var response: JSValue

    @ReadonlyAttribute
    public var responseText: String

    @ReadonlyAttribute
    public var responseXML: Document?
}
