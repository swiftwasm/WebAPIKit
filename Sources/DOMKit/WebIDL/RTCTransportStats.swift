// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class RTCTransportStats: BridgedDictionary {
    public convenience init(packetsSent: UInt64, packetsReceived: UInt64, bytesSent: UInt64, bytesReceived: UInt64, rtcpTransportStatsId: String, iceRole: RTCIceRole, iceLocalUsernameFragment: String, dtlsState: RTCDtlsTransportState, iceState: RTCIceTransportState, selectedCandidatePairId: String, localCertificateId: String, remoteCertificateId: String, tlsVersion: String, dtlsCipher: String, srtpCipher: String, tlsGroup: String, selectedCandidatePairChanges: UInt32) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.packetsSent] = packetsSent.jsValue()
        object[Strings.packetsReceived] = packetsReceived.jsValue()
        object[Strings.bytesSent] = bytesSent.jsValue()
        object[Strings.bytesReceived] = bytesReceived.jsValue()
        object[Strings.rtcpTransportStatsId] = rtcpTransportStatsId.jsValue()
        object[Strings.iceRole] = iceRole.jsValue()
        object[Strings.iceLocalUsernameFragment] = iceLocalUsernameFragment.jsValue()
        object[Strings.dtlsState] = dtlsState.jsValue()
        object[Strings.iceState] = iceState.jsValue()
        object[Strings.selectedCandidatePairId] = selectedCandidatePairId.jsValue()
        object[Strings.localCertificateId] = localCertificateId.jsValue()
        object[Strings.remoteCertificateId] = remoteCertificateId.jsValue()
        object[Strings.tlsVersion] = tlsVersion.jsValue()
        object[Strings.dtlsCipher] = dtlsCipher.jsValue()
        object[Strings.srtpCipher] = srtpCipher.jsValue()
        object[Strings.tlsGroup] = tlsGroup.jsValue()
        object[Strings.selectedCandidatePairChanges] = selectedCandidatePairChanges.jsValue()
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _packetsSent = ReadWriteAttribute(jsObject: object, name: Strings.packetsSent)
        _packetsReceived = ReadWriteAttribute(jsObject: object, name: Strings.packetsReceived)
        _bytesSent = ReadWriteAttribute(jsObject: object, name: Strings.bytesSent)
        _bytesReceived = ReadWriteAttribute(jsObject: object, name: Strings.bytesReceived)
        _rtcpTransportStatsId = ReadWriteAttribute(jsObject: object, name: Strings.rtcpTransportStatsId)
        _iceRole = ReadWriteAttribute(jsObject: object, name: Strings.iceRole)
        _iceLocalUsernameFragment = ReadWriteAttribute(jsObject: object, name: Strings.iceLocalUsernameFragment)
        _dtlsState = ReadWriteAttribute(jsObject: object, name: Strings.dtlsState)
        _iceState = ReadWriteAttribute(jsObject: object, name: Strings.iceState)
        _selectedCandidatePairId = ReadWriteAttribute(jsObject: object, name: Strings.selectedCandidatePairId)
        _localCertificateId = ReadWriteAttribute(jsObject: object, name: Strings.localCertificateId)
        _remoteCertificateId = ReadWriteAttribute(jsObject: object, name: Strings.remoteCertificateId)
        _tlsVersion = ReadWriteAttribute(jsObject: object, name: Strings.tlsVersion)
        _dtlsCipher = ReadWriteAttribute(jsObject: object, name: Strings.dtlsCipher)
        _srtpCipher = ReadWriteAttribute(jsObject: object, name: Strings.srtpCipher)
        _tlsGroup = ReadWriteAttribute(jsObject: object, name: Strings.tlsGroup)
        _selectedCandidatePairChanges = ReadWriteAttribute(jsObject: object, name: Strings.selectedCandidatePairChanges)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var packetsSent: UInt64

    @ReadWriteAttribute
    public var packetsReceived: UInt64

    @ReadWriteAttribute
    public var bytesSent: UInt64

    @ReadWriteAttribute
    public var bytesReceived: UInt64

    @ReadWriteAttribute
    public var rtcpTransportStatsId: String

    @ReadWriteAttribute
    public var iceRole: RTCIceRole

    @ReadWriteAttribute
    public var iceLocalUsernameFragment: String

    @ReadWriteAttribute
    public var dtlsState: RTCDtlsTransportState

    @ReadWriteAttribute
    public var iceState: RTCIceTransportState

    @ReadWriteAttribute
    public var selectedCandidatePairId: String

    @ReadWriteAttribute
    public var localCertificateId: String

    @ReadWriteAttribute
    public var remoteCertificateId: String

    @ReadWriteAttribute
    public var tlsVersion: String

    @ReadWriteAttribute
    public var dtlsCipher: String

    @ReadWriteAttribute
    public var srtpCipher: String

    @ReadWriteAttribute
    public var tlsGroup: String

    @ReadWriteAttribute
    public var selectedCandidatePairChanges: UInt32
}
