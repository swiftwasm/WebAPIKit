// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public protocol WebGLRenderingContextBase: JSBridgedClass {}
public extension WebGLRenderingContextBase {
    static let DEPTH_BUFFER_BIT: GLenum = 0x0000_0100

    static let STENCIL_BUFFER_BIT: GLenum = 0x0000_0400

    static let COLOR_BUFFER_BIT: GLenum = 0x0000_4000

    static let POINTS: GLenum = 0x0000

    static let LINES: GLenum = 0x0001

    static let LINE_LOOP: GLenum = 0x0002

    static let LINE_STRIP: GLenum = 0x0003

    static let TRIANGLES: GLenum = 0x0004

    static let TRIANGLE_STRIP: GLenum = 0x0005

    static let TRIANGLE_FAN: GLenum = 0x0006

    static let ZERO: GLenum = 0

    static let ONE: GLenum = 1

    static let SRC_COLOR: GLenum = 0x0300

    static let ONE_MINUS_SRC_COLOR: GLenum = 0x0301

    static let SRC_ALPHA: GLenum = 0x0302

    static let ONE_MINUS_SRC_ALPHA: GLenum = 0x0303

    static let DST_ALPHA: GLenum = 0x0304

    static let ONE_MINUS_DST_ALPHA: GLenum = 0x0305

    static let DST_COLOR: GLenum = 0x0306

    static let ONE_MINUS_DST_COLOR: GLenum = 0x0307

    static let SRC_ALPHA_SATURATE: GLenum = 0x0308

    static let FUNC_ADD: GLenum = 0x8006

    static let BLEND_EQUATION: GLenum = 0x8009

    static let BLEND_EQUATION_RGB: GLenum = 0x8009

    static let BLEND_EQUATION_ALPHA: GLenum = 0x883D

    static let FUNC_SUBTRACT: GLenum = 0x800A

    static let FUNC_REVERSE_SUBTRACT: GLenum = 0x800B

    static let BLEND_DST_RGB: GLenum = 0x80C8

    static let BLEND_SRC_RGB: GLenum = 0x80C9

    static let BLEND_DST_ALPHA: GLenum = 0x80CA

    static let BLEND_SRC_ALPHA: GLenum = 0x80CB

    static let CONSTANT_COLOR: GLenum = 0x8001

    static let ONE_MINUS_CONSTANT_COLOR: GLenum = 0x8002

    static let CONSTANT_ALPHA: GLenum = 0x8003

    static let ONE_MINUS_CONSTANT_ALPHA: GLenum = 0x8004

    static let BLEND_COLOR: GLenum = 0x8005

    static let ARRAY_BUFFER: GLenum = 0x8892

    static let ELEMENT_ARRAY_BUFFER: GLenum = 0x8893

    static let ARRAY_BUFFER_BINDING: GLenum = 0x8894

    static let ELEMENT_ARRAY_BUFFER_BINDING: GLenum = 0x8895

    static let STREAM_DRAW: GLenum = 0x88E0

    static let STATIC_DRAW: GLenum = 0x88E4

    static let DYNAMIC_DRAW: GLenum = 0x88E8

    static let BUFFER_SIZE: GLenum = 0x8764

    static let BUFFER_USAGE: GLenum = 0x8765

    static let CURRENT_VERTEX_ATTRIB: GLenum = 0x8626

    static let FRONT: GLenum = 0x0404

    static let BACK: GLenum = 0x0405

    static let FRONT_AND_BACK: GLenum = 0x0408

    static let CULL_FACE: GLenum = 0x0B44

    static let BLEND: GLenum = 0x0BE2

    static let DITHER: GLenum = 0x0BD0

    static let STENCIL_TEST: GLenum = 0x0B90

    static let DEPTH_TEST: GLenum = 0x0B71

    static let SCISSOR_TEST: GLenum = 0x0C11

    static let POLYGON_OFFSET_FILL: GLenum = 0x8037

    static let SAMPLE_ALPHA_TO_COVERAGE: GLenum = 0x809E

    static let SAMPLE_COVERAGE: GLenum = 0x80A0

    static let NO_ERROR: GLenum = 0

    static let INVALID_ENUM: GLenum = 0x0500

    static let INVALID_VALUE: GLenum = 0x0501

    static let INVALID_OPERATION: GLenum = 0x0502

    static let OUT_OF_MEMORY: GLenum = 0x0505

    static let CW: GLenum = 0x0900

    static let CCW: GLenum = 0x0901

    static let LINE_WIDTH: GLenum = 0x0B21

    static let ALIASED_POINT_SIZE_RANGE: GLenum = 0x846D

    static let ALIASED_LINE_WIDTH_RANGE: GLenum = 0x846E

    static let CULL_FACE_MODE: GLenum = 0x0B45

    static let FRONT_FACE: GLenum = 0x0B46

    static let DEPTH_RANGE: GLenum = 0x0B70

    static let DEPTH_WRITEMASK: GLenum = 0x0B72

    static let DEPTH_CLEAR_VALUE: GLenum = 0x0B73

    static let DEPTH_FUNC: GLenum = 0x0B74

    static let STENCIL_CLEAR_VALUE: GLenum = 0x0B91

    static let STENCIL_FUNC: GLenum = 0x0B92

    static let STENCIL_FAIL: GLenum = 0x0B94

    static let STENCIL_PASS_DEPTH_FAIL: GLenum = 0x0B95

    static let STENCIL_PASS_DEPTH_PASS: GLenum = 0x0B96

    static let STENCIL_REF: GLenum = 0x0B97

    static let STENCIL_VALUE_MASK: GLenum = 0x0B93

    static let STENCIL_WRITEMASK: GLenum = 0x0B98

    static let STENCIL_BACK_FUNC: GLenum = 0x8800

    static let STENCIL_BACK_FAIL: GLenum = 0x8801

    static let STENCIL_BACK_PASS_DEPTH_FAIL: GLenum = 0x8802

    static let STENCIL_BACK_PASS_DEPTH_PASS: GLenum = 0x8803

    static let STENCIL_BACK_REF: GLenum = 0x8CA3

    static let STENCIL_BACK_VALUE_MASK: GLenum = 0x8CA4

    static let STENCIL_BACK_WRITEMASK: GLenum = 0x8CA5

    static let VIEWPORT: GLenum = 0x0BA2

    static let SCISSOR_BOX: GLenum = 0x0C10

    static let COLOR_CLEAR_VALUE: GLenum = 0x0C22

    static let COLOR_WRITEMASK: GLenum = 0x0C23

    static let UNPACK_ALIGNMENT: GLenum = 0x0CF5

    static let PACK_ALIGNMENT: GLenum = 0x0D05

    static let MAX_TEXTURE_SIZE: GLenum = 0x0D33

    static let MAX_VIEWPORT_DIMS: GLenum = 0x0D3A

    static let SUBPIXEL_BITS: GLenum = 0x0D50

    static let RED_BITS: GLenum = 0x0D52

    static let GREEN_BITS: GLenum = 0x0D53

    static let BLUE_BITS: GLenum = 0x0D54

    static let ALPHA_BITS: GLenum = 0x0D55

    static let DEPTH_BITS: GLenum = 0x0D56

    static let STENCIL_BITS: GLenum = 0x0D57

    static let POLYGON_OFFSET_UNITS: GLenum = 0x2A00

    static let POLYGON_OFFSET_FACTOR: GLenum = 0x8038

    static let TEXTURE_BINDING_2D: GLenum = 0x8069

    static let SAMPLE_BUFFERS: GLenum = 0x80A8

    static let SAMPLES: GLenum = 0x80A9

    static let SAMPLE_COVERAGE_VALUE: GLenum = 0x80AA

    static let SAMPLE_COVERAGE_INVERT: GLenum = 0x80AB

    static let COMPRESSED_TEXTURE_FORMATS: GLenum = 0x86A3

    static let DONT_CARE: GLenum = 0x1100

    static let FASTEST: GLenum = 0x1101

    static let NICEST: GLenum = 0x1102

    static let GENERATE_MIPMAP_HINT: GLenum = 0x8192

    static let BYTE: GLenum = 0x1400

    static let UNSIGNED_BYTE: GLenum = 0x1401

    static let SHORT: GLenum = 0x1402

    static let UNSIGNED_SHORT: GLenum = 0x1403

    static let INT: GLenum = 0x1404

    static let UNSIGNED_INT: GLenum = 0x1405

    static let FLOAT: GLenum = 0x1406

    static let DEPTH_COMPONENT: GLenum = 0x1902

    static let ALPHA: GLenum = 0x1906

    static let RGB: GLenum = 0x1907

    static let RGBA: GLenum = 0x1908

    static let LUMINANCE: GLenum = 0x1909

    static let LUMINANCE_ALPHA: GLenum = 0x190A

    static let UNSIGNED_SHORT_4_4_4_4: GLenum = 0x8033

    static let UNSIGNED_SHORT_5_5_5_1: GLenum = 0x8034

    static let UNSIGNED_SHORT_5_6_5: GLenum = 0x8363

    static let FRAGMENT_SHADER: GLenum = 0x8B30

    static let VERTEX_SHADER: GLenum = 0x8B31

    static let MAX_VERTEX_ATTRIBS: GLenum = 0x8869

    static let MAX_VERTEX_UNIFORM_VECTORS: GLenum = 0x8DFB

    static let MAX_VARYING_VECTORS: GLenum = 0x8DFC

    static let MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4D

    static let MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4C

    static let MAX_TEXTURE_IMAGE_UNITS: GLenum = 0x8872

    static let MAX_FRAGMENT_UNIFORM_VECTORS: GLenum = 0x8DFD

    static let SHADER_TYPE: GLenum = 0x8B4F

    static let DELETE_STATUS: GLenum = 0x8B80

    static let LINK_STATUS: GLenum = 0x8B82

    static let VALIDATE_STATUS: GLenum = 0x8B83

    static let ATTACHED_SHADERS: GLenum = 0x8B85

    static let ACTIVE_UNIFORMS: GLenum = 0x8B86

    static let ACTIVE_ATTRIBUTES: GLenum = 0x8B89

    static let SHADING_LANGUAGE_VERSION: GLenum = 0x8B8C

    static let CURRENT_PROGRAM: GLenum = 0x8B8D

    static let NEVER: GLenum = 0x0200

    static let LESS: GLenum = 0x0201

    static let EQUAL: GLenum = 0x0202

    static let LEQUAL: GLenum = 0x0203

    static let GREATER: GLenum = 0x0204

    static let NOTEQUAL: GLenum = 0x0205

    static let GEQUAL: GLenum = 0x0206

    static let ALWAYS: GLenum = 0x0207

    static let KEEP: GLenum = 0x1E00

    static let REPLACE: GLenum = 0x1E01

    static let INCR: GLenum = 0x1E02

    static let DECR: GLenum = 0x1E03

    static let INVERT: GLenum = 0x150A

    static let INCR_WRAP: GLenum = 0x8507

    static let DECR_WRAP: GLenum = 0x8508

    static let VENDOR: GLenum = 0x1F00

    static let RENDERER: GLenum = 0x1F01

    static let VERSION: GLenum = 0x1F02

    static let NEAREST: GLenum = 0x2600

    static let LINEAR: GLenum = 0x2601

    static let NEAREST_MIPMAP_NEAREST: GLenum = 0x2700

    static let LINEAR_MIPMAP_NEAREST: GLenum = 0x2701

    static let NEAREST_MIPMAP_LINEAR: GLenum = 0x2702

    static let LINEAR_MIPMAP_LINEAR: GLenum = 0x2703

    static let TEXTURE_MAG_FILTER: GLenum = 0x2800

    static let TEXTURE_MIN_FILTER: GLenum = 0x2801

    static let TEXTURE_WRAP_S: GLenum = 0x2802

    static let TEXTURE_WRAP_T: GLenum = 0x2803

    static let TEXTURE_2D: GLenum = 0x0DE1

    static let TEXTURE: GLenum = 0x1702

    static let TEXTURE_CUBE_MAP: GLenum = 0x8513

    static let TEXTURE_BINDING_CUBE_MAP: GLenum = 0x8514

    static let TEXTURE_CUBE_MAP_POSITIVE_X: GLenum = 0x8515

    static let TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum = 0x8516

    static let TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum = 0x8517

    static let TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum = 0x8518

    static let TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum = 0x8519

    static let TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum = 0x851A

    static let MAX_CUBE_MAP_TEXTURE_SIZE: GLenum = 0x851C

    static let TEXTURE0: GLenum = 0x84C0

    static let TEXTURE1: GLenum = 0x84C1

    static let TEXTURE2: GLenum = 0x84C2

    static let TEXTURE3: GLenum = 0x84C3

    static let TEXTURE4: GLenum = 0x84C4

    static let TEXTURE5: GLenum = 0x84C5

    static let TEXTURE6: GLenum = 0x84C6

    static let TEXTURE7: GLenum = 0x84C7

    static let TEXTURE8: GLenum = 0x84C8

    static let TEXTURE9: GLenum = 0x84C9

    static let TEXTURE10: GLenum = 0x84CA

    static let TEXTURE11: GLenum = 0x84CB

    static let TEXTURE12: GLenum = 0x84CC

    static let TEXTURE13: GLenum = 0x84CD

    static let TEXTURE14: GLenum = 0x84CE

    static let TEXTURE15: GLenum = 0x84CF

    static let TEXTURE16: GLenum = 0x84D0

    static let TEXTURE17: GLenum = 0x84D1

    static let TEXTURE18: GLenum = 0x84D2

    static let TEXTURE19: GLenum = 0x84D3

    static let TEXTURE20: GLenum = 0x84D4

    static let TEXTURE21: GLenum = 0x84D5

    static let TEXTURE22: GLenum = 0x84D6

    static let TEXTURE23: GLenum = 0x84D7

    static let TEXTURE24: GLenum = 0x84D8

    static let TEXTURE25: GLenum = 0x84D9

    static let TEXTURE26: GLenum = 0x84DA

    static let TEXTURE27: GLenum = 0x84DB

    static let TEXTURE28: GLenum = 0x84DC

    static let TEXTURE29: GLenum = 0x84DD

    static let TEXTURE30: GLenum = 0x84DE

    static let TEXTURE31: GLenum = 0x84DF

    static let ACTIVE_TEXTURE: GLenum = 0x84E0

    static let REPEAT: GLenum = 0x2901

    static let CLAMP_TO_EDGE: GLenum = 0x812F

    static let MIRRORED_REPEAT: GLenum = 0x8370

    static let FLOAT_VEC2: GLenum = 0x8B50

    static let FLOAT_VEC3: GLenum = 0x8B51

    static let FLOAT_VEC4: GLenum = 0x8B52

    static let INT_VEC2: GLenum = 0x8B53

    static let INT_VEC3: GLenum = 0x8B54

    static let INT_VEC4: GLenum = 0x8B55

    static let BOOL: GLenum = 0x8B56

    static let BOOL_VEC2: GLenum = 0x8B57

    static let BOOL_VEC3: GLenum = 0x8B58

    static let BOOL_VEC4: GLenum = 0x8B59

    static let FLOAT_MAT2: GLenum = 0x8B5A

    static let FLOAT_MAT3: GLenum = 0x8B5B

    static let FLOAT_MAT4: GLenum = 0x8B5C

    static let SAMPLER_2D: GLenum = 0x8B5E

    static let SAMPLER_CUBE: GLenum = 0x8B60

    static let VERTEX_ATTRIB_ARRAY_ENABLED: GLenum = 0x8622

    static let VERTEX_ATTRIB_ARRAY_SIZE: GLenum = 0x8623

    static let VERTEX_ATTRIB_ARRAY_STRIDE: GLenum = 0x8624

    static let VERTEX_ATTRIB_ARRAY_TYPE: GLenum = 0x8625

    static let VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum = 0x886A

    static let VERTEX_ATTRIB_ARRAY_POINTER: GLenum = 0x8645

    static let VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum = 0x889F

    static let IMPLEMENTATION_COLOR_READ_TYPE: GLenum = 0x8B9A

    static let IMPLEMENTATION_COLOR_READ_FORMAT: GLenum = 0x8B9B

    static let COMPILE_STATUS: GLenum = 0x8B81

    static let LOW_FLOAT: GLenum = 0x8DF0

    static let MEDIUM_FLOAT: GLenum = 0x8DF1

    static let HIGH_FLOAT: GLenum = 0x8DF2

    static let LOW_INT: GLenum = 0x8DF3

    static let MEDIUM_INT: GLenum = 0x8DF4

    static let HIGH_INT: GLenum = 0x8DF5

    static let FRAMEBUFFER: GLenum = 0x8D40

    static let RENDERBUFFER: GLenum = 0x8D41

    static let RGBA4: GLenum = 0x8056

    static let RGB5_A1: GLenum = 0x8057

    static let RGB565: GLenum = 0x8D62

    static let DEPTH_COMPONENT16: GLenum = 0x81A5

    static let STENCIL_INDEX8: GLenum = 0x8D48

    static let DEPTH_STENCIL: GLenum = 0x84F9

    static let RENDERBUFFER_WIDTH: GLenum = 0x8D42

    static let RENDERBUFFER_HEIGHT: GLenum = 0x8D43

    static let RENDERBUFFER_INTERNAL_FORMAT: GLenum = 0x8D44

    static let RENDERBUFFER_RED_SIZE: GLenum = 0x8D50

    static let RENDERBUFFER_GREEN_SIZE: GLenum = 0x8D51

    static let RENDERBUFFER_BLUE_SIZE: GLenum = 0x8D52

    static let RENDERBUFFER_ALPHA_SIZE: GLenum = 0x8D53

    static let RENDERBUFFER_DEPTH_SIZE: GLenum = 0x8D54

    static let RENDERBUFFER_STENCIL_SIZE: GLenum = 0x8D55

    static let FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum = 0x8CD0

    static let FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum = 0x8CD1

    static let FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum = 0x8CD2

    static let FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum = 0x8CD3

    static let COLOR_ATTACHMENT0: GLenum = 0x8CE0

    static let DEPTH_ATTACHMENT: GLenum = 0x8D00

    static let STENCIL_ATTACHMENT: GLenum = 0x8D20

    static let DEPTH_STENCIL_ATTACHMENT: GLenum = 0x821A

    static let NONE: GLenum = 0

    static let FRAMEBUFFER_COMPLETE: GLenum = 0x8CD5

    static let FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum = 0x8CD6

    static let FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum = 0x8CD7

    static let FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum = 0x8CD9

    static let FRAMEBUFFER_UNSUPPORTED: GLenum = 0x8CDD

    static let FRAMEBUFFER_BINDING: GLenum = 0x8CA6

    static let RENDERBUFFER_BINDING: GLenum = 0x8CA7

    static let MAX_RENDERBUFFER_SIZE: GLenum = 0x84E8

    static let INVALID_FRAMEBUFFER_OPERATION: GLenum = 0x0506

    static let UNPACK_FLIP_Y_WEBGL: GLenum = 0x9240

    static let UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum = 0x9241

    static let CONTEXT_LOST_WEBGL: GLenum = 0x9242

    static let UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum = 0x9243

    static let BROWSER_DEFAULT_WEBGL: GLenum = 0x9244

    var canvas: __UNSUPPORTED_UNION__ { ReadonlyAttribute[Strings.canvas, in: jsObject] }

    var drawingBufferWidth: GLsizei { ReadonlyAttribute[Strings.drawingBufferWidth, in: jsObject] }

    var drawingBufferHeight: GLsizei { ReadonlyAttribute[Strings.drawingBufferHeight, in: jsObject] }

    func getContextAttributes() -> WebGLContextAttributes? {
        let this = jsObject
        return this[Strings.getContextAttributes].function!(this: this, arguments: []).fromJSValue()!
    }

    func isContextLost() -> Bool {
        let this = jsObject
        return this[Strings.isContextLost].function!(this: this, arguments: []).fromJSValue()!
    }

    func getSupportedExtensions() -> [String]? {
        let this = jsObject
        return this[Strings.getSupportedExtensions].function!(this: this, arguments: []).fromJSValue()!
    }

    func getExtension(name: String) -> JSObject? {
        let this = jsObject
        return this[Strings.getExtension].function!(this: this, arguments: [name.jsValue()]).fromJSValue()!
    }

    func activeTexture(texture: GLenum) {
        let this = jsObject
        _ = this[Strings.activeTexture].function!(this: this, arguments: [texture.jsValue()])
    }

    func attachShader(program: WebGLProgram, shader: WebGLShader) {
        let this = jsObject
        _ = this[Strings.attachShader].function!(this: this, arguments: [program.jsValue(), shader.jsValue()])
    }

    func bindAttribLocation(program: WebGLProgram, index: GLuint, name: String) {
        let this = jsObject
        _ = this[Strings.bindAttribLocation].function!(this: this, arguments: [program.jsValue(), index.jsValue(), name.jsValue()])
    }

    func bindBuffer(target: GLenum, buffer: WebGLBuffer?) {
        let this = jsObject
        _ = this[Strings.bindBuffer].function!(this: this, arguments: [target.jsValue(), buffer.jsValue()])
    }

    func bindFramebuffer(target: GLenum, framebuffer: WebGLFramebuffer?) {
        let this = jsObject
        _ = this[Strings.bindFramebuffer].function!(this: this, arguments: [target.jsValue(), framebuffer.jsValue()])
    }

    func bindRenderbuffer(target: GLenum, renderbuffer: WebGLRenderbuffer?) {
        let this = jsObject
        _ = this[Strings.bindRenderbuffer].function!(this: this, arguments: [target.jsValue(), renderbuffer.jsValue()])
    }

    func bindTexture(target: GLenum, texture: WebGLTexture?) {
        let this = jsObject
        _ = this[Strings.bindTexture].function!(this: this, arguments: [target.jsValue(), texture.jsValue()])
    }

    func blendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) {
        let this = jsObject
        _ = this[Strings.blendColor].function!(this: this, arguments: [red.jsValue(), green.jsValue(), blue.jsValue(), alpha.jsValue()])
    }

    func blendEquation(mode: GLenum) {
        let this = jsObject
        _ = this[Strings.blendEquation].function!(this: this, arguments: [mode.jsValue()])
    }

    func blendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) {
        let this = jsObject
        _ = this[Strings.blendEquationSeparate].function!(this: this, arguments: [modeRGB.jsValue(), modeAlpha.jsValue()])
    }

    func blendFunc(sfactor: GLenum, dfactor: GLenum) {
        let this = jsObject
        _ = this[Strings.blendFunc].function!(this: this, arguments: [sfactor.jsValue(), dfactor.jsValue()])
    }

    func blendFuncSeparate(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {
        let this = jsObject
        _ = this[Strings.blendFuncSeparate].function!(this: this, arguments: [srcRGB.jsValue(), dstRGB.jsValue(), srcAlpha.jsValue(), dstAlpha.jsValue()])
    }

    func checkFramebufferStatus(target: GLenum) -> GLenum {
        let this = jsObject
        return this[Strings.checkFramebufferStatus].function!(this: this, arguments: [target.jsValue()]).fromJSValue()!
    }

    func clear(mask: GLbitfield) {
        let this = jsObject
        _ = this[Strings.clear].function!(this: this, arguments: [mask.jsValue()])
    }

    func clearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) {
        let this = jsObject
        _ = this[Strings.clearColor].function!(this: this, arguments: [red.jsValue(), green.jsValue(), blue.jsValue(), alpha.jsValue()])
    }

    func clearDepth(depth: GLclampf) {
        let this = jsObject
        _ = this[Strings.clearDepth].function!(this: this, arguments: [depth.jsValue()])
    }

    func clearStencil(s: GLint) {
        let this = jsObject
        _ = this[Strings.clearStencil].function!(this: this, arguments: [s.jsValue()])
    }

    func colorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {
        let this = jsObject
        _ = this[Strings.colorMask].function!(this: this, arguments: [red.jsValue(), green.jsValue(), blue.jsValue(), alpha.jsValue()])
    }

    func compileShader(shader: WebGLShader) {
        let this = jsObject
        _ = this[Strings.compileShader].function!(this: this, arguments: [shader.jsValue()])
    }

    func copyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = internalformat.jsValue()
        let _arg3 = x.jsValue()
        let _arg4 = y.jsValue()
        let _arg5 = width.jsValue()
        let _arg6 = height.jsValue()
        let _arg7 = border.jsValue()
        let this = jsObject
        _ = this[Strings.copyTexImage2D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7])
    }

    func copyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = xoffset.jsValue()
        let _arg3 = yoffset.jsValue()
        let _arg4 = x.jsValue()
        let _arg5 = y.jsValue()
        let _arg6 = width.jsValue()
        let _arg7 = height.jsValue()
        let this = jsObject
        _ = this[Strings.copyTexSubImage2D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7])
    }

    func createBuffer() -> WebGLBuffer? {
        let this = jsObject
        return this[Strings.createBuffer].function!(this: this, arguments: []).fromJSValue()!
    }

    func createFramebuffer() -> WebGLFramebuffer? {
        let this = jsObject
        return this[Strings.createFramebuffer].function!(this: this, arguments: []).fromJSValue()!
    }

    func createProgram() -> WebGLProgram? {
        let this = jsObject
        return this[Strings.createProgram].function!(this: this, arguments: []).fromJSValue()!
    }

    func createRenderbuffer() -> WebGLRenderbuffer? {
        let this = jsObject
        return this[Strings.createRenderbuffer].function!(this: this, arguments: []).fromJSValue()!
    }

    func createShader(type: GLenum) -> WebGLShader? {
        let this = jsObject
        return this[Strings.createShader].function!(this: this, arguments: [type.jsValue()]).fromJSValue()!
    }

    func createTexture() -> WebGLTexture? {
        let this = jsObject
        return this[Strings.createTexture].function!(this: this, arguments: []).fromJSValue()!
    }

    func cullFace(mode: GLenum) {
        let this = jsObject
        _ = this[Strings.cullFace].function!(this: this, arguments: [mode.jsValue()])
    }

    func deleteBuffer(buffer: WebGLBuffer?) {
        let this = jsObject
        _ = this[Strings.deleteBuffer].function!(this: this, arguments: [buffer.jsValue()])
    }

    func deleteFramebuffer(framebuffer: WebGLFramebuffer?) {
        let this = jsObject
        _ = this[Strings.deleteFramebuffer].function!(this: this, arguments: [framebuffer.jsValue()])
    }

    func deleteProgram(program: WebGLProgram?) {
        let this = jsObject
        _ = this[Strings.deleteProgram].function!(this: this, arguments: [program.jsValue()])
    }

    func deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?) {
        let this = jsObject
        _ = this[Strings.deleteRenderbuffer].function!(this: this, arguments: [renderbuffer.jsValue()])
    }

    func deleteShader(shader: WebGLShader?) {
        let this = jsObject
        _ = this[Strings.deleteShader].function!(this: this, arguments: [shader.jsValue()])
    }

    func deleteTexture(texture: WebGLTexture?) {
        let this = jsObject
        _ = this[Strings.deleteTexture].function!(this: this, arguments: [texture.jsValue()])
    }

    func depthFunc(func: GLenum) {
        let this = jsObject
        _ = this[Strings.depthFunc].function!(this: this, arguments: [`func`.jsValue()])
    }

    func depthMask(flag: GLboolean) {
        let this = jsObject
        _ = this[Strings.depthMask].function!(this: this, arguments: [flag.jsValue()])
    }

    func depthRange(zNear: GLclampf, zFar: GLclampf) {
        let this = jsObject
        _ = this[Strings.depthRange].function!(this: this, arguments: [zNear.jsValue(), zFar.jsValue()])
    }

    func detachShader(program: WebGLProgram, shader: WebGLShader) {
        let this = jsObject
        _ = this[Strings.detachShader].function!(this: this, arguments: [program.jsValue(), shader.jsValue()])
    }

    func disable(cap: GLenum) {
        let this = jsObject
        _ = this[Strings.disable].function!(this: this, arguments: [cap.jsValue()])
    }

    func disableVertexAttribArray(index: GLuint) {
        let this = jsObject
        _ = this[Strings.disableVertexAttribArray].function!(this: this, arguments: [index.jsValue()])
    }

    func drawArrays(mode: GLenum, first: GLint, count: GLsizei) {
        let this = jsObject
        _ = this[Strings.drawArrays].function!(this: this, arguments: [mode.jsValue(), first.jsValue(), count.jsValue()])
    }

    func drawElements(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr) {
        let this = jsObject
        _ = this[Strings.drawElements].function!(this: this, arguments: [mode.jsValue(), count.jsValue(), type.jsValue(), offset.jsValue()])
    }

    func enable(cap: GLenum) {
        let this = jsObject
        _ = this[Strings.enable].function!(this: this, arguments: [cap.jsValue()])
    }

    func enableVertexAttribArray(index: GLuint) {
        let this = jsObject
        _ = this[Strings.enableVertexAttribArray].function!(this: this, arguments: [index.jsValue()])
    }

    func finish() {
        let this = jsObject
        _ = this[Strings.finish].function!(this: this, arguments: [])
    }

    func flush() {
        let this = jsObject
        _ = this[Strings.flush].function!(this: this, arguments: [])
    }

    func framebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: WebGLRenderbuffer?) {
        let this = jsObject
        _ = this[Strings.framebufferRenderbuffer].function!(this: this, arguments: [target.jsValue(), attachment.jsValue(), renderbuffertarget.jsValue(), renderbuffer.jsValue()])
    }

    func framebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: WebGLTexture?, level: GLint) {
        let this = jsObject
        _ = this[Strings.framebufferTexture2D].function!(this: this, arguments: [target.jsValue(), attachment.jsValue(), textarget.jsValue(), texture.jsValue(), level.jsValue()])
    }

    func frontFace(mode: GLenum) {
        let this = jsObject
        _ = this[Strings.frontFace].function!(this: this, arguments: [mode.jsValue()])
    }

    func generateMipmap(target: GLenum) {
        let this = jsObject
        _ = this[Strings.generateMipmap].function!(this: this, arguments: [target.jsValue()])
    }

    func getActiveAttrib(program: WebGLProgram, index: GLuint) -> WebGLActiveInfo? {
        let this = jsObject
        return this[Strings.getActiveAttrib].function!(this: this, arguments: [program.jsValue(), index.jsValue()]).fromJSValue()!
    }

    func getActiveUniform(program: WebGLProgram, index: GLuint) -> WebGLActiveInfo? {
        let this = jsObject
        return this[Strings.getActiveUniform].function!(this: this, arguments: [program.jsValue(), index.jsValue()]).fromJSValue()!
    }

    func getAttachedShaders(program: WebGLProgram) -> [WebGLShader]? {
        let this = jsObject
        return this[Strings.getAttachedShaders].function!(this: this, arguments: [program.jsValue()]).fromJSValue()!
    }

    func getAttribLocation(program: WebGLProgram, name: String) -> GLint {
        let this = jsObject
        return this[Strings.getAttribLocation].function!(this: this, arguments: [program.jsValue(), name.jsValue()]).fromJSValue()!
    }

    func getBufferParameter(target: GLenum, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getBufferParameter].function!(this: this, arguments: [target.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func getParameter(pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getParameter].function!(this: this, arguments: [pname.jsValue()]).fromJSValue()!
    }

    func getError() -> GLenum {
        let this = jsObject
        return this[Strings.getError].function!(this: this, arguments: []).fromJSValue()!
    }

    func getFramebufferAttachmentParameter(target: GLenum, attachment: GLenum, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getFramebufferAttachmentParameter].function!(this: this, arguments: [target.jsValue(), attachment.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func getProgramParameter(program: WebGLProgram, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getProgramParameter].function!(this: this, arguments: [program.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func getProgramInfoLog(program: WebGLProgram) -> String? {
        let this = jsObject
        return this[Strings.getProgramInfoLog].function!(this: this, arguments: [program.jsValue()]).fromJSValue()!
    }

    func getRenderbufferParameter(target: GLenum, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getRenderbufferParameter].function!(this: this, arguments: [target.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func getShaderParameter(shader: WebGLShader, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getShaderParameter].function!(this: this, arguments: [shader.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func getShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum) -> WebGLShaderPrecisionFormat? {
        let this = jsObject
        return this[Strings.getShaderPrecisionFormat].function!(this: this, arguments: [shadertype.jsValue(), precisiontype.jsValue()]).fromJSValue()!
    }

    func getShaderInfoLog(shader: WebGLShader) -> String? {
        let this = jsObject
        return this[Strings.getShaderInfoLog].function!(this: this, arguments: [shader.jsValue()]).fromJSValue()!
    }

    func getShaderSource(shader: WebGLShader) -> String? {
        let this = jsObject
        return this[Strings.getShaderSource].function!(this: this, arguments: [shader.jsValue()]).fromJSValue()!
    }

    func getTexParameter(target: GLenum, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getTexParameter].function!(this: this, arguments: [target.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func getUniform(program: WebGLProgram, location: WebGLUniformLocation) -> JSValue {
        let this = jsObject
        return this[Strings.getUniform].function!(this: this, arguments: [program.jsValue(), location.jsValue()]).fromJSValue()!
    }

    func getUniformLocation(program: WebGLProgram, name: String) -> WebGLUniformLocation? {
        let this = jsObject
        return this[Strings.getUniformLocation].function!(this: this, arguments: [program.jsValue(), name.jsValue()]).fromJSValue()!
    }

    func getVertexAttrib(index: GLuint, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getVertexAttrib].function!(this: this, arguments: [index.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func getVertexAttribOffset(index: GLuint, pname: GLenum) -> GLintptr {
        let this = jsObject
        return this[Strings.getVertexAttribOffset].function!(this: this, arguments: [index.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func hint(target: GLenum, mode: GLenum) {
        let this = jsObject
        _ = this[Strings.hint].function!(this: this, arguments: [target.jsValue(), mode.jsValue()])
    }

    func isBuffer(buffer: WebGLBuffer?) -> GLboolean {
        let this = jsObject
        return this[Strings.isBuffer].function!(this: this, arguments: [buffer.jsValue()]).fromJSValue()!
    }

    func isEnabled(cap: GLenum) -> GLboolean {
        let this = jsObject
        return this[Strings.isEnabled].function!(this: this, arguments: [cap.jsValue()]).fromJSValue()!
    }

    func isFramebuffer(framebuffer: WebGLFramebuffer?) -> GLboolean {
        let this = jsObject
        return this[Strings.isFramebuffer].function!(this: this, arguments: [framebuffer.jsValue()]).fromJSValue()!
    }

    func isProgram(program: WebGLProgram?) -> GLboolean {
        let this = jsObject
        return this[Strings.isProgram].function!(this: this, arguments: [program.jsValue()]).fromJSValue()!
    }

    func isRenderbuffer(renderbuffer: WebGLRenderbuffer?) -> GLboolean {
        let this = jsObject
        return this[Strings.isRenderbuffer].function!(this: this, arguments: [renderbuffer.jsValue()]).fromJSValue()!
    }

    func isShader(shader: WebGLShader?) -> GLboolean {
        let this = jsObject
        return this[Strings.isShader].function!(this: this, arguments: [shader.jsValue()]).fromJSValue()!
    }

    func isTexture(texture: WebGLTexture?) -> GLboolean {
        let this = jsObject
        return this[Strings.isTexture].function!(this: this, arguments: [texture.jsValue()]).fromJSValue()!
    }

    func lineWidth(width: GLfloat) {
        let this = jsObject
        _ = this[Strings.lineWidth].function!(this: this, arguments: [width.jsValue()])
    }

    func linkProgram(program: WebGLProgram) {
        let this = jsObject
        _ = this[Strings.linkProgram].function!(this: this, arguments: [program.jsValue()])
    }

    func pixelStorei(pname: GLenum, param: GLint) {
        let this = jsObject
        _ = this[Strings.pixelStorei].function!(this: this, arguments: [pname.jsValue(), param.jsValue()])
    }

    func polygonOffset(factor: GLfloat, units: GLfloat) {
        let this = jsObject
        _ = this[Strings.polygonOffset].function!(this: this, arguments: [factor.jsValue(), units.jsValue()])
    }

    func renderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {
        let this = jsObject
        _ = this[Strings.renderbufferStorage].function!(this: this, arguments: [target.jsValue(), internalformat.jsValue(), width.jsValue(), height.jsValue()])
    }

    func sampleCoverage(value: GLclampf, invert: GLboolean) {
        let this = jsObject
        _ = this[Strings.sampleCoverage].function!(this: this, arguments: [value.jsValue(), invert.jsValue()])
    }

    func scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) {
        let this = jsObject
        _ = this[Strings.scissor].function!(this: this, arguments: [x.jsValue(), y.jsValue(), width.jsValue(), height.jsValue()])
    }

    func shaderSource(shader: WebGLShader, source: String) {
        let this = jsObject
        _ = this[Strings.shaderSource].function!(this: this, arguments: [shader.jsValue(), source.jsValue()])
    }

    func stencilFunc(func: GLenum, ref: GLint, mask: GLuint) {
        let this = jsObject
        _ = this[Strings.stencilFunc].function!(this: this, arguments: [`func`.jsValue(), ref.jsValue(), mask.jsValue()])
    }

    func stencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint) {
        let this = jsObject
        _ = this[Strings.stencilFuncSeparate].function!(this: this, arguments: [face.jsValue(), `func`.jsValue(), ref.jsValue(), mask.jsValue()])
    }

    func stencilMask(mask: GLuint) {
        let this = jsObject
        _ = this[Strings.stencilMask].function!(this: this, arguments: [mask.jsValue()])
    }

    func stencilMaskSeparate(face: GLenum, mask: GLuint) {
        let this = jsObject
        _ = this[Strings.stencilMaskSeparate].function!(this: this, arguments: [face.jsValue(), mask.jsValue()])
    }

    func stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) {
        let this = jsObject
        _ = this[Strings.stencilOp].function!(this: this, arguments: [fail.jsValue(), zfail.jsValue(), zpass.jsValue()])
    }

    func stencilOpSeparate(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum) {
        let this = jsObject
        _ = this[Strings.stencilOpSeparate].function!(this: this, arguments: [face.jsValue(), fail.jsValue(), zfail.jsValue(), zpass.jsValue()])
    }

    func texParameterf(target: GLenum, pname: GLenum, param: GLfloat) {
        let this = jsObject
        _ = this[Strings.texParameterf].function!(this: this, arguments: [target.jsValue(), pname.jsValue(), param.jsValue()])
    }

    func texParameteri(target: GLenum, pname: GLenum, param: GLint) {
        let this = jsObject
        _ = this[Strings.texParameteri].function!(this: this, arguments: [target.jsValue(), pname.jsValue(), param.jsValue()])
    }

    func uniform1f(location: WebGLUniformLocation?, x: GLfloat) {
        let this = jsObject
        _ = this[Strings.uniform1f].function!(this: this, arguments: [location.jsValue(), x.jsValue()])
    }

    func uniform2f(location: WebGLUniformLocation?, x: GLfloat, y: GLfloat) {
        let this = jsObject
        _ = this[Strings.uniform2f].function!(this: this, arguments: [location.jsValue(), x.jsValue(), y.jsValue()])
    }

    func uniform3f(location: WebGLUniformLocation?, x: GLfloat, y: GLfloat, z: GLfloat) {
        let this = jsObject
        _ = this[Strings.uniform3f].function!(this: this, arguments: [location.jsValue(), x.jsValue(), y.jsValue(), z.jsValue()])
    }

    func uniform4f(location: WebGLUniformLocation?, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {
        let this = jsObject
        _ = this[Strings.uniform4f].function!(this: this, arguments: [location.jsValue(), x.jsValue(), y.jsValue(), z.jsValue(), w.jsValue()])
    }

    func uniform1i(location: WebGLUniformLocation?, x: GLint) {
        let this = jsObject
        _ = this[Strings.uniform1i].function!(this: this, arguments: [location.jsValue(), x.jsValue()])
    }

    func uniform2i(location: WebGLUniformLocation?, x: GLint, y: GLint) {
        let this = jsObject
        _ = this[Strings.uniform2i].function!(this: this, arguments: [location.jsValue(), x.jsValue(), y.jsValue()])
    }

    func uniform3i(location: WebGLUniformLocation?, x: GLint, y: GLint, z: GLint) {
        let this = jsObject
        _ = this[Strings.uniform3i].function!(this: this, arguments: [location.jsValue(), x.jsValue(), y.jsValue(), z.jsValue()])
    }

    func uniform4i(location: WebGLUniformLocation?, x: GLint, y: GLint, z: GLint, w: GLint) {
        let this = jsObject
        _ = this[Strings.uniform4i].function!(this: this, arguments: [location.jsValue(), x.jsValue(), y.jsValue(), z.jsValue(), w.jsValue()])
    }

    func useProgram(program: WebGLProgram?) {
        let this = jsObject
        _ = this[Strings.useProgram].function!(this: this, arguments: [program.jsValue()])
    }

    func validateProgram(program: WebGLProgram) {
        let this = jsObject
        _ = this[Strings.validateProgram].function!(this: this, arguments: [program.jsValue()])
    }

    func vertexAttrib1f(index: GLuint, x: GLfloat) {
        let this = jsObject
        _ = this[Strings.vertexAttrib1f].function!(this: this, arguments: [index.jsValue(), x.jsValue()])
    }

    func vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) {
        let this = jsObject
        _ = this[Strings.vertexAttrib2f].function!(this: this, arguments: [index.jsValue(), x.jsValue(), y.jsValue()])
    }

    func vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {
        let this = jsObject
        _ = this[Strings.vertexAttrib3f].function!(this: this, arguments: [index.jsValue(), x.jsValue(), y.jsValue(), z.jsValue()])
    }

    func vertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {
        let this = jsObject
        _ = this[Strings.vertexAttrib4f].function!(this: this, arguments: [index.jsValue(), x.jsValue(), y.jsValue(), z.jsValue(), w.jsValue()])
    }

    func vertexAttrib1fv(index: GLuint, values: Float32List) {
        let this = jsObject
        _ = this[Strings.vertexAttrib1fv].function!(this: this, arguments: [index.jsValue(), values.jsValue()])
    }

    func vertexAttrib2fv(index: GLuint, values: Float32List) {
        let this = jsObject
        _ = this[Strings.vertexAttrib2fv].function!(this: this, arguments: [index.jsValue(), values.jsValue()])
    }

    func vertexAttrib3fv(index: GLuint, values: Float32List) {
        let this = jsObject
        _ = this[Strings.vertexAttrib3fv].function!(this: this, arguments: [index.jsValue(), values.jsValue()])
    }

    func vertexAttrib4fv(index: GLuint, values: Float32List) {
        let this = jsObject
        _ = this[Strings.vertexAttrib4fv].function!(this: this, arguments: [index.jsValue(), values.jsValue()])
    }

    func vertexAttribPointer(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) {
        let _arg0 = index.jsValue()
        let _arg1 = size.jsValue()
        let _arg2 = type.jsValue()
        let _arg3 = normalized.jsValue()
        let _arg4 = stride.jsValue()
        let _arg5 = offset.jsValue()
        let this = jsObject
        _ = this[Strings.vertexAttribPointer].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5])
    }

    func viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) {
        let this = jsObject
        _ = this[Strings.viewport].function!(this: this, arguments: [x.jsValue(), y.jsValue(), width.jsValue(), height.jsValue()])
    }

    func makeXRCompatible() -> JSPromise {
        let this = jsObject
        return this[Strings.makeXRCompatible].function!(this: this, arguments: []).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    func makeXRCompatible() async throws {
        let this = jsObject
        let _promise: JSPromise = this[Strings.makeXRCompatible].function!(this: this, arguments: []).fromJSValue()!
        _ = try await _promise.get()
    }
}
