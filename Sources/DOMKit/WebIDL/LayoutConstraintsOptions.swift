// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class LayoutConstraintsOptions: BridgedDictionary {
    public convenience init(availableInlineSize: Double, availableBlockSize: Double, fixedInlineSize: Double, fixedBlockSize: Double, percentageInlineSize: Double, percentageBlockSize: Double, blockFragmentationOffset: Double, blockFragmentationType: BlockFragmentationType, data: JSValue) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.availableInlineSize] = availableInlineSize.jsValue()
        object[Strings.availableBlockSize] = availableBlockSize.jsValue()
        object[Strings.fixedInlineSize] = fixedInlineSize.jsValue()
        object[Strings.fixedBlockSize] = fixedBlockSize.jsValue()
        object[Strings.percentageInlineSize] = percentageInlineSize.jsValue()
        object[Strings.percentageBlockSize] = percentageBlockSize.jsValue()
        object[Strings.blockFragmentationOffset] = blockFragmentationOffset.jsValue()
        object[Strings.blockFragmentationType] = blockFragmentationType.jsValue()
        object[Strings.data] = data.jsValue()
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _availableInlineSize = ReadWriteAttribute(jsObject: object, name: Strings.availableInlineSize)
        _availableBlockSize = ReadWriteAttribute(jsObject: object, name: Strings.availableBlockSize)
        _fixedInlineSize = ReadWriteAttribute(jsObject: object, name: Strings.fixedInlineSize)
        _fixedBlockSize = ReadWriteAttribute(jsObject: object, name: Strings.fixedBlockSize)
        _percentageInlineSize = ReadWriteAttribute(jsObject: object, name: Strings.percentageInlineSize)
        _percentageBlockSize = ReadWriteAttribute(jsObject: object, name: Strings.percentageBlockSize)
        _blockFragmentationOffset = ReadWriteAttribute(jsObject: object, name: Strings.blockFragmentationOffset)
        _blockFragmentationType = ReadWriteAttribute(jsObject: object, name: Strings.blockFragmentationType)
        _data = ReadWriteAttribute(jsObject: object, name: Strings.data)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var availableInlineSize: Double

    @ReadWriteAttribute
    public var availableBlockSize: Double

    @ReadWriteAttribute
    public var fixedInlineSize: Double

    @ReadWriteAttribute
    public var fixedBlockSize: Double

    @ReadWriteAttribute
    public var percentageInlineSize: Double

    @ReadWriteAttribute
    public var percentageBlockSize: Double

    @ReadWriteAttribute
    public var blockFragmentationOffset: Double

    @ReadWriteAttribute
    public var blockFragmentationType: BlockFragmentationType

    @ReadWriteAttribute
    public var data: JSValue
}
