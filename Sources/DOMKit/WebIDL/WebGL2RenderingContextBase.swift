// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public protocol WebGL2RenderingContextBase: JSBridgedClass {}
public extension WebGL2RenderingContextBase {
    static let READ_BUFFER: GLenum = 0x0C02

    static let UNPACK_ROW_LENGTH: GLenum = 0x0CF2

    static let UNPACK_SKIP_ROWS: GLenum = 0x0CF3

    static let UNPACK_SKIP_PIXELS: GLenum = 0x0CF4

    static let PACK_ROW_LENGTH: GLenum = 0x0D02

    static let PACK_SKIP_ROWS: GLenum = 0x0D03

    static let PACK_SKIP_PIXELS: GLenum = 0x0D04

    static let COLOR: GLenum = 0x1800

    static let DEPTH: GLenum = 0x1801

    static let STENCIL: GLenum = 0x1802

    static let RED: GLenum = 0x1903

    static let RGB8: GLenum = 0x8051

    static let RGBA8: GLenum = 0x8058

    static let RGB10_A2: GLenum = 0x8059

    static let TEXTURE_BINDING_3D: GLenum = 0x806A

    static let UNPACK_SKIP_IMAGES: GLenum = 0x806D

    static let UNPACK_IMAGE_HEIGHT: GLenum = 0x806E

    static let TEXTURE_3D: GLenum = 0x806F

    static let TEXTURE_WRAP_R: GLenum = 0x8072

    static let MAX_3D_TEXTURE_SIZE: GLenum = 0x8073

    static let UNSIGNED_INT_2_10_10_10_REV: GLenum = 0x8368

    static let MAX_ELEMENTS_VERTICES: GLenum = 0x80E8

    static let MAX_ELEMENTS_INDICES: GLenum = 0x80E9

    static let TEXTURE_MIN_LOD: GLenum = 0x813A

    static let TEXTURE_MAX_LOD: GLenum = 0x813B

    static let TEXTURE_BASE_LEVEL: GLenum = 0x813C

    static let TEXTURE_MAX_LEVEL: GLenum = 0x813D

    static let MIN: GLenum = 0x8007

    static let MAX: GLenum = 0x8008

    static let DEPTH_COMPONENT24: GLenum = 0x81A6

    static let MAX_TEXTURE_LOD_BIAS: GLenum = 0x84FD

    static let TEXTURE_COMPARE_MODE: GLenum = 0x884C

    static let TEXTURE_COMPARE_FUNC: GLenum = 0x884D

    static let CURRENT_QUERY: GLenum = 0x8865

    static let QUERY_RESULT: GLenum = 0x8866

    static let QUERY_RESULT_AVAILABLE: GLenum = 0x8867

    static let STREAM_READ: GLenum = 0x88E1

    static let STREAM_COPY: GLenum = 0x88E2

    static let STATIC_READ: GLenum = 0x88E5

    static let STATIC_COPY: GLenum = 0x88E6

    static let DYNAMIC_READ: GLenum = 0x88E9

    static let DYNAMIC_COPY: GLenum = 0x88EA

    static let MAX_DRAW_BUFFERS: GLenum = 0x8824

    static let DRAW_BUFFER0: GLenum = 0x8825

    static let DRAW_BUFFER1: GLenum = 0x8826

    static let DRAW_BUFFER2: GLenum = 0x8827

    static let DRAW_BUFFER3: GLenum = 0x8828

    static let DRAW_BUFFER4: GLenum = 0x8829

    static let DRAW_BUFFER5: GLenum = 0x882A

    static let DRAW_BUFFER6: GLenum = 0x882B

    static let DRAW_BUFFER7: GLenum = 0x882C

    static let DRAW_BUFFER8: GLenum = 0x882D

    static let DRAW_BUFFER9: GLenum = 0x882E

    static let DRAW_BUFFER10: GLenum = 0x882F

    static let DRAW_BUFFER11: GLenum = 0x8830

    static let DRAW_BUFFER12: GLenum = 0x8831

    static let DRAW_BUFFER13: GLenum = 0x8832

    static let DRAW_BUFFER14: GLenum = 0x8833

    static let DRAW_BUFFER15: GLenum = 0x8834

    static let MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8B49

    static let MAX_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8B4A

    static let SAMPLER_3D: GLenum = 0x8B5F

    static let SAMPLER_2D_SHADOW: GLenum = 0x8B62

    static let FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum = 0x8B8B

    static let PIXEL_PACK_BUFFER: GLenum = 0x88EB

    static let PIXEL_UNPACK_BUFFER: GLenum = 0x88EC

    static let PIXEL_PACK_BUFFER_BINDING: GLenum = 0x88ED

    static let PIXEL_UNPACK_BUFFER_BINDING: GLenum = 0x88EF

    static let FLOAT_MAT2x3: GLenum = 0x8B65

    static let FLOAT_MAT2x4: GLenum = 0x8B66

    static let FLOAT_MAT3x2: GLenum = 0x8B67

    static let FLOAT_MAT3x4: GLenum = 0x8B68

    static let FLOAT_MAT4x2: GLenum = 0x8B69

    static let FLOAT_MAT4x3: GLenum = 0x8B6A

    static let SRGB: GLenum = 0x8C40

    static let SRGB8: GLenum = 0x8C41

    static let SRGB8_ALPHA8: GLenum = 0x8C43

    static let COMPARE_REF_TO_TEXTURE: GLenum = 0x884E

    static let RGBA32F: GLenum = 0x8814

    static let RGB32F: GLenum = 0x8815

    static let RGBA16F: GLenum = 0x881A

    static let RGB16F: GLenum = 0x881B

    static let VERTEX_ATTRIB_ARRAY_INTEGER: GLenum = 0x88FD

    static let MAX_ARRAY_TEXTURE_LAYERS: GLenum = 0x88FF

    static let MIN_PROGRAM_TEXEL_OFFSET: GLenum = 0x8904

    static let MAX_PROGRAM_TEXEL_OFFSET: GLenum = 0x8905

    static let MAX_VARYING_COMPONENTS: GLenum = 0x8B4B

    static let TEXTURE_2D_ARRAY: GLenum = 0x8C1A

    static let TEXTURE_BINDING_2D_ARRAY: GLenum = 0x8C1D

    static let R11F_G11F_B10F: GLenum = 0x8C3A

    static let UNSIGNED_INT_10F_11F_11F_REV: GLenum = 0x8C3B

    static let RGB9_E5: GLenum = 0x8C3D

    static let UNSIGNED_INT_5_9_9_9_REV: GLenum = 0x8C3E

    static let TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum = 0x8C7F

    static let MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum = 0x8C80

    static let TRANSFORM_FEEDBACK_VARYINGS: GLenum = 0x8C83

    static let TRANSFORM_FEEDBACK_BUFFER_START: GLenum = 0x8C84

    static let TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum = 0x8C85

    static let TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum = 0x8C88

    static let RASTERIZER_DISCARD: GLenum = 0x8C89

    static let MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum = 0x8C8A

    static let MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum = 0x8C8B

    static let INTERLEAVED_ATTRIBS: GLenum = 0x8C8C

    static let SEPARATE_ATTRIBS: GLenum = 0x8C8D

    static let TRANSFORM_FEEDBACK_BUFFER: GLenum = 0x8C8E

    static let TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum = 0x8C8F

    static let RGBA32UI: GLenum = 0x8D70

    static let RGB32UI: GLenum = 0x8D71

    static let RGBA16UI: GLenum = 0x8D76

    static let RGB16UI: GLenum = 0x8D77

    static let RGBA8UI: GLenum = 0x8D7C

    static let RGB8UI: GLenum = 0x8D7D

    static let RGBA32I: GLenum = 0x8D82

    static let RGB32I: GLenum = 0x8D83

    static let RGBA16I: GLenum = 0x8D88

    static let RGB16I: GLenum = 0x8D89

    static let RGBA8I: GLenum = 0x8D8E

    static let RGB8I: GLenum = 0x8D8F

    static let RED_INTEGER: GLenum = 0x8D94

    static let RGB_INTEGER: GLenum = 0x8D98

    static let RGBA_INTEGER: GLenum = 0x8D99

    static let SAMPLER_2D_ARRAY: GLenum = 0x8DC1

    static let SAMPLER_2D_ARRAY_SHADOW: GLenum = 0x8DC4

    static let SAMPLER_CUBE_SHADOW: GLenum = 0x8DC5

    static let UNSIGNED_INT_VEC2: GLenum = 0x8DC6

    static let UNSIGNED_INT_VEC3: GLenum = 0x8DC7

    static let UNSIGNED_INT_VEC4: GLenum = 0x8DC8

    static let INT_SAMPLER_2D: GLenum = 0x8DCA

    static let INT_SAMPLER_3D: GLenum = 0x8DCB

    static let INT_SAMPLER_CUBE: GLenum = 0x8DCC

    static let INT_SAMPLER_2D_ARRAY: GLenum = 0x8DCF

    static let UNSIGNED_INT_SAMPLER_2D: GLenum = 0x8DD2

    static let UNSIGNED_INT_SAMPLER_3D: GLenum = 0x8DD3

    static let UNSIGNED_INT_SAMPLER_CUBE: GLenum = 0x8DD4

    static let UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum = 0x8DD7

    static let DEPTH_COMPONENT32F: GLenum = 0x8CAC

    static let DEPTH32F_STENCIL8: GLenum = 0x8CAD

    static let FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum = 0x8DAD

    static let FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum = 0x8210

    static let FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum = 0x8211

    static let FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum = 0x8212

    static let FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum = 0x8213

    static let FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum = 0x8214

    static let FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum = 0x8215

    static let FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum = 0x8216

    static let FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum = 0x8217

    static let FRAMEBUFFER_DEFAULT: GLenum = 0x8218

    static let UNSIGNED_INT_24_8: GLenum = 0x84FA

    static let DEPTH24_STENCIL8: GLenum = 0x88F0

    static let UNSIGNED_NORMALIZED: GLenum = 0x8C17

    static let DRAW_FRAMEBUFFER_BINDING: GLenum = 0x8CA6

    static let READ_FRAMEBUFFER: GLenum = 0x8CA8

    static let DRAW_FRAMEBUFFER: GLenum = 0x8CA9

    static let READ_FRAMEBUFFER_BINDING: GLenum = 0x8CAA

    static let RENDERBUFFER_SAMPLES: GLenum = 0x8CAB

    static let FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum = 0x8CD4

    static let MAX_COLOR_ATTACHMENTS: GLenum = 0x8CDF

    static let COLOR_ATTACHMENT1: GLenum = 0x8CE1

    static let COLOR_ATTACHMENT2: GLenum = 0x8CE2

    static let COLOR_ATTACHMENT3: GLenum = 0x8CE3

    static let COLOR_ATTACHMENT4: GLenum = 0x8CE4

    static let COLOR_ATTACHMENT5: GLenum = 0x8CE5

    static let COLOR_ATTACHMENT6: GLenum = 0x8CE6

    static let COLOR_ATTACHMENT7: GLenum = 0x8CE7

    static let COLOR_ATTACHMENT8: GLenum = 0x8CE8

    static let COLOR_ATTACHMENT9: GLenum = 0x8CE9

    static let COLOR_ATTACHMENT10: GLenum = 0x8CEA

    static let COLOR_ATTACHMENT11: GLenum = 0x8CEB

    static let COLOR_ATTACHMENT12: GLenum = 0x8CEC

    static let COLOR_ATTACHMENT13: GLenum = 0x8CED

    static let COLOR_ATTACHMENT14: GLenum = 0x8CEE

    static let COLOR_ATTACHMENT15: GLenum = 0x8CEF

    static let FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum = 0x8D56

    static let MAX_SAMPLES: GLenum = 0x8D57

    static let HALF_FLOAT: GLenum = 0x140B

    static let RG: GLenum = 0x8227

    static let RG_INTEGER: GLenum = 0x8228

    static let R8: GLenum = 0x8229

    static let RG8: GLenum = 0x822B

    static let R16F: GLenum = 0x822D

    static let R32F: GLenum = 0x822E

    static let RG16F: GLenum = 0x822F

    static let RG32F: GLenum = 0x8230

    static let R8I: GLenum = 0x8231

    static let R8UI: GLenum = 0x8232

    static let R16I: GLenum = 0x8233

    static let R16UI: GLenum = 0x8234

    static let R32I: GLenum = 0x8235

    static let R32UI: GLenum = 0x8236

    static let RG8I: GLenum = 0x8237

    static let RG8UI: GLenum = 0x8238

    static let RG16I: GLenum = 0x8239

    static let RG16UI: GLenum = 0x823A

    static let RG32I: GLenum = 0x823B

    static let RG32UI: GLenum = 0x823C

    static let VERTEX_ARRAY_BINDING: GLenum = 0x85B5

    static let R8_SNORM: GLenum = 0x8F94

    static let RG8_SNORM: GLenum = 0x8F95

    static let RGB8_SNORM: GLenum = 0x8F96

    static let RGBA8_SNORM: GLenum = 0x8F97

    static let SIGNED_NORMALIZED: GLenum = 0x8F9C

    static let COPY_READ_BUFFER: GLenum = 0x8F36

    static let COPY_WRITE_BUFFER: GLenum = 0x8F37

    static let COPY_READ_BUFFER_BINDING: GLenum = 0x8F36

    static let COPY_WRITE_BUFFER_BINDING: GLenum = 0x8F37

    static let UNIFORM_BUFFER: GLenum = 0x8A11

    static let UNIFORM_BUFFER_BINDING: GLenum = 0x8A28

    static let UNIFORM_BUFFER_START: GLenum = 0x8A29

    static let UNIFORM_BUFFER_SIZE: GLenum = 0x8A2A

    static let MAX_VERTEX_UNIFORM_BLOCKS: GLenum = 0x8A2B

    static let MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum = 0x8A2D

    static let MAX_COMBINED_UNIFORM_BLOCKS: GLenum = 0x8A2E

    static let MAX_UNIFORM_BUFFER_BINDINGS: GLenum = 0x8A2F

    static let MAX_UNIFORM_BLOCK_SIZE: GLenum = 0x8A30

    static let MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8A31

    static let MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8A33

    static let UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x8A34

    static let ACTIVE_UNIFORM_BLOCKS: GLenum = 0x8A36

    static let UNIFORM_TYPE: GLenum = 0x8A37

    static let UNIFORM_SIZE: GLenum = 0x8A38

    static let UNIFORM_BLOCK_INDEX: GLenum = 0x8A3A

    static let UNIFORM_OFFSET: GLenum = 0x8A3B

    static let UNIFORM_ARRAY_STRIDE: GLenum = 0x8A3C

    static let UNIFORM_MATRIX_STRIDE: GLenum = 0x8A3D

    static let UNIFORM_IS_ROW_MAJOR: GLenum = 0x8A3E

    static let UNIFORM_BLOCK_BINDING: GLenum = 0x8A3F

    static let UNIFORM_BLOCK_DATA_SIZE: GLenum = 0x8A40

    static let UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum = 0x8A42

    static let UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum = 0x8A43

    static let UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum = 0x8A44

    static let UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x8A46

    static let INVALID_INDEX: GLenum = 0xFFFF_FFFF

    static let MAX_VERTEX_OUTPUT_COMPONENTS: GLenum = 0x9122

    static let MAX_FRAGMENT_INPUT_COMPONENTS: GLenum = 0x9125

    static let MAX_SERVER_WAIT_TIMEOUT: GLenum = 0x9111

    static let OBJECT_TYPE: GLenum = 0x9112

    static let SYNC_CONDITION: GLenum = 0x9113

    static let SYNC_STATUS: GLenum = 0x9114

    static let SYNC_FLAGS: GLenum = 0x9115

    static let SYNC_FENCE: GLenum = 0x9116

    static let SYNC_GPU_COMMANDS_COMPLETE: GLenum = 0x9117

    static let UNSIGNALED: GLenum = 0x9118

    static let SIGNALED: GLenum = 0x9119

    static let ALREADY_SIGNALED: GLenum = 0x911A

    static let TIMEOUT_EXPIRED: GLenum = 0x911B

    static let CONDITION_SATISFIED: GLenum = 0x911C

    static let WAIT_FAILED: GLenum = 0x911D

    static let SYNC_FLUSH_COMMANDS_BIT: GLenum = 0x0000_0001

    static let VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum = 0x88FE

    static let ANY_SAMPLES_PASSED: GLenum = 0x8C2F

    static let ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum = 0x8D6A

    static let SAMPLER_BINDING: GLenum = 0x8919

    static let RGB10_A2UI: GLenum = 0x906F

    static let INT_2_10_10_10_REV: GLenum = 0x8D9F

    static let TRANSFORM_FEEDBACK: GLenum = 0x8E22

    static let TRANSFORM_FEEDBACK_PAUSED: GLenum = 0x8E23

    static let TRANSFORM_FEEDBACK_ACTIVE: GLenum = 0x8E24

    static let TRANSFORM_FEEDBACK_BINDING: GLenum = 0x8E25

    static let TEXTURE_IMMUTABLE_FORMAT: GLenum = 0x912F

    static let MAX_ELEMENT_INDEX: GLenum = 0x8D6B

    static let TEXTURE_IMMUTABLE_LEVELS: GLenum = 0x82DF

    static let TIMEOUT_IGNORED: GLint64 = -1

    static let MAX_CLIENT_WAIT_TIMEOUT_WEBGL: GLenum = 0x9247

    func copyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {
        let this = jsObject
        _ = this[Strings.copyBufferSubData].function!(this: this, arguments: [readTarget.jsValue(), writeTarget.jsValue(), readOffset.jsValue(), writeOffset.jsValue(), size.jsValue()])
    }

    func getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView, dstOffset: GLuint? = nil, length: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.getBufferSubData].function!(this: this, arguments: [target.jsValue(), srcByteOffset.jsValue(), dstBuffer.jsValue(), dstOffset?.jsValue() ?? .undefined, length?.jsValue() ?? .undefined])
    }

    func blitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {
        let _arg0 = srcX0.jsValue()
        let _arg1 = srcY0.jsValue()
        let _arg2 = srcX1.jsValue()
        let _arg3 = srcY1.jsValue()
        let _arg4 = dstX0.jsValue()
        let _arg5 = dstY0.jsValue()
        let _arg6 = dstX1.jsValue()
        let _arg7 = dstY1.jsValue()
        let _arg8 = mask.jsValue()
        let _arg9 = filter.jsValue()
        let this = jsObject
        _ = this[Strings.blitFramebuffer].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9])
    }

    func framebufferTextureLayer(target: GLenum, attachment: GLenum, texture: WebGLTexture?, level: GLint, layer: GLint) {
        let this = jsObject
        _ = this[Strings.framebufferTextureLayer].function!(this: this, arguments: [target.jsValue(), attachment.jsValue(), texture.jsValue(), level.jsValue(), layer.jsValue()])
    }

    func invalidateFramebuffer(target: GLenum, attachments: [GLenum]) {
        let this = jsObject
        _ = this[Strings.invalidateFramebuffer].function!(this: this, arguments: [target.jsValue(), attachments.jsValue()])
    }

    func invalidateSubFramebuffer(target: GLenum, attachments: [GLenum], x: GLint, y: GLint, width: GLsizei, height: GLsizei) {
        let _arg0 = target.jsValue()
        let _arg1 = attachments.jsValue()
        let _arg2 = x.jsValue()
        let _arg3 = y.jsValue()
        let _arg4 = width.jsValue()
        let _arg5 = height.jsValue()
        let this = jsObject
        _ = this[Strings.invalidateSubFramebuffer].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5])
    }

    func readBuffer(src: GLenum) {
        let this = jsObject
        _ = this[Strings.readBuffer].function!(this: this, arguments: [src.jsValue()])
    }

    func getInternalformatParameter(target: GLenum, internalformat: GLenum, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getInternalformatParameter].function!(this: this, arguments: [target.jsValue(), internalformat.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func renderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {
        let this = jsObject
        _ = this[Strings.renderbufferStorageMultisample].function!(this: this, arguments: [target.jsValue(), samples.jsValue(), internalformat.jsValue(), width.jsValue(), height.jsValue()])
    }

    func texStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {
        let this = jsObject
        _ = this[Strings.texStorage2D].function!(this: this, arguments: [target.jsValue(), levels.jsValue(), internalformat.jsValue(), width.jsValue(), height.jsValue()])
    }

    func texStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {
        let _arg0 = target.jsValue()
        let _arg1 = levels.jsValue()
        let _arg2 = internalformat.jsValue()
        let _arg3 = width.jsValue()
        let _arg4 = height.jsValue()
        let _arg5 = depth.jsValue()
        let this = jsObject
        _ = this[Strings.texStorage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5])
    }

    func texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = internalformat.jsValue()
        let _arg3 = width.jsValue()
        let _arg4 = height.jsValue()
        let _arg5 = depth.jsValue()
        let _arg6 = border.jsValue()
        let _arg7 = format.jsValue()
        let _arg8 = type.jsValue()
        let _arg9 = pboOffset.jsValue()
        let this = jsObject
        _ = this[Strings.texImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9])
    }

    func texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = internalformat.jsValue()
        let _arg3 = width.jsValue()
        let _arg4 = height.jsValue()
        let _arg5 = depth.jsValue()
        let _arg6 = border.jsValue()
        let _arg7 = format.jsValue()
        let _arg8 = type.jsValue()
        let _arg9 = source.jsValue()
        let this = jsObject
        _ = this[Strings.texImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9])
    }

    func texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView?) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = internalformat.jsValue()
        let _arg3 = width.jsValue()
        let _arg4 = height.jsValue()
        let _arg5 = depth.jsValue()
        let _arg6 = border.jsValue()
        let _arg7 = format.jsValue()
        let _arg8 = type.jsValue()
        let _arg9 = srcData.jsValue()
        let this = jsObject
        _ = this[Strings.texImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9])
    }

    func texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = internalformat.jsValue()
        let _arg3 = width.jsValue()
        let _arg4 = height.jsValue()
        let _arg5 = depth.jsValue()
        let _arg6 = border.jsValue()
        let _arg7 = format.jsValue()
        let _arg8 = type.jsValue()
        let _arg9 = srcData.jsValue()
        let _arg10 = srcOffset.jsValue()
        let this = jsObject
        _ = this[Strings.texImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10])
    }

    func texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = xoffset.jsValue()
        let _arg3 = yoffset.jsValue()
        let _arg4 = zoffset.jsValue()
        let _arg5 = width.jsValue()
        let _arg6 = height.jsValue()
        let _arg7 = depth.jsValue()
        let _arg8 = format.jsValue()
        let _arg9 = type.jsValue()
        let _arg10 = pboOffset.jsValue()
        let this = jsObject
        _ = this[Strings.texSubImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10])
    }

    func texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, source: TexImageSource) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = xoffset.jsValue()
        let _arg3 = yoffset.jsValue()
        let _arg4 = zoffset.jsValue()
        let _arg5 = width.jsValue()
        let _arg6 = height.jsValue()
        let _arg7 = depth.jsValue()
        let _arg8 = format.jsValue()
        let _arg9 = type.jsValue()
        let _arg10 = source.jsValue()
        let this = jsObject
        _ = this[Strings.texSubImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10])
    }

    func texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView?, srcOffset: GLuint? = nil) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = xoffset.jsValue()
        let _arg3 = yoffset.jsValue()
        let _arg4 = zoffset.jsValue()
        let _arg5 = width.jsValue()
        let _arg6 = height.jsValue()
        let _arg7 = depth.jsValue()
        let _arg8 = format.jsValue()
        let _arg9 = type.jsValue()
        let _arg10 = srcData.jsValue()
        let _arg11 = srcOffset?.jsValue() ?? .undefined
        let this = jsObject
        _ = this[Strings.texSubImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11])
    }

    func copyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = xoffset.jsValue()
        let _arg3 = yoffset.jsValue()
        let _arg4 = zoffset.jsValue()
        let _arg5 = x.jsValue()
        let _arg6 = y.jsValue()
        let _arg7 = width.jsValue()
        let _arg8 = height.jsValue()
        let this = jsObject
        _ = this[Strings.copyTexSubImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8])
    }

    func compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = internalformat.jsValue()
        let _arg3 = width.jsValue()
        let _arg4 = height.jsValue()
        let _arg5 = depth.jsValue()
        let _arg6 = border.jsValue()
        let _arg7 = imageSize.jsValue()
        let _arg8 = offset.jsValue()
        let this = jsObject
        _ = this[Strings.compressedTexImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8])
    }

    func compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset: GLuint? = nil, srcLengthOverride: GLuint? = nil) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = internalformat.jsValue()
        let _arg3 = width.jsValue()
        let _arg4 = height.jsValue()
        let _arg5 = depth.jsValue()
        let _arg6 = border.jsValue()
        let _arg7 = srcData.jsValue()
        let _arg8 = srcOffset?.jsValue() ?? .undefined
        let _arg9 = srcLengthOverride?.jsValue() ?? .undefined
        let this = jsObject
        _ = this[Strings.compressedTexImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9])
    }

    func compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = xoffset.jsValue()
        let _arg3 = yoffset.jsValue()
        let _arg4 = zoffset.jsValue()
        let _arg5 = width.jsValue()
        let _arg6 = height.jsValue()
        let _arg7 = depth.jsValue()
        let _arg8 = format.jsValue()
        let _arg9 = imageSize.jsValue()
        let _arg10 = offset.jsValue()
        let this = jsObject
        _ = this[Strings.compressedTexSubImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10])
    }

    func compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset: GLuint? = nil, srcLengthOverride: GLuint? = nil) {
        let _arg0 = target.jsValue()
        let _arg1 = level.jsValue()
        let _arg2 = xoffset.jsValue()
        let _arg3 = yoffset.jsValue()
        let _arg4 = zoffset.jsValue()
        let _arg5 = width.jsValue()
        let _arg6 = height.jsValue()
        let _arg7 = depth.jsValue()
        let _arg8 = format.jsValue()
        let _arg9 = srcData.jsValue()
        let _arg10 = srcOffset?.jsValue() ?? .undefined
        let _arg11 = srcLengthOverride?.jsValue() ?? .undefined
        let this = jsObject
        _ = this[Strings.compressedTexSubImage3D].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11])
    }

    func getFragDataLocation(program: WebGLProgram, name: String) -> GLint {
        let this = jsObject
        return this[Strings.getFragDataLocation].function!(this: this, arguments: [program.jsValue(), name.jsValue()]).fromJSValue()!
    }

    func uniform1ui(location: WebGLUniformLocation?, v0: GLuint) {
        let this = jsObject
        _ = this[Strings.uniform1ui].function!(this: this, arguments: [location.jsValue(), v0.jsValue()])
    }

    func uniform2ui(location: WebGLUniformLocation?, v0: GLuint, v1: GLuint) {
        let this = jsObject
        _ = this[Strings.uniform2ui].function!(this: this, arguments: [location.jsValue(), v0.jsValue(), v1.jsValue()])
    }

    func uniform3ui(location: WebGLUniformLocation?, v0: GLuint, v1: GLuint, v2: GLuint) {
        let this = jsObject
        _ = this[Strings.uniform3ui].function!(this: this, arguments: [location.jsValue(), v0.jsValue(), v1.jsValue(), v2.jsValue()])
    }

    func uniform4ui(location: WebGLUniformLocation?, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {
        let this = jsObject
        _ = this[Strings.uniform4ui].function!(this: this, arguments: [location.jsValue(), v0.jsValue(), v1.jsValue(), v2.jsValue(), v3.jsValue()])
    }

    func uniform1uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: GLuint? = nil, srcLength: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.uniform1uiv].function!(this: this, arguments: [location.jsValue(), data.jsValue(), srcOffset?.jsValue() ?? .undefined, srcLength?.jsValue() ?? .undefined])
    }

    func uniform2uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: GLuint? = nil, srcLength: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.uniform2uiv].function!(this: this, arguments: [location.jsValue(), data.jsValue(), srcOffset?.jsValue() ?? .undefined, srcLength?.jsValue() ?? .undefined])
    }

    func uniform3uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: GLuint? = nil, srcLength: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.uniform3uiv].function!(this: this, arguments: [location.jsValue(), data.jsValue(), srcOffset?.jsValue() ?? .undefined, srcLength?.jsValue() ?? .undefined])
    }

    func uniform4uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: GLuint? = nil, srcLength: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.uniform4uiv].function!(this: this, arguments: [location.jsValue(), data.jsValue(), srcOffset?.jsValue() ?? .undefined, srcLength?.jsValue() ?? .undefined])
    }

    func uniformMatrix3x2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = nil, srcLength: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.uniformMatrix3x2fv].function!(this: this, arguments: [location.jsValue(), transpose.jsValue(), data.jsValue(), srcOffset?.jsValue() ?? .undefined, srcLength?.jsValue() ?? .undefined])
    }

    func uniformMatrix4x2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = nil, srcLength: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.uniformMatrix4x2fv].function!(this: this, arguments: [location.jsValue(), transpose.jsValue(), data.jsValue(), srcOffset?.jsValue() ?? .undefined, srcLength?.jsValue() ?? .undefined])
    }

    func uniformMatrix2x3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = nil, srcLength: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.uniformMatrix2x3fv].function!(this: this, arguments: [location.jsValue(), transpose.jsValue(), data.jsValue(), srcOffset?.jsValue() ?? .undefined, srcLength?.jsValue() ?? .undefined])
    }

    func uniformMatrix4x3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = nil, srcLength: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.uniformMatrix4x3fv].function!(this: this, arguments: [location.jsValue(), transpose.jsValue(), data.jsValue(), srcOffset?.jsValue() ?? .undefined, srcLength?.jsValue() ?? .undefined])
    }

    func uniformMatrix2x4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = nil, srcLength: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.uniformMatrix2x4fv].function!(this: this, arguments: [location.jsValue(), transpose.jsValue(), data.jsValue(), srcOffset?.jsValue() ?? .undefined, srcLength?.jsValue() ?? .undefined])
    }

    func uniformMatrix3x4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = nil, srcLength: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.uniformMatrix3x4fv].function!(this: this, arguments: [location.jsValue(), transpose.jsValue(), data.jsValue(), srcOffset?.jsValue() ?? .undefined, srcLength?.jsValue() ?? .undefined])
    }

    func vertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {
        let this = jsObject
        _ = this[Strings.vertexAttribI4i].function!(this: this, arguments: [index.jsValue(), x.jsValue(), y.jsValue(), z.jsValue(), w.jsValue()])
    }

    func vertexAttribI4iv(index: GLuint, values: Int32List) {
        let this = jsObject
        _ = this[Strings.vertexAttribI4iv].function!(this: this, arguments: [index.jsValue(), values.jsValue()])
    }

    func vertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {
        let this = jsObject
        _ = this[Strings.vertexAttribI4ui].function!(this: this, arguments: [index.jsValue(), x.jsValue(), y.jsValue(), z.jsValue(), w.jsValue()])
    }

    func vertexAttribI4uiv(index: GLuint, values: Uint32List) {
        let this = jsObject
        _ = this[Strings.vertexAttribI4uiv].function!(this: this, arguments: [index.jsValue(), values.jsValue()])
    }

    func vertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) {
        let this = jsObject
        _ = this[Strings.vertexAttribIPointer].function!(this: this, arguments: [index.jsValue(), size.jsValue(), type.jsValue(), stride.jsValue(), offset.jsValue()])
    }

    func vertexAttribDivisor(index: GLuint, divisor: GLuint) {
        let this = jsObject
        _ = this[Strings.vertexAttribDivisor].function!(this: this, arguments: [index.jsValue(), divisor.jsValue()])
    }

    func drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei) {
        let this = jsObject
        _ = this[Strings.drawArraysInstanced].function!(this: this, arguments: [mode.jsValue(), first.jsValue(), count.jsValue(), instanceCount.jsValue()])
    }

    func drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei) {
        let this = jsObject
        _ = this[Strings.drawElementsInstanced].function!(this: this, arguments: [mode.jsValue(), count.jsValue(), type.jsValue(), offset.jsValue(), instanceCount.jsValue()])
    }

    func drawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, offset: GLintptr) {
        let _arg0 = mode.jsValue()
        let _arg1 = start.jsValue()
        let _arg2 = end.jsValue()
        let _arg3 = count.jsValue()
        let _arg4 = type.jsValue()
        let _arg5 = offset.jsValue()
        let this = jsObject
        _ = this[Strings.drawRangeElements].function!(this: this, arguments: [_arg0, _arg1, _arg2, _arg3, _arg4, _arg5])
    }

    func drawBuffers(buffers: [GLenum]) {
        let this = jsObject
        _ = this[Strings.drawBuffers].function!(this: this, arguments: [buffers.jsValue()])
    }

    func clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Float32List, srcOffset: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.clearBufferfv].function!(this: this, arguments: [buffer.jsValue(), drawbuffer.jsValue(), values.jsValue(), srcOffset?.jsValue() ?? .undefined])
    }

    func clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Int32List, srcOffset: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.clearBufferiv].function!(this: this, arguments: [buffer.jsValue(), drawbuffer.jsValue(), values.jsValue(), srcOffset?.jsValue() ?? .undefined])
    }

    func clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Uint32List, srcOffset: GLuint? = nil) {
        let this = jsObject
        _ = this[Strings.clearBufferuiv].function!(this: this, arguments: [buffer.jsValue(), drawbuffer.jsValue(), values.jsValue(), srcOffset?.jsValue() ?? .undefined])
    }

    func clearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {
        let this = jsObject
        _ = this[Strings.clearBufferfi].function!(this: this, arguments: [buffer.jsValue(), drawbuffer.jsValue(), depth.jsValue(), stencil.jsValue()])
    }

    func createQuery() -> WebGLQuery? {
        let this = jsObject
        return this[Strings.createQuery].function!(this: this, arguments: []).fromJSValue()!
    }

    func deleteQuery(query: WebGLQuery?) {
        let this = jsObject
        _ = this[Strings.deleteQuery].function!(this: this, arguments: [query.jsValue()])
    }

    func isQuery(query: WebGLQuery?) -> GLboolean {
        let this = jsObject
        return this[Strings.isQuery].function!(this: this, arguments: [query.jsValue()]).fromJSValue()!
    }

    func beginQuery(target: GLenum, query: WebGLQuery) {
        let this = jsObject
        _ = this[Strings.beginQuery].function!(this: this, arguments: [target.jsValue(), query.jsValue()])
    }

    func endQuery(target: GLenum) {
        let this = jsObject
        _ = this[Strings.endQuery].function!(this: this, arguments: [target.jsValue()])
    }

    func getQuery(target: GLenum, pname: GLenum) -> WebGLQuery? {
        let this = jsObject
        return this[Strings.getQuery].function!(this: this, arguments: [target.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func getQueryParameter(query: WebGLQuery, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getQueryParameter].function!(this: this, arguments: [query.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func createSampler() -> WebGLSampler? {
        let this = jsObject
        return this[Strings.createSampler].function!(this: this, arguments: []).fromJSValue()!
    }

    func deleteSampler(sampler: WebGLSampler?) {
        let this = jsObject
        _ = this[Strings.deleteSampler].function!(this: this, arguments: [sampler.jsValue()])
    }

    func isSampler(sampler: WebGLSampler?) -> GLboolean {
        let this = jsObject
        return this[Strings.isSampler].function!(this: this, arguments: [sampler.jsValue()]).fromJSValue()!
    }

    func bindSampler(unit: GLuint, sampler: WebGLSampler?) {
        let this = jsObject
        _ = this[Strings.bindSampler].function!(this: this, arguments: [unit.jsValue(), sampler.jsValue()])
    }

    func samplerParameteri(sampler: WebGLSampler, pname: GLenum, param: GLint) {
        let this = jsObject
        _ = this[Strings.samplerParameteri].function!(this: this, arguments: [sampler.jsValue(), pname.jsValue(), param.jsValue()])
    }

    func samplerParameterf(sampler: WebGLSampler, pname: GLenum, param: GLfloat) {
        let this = jsObject
        _ = this[Strings.samplerParameterf].function!(this: this, arguments: [sampler.jsValue(), pname.jsValue(), param.jsValue()])
    }

    func getSamplerParameter(sampler: WebGLSampler, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getSamplerParameter].function!(this: this, arguments: [sampler.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func fenceSync(condition: GLenum, flags: GLbitfield) -> WebGLSync? {
        let this = jsObject
        return this[Strings.fenceSync].function!(this: this, arguments: [condition.jsValue(), flags.jsValue()]).fromJSValue()!
    }

    func isSync(sync: WebGLSync?) -> GLboolean {
        let this = jsObject
        return this[Strings.isSync].function!(this: this, arguments: [sync.jsValue()]).fromJSValue()!
    }

    func deleteSync(sync: WebGLSync?) {
        let this = jsObject
        _ = this[Strings.deleteSync].function!(this: this, arguments: [sync.jsValue()])
    }

    func clientWaitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLuint64) -> GLenum {
        let this = jsObject
        return this[Strings.clientWaitSync].function!(this: this, arguments: [sync.jsValue(), flags.jsValue(), timeout.jsValue()]).fromJSValue()!
    }

    func waitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLint64) {
        let this = jsObject
        _ = this[Strings.waitSync].function!(this: this, arguments: [sync.jsValue(), flags.jsValue(), timeout.jsValue()])
    }

    func getSyncParameter(sync: WebGLSync, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getSyncParameter].function!(this: this, arguments: [sync.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func createTransformFeedback() -> WebGLTransformFeedback? {
        let this = jsObject
        return this[Strings.createTransformFeedback].function!(this: this, arguments: []).fromJSValue()!
    }

    func deleteTransformFeedback(tf: WebGLTransformFeedback?) {
        let this = jsObject
        _ = this[Strings.deleteTransformFeedback].function!(this: this, arguments: [tf.jsValue()])
    }

    func isTransformFeedback(tf: WebGLTransformFeedback?) -> GLboolean {
        let this = jsObject
        return this[Strings.isTransformFeedback].function!(this: this, arguments: [tf.jsValue()]).fromJSValue()!
    }

    func bindTransformFeedback(target: GLenum, tf: WebGLTransformFeedback?) {
        let this = jsObject
        _ = this[Strings.bindTransformFeedback].function!(this: this, arguments: [target.jsValue(), tf.jsValue()])
    }

    func beginTransformFeedback(primitiveMode: GLenum) {
        let this = jsObject
        _ = this[Strings.beginTransformFeedback].function!(this: this, arguments: [primitiveMode.jsValue()])
    }

    func endTransformFeedback() {
        let this = jsObject
        _ = this[Strings.endTransformFeedback].function!(this: this, arguments: [])
    }

    func transformFeedbackVaryings(program: WebGLProgram, varyings: [String], bufferMode: GLenum) {
        let this = jsObject
        _ = this[Strings.transformFeedbackVaryings].function!(this: this, arguments: [program.jsValue(), varyings.jsValue(), bufferMode.jsValue()])
    }

    func getTransformFeedbackVarying(program: WebGLProgram, index: GLuint) -> WebGLActiveInfo? {
        let this = jsObject
        return this[Strings.getTransformFeedbackVarying].function!(this: this, arguments: [program.jsValue(), index.jsValue()]).fromJSValue()!
    }

    func pauseTransformFeedback() {
        let this = jsObject
        _ = this[Strings.pauseTransformFeedback].function!(this: this, arguments: [])
    }

    func resumeTransformFeedback() {
        let this = jsObject
        _ = this[Strings.resumeTransformFeedback].function!(this: this, arguments: [])
    }

    func bindBufferBase(target: GLenum, index: GLuint, buffer: WebGLBuffer?) {
        let this = jsObject
        _ = this[Strings.bindBufferBase].function!(this: this, arguments: [target.jsValue(), index.jsValue(), buffer.jsValue()])
    }

    func bindBufferRange(target: GLenum, index: GLuint, buffer: WebGLBuffer?, offset: GLintptr, size: GLsizeiptr) {
        let this = jsObject
        _ = this[Strings.bindBufferRange].function!(this: this, arguments: [target.jsValue(), index.jsValue(), buffer.jsValue(), offset.jsValue(), size.jsValue()])
    }

    func getIndexedParameter(target: GLenum, index: GLuint) -> JSValue {
        let this = jsObject
        return this[Strings.getIndexedParameter].function!(this: this, arguments: [target.jsValue(), index.jsValue()]).fromJSValue()!
    }

    func getUniformIndices(program: WebGLProgram, uniformNames: [String]) -> [GLuint]? {
        let this = jsObject
        return this[Strings.getUniformIndices].function!(this: this, arguments: [program.jsValue(), uniformNames.jsValue()]).fromJSValue()!
    }

    func getActiveUniforms(program: WebGLProgram, uniformIndices: [GLuint], pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getActiveUniforms].function!(this: this, arguments: [program.jsValue(), uniformIndices.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func getUniformBlockIndex(program: WebGLProgram, uniformBlockName: String) -> GLuint {
        let this = jsObject
        return this[Strings.getUniformBlockIndex].function!(this: this, arguments: [program.jsValue(), uniformBlockName.jsValue()]).fromJSValue()!
    }

    func getActiveUniformBlockParameter(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum) -> JSValue {
        let this = jsObject
        return this[Strings.getActiveUniformBlockParameter].function!(this: this, arguments: [program.jsValue(), uniformBlockIndex.jsValue(), pname.jsValue()]).fromJSValue()!
    }

    func getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: GLuint) -> String? {
        let this = jsObject
        return this[Strings.getActiveUniformBlockName].function!(this: this, arguments: [program.jsValue(), uniformBlockIndex.jsValue()]).fromJSValue()!
    }

    func uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {
        let this = jsObject
        _ = this[Strings.uniformBlockBinding].function!(this: this, arguments: [program.jsValue(), uniformBlockIndex.jsValue(), uniformBlockBinding.jsValue()])
    }

    func createVertexArray() -> WebGLVertexArrayObject? {
        let this = jsObject
        return this[Strings.createVertexArray].function!(this: this, arguments: []).fromJSValue()!
    }

    func deleteVertexArray(vertexArray: WebGLVertexArrayObject?) {
        let this = jsObject
        _ = this[Strings.deleteVertexArray].function!(this: this, arguments: [vertexArray.jsValue()])
    }

    func isVertexArray(vertexArray: WebGLVertexArrayObject?) -> GLboolean {
        let this = jsObject
        return this[Strings.isVertexArray].function!(this: this, arguments: [vertexArray.jsValue()]).fromJSValue()!
    }

    func bindVertexArray(array: WebGLVertexArrayObject?) {
        let this = jsObject
        _ = this[Strings.bindVertexArray].function!(this: this, arguments: [array.jsValue()])
    }
}
