// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class MediaRecorder: EventTarget {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.MediaRecorder].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _stream = ReadonlyAttribute(jsObject: jsObject, name: Strings.stream)
        _mimeType = ReadonlyAttribute(jsObject: jsObject, name: Strings.mimeType)
        _state = ReadonlyAttribute(jsObject: jsObject, name: Strings.state)
        _onstart = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onstart)
        _onstop = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onstop)
        _ondataavailable = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.ondataavailable)
        _onpause = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onpause)
        _onresume = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onresume)
        _onerror = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.onerror)
        _videoBitsPerSecond = ReadonlyAttribute(jsObject: jsObject, name: Strings.videoBitsPerSecond)
        _audioBitsPerSecond = ReadonlyAttribute(jsObject: jsObject, name: Strings.audioBitsPerSecond)
        _audioBitrateMode = ReadonlyAttribute(jsObject: jsObject, name: Strings.audioBitrateMode)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(stream: MediaStream, options: MediaRecorderOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor.new(arguments: [stream.jsValue, options?.jsValue ?? .undefined]))
    }

    @ReadonlyAttribute
    public var stream: MediaStream

    @ReadonlyAttribute
    public var mimeType: String

    @ReadonlyAttribute
    public var state: RecordingState

    @ClosureAttribute1Optional
    public var onstart: EventHandler

    @ClosureAttribute1Optional
    public var onstop: EventHandler

    @ClosureAttribute1Optional
    public var ondataavailable: EventHandler

    @ClosureAttribute1Optional
    public var onpause: EventHandler

    @ClosureAttribute1Optional
    public var onresume: EventHandler

    @ClosureAttribute1Optional
    public var onerror: EventHandler

    @ReadonlyAttribute
    public var videoBitsPerSecond: UInt32

    @ReadonlyAttribute
    public var audioBitsPerSecond: UInt32

    @ReadonlyAttribute
    public var audioBitrateMode: BitrateMode

    @inlinable public func start(timeslice: UInt32? = nil) {
        let this = jsObject
        _ = this[Strings.start].function!(this: this, arguments: [timeslice?.jsValue ?? .undefined])
    }

    @inlinable public func stop() {
        let this = jsObject
        _ = this[Strings.stop].function!(this: this, arguments: [])
    }

    @inlinable public func pause() {
        let this = jsObject
        _ = this[Strings.pause].function!(this: this, arguments: [])
    }

    @inlinable public func resume() {
        let this = jsObject
        _ = this[Strings.resume].function!(this: this, arguments: [])
    }

    @inlinable public func requestData() {
        let this = jsObject
        _ = this[Strings.requestData].function!(this: this, arguments: [])
    }

    @inlinable public static func isTypeSupported(type: String) -> Bool {
        let this = constructor
        return this[Strings.isTypeSupported].function!(this: this, arguments: [type.jsValue]).fromJSValue()!
    }
}
