// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class XRFrame: JSBridgedClass {
    @inlinable public class var constructor: JSFunction { JSObject.global[Strings.XRFrame].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _trackedAnchors = ReadonlyAttribute(jsObject: jsObject, name: Strings.trackedAnchors)
        _session = ReadonlyAttribute(jsObject: jsObject, name: Strings.session)
        _predictedDisplayTime = ReadonlyAttribute(jsObject: jsObject, name: Strings.predictedDisplayTime)
        self.jsObject = jsObject
    }

    @inlinable public func createAnchor(pose: XRRigidTransform, space: XRSpace) -> JSPromise {
        let this = jsObject
        return this[Strings.createAnchor].function!(this: this, arguments: [pose.jsValue(), space.jsValue()]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func createAnchor(pose: XRRigidTransform, space: XRSpace) async throws -> XRAnchor {
        let this = jsObject
        let _promise: JSPromise = this[Strings.createAnchor].function!(this: this, arguments: [pose.jsValue(), space.jsValue()]).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    @ReadonlyAttribute
    public var trackedAnchors: XRAnchorSet

    @inlinable public func getDepthInformation(view: XRView) -> XRCPUDepthInformation? {
        let this = jsObject
        return this[Strings.getDepthInformation].function!(this: this, arguments: [view.jsValue()]).fromJSValue()!
    }

    @inlinable public func getJointPose(joint: XRJointSpace, baseSpace: XRSpace) -> XRJointPose? {
        let this = jsObject
        return this[Strings.getJointPose].function!(this: this, arguments: [joint.jsValue(), baseSpace.jsValue()]).fromJSValue()!
    }

    @inlinable public func fillJointRadii(jointSpaces: [XRJointSpace], radii: Float32Array) -> Bool {
        let this = jsObject
        return this[Strings.fillJointRadii].function!(this: this, arguments: [jointSpaces.jsValue(), radii.jsValue()]).fromJSValue()!
    }

    @inlinable public func fillPoses(spaces: [XRSpace], baseSpace: XRSpace, transforms: Float32Array) -> Bool {
        let this = jsObject
        return this[Strings.fillPoses].function!(this: this, arguments: [spaces.jsValue(), baseSpace.jsValue(), transforms.jsValue()]).fromJSValue()!
    }

    @inlinable public func getHitTestResults(hitTestSource: XRHitTestSource) -> [XRHitTestResult] {
        let this = jsObject
        return this[Strings.getHitTestResults].function!(this: this, arguments: [hitTestSource.jsValue()]).fromJSValue()!
    }

    @inlinable public func getHitTestResultsForTransientInput(hitTestSource: XRTransientInputHitTestSource) -> [XRTransientInputHitTestResult] {
        let this = jsObject
        return this[Strings.getHitTestResultsForTransientInput].function!(this: this, arguments: [hitTestSource.jsValue()]).fromJSValue()!
    }

    @inlinable public func getLightEstimate(lightProbe: XRLightProbe) -> XRLightEstimate? {
        let this = jsObject
        return this[Strings.getLightEstimate].function!(this: this, arguments: [lightProbe.jsValue()]).fromJSValue()!
    }

    @ReadonlyAttribute
    public var session: XRSession

    @ReadonlyAttribute
    public var predictedDisplayTime: DOMHighResTimeStamp

    @inlinable public func getViewerPose(referenceSpace: XRReferenceSpace) -> XRViewerPose? {
        let this = jsObject
        return this[Strings.getViewerPose].function!(this: this, arguments: [referenceSpace.jsValue()]).fromJSValue()!
    }

    @inlinable public func getPose(space: XRSpace, baseSpace: XRSpace) -> XRPose? {
        let this = jsObject
        return this[Strings.getPose].function!(this: this, arguments: [space.jsValue(), baseSpace.jsValue()]).fromJSValue()!
    }
}
