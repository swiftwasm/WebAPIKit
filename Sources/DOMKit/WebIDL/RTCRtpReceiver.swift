// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class RTCRtpReceiver: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global[Strings.RTCRtpReceiver].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _transform = ReadWriteAttribute(jsObject: jsObject, name: Strings.transform)
        _track = ReadonlyAttribute(jsObject: jsObject, name: Strings.track)
        _transport = ReadonlyAttribute(jsObject: jsObject, name: Strings.transport)
        self.jsObject = jsObject
    }

    @ReadWriteAttribute
    public var transform: RTCRtpTransform?

    @ReadonlyAttribute
    public var track: MediaStreamTrack

    @ReadonlyAttribute
    public var transport: RTCDtlsTransport?

    public static func getCapabilities(kind: String) -> RTCRtpCapabilities? {
        constructor[Strings.getCapabilities]!(kind.jsValue()).fromJSValue()!
    }

    public func getParameters() -> RTCRtpReceiveParameters {
        jsObject[Strings.getParameters]!().fromJSValue()!
    }

    public func getContributingSources() -> [RTCRtpContributingSource] {
        jsObject[Strings.getContributingSources]!().fromJSValue()!
    }

    public func getSynchronizationSources() -> [RTCRtpSynchronizationSource] {
        jsObject[Strings.getSynchronizationSources]!().fromJSValue()!
    }

    public func getStats() -> JSPromise {
        jsObject[Strings.getStats]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func getStats() async throws -> RTCStatsReport {
        let _promise: JSPromise = jsObject[Strings.getStats]!().fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }
}
