// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class OffscreenCanvas: EventTarget {
    @inlinable override public class var constructor: JSFunction { JSObject.global[Strings.OffscreenCanvas].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        _oncontextlost = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.oncontextlost)
        _oncontextrestored = ClosureAttribute1Optional(jsObject: jsObject, name: Strings.oncontextrestored)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(width: UInt64, height: UInt64) {
        self.init(unsafelyWrapping: Self.constructor.new(arguments: [width.jsValue, height.jsValue]))
    }

    @ReadWriteAttribute
    public var width: UInt64

    @ReadWriteAttribute
    public var height: UInt64

    @inlinable public func getContext(contextId: OffscreenRenderingContextId, options: JSValue? = nil) -> OffscreenRenderingContext? {
        let this = jsObject
        return this[Strings.getContext].function!(this: this, arguments: [contextId.jsValue, options?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func transferToImageBitmap() -> ImageBitmap {
        let this = jsObject
        return this[Strings.transferToImageBitmap].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func convertToBlob(options: ImageEncodeOptions? = nil) -> JSPromise {
        let this = jsObject
        return this[Strings.convertToBlob].function!(this: this, arguments: [options?.jsValue ?? .undefined]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func convertToBlob(options: ImageEncodeOptions? = nil) async throws -> Blob {
        let this = jsObject
        let _promise: JSPromise = this[Strings.convertToBlob].function!(this: this, arguments: [options?.jsValue ?? .undefined]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }

    @ClosureAttribute1Optional
    public var oncontextlost: EventHandler

    @ClosureAttribute1Optional
    public var oncontextrestored: EventHandler
}
