// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class OffscreenCanvas: EventTarget {
    override public class var constructor: JSFunction { JSObject.global[Strings.OffscreenCanvas].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _width = ReadWriteAttribute(jsObject: jsObject, name: Strings.width)
        _height = ReadWriteAttribute(jsObject: jsObject, name: Strings.height)
        _oncontextlost = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.oncontextlost)
        _oncontextrestored = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.oncontextrestored)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init(width: UInt64, height: UInt64) {
        self.init(unsafelyWrapping: Self.constructor.new(width.jsValue(), height.jsValue()))
    }

    @ReadWriteAttribute
    public var width: UInt64

    @ReadWriteAttribute
    public var height: UInt64

    public func getContext(contextId: OffscreenRenderingContextId, options: JSValue? = nil) -> OffscreenRenderingContext? {
        jsObject[Strings.getContext]!(contextId.jsValue(), options?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func transferToImageBitmap() -> ImageBitmap {
        jsObject[Strings.transferToImageBitmap]!().fromJSValue()!
    }

    public func convertToBlob(options: ImageEncodeOptions? = nil) -> JSPromise {
        jsObject[Strings.convertToBlob]!(options?.jsValue() ?? .undefined).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func convertToBlob(options: ImageEncodeOptions? = nil) async throws -> Blob {
        let _promise: JSPromise = jsObject[Strings.convertToBlob]!(options?.jsValue() ?? .undefined).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    @ClosureAttribute.Optional1
    public var oncontextlost: EventHandler

    @ClosureAttribute.Optional1
    public var oncontextrestored: EventHandler
}
