// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class PushManager: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global[Strings.PushManager].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _supportedContentEncodings = ReadonlyAttribute(jsObject: jsObject, name: Strings.supportedContentEncodings)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var supportedContentEncodings: [String]

    public func subscribe(options: PushSubscriptionOptionsInit? = nil) -> JSPromise {
        jsObject[Strings.subscribe]!(options?.jsValue() ?? .undefined).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func subscribe(options: PushSubscriptionOptionsInit? = nil) async throws -> PushSubscription {
        let _promise: JSPromise = jsObject[Strings.subscribe]!(options?.jsValue() ?? .undefined).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func getSubscription() -> JSPromise {
        jsObject[Strings.getSubscription]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func getSubscription() async throws -> PushSubscription? {
        let _promise: JSPromise = jsObject[Strings.getSubscription]!().fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func permissionState(options: PushSubscriptionOptionsInit? = nil) -> JSPromise {
        jsObject[Strings.permissionState]!(options?.jsValue() ?? .undefined).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func permissionState(options: PushSubscriptionOptionsInit? = nil) async throws -> PermissionState {
        let _promise: JSPromise = jsObject[Strings.permissionState]!(options?.jsValue() ?? .undefined).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }
}
