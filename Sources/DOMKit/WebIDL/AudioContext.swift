// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class AudioContext: BaseAudioContext {
    override public class var constructor: JSFunction { JSObject.global[Strings.AudioContext].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _baseLatency = ReadonlyAttribute(jsObject: jsObject, name: Strings.baseLatency)
        _outputLatency = ReadonlyAttribute(jsObject: jsObject, name: Strings.outputLatency)
        super.init(unsafelyWrapping: jsObject)
    }

    public convenience init(contextOptions: AudioContextOptions? = nil) {
        self.init(unsafelyWrapping: Self.constructor.new(contextOptions?.jsValue() ?? .undefined))
    }

    @ReadonlyAttribute
    public var baseLatency: Double

    @ReadonlyAttribute
    public var outputLatency: Double

    public func getOutputTimestamp() -> AudioTimestamp {
        jsObject[Strings.getOutputTimestamp]!().fromJSValue()!
    }

    public func resume() -> JSPromise {
        jsObject[Strings.resume]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func resume() async throws {
        let _promise: JSPromise = jsObject[Strings.resume]!().fromJSValue()!
        _ = try await _promise.get()
    }

    public func suspend() -> JSPromise {
        jsObject[Strings.suspend]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func suspend() async throws {
        let _promise: JSPromise = jsObject[Strings.suspend]!().fromJSValue()!
        _ = try await _promise.get()
    }

    public func close() -> JSPromise {
        jsObject[Strings.close]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func close() async throws {
        let _promise: JSPromise = jsObject[Strings.close]!().fromJSValue()!
        _ = try await _promise.get()
    }

    public func createMediaElementSource(mediaElement: HTMLMediaElement) -> MediaElementAudioSourceNode {
        jsObject[Strings.createMediaElementSource]!(mediaElement.jsValue()).fromJSValue()!
    }

    public func createMediaStreamSource(mediaStream: MediaStream) -> MediaStreamAudioSourceNode {
        jsObject[Strings.createMediaStreamSource]!(mediaStream.jsValue()).fromJSValue()!
    }

    public func createMediaStreamTrackSource(mediaStreamTrack: MediaStreamTrack) -> MediaStreamTrackAudioSourceNode {
        jsObject[Strings.createMediaStreamTrackSource]!(mediaStreamTrack.jsValue()).fromJSValue()!
    }

    public func createMediaStreamDestination() -> MediaStreamAudioDestinationNode {
        jsObject[Strings.createMediaStreamDestination]!().fromJSValue()!
    }
}
