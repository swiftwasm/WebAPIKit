// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class GPUDevice: EventTarget, GPUObjectBase {
    override public class var constructor: JSFunction { JSObject.global[Strings.GPUDevice].function! }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _features = ReadonlyAttribute(jsObject: jsObject, name: Strings.features)
        _limits = ReadonlyAttribute(jsObject: jsObject, name: Strings.limits)
        _queue = ReadonlyAttribute(jsObject: jsObject, name: Strings.queue)
        _lost = ReadonlyAttribute(jsObject: jsObject, name: Strings.lost)
        _onuncapturederror = ClosureAttribute.Optional1(jsObject: jsObject, name: Strings.onuncapturederror)
        super.init(unsafelyWrapping: jsObject)
    }

    @ReadonlyAttribute
    public var features: GPUSupportedFeatures

    @ReadonlyAttribute
    public var limits: GPUSupportedLimits

    @ReadonlyAttribute
    public var queue: GPUQueue

    public func destroy() {
        _ = jsObject[Strings.destroy]!()
    }

    public func createBuffer(descriptor: GPUBufferDescriptor) -> GPUBuffer {
        jsObject[Strings.createBuffer]!(descriptor.jsValue()).fromJSValue()!
    }

    public func createTexture(descriptor: GPUTextureDescriptor) -> GPUTexture {
        jsObject[Strings.createTexture]!(descriptor.jsValue()).fromJSValue()!
    }

    public func createSampler(descriptor: GPUSamplerDescriptor? = nil) -> GPUSampler {
        jsObject[Strings.createSampler]!(descriptor?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func importExternalTexture(descriptor: GPUExternalTextureDescriptor) -> GPUExternalTexture {
        jsObject[Strings.importExternalTexture]!(descriptor.jsValue()).fromJSValue()!
    }

    public func createBindGroupLayout(descriptor: GPUBindGroupLayoutDescriptor) -> GPUBindGroupLayout {
        jsObject[Strings.createBindGroupLayout]!(descriptor.jsValue()).fromJSValue()!
    }

    public func createPipelineLayout(descriptor: GPUPipelineLayoutDescriptor) -> GPUPipelineLayout {
        jsObject[Strings.createPipelineLayout]!(descriptor.jsValue()).fromJSValue()!
    }

    public func createBindGroup(descriptor: GPUBindGroupDescriptor) -> GPUBindGroup {
        jsObject[Strings.createBindGroup]!(descriptor.jsValue()).fromJSValue()!
    }

    public func createShaderModule(descriptor: GPUShaderModuleDescriptor) -> GPUShaderModule {
        jsObject[Strings.createShaderModule]!(descriptor.jsValue()).fromJSValue()!
    }

    public func createComputePipeline(descriptor: GPUComputePipelineDescriptor) -> GPUComputePipeline {
        jsObject[Strings.createComputePipeline]!(descriptor.jsValue()).fromJSValue()!
    }

    public func createRenderPipeline(descriptor: GPURenderPipelineDescriptor) -> GPURenderPipeline {
        jsObject[Strings.createRenderPipeline]!(descriptor.jsValue()).fromJSValue()!
    }

    public func createComputePipelineAsync(descriptor: GPUComputePipelineDescriptor) -> JSPromise {
        jsObject[Strings.createComputePipelineAsync]!(descriptor.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func createComputePipelineAsync(descriptor: GPUComputePipelineDescriptor) async throws -> GPUComputePipeline {
        let _promise: JSPromise = jsObject[Strings.createComputePipelineAsync]!(descriptor.jsValue()).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func createRenderPipelineAsync(descriptor: GPURenderPipelineDescriptor) -> JSPromise {
        jsObject[Strings.createRenderPipelineAsync]!(descriptor.jsValue()).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func createRenderPipelineAsync(descriptor: GPURenderPipelineDescriptor) async throws -> GPURenderPipeline {
        let _promise: JSPromise = jsObject[Strings.createRenderPipelineAsync]!(descriptor.jsValue()).fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    public func createCommandEncoder(descriptor: GPUCommandEncoderDescriptor? = nil) -> GPUCommandEncoder {
        jsObject[Strings.createCommandEncoder]!(descriptor?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func createRenderBundleEncoder(descriptor: GPURenderBundleEncoderDescriptor) -> GPURenderBundleEncoder {
        jsObject[Strings.createRenderBundleEncoder]!(descriptor.jsValue()).fromJSValue()!
    }

    public func createQuerySet(descriptor: GPUQuerySetDescriptor) -> GPUQuerySet {
        jsObject[Strings.createQuerySet]!(descriptor.jsValue()).fromJSValue()!
    }

    @ReadonlyAttribute
    public var lost: JSPromise

    public func pushErrorScope(filter: GPUErrorFilter) {
        _ = jsObject[Strings.pushErrorScope]!(filter.jsValue())
    }

    public func popErrorScope() -> JSPromise {
        jsObject[Strings.popErrorScope]!().fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func popErrorScope() async throws -> GPUError? {
        let _promise: JSPromise = jsObject[Strings.popErrorScope]!().fromJSValue()!
        return try await _promise.get().fromJSValue()!
    }

    @ClosureAttribute.Optional1
    public var onuncapturederror: EventHandler
}
