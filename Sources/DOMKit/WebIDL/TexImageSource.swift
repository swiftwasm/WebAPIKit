// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public protocol Any_TexImageSource: ConvertibleToJSValue {}
extension HTMLCanvasElement: Any_TexImageSource {}
extension HTMLImageElement: Any_TexImageSource {}
extension HTMLVideoElement: Any_TexImageSource {}
extension ImageBitmap: Any_TexImageSource {}
extension ImageData: Any_TexImageSource {}
extension OffscreenCanvas: Any_TexImageSource {}
extension VideoFrame: Any_TexImageSource {}

public enum TexImageSource: JSValueCompatible, Any_TexImageSource {
    case hTMLCanvasElement(HTMLCanvasElement)
    case hTMLImageElement(HTMLImageElement)
    case hTMLVideoElement(HTMLVideoElement)
    case imageBitmap(ImageBitmap)
    case imageData(ImageData)
    case offscreenCanvas(OffscreenCanvas)
    case videoFrame(VideoFrame)

    public static func construct(from value: JSValue) -> Self? {
        if let hTMLCanvasElement: HTMLCanvasElement = value.fromJSValue() {
            return .hTMLCanvasElement(hTMLCanvasElement)
        }
        if let hTMLImageElement: HTMLImageElement = value.fromJSValue() {
            return .hTMLImageElement(hTMLImageElement)
        }
        if let hTMLVideoElement: HTMLVideoElement = value.fromJSValue() {
            return .hTMLVideoElement(hTMLVideoElement)
        }
        if let imageBitmap: ImageBitmap = value.fromJSValue() {
            return .imageBitmap(imageBitmap)
        }
        if let imageData: ImageData = value.fromJSValue() {
            return .imageData(imageData)
        }
        if let offscreenCanvas: OffscreenCanvas = value.fromJSValue() {
            return .offscreenCanvas(offscreenCanvas)
        }
        if let videoFrame: VideoFrame = value.fromJSValue() {
            return .videoFrame(videoFrame)
        }
        return nil
    }

    public var jsValue: JSValue {
        switch self {
        case let .hTMLCanvasElement(hTMLCanvasElement):
            return hTMLCanvasElement.jsValue
        case let .hTMLImageElement(hTMLImageElement):
            return hTMLImageElement.jsValue
        case let .hTMLVideoElement(hTMLVideoElement):
            return hTMLVideoElement.jsValue
        case let .imageBitmap(imageBitmap):
            return imageBitmap.jsValue
        case let .imageData(imageData):
            return imageData.jsValue
        case let .offscreenCanvas(offscreenCanvas):
            return offscreenCanvas.jsValue
        case let .videoFrame(videoFrame):
            return videoFrame.jsValue
        }
    }
}
