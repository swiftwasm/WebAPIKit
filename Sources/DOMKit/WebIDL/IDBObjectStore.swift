// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class IDBObjectStore: JSBridgedClass {
    @inlinable public class var constructor: JSFunction { JSObject.global[Strings.IDBObjectStore].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _keyPath = ReadonlyAttribute(jsObject: jsObject, name: Strings.keyPath)
        _indexNames = ReadonlyAttribute(jsObject: jsObject, name: Strings.indexNames)
        _transaction = ReadonlyAttribute(jsObject: jsObject, name: Strings.transaction)
        _autoIncrement = ReadonlyAttribute(jsObject: jsObject, name: Strings.autoIncrement)
        self.jsObject = jsObject
    }

    @ReadWriteAttribute
    public var name: String

    @ReadonlyAttribute
    public var keyPath: JSValue

    @ReadonlyAttribute
    public var indexNames: DOMStringList

    @ReadonlyAttribute
    public var transaction: IDBTransaction

    @ReadonlyAttribute
    public var autoIncrement: Bool

    @inlinable public func put(value: JSValue, key: JSValue? = nil) -> IDBRequest {
        let this = jsObject
        return this[Strings.put].function!(this: this, arguments: [value.jsValue, key?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func add(value: JSValue, key: JSValue? = nil) -> IDBRequest {
        let this = jsObject
        return this[Strings.add].function!(this: this, arguments: [value.jsValue, key?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func delete(query: JSValue) -> IDBRequest {
        let this = jsObject
        return this[Strings.delete].function!(this: this, arguments: [query.jsValue]).fromJSValue()!
    }

    @inlinable public func clear() -> IDBRequest {
        let this = jsObject
        return this[Strings.clear].function!(this: this, arguments: []).fromJSValue()!
    }

    @inlinable public func get(query: JSValue) -> IDBRequest {
        let this = jsObject
        return this[Strings.get].function!(this: this, arguments: [query.jsValue]).fromJSValue()!
    }

    @inlinable public func getKey(query: JSValue) -> IDBRequest {
        let this = jsObject
        return this[Strings.getKey].function!(this: this, arguments: [query.jsValue]).fromJSValue()!
    }

    @inlinable public func getAll(query: JSValue? = nil, count: UInt32? = nil) -> IDBRequest {
        let this = jsObject
        return this[Strings.getAll].function!(this: this, arguments: [query?.jsValue ?? .undefined, count?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func getAllKeys(query: JSValue? = nil, count: UInt32? = nil) -> IDBRequest {
        let this = jsObject
        return this[Strings.getAllKeys].function!(this: this, arguments: [query?.jsValue ?? .undefined, count?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func count(query: JSValue? = nil) -> IDBRequest {
        let this = jsObject
        return this[Strings.count].function!(this: this, arguments: [query?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func openCursor(query: JSValue? = nil, direction: IDBCursorDirection? = nil) -> IDBRequest {
        let this = jsObject
        return this[Strings.openCursor].function!(this: this, arguments: [query?.jsValue ?? .undefined, direction?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func openKeyCursor(query: JSValue? = nil, direction: IDBCursorDirection? = nil) -> IDBRequest {
        let this = jsObject
        return this[Strings.openKeyCursor].function!(this: this, arguments: [query?.jsValue ?? .undefined, direction?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func index(name: String) -> IDBIndex {
        let this = jsObject
        return this[Strings.index].function!(this: this, arguments: [name.jsValue]).fromJSValue()!
    }

    @inlinable public func createIndex(name: String, keyPath: String_or_seq_of_String, options: IDBIndexParameters? = nil) -> IDBIndex {
        let this = jsObject
        return this[Strings.createIndex].function!(this: this, arguments: [name.jsValue, keyPath.jsValue, options?.jsValue ?? .undefined]).fromJSValue()!
    }

    @inlinable public func deleteIndex(name: String) {
        let this = jsObject
        _ = this[Strings.deleteIndex].function!(this: this, arguments: [name.jsValue])
    }
}
