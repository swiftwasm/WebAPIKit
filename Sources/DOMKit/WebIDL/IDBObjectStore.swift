// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public class IDBObjectStore: JSBridgedClass {
    public class var constructor: JSFunction { JSObject.global[Strings.IDBObjectStore].function! }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _name = ReadWriteAttribute(jsObject: jsObject, name: Strings.name)
        _keyPath = ReadonlyAttribute(jsObject: jsObject, name: Strings.keyPath)
        _indexNames = ReadonlyAttribute(jsObject: jsObject, name: Strings.indexNames)
        _transaction = ReadonlyAttribute(jsObject: jsObject, name: Strings.transaction)
        _autoIncrement = ReadonlyAttribute(jsObject: jsObject, name: Strings.autoIncrement)
        self.jsObject = jsObject
    }

    @ReadWriteAttribute
    public var name: String

    @ReadonlyAttribute
    public var keyPath: JSValue

    @ReadonlyAttribute
    public var indexNames: DOMStringList

    @ReadonlyAttribute
    public var transaction: IDBTransaction

    @ReadonlyAttribute
    public var autoIncrement: Bool

    public func put(value: JSValue, key: JSValue? = nil) -> IDBRequest {
        jsObject[Strings.put]!(value.jsValue(), key?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func add(value: JSValue, key: JSValue? = nil) -> IDBRequest {
        jsObject[Strings.add]!(value.jsValue(), key?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func delete(query: JSValue) -> IDBRequest {
        jsObject[Strings.delete]!(query.jsValue()).fromJSValue()!
    }

    public func clear() -> IDBRequest {
        jsObject[Strings.clear]!().fromJSValue()!
    }

    public func get(query: JSValue) -> IDBRequest {
        jsObject[Strings.get]!(query.jsValue()).fromJSValue()!
    }

    public func getKey(query: JSValue) -> IDBRequest {
        jsObject[Strings.getKey]!(query.jsValue()).fromJSValue()!
    }

    public func getAll(query: JSValue? = nil, count: UInt32? = nil) -> IDBRequest {
        jsObject[Strings.getAll]!(query?.jsValue() ?? .undefined, count?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func getAllKeys(query: JSValue? = nil, count: UInt32? = nil) -> IDBRequest {
        jsObject[Strings.getAllKeys]!(query?.jsValue() ?? .undefined, count?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func count(query: JSValue? = nil) -> IDBRequest {
        jsObject[Strings.count]!(query?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func openCursor(query: JSValue? = nil, direction: IDBCursorDirection? = nil) -> IDBRequest {
        jsObject[Strings.openCursor]!(query?.jsValue() ?? .undefined, direction?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func openKeyCursor(query: JSValue? = nil, direction: IDBCursorDirection? = nil) -> IDBRequest {
        jsObject[Strings.openKeyCursor]!(query?.jsValue() ?? .undefined, direction?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func index(name: String) -> IDBIndex {
        jsObject[Strings.index]!(name.jsValue()).fromJSValue()!
    }

    public func createIndex(name: String, keyPath: __UNSUPPORTED_UNION__, options: IDBIndexParameters? = nil) -> IDBIndex {
        jsObject[Strings.createIndex]!(name.jsValue(), keyPath.jsValue(), options?.jsValue() ?? .undefined).fromJSValue()!
    }

    public func deleteIndex(name: String) {
        _ = jsObject[Strings.deleteIndex]!(name.jsValue())
    }
}
