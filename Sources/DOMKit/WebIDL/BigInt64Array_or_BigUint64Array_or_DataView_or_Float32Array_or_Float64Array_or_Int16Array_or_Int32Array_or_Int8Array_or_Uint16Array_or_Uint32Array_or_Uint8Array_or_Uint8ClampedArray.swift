// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import JavaScriptEventLoop
import JavaScriptKit

public protocol Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray: ConvertibleToJSValue {}
extension BigInt64Array: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}
extension BigUint64Array: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}
extension DataView: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}
extension Float32Array: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}
extension Float64Array: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}
extension Int16Array: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}
extension Int32Array: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}
extension Int8Array: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}
extension Uint16Array: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}
extension Uint32Array: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}
extension Uint8Array: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}
extension Uint8ClampedArray: Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {}

public enum BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray: JSValueCompatible, Any_BigInt64Array_or_BigUint64Array_or_DataView_or_Float32Array_or_Float64Array_or_Int16Array_or_Int32Array_or_Int8Array_or_Uint16Array_or_Uint32Array_or_Uint8Array_or_Uint8ClampedArray {
    case bigInt64Array(BigInt64Array)
    case bigUint64Array(BigUint64Array)
    case dataView(DataView)
    case float32Array(Float32Array)
    case float64Array(Float64Array)
    case int16Array(Int16Array)
    case int32Array(Int32Array)
    case int8Array(Int8Array)
    case uint16Array(Uint16Array)
    case uint32Array(Uint32Array)
    case uint8Array(Uint8Array)
    case uint8ClampedArray(Uint8ClampedArray)

    public static func construct(from value: JSValue) -> Self? {
        if let bigInt64Array: BigInt64Array = value.fromJSValue() {
            return .bigInt64Array(bigInt64Array)
        }
        if let bigUint64Array: BigUint64Array = value.fromJSValue() {
            return .bigUint64Array(bigUint64Array)
        }
        if let dataView: DataView = value.fromJSValue() {
            return .dataView(dataView)
        }
        if let float32Array: Float32Array = value.fromJSValue() {
            return .float32Array(float32Array)
        }
        if let float64Array: Float64Array = value.fromJSValue() {
            return .float64Array(float64Array)
        }
        if let int16Array: Int16Array = value.fromJSValue() {
            return .int16Array(int16Array)
        }
        if let int32Array: Int32Array = value.fromJSValue() {
            return .int32Array(int32Array)
        }
        if let int8Array: Int8Array = value.fromJSValue() {
            return .int8Array(int8Array)
        }
        if let uint16Array: Uint16Array = value.fromJSValue() {
            return .uint16Array(uint16Array)
        }
        if let uint32Array: Uint32Array = value.fromJSValue() {
            return .uint32Array(uint32Array)
        }
        if let uint8Array: Uint8Array = value.fromJSValue() {
            return .uint8Array(uint8Array)
        }
        if let uint8ClampedArray: Uint8ClampedArray = value.fromJSValue() {
            return .uint8ClampedArray(uint8ClampedArray)
        }
        return nil
    }

    public func jsValue() -> JSValue {
        switch self {
        case let .bigInt64Array(bigInt64Array):
            return bigInt64Array.jsValue()
        case let .bigUint64Array(bigUint64Array):
            return bigUint64Array.jsValue()
        case let .dataView(dataView):
            return dataView.jsValue()
        case let .float32Array(float32Array):
            return float32Array.jsValue()
        case let .float64Array(float64Array):
            return float64Array.jsValue()
        case let .int16Array(int16Array):
            return int16Array.jsValue()
        case let .int32Array(int32Array):
            return int32Array.jsValue()
        case let .int8Array(int8Array):
            return int8Array.jsValue()
        case let .uint16Array(uint16Array):
            return uint16Array.jsValue()
        case let .uint32Array(uint32Array):
            return uint32Array.jsValue()
        case let .uint8Array(uint8Array):
            return uint8Array.jsValue()
        case let .uint8ClampedArray(uint8ClampedArray):
            return uint8ClampedArray.jsValue()
        }
    }
}
